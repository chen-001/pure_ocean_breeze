{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"\ud83c\udf88 pure _ ocean _ breeze \u7684 \u8bf4\u660e \u6587\u6863 \ud83c\udf1f   \u00b6   \u5b89\u88c5 & \u5347\u7ea7   \u00b6   \u5b89\u88c5 \uff1a \u4f7f\u7528   pip   install   pure _ ocean _ breeze   \u547d\u4ee4 \u5b89\u88c5   \u5347\u7ea7 \uff1a \u4f7f\u7528   pip   install   pure _ ocean _ breeze   -- upgrade   \u547d\u4ee4 \u5347\u7ea7   \u7b80\u4ecb   \u00b6   pure _ ocean _ breeze \u662f \u4e00\u4e2a \u5173\u4e8e \u91cf\u5316 \u6295\u8d44 \uff0c \u56e0\u5b50 \u7814\u7a76 \u7684 python \u5e93   \u5305\u62ec \u53c2\u6570 \u8bbe\u7f6e \u53c2\u6570\u8bbe\u7f6e \u3001 \u6570\u636e \u83b7\u53d6 \u3001 \u6570\u636e \u66f4\u65b0 \u4e0e \u5b58\u50a8 \u3001 \u56e0\u5b50 \u6784\u9020 \u3001 \u56e0\u5b50 \u52a0\u5de5 \u3001 \u56e0\u5b50 \u6d4b\u8bd5 \u3001 \u7ee9\u6548 \u8bc4\u4ef7 \u7ee9\u6548\u8bc4\u4ef7 \u7b49 \u8bf8\u591a \u6a21\u5757   \u5168\u65b0 \u5927 \u7248\u672c \ud83d\udce2   \u00b6   v3.0 . 0   \u2014   2022.08 . 16   \u56de\u6d4b \u6846\u67b6 3.0 \u7248\u672c \u6765 \u5566 \uff01   \u6a21\u5757 \u62c6\u5206 & \u8bf4\u660e \u6587\u6863 \u6765 \u5566 \uff01   v2.0 . 0   \u2014   2022.07 . 12   \u56de\u6d4b \u6846\u67b6 2.0 \u7248\u672c \u6765 \u5566 \uff01 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 & \u81ea\u52a8 \u66f4\u65b0 \u81ea\u52a8\u66f4\u65b0 & \u6700\u7ec8 \u56e0\u5b50 \u5e93 \u529f\u80fd \u4e0a\u7ebf \u5566 \uff01   \u76f8\u5173 \u94fe\u63a5 \ud83d\udd17   \u00b6   PyPi \u5e93 \u4e3b\u9875   Github \u9879\u76ee \u4e3b\u9875   Github \u540c\u6b65 \u5230 Pypi \u64cd\u4f5c \u624b\u518c \u64cd\u4f5c\u624b \u64cd\u4f5c\u624b\u518c   \u66f4\u65b0 \u65e5\u5fd7","title":"\u661f\u7a7a"},{"location":"#pure_ocean_breeze","text":"","title":"\ud83c\udf88 pure _ ocean _ breeze \u7684 \u8bf4\u660e \u6587\u6863 \ud83c\udf1f"},{"location":"#_1","text":"\u5b89\u88c5 \uff1a \u4f7f\u7528   pip   install   pure _ ocean _ breeze   \u547d\u4ee4 \u5b89\u88c5   \u5347\u7ea7 \uff1a \u4f7f\u7528   pip   install   pure _ ocean _ breeze   -- upgrade   \u547d\u4ee4 \u5347\u7ea7","title":"\u5b89\u88c5 & amp ; \u5347\u7ea7"},{"location":"#_2","text":"pure _ ocean _ breeze \u662f \u4e00\u4e2a \u5173\u4e8e \u91cf\u5316 \u6295\u8d44 \uff0c \u56e0\u5b50 \u7814\u7a76 \u7684 python \u5e93   \u5305\u62ec \u53c2\u6570 \u8bbe\u7f6e \u53c2\u6570\u8bbe\u7f6e \u3001 \u6570\u636e \u83b7\u53d6 \u3001 \u6570\u636e \u66f4\u65b0 \u4e0e \u5b58\u50a8 \u3001 \u56e0\u5b50 \u6784\u9020 \u3001 \u56e0\u5b50 \u52a0\u5de5 \u3001 \u56e0\u5b50 \u6d4b\u8bd5 \u3001 \u7ee9\u6548 \u8bc4\u4ef7 \u7ee9\u6548\u8bc4\u4ef7 \u7b49 \u8bf8\u591a \u6a21\u5757","title":"\u7b80\u4ecb"},{"location":"#_3","text":"v3.0 . 0   \u2014   2022.08 . 16   \u56de\u6d4b \u6846\u67b6 3.0 \u7248\u672c \u6765 \u5566 \uff01   \u6a21\u5757 \u62c6\u5206 & \u8bf4\u660e \u6587\u6863 \u6765 \u5566 \uff01   v2.0 . 0   \u2014   2022.07 . 12   \u56de\u6d4b \u6846\u67b6 2.0 \u7248\u672c \u6765 \u5566 \uff01 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 & \u81ea\u52a8 \u66f4\u65b0 \u81ea\u52a8\u66f4\u65b0 & \u6700\u7ec8 \u56e0\u5b50 \u5e93 \u529f\u80fd \u4e0a\u7ebf \u5566 \uff01","title":"\u5168\u65b0 \u5927 \u7248\u672c \ud83d\udce2"},{"location":"#_4","text":"PyPi \u5e93 \u4e3b\u9875   Github \u9879\u76ee \u4e3b\u9875   Github \u540c\u6b65 \u5230 Pypi \u64cd\u4f5c \u624b\u518c \u64cd\u4f5c\u624b \u64cd\u4f5c\u624b\u518c   \u66f4\u65b0 \u65e5\u5fd7","title":"\u76f8\u5173 \u94fe\u63a5 \ud83d\udd17"},{"location":"%E7%81%AB%E6%8A%8A/author/","text":"\ud83c\udf19 \u4f5c\u8005 \u6b63\u5728 \u52a0\u97ad \u5feb\u9a6c\u52a0\u97ad \u8d76\u5de5 \u4e2d \u2026 \u2026   \u5373\u5c06 \u4e0a\u7ebf \uff0c \u656c\u8bf7 \u671f\u5f85 \u656c\u8bf7\u671f\u5f85 \ud83c\udf1f","title":"\u4f5c\u8005"},{"location":"%E7%81%AB%E6%8A%8A/futures/","text":"\ud83c\udf19 \u4f5c\u8005 \u6b63\u5728 \u52a0\u97ad \u5feb\u9a6c\u52a0\u97ad \u8d76\u5de5 \u4e2d \u2026 \u2026   \u5373\u5c06 \u4e0a\u7ebf \uff0c \u656c\u8bf7 \u671f\u5f85 \u656c\u8bf7\u671f\u5f85 \ud83c\udf1f","title":"\u6784\u60f3 & \u672a\u6765"},{"location":"%E7%81%AB%E6%8A%8A/project/","text":"\ud83c\udf19 \u4f5c\u8005 \u6b63\u5728 \u52a0\u97ad \u5feb\u9a6c\u52a0\u97ad \u8d76\u5de5 \u4e2d \u2026 \u2026   \u5373\u5c06 \u4e0a\u7ebf \uff0c \u656c\u8bf7 \u671f\u5f85 \u656c\u8bf7\u671f\u5f85 \ud83c\udf1f","title":"\u9879\u76ee"},{"location":"%E7%81%AB%E6%8A%8A/shares/","text":"\ud83c\udf19 \u4f5c\u8005 \u6b63\u5728 \u52a0\u97ad \u5feb\u9a6c\u52a0\u97ad \u8d76\u5de5 \u4e2d \u2026 \u2026   \u5373\u5c06 \u4e0a\u7ebf \uff0c \u656c\u8bf7 \u671f\u5f85 \u656c\u8bf7\u671f\u5f85 \ud83c\udf1f","title":"\u5206\u4eab"},{"location":"%E7%BD%97%E7%9B%98/%E5%88%9D%E5%A7%8B%E5%8C%96/initialize/","text":"\ud83c\udf1f \u521d\u59cb \u521d\u59cb\u5316   \u00b6   \u5728 \u521d\u6b21 \u5b89\u88c5 \u6846\u67b6 \u65f6 \uff0c \u8bf7 \u8fdb\u884c \u521d\u59cb \u521d\u59cb\u5316 \uff0c \u4ee5 \u5c06 \u8def\u5f84 \u8bbe\u7f6e \u5230 \u81ea\u5df1 \u7684 \u6587\u4ef6 \u91cc   \u4f7f\u7528 \u5982\u4e0b \u8bed\u53e5 \u8fdb\u884c \u521d\u59cb \u521d\u59cb\u5316   Python   1   2   import   pure _ ocean _ breeze . initialize . initialize   pure _ ocean _ breeze   .   initialize   .   initialize   .   initialize   ( )   \u7136\u540e \u6839\u636e \u63d0\u793a \u8fdb\u884c \u64cd\u4f5c \u5373\u53ef \uff08 \u26a0 \ufe0f   \u8bf7 \u6ce8\u610f \u8def\u5f84 \u4e0d\u8981 \u5199 \u53cd \u659c\u6760   \\   \uff0c \u800c \u8981 \u5199\u6210   /   \uff09   \u7ecf\u8fc7 \u521d\u59cb \u521d\u59cb\u5316 \u540e \uff0c \u4ee5\u540e \u5c31 \u53ef\u4ee5 \u76f4\u63a5 \u4f7f\u7528 \uff0c \u4e0d\u8bba \u91cd\u542f \u7535\u8111 \u6216\u8005 \u7248\u672c \u5347\u7ea7 \u7248\u672c\u5347\u7ea7 \uff0c \u90fd \u4e0d\u7528 \u518d \u521d\u59cb \u521d\u59cb\u5316   \u26a0 \ufe0f   \u5982\u679c \u66f4\u6362 \u4e86 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u8def\u5f84 \uff0c \u8bf7 \u91cd\u65b0 \u521d\u59cb \u521d\u59cb\u5316","title":"initialize"},{"location":"%E7%BD%97%E7%9B%98/%E5%88%9D%E5%A7%8B%E5%8C%96/initialize/#_1","text":"\u5728 \u521d\u6b21 \u5b89\u88c5 \u6846\u67b6 \u65f6 \uff0c \u8bf7 \u8fdb\u884c \u521d\u59cb \u521d\u59cb\u5316 \uff0c \u4ee5 \u5c06 \u8def\u5f84 \u8bbe\u7f6e \u5230 \u81ea\u5df1 \u7684 \u6587\u4ef6 \u91cc   \u4f7f\u7528 \u5982\u4e0b \u8bed\u53e5 \u8fdb\u884c \u521d\u59cb \u521d\u59cb\u5316   Python   1   2   import   pure _ ocean _ breeze . initialize . initialize   pure _ ocean _ breeze   .   initialize   .   initialize   .   initialize   ( )   \u7136\u540e \u6839\u636e \u63d0\u793a \u8fdb\u884c \u64cd\u4f5c \u5373\u53ef \uff08 \u26a0 \ufe0f   \u8bf7 \u6ce8\u610f \u8def\u5f84 \u4e0d\u8981 \u5199 \u53cd \u659c\u6760   \\   \uff0c \u800c \u8981 \u5199\u6210   /   \uff09   \u7ecf\u8fc7 \u521d\u59cb \u521d\u59cb\u5316 \u540e \uff0c \u4ee5\u540e \u5c31 \u53ef\u4ee5 \u76f4\u63a5 \u4f7f\u7528 \uff0c \u4e0d\u8bba \u91cd\u542f \u7535\u8111 \u6216\u8005 \u7248\u672c \u5347\u7ea7 \u7248\u672c\u5347\u7ea7 \uff0c \u90fd \u4e0d\u7528 \u518d \u521d\u59cb \u521d\u59cb\u5316   \u26a0 \ufe0f   \u5982\u679c \u66f4\u6362 \u4e86 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u8def\u5f84 \uff0c \u8bf7 \u91cd\u65b0 \u521d\u59cb \u521d\u59cb\u5316","title":"\ud83c\udf1f \u521d\u59cb\u5316"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/comment/","text":"comment _ on _ rets _ and _ nets   (   rets   ,   nets   ,   name   =   ' \u7ee9\u6548 '   ,   counts _ one _ year   =   12   )   \u00b6   \u8f93\u5165 \u6708\u9891 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u8f93\u51fa \u5e74\u5316 \u6536\u76ca \u3001 \u5e74\u5316 \u6ce2\u52a8 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u548c \u6700\u5927 \u56de\u64a4 \u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15   Parameters   \u00b6   rets   :   pd . Series   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   nets   :   pd . Series   \u51c0\u503c \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   name   :   str ,   optional   \u7ee9\u6548 \u6307\u6807 \u5217 \u540d\u5b57 ,   by   default   ' \u7ee9\u6548 '   counts _ one _ year   :   int   \u4e00\u5e74 \u5185\u6709 \u591a\u5c11 \u6b21 \u4ea4\u6613 ,   by   default   12   Returns   \u00b6   pd . DataFrame   \u5305\u542b \u5e74\u5316 \u6536\u76ca \u3001 \u5e74\u5316 \u6ce2\u52a8 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u548c \u6700\u5927 \u56de\u64a4 \u7387 \u7684 \u8bc4\u4ef7 \u6307\u6807   Source   code   in   pure _ ocean _ breeze / labor / comment . py   Python   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   def   comment _ on _ rets _ and _ nets   (   rets   :   pd   .   Series   ,   nets   :   pd   .   Series   ,   name   :   str   =   \" \u7ee9\u6548 \"   ,   counts _ one _ year   :   int   =   12   )   - >   pd   .   DataFrame   :   \" \" \" \u8f93\u5165 \u6708\u9891 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u8f93\u51fa \u5e74\u5316 \u6536\u76ca \u3001 \u5e74\u5316 \u6ce2\u52a8 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u548c \u6700\u5927 \u56de\u64a4 \u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15   Parameters   ----------   rets   :   pd . Series   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   nets   :   pd . Series   \u51c0\u503c \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   name   :   str ,   optional   \u7ee9\u6548 \u6307\u6807 \u5217 \u540d\u5b57 ,   by   default   ' \u7ee9\u6548 '   counts _ one _ year   :   int   \u4e00\u5e74 \u5185\u6709 \u591a\u5c11 \u6b21 \u4ea4\u6613 ,   by   default   12   Returns   -------   ` pd . DataFrame `   \u5305\u542b \u5e74\u5316 \u6536\u76ca \u3001 \u5e74\u5316 \u6ce2\u52a8 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u548c \u6700\u5927 \u56de\u64a4 \u7387 \u7684 \u8bc4\u4ef7 \u6307\u6807   \" \" \"   duration _ nets   =   (   nets   .   index   [   -   1   ]   -   nets   .   index   [   0   ] )   .   days   year _ nets   =   duration _ nets   /   365   ret _ yearly   =   (   nets   .   iloc   [   -   1   ]   /   nets   .   iloc   [   0   ] )   * *   (   1   /   year _ nets   )   -   1   max _ draw   =   ( (   nets   .   cummax   ( )   -   nets   )   /   nets   .   cummax   ( ) )   .   max   ( )   vol   =   np   .   std   (   rets   )   *   (   counts _ one _ year   * *   0.5   )   info _ rate   =   ret _ yearly   /   vol   win _ rate   =   len   (   rets   [   rets   >   0   ] )   /   len   (   rets   )   if   counts _ one _ year   = =   12   :   names   =   \" \u6708\u5ea6 \u80dc\u7387 \"   else   :   names   =   \" \u80dc\u7387 \"   comments   =   pd   .   DataFrame   (   {   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   :   ret _ yearly   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   :   vol   ,   \" \u4fe1\u606f \u6bd4\u7387 \"   :   info _ rate   ,   names   :   win _ rate   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   :   max _ draw   ,   } ,   index   =   [   name   ] ,   )   .   T   return   comments   comments _ on _ twins   (   nets   ,   rets   ,   counts _ one _ year   =   12   )   \u00b6   \u8f93\u5165 \u6708\u9891 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u7ed9\u51fa \u8bc4\u4ef7   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15   Parameters   \u00b6   nets   :   pd . Series   \u51c0\u503c \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   rets   :   pd . Series   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   counts _ one _ year   :   int   \u4e00\u5e74 \u5185\u6709 \u591a\u5c11 \u6b21 \u4ea4\u6613 ,   by   default   12   Returns   \u00b6   pd . Series   \u5305\u542b \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387 \u7684 \u8bc4\u4ef7 \u6307\u6807   Source   code   in   pure _ ocean _ breeze / labor / comment . py   Python   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   def   comments _ on _ twins   (   nets   :   pd   .   Series   ,   rets   :   pd   .   Series   ,   counts _ one _ year   :   int   =   12   )   - >   pd   .   Series   :   \" \" \" \u8f93\u5165 \u6708\u9891 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u7ed9\u51fa \u8bc4\u4ef7   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15   Parameters   ----------   nets   :   pd . Series   \u51c0\u503c \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   rets   :   pd . Series   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   counts _ one _ year   :   int   \u4e00\u5e74 \u5185\u6709 \u591a\u5c11 \u6b21 \u4ea4\u6613 ,   by   default   12   Returns   -------   ` pd . Series `   \u5305\u542b \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387 \u7684 \u8bc4\u4ef7 \u6307\u6807   \" \" \"   series   =   nets   .   copy   ( )   series1   =   rets   .   copy   ( )   ret   =   (   series   .   iloc   [   -   1   ]   -   series   .   iloc   [   0   ] )   /   series   .   iloc   [   0   ]   duration   =   (   series   .   index   [   -   1   ]   -   series   .   index   [   0   ] )   .   days   year   =   duration   /   365   ret _ yearly   =   (   series   .   iloc   [   -   1   ]   /   series   .   iloc   [   0   ] )   * *   (   1   /   year   )   -   1   max _ draw   =   -   (   series   /   series   .   expanding   (   1   )   .   max   ( )   -   1   )   .   min   ( )   vol   =   np   .   std   (   series1   )   *   (   counts _ one _ year   * *   0.5   )   sharpe   =   ret _ yearly   /   vol   wins   =   series1   [   series1   >   0   ]   win _ rate   =   len   (   wins   )   /   len   (   series1   )   return   pd   .   Series   (   [   ret   ,   ret _ yearly   ,   vol   ,   sharpe   ,   win _ rate   ,   max _ draw   ] ,   index   =   [   \" \u603b \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u4fe1\u606f \u6bd4\u7387 \"   ,   \" \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ] ,   )   comments _ on _ twins _ periods   (   nets   ,   rets   ,   periods   )   \u00b6   \u8f93\u5165 \u5176\u4ed6 \u9891\u7387 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u7ed9\u51fa \u8bc4\u4ef7   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15   Parameters   \u00b6   nets   :   pd . Series   \u51c0\u503c \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   rets   :   pd . Series   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   periods   :   int   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 \u9891\u7387 \uff0c \u5982 5 \u5929 \u4e00\u6b21 \uff0c \u5219 \u4e3a 5   Returns   \u00b6   pd . Series   \u5305\u542b \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387 \u7684 \u8bc4\u4ef7 \u6307\u6807   Source   code   in   pure _ ocean _ breeze / labor / comment . py   Python   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   def   comments _ on _ twins _ periods   (   nets   :   pd   .   Series   ,   rets   :   pd   .   Series   ,   periods   :   int   )   - >   pd   .   Series   :   \" \" \" \u8f93\u5165 \u5176\u4ed6 \u9891\u7387 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u7ed9\u51fa \u8bc4\u4ef7   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15   Parameters   ----------   nets   :   pd . Series   \u51c0\u503c \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   rets   :   pd . Series   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   periods   :   int   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 \u9891\u7387 \uff0c \u5982 5 \u5929 \u4e00\u6b21 \uff0c \u5219 \u4e3a 5   Returns   -------   ` pd . Series `   \u5305\u542b \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387 \u7684 \u8bc4\u4ef7 \u6307\u6807   \" \" \"   series   =   nets   .   copy   ( )   series1   =   rets   .   copy   ( )   ret   =   (   series   .   iloc   [   -   1   ]   -   series   .   iloc   [   0   ] )   /   series   .   iloc   [   0   ]   duration   =   (   series   .   index   [   -   1   ]   -   series   .   index   [   0   ] )   .   days   year   =   duration   /   365   ret _ yearly   =   (   series   .   iloc   [   -   1   ]   /   series   .   iloc   [   0   ] )   * *   (   1   /   year   )   -   1   max _ draw   =   -   (   series   /   series   .   expanding   (   1   )   .   max   ( )   -   1   )   .   min   ( )   vol   =   np   .   std   (   series1   )   *   (   252   * *   0.5   )   *   (   periods   * *   0.5   )   sharpe   =   ret _ yearly   /   vol   wins   =   series1   [   series1   >   0   ]   win _ rate   =   len   (   wins   )   /   len   (   series1   )   return   pd   .   Series   (   [   ret   ,   ret _ yearly   ,   vol   ,   sharpe   ,   win _ rate   ,   max _ draw   ] ,   index   =   [   \" \u603b \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u4fe1\u606f \u6bd4\u7387 \"   ,   \" \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ] ,   )   make _ relative _ comments   (   ret _ fac   ,   hs300   =   0   ,   zz500   =   0   ,   zz1000   =   0   ,   gz2000   =   0   ,   all _ a   =   0   ,   day   =   None   ,   show _ nets   =   0   )   \u00b6   \u5bf9\u4e8e \u4e00\u4e2a \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c \u8ba1\u7b97 \u5176 \u76f8\u5bf9 \u4e8e \u67d0\u4e2a \u6307\u6570 \u7684 \u8d85\u989d \u8868\u73b0   Parameters   \u00b6   ret _ fac   :   pd . Series   \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   hs300   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u6caa \u6df1 300 \u6307\u6570 \u884c\u60c5 ,   by   default   0   zz500   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 500 \u6307\u6570 \u884c\u60c5 ,   by   default   0   zz1000   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 1000 \u6307\u6570 \u884c\u60c5 ,   by   default   0   gz2000   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u56fd\u8bc1 2000 \u6307\u6570 \u884c\u60c5 ,   by   default   0   all _ a   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 \u5168\u6307 \u6307\u6570 \u884c\u60c5 ,   by   default   0   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   show _ nets   :   bool ,   optional   \u8fd4\u56de \u8fd4\u56de\u503c \u4e2d \u5305\u62ec \u8d85\u989d \u51c0\u503c \u6570\u636e ,   by   default   0   Returns   \u00b6   pd . Series   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   Raises   \u00b6   IOError   \u5982\u679c \u6ca1 \u6307\u5b9a \u4efb\u4f55 \u4e00\u4e2a \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / comment . py   Python   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   @ do _ on _ dfs   def   make _ relative _ comments   (   ret _ fac   :   pd   .   Series   ,   hs300   :   bool   =   0   ,   zz500   :   bool   =   0   ,   zz1000   :   bool   =   0   ,   gz2000   :   bool   =   0   ,   all _ a   :   bool   =   0   ,   day   :   int   =   None   ,   show _ nets   :   bool   =   0   ,   )   - >   pd   .   Series   :   \" \" \" \u5bf9\u4e8e \u4e00\u4e2a \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c \u8ba1\u7b97 \u5176 \u76f8\u5bf9 \u4e8e \u67d0\u4e2a \u6307\u6570 \u7684 \u8d85\u989d \u8868\u73b0   Parameters   ----------   ret _ fac   :   pd . Series   \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   hs300   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u6caa \u6df1 300 \u6307\u6570 \u884c\u60c5 ,   by   default   0   zz500   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 500 \u6307\u6570 \u884c\u60c5 ,   by   default   0   zz1000   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 1000 \u6307\u6570 \u884c\u60c5 ,   by   default   0   gz2000   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u56fd\u8bc1 2000 \u6307\u6570 \u884c\u60c5 ,   by   default   0   all _ a   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 \u5168\u6307 \u6307\u6570 \u884c\u60c5 ,   by   default   0   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   show _ nets   :   bool ,   optional   \u8fd4\u56de \u8fd4\u56de\u503c \u4e2d \u5305\u62ec \u8d85\u989d \u51c0\u503c \u6570\u636e ,   by   default   0   Returns   -------   ` pd . Series `   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   Raises   ------   ` IOError `   \u5982\u679c \u6ca1 \u6307\u5b9a \u4efb\u4f55 \u4e00\u4e2a \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   \" \" \"   if   hs300   = =   1   and   zz500   = =   1   and   zz1000   = =   0   and   gz2000   = =   0   :   net _ index   =   read _ index _ single   (   \" 000906 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   net _ indexs   =   [ ]   weights   =   [ ]   if   hs300   :   net _ index   =   read _ index _ single   (   \" 000300 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   300   )   if   zz500   :   net _ index   =   read _ index _ single   (   \" 000905 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   500   )   if   zz1000   :   net _ index   =   read _ index _ single   (   \" 000852 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   1000   )   if   gz2000   :   net _ index   =   read _ index _ single   (   \" 399303 . SZ \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   2000   )   if   all _ a   :   net _ index   =   read _ index _ single   (   \" 000985 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   5000   )   if   (   hs300   +   zz500   +   zz1000   +   gz2000   +   all _ a   )   = =   0   :   raise   IOError   (   \" \u4f60 \u603b\u5f97 \u6307\u5b9a \u4e00\u4e2a \u80a1\u7968 \u6c60 \u5427 \uff1f \"   )   net _ index   =   pd   .   concat   (   net _ indexs   ,   axis   =   1   )   ret _ index   =   net _ index   .   pct _ change   ( )   if   isinstance   (   ret _ index   ,   pd   .   DataFrame   ) :   ret _ index   =   sum   (   [   ret _ index   .   iloc   [ : ,   i   ]   *   weights   [   i   ]   for   i   in   range   (   len   (   weights   ) ) ]   )   /   sum   (   weights   )   if   day   is   not   None   :   ret _ index   =   ret _ index   [   ret _ index   .   index   > =   pd   .   Timestamp   (   day   ) ]   ret   =   ret _ fac   -   ret _ index   ret   =   ret   .   dropna   ( )   net   =   (   1   +   ret   )   .   cumprod   ( )   ntop   =   pd   .   Series   (   1   ,   index   =   [   net   .   index   .   min   ( )   -   pd   .   DateOffset   (   months   =   1   ) ] )   rtop   =   pd   .   Series   (   0   ,   index   =   [   net   .   index   .   min   ( )   -   pd   .   DateOffset   (   months   =   1   ) ] )   net   =   pd   .   concat   ( [   ntop   ,   net   ] )   .   resample   (   \" M \"   )   .   last   ( )   ret   =   pd   .   concat   ( [   rtop   ,   ret   ] )   .   resample   (   \" M \"   )   .   last   ( )   com   =   comments _ on _ twins   (   net   ,   ret   )   if   show _ nets   :   return   com   ,   net   else   :   return   com   make _ relative _ comments _ plot   (   ret _ fac   ,   hs300   =   0   ,   zz500   =   0   ,   zz1000   =   0   ,   gz2000   =   0   ,   all _ a   =   0   ,   day   =   None   )   \u00b6   \u5bf9\u4e8e \u4e00\u4e2a \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c \u8ba1\u7b97 \u5176 \u76f8\u5bf9 \u4e8e \u67d0\u4e2a \u6307\u6570 \u7684 \u8d85\u989d \u8868\u73b0 \uff0c \u7136\u540e \u7ed8\u56fe \uff0c \u5e76 \u8fd4\u56de \u8d85\u989d \u51c0\u503c \u5e8f\u5217   Parameters   \u00b6   ret _ fac   :   pd . Series   \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   hs300   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u6caa \u6df1 300 \u6307\u6570 \u884c\u60c5 ,   by   default   0   zz500   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 500 \u6307\u6570 \u884c\u60c5 ,   by   default   0   zz1000   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 1000 \u6307\u6570 \u884c\u60c5 ,   by   default   0   gz2000   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u56fd\u8bc1 2000 \u6307\u6570 \u884c\u60c5 ,   by   default   0   all _ a   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 \u5168\u6307 \u6307\u6570 \u884c\u60c5 ,   by   default   0   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   Returns   \u00b6   pd . Series   \u8d85\u989d \u51c0\u503c \u5e8f\u5217   Raises   \u00b6   IOError   \u5982\u679c \u6ca1 \u6307\u5b9a \u4efb\u4f55 \u4e00\u4e2a \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / comment . py   Python   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   262   263   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   @ do _ on _ dfs   def   make _ relative _ comments _ plot   (   ret _ fac   :   pd   .   Series   ,   hs300   :   bool   =   0   ,   zz500   :   bool   =   0   ,   zz1000   :   bool   =   0   ,   gz2000   :   bool   =   0   ,   all _ a   :   bool   =   0   ,   day   :   int   =   None   ,   )   - >   pd   .   Series   :   \" \" \" \u5bf9\u4e8e \u4e00\u4e2a \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c \u8ba1\u7b97 \u5176 \u76f8\u5bf9 \u4e8e \u67d0\u4e2a \u6307\u6570 \u7684 \u8d85\u989d \u8868\u73b0 \uff0c \u7136\u540e \u7ed8\u56fe \uff0c \u5e76 \u8fd4\u56de \u8d85\u989d \u51c0\u503c \u5e8f\u5217   Parameters   ----------   ret _ fac   :   pd . Series   \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c index \u4e3a \u65f6\u95f4   hs300   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u6caa \u6df1 300 \u6307\u6570 \u884c\u60c5 ,   by   default   0   zz500   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 500 \u6307\u6570 \u884c\u60c5 ,   by   default   0   zz1000   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 1000 \u6307\u6570 \u884c\u60c5 ,   by   default   0   gz2000   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u56fd\u8bc1 2000 \u6307\u6570 \u884c\u60c5 ,   by   default   0   all _ a   :   bool ,   optional   \u4e3a 1 \u5219 \u76f8\u5bf9 \u4e2d\u8bc1 \u5168\u6307 \u6307\u6570 \u884c\u60c5 ,   by   default   0   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   Returns   -------   ` pd . Series `   \u8d85\u989d \u51c0\u503c \u5e8f\u5217   Raises   ------   ` IOError `   \u5982\u679c \u6ca1 \u6307\u5b9a \u4efb\u4f55 \u4e00\u4e2a \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   \" \" \"   if   hs300   = =   1   and   zz500   = =   1   and   zz1000   = =   0   and   gz2000   = =   0   :   net _ index   =   read _ index _ single   (   \" 000906 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   net _ indexs   =   [ ]   weights   =   [ ]   if   hs300   :   net _ index   =   read _ index _ single   (   \" 000300 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   300   )   if   zz500   :   net _ index   =   read _ index _ single   (   \" 000905 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   500   )   if   zz1000   :   net _ index   =   read _ index _ single   (   \" 000852 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   1000   )   if   gz2000   :   net _ index   =   read _ index _ single   (   \" 399303 . SZ \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   2000   )   if   all _ a   :   net _ index   =   read _ index _ single   (   \" 000985 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   net _ indexs   .   append   (   net _ index   )   weights   .   append   (   5000   )   if   (   hs300   +   zz500   +   zz1000   +   gz2000   +   all _ a   )   = =   0   :   raise   IOError   (   \" \u4f60 \u603b\u5f97 \u6307\u5b9a \u4e00\u4e2a \u80a1\u7968 \u6c60 \u5427 \uff1f \"   )   net _ index   =   pd   .   concat   (   net _ indexs   ,   axis   =   1   )   ret _ index   =   net _ index   .   pct _ change   ( )   if   isinstance   (   ret _ index   ,   pd   .   DataFrame   ) :   ret _ index   =   sum   (   [   ret _ index   .   iloc   [ : ,   i   ]   *   weights   [   i   ]   for   i   in   range   (   len   (   weights   ) ) ]   )   /   sum   (   weights   )   if   day   is   not   None   :   ret _ index   =   ret _ index   [   ret _ index   .   index   > =   pd   .   Timestamp   (   day   ) ]   ret   =   ret _ fac   -   ret _ index   ret   =   ret   .   dropna   ( )   net   =   (   1   +   ret   )   .   cumprod   ( )   ntop   =   pd   .   Series   (   1   ,   index   =   [   net   .   index   .   min   ( )   -   pd   .   DateOffset   (   months   =   1   ) ] )   net   =   pd   .   concat   ( [   ntop   ,   net   ] )   .   resample   (   \" M \"   )   .   last   ( )   net   .   plot   (   rot   =   60   )   plt   .   show   ( )   return   net   other _ periods _ comments _ nets   (   fac   ,   way   ,   period   ,   comments _ writer   =   None   ,   nets _ writer   =   None   ,   sheetname   =   None   ,   group _ num   =   10   )   \u00b6   \u5c0f\u578b \u56de\u6d4b \u6846\u67b6 \uff0c \u4e0d\u540c \u9891\u7387 \u4e0b \u7684 \u8bc4\u4ef7 \u6307\u6807 \uff0c \u8bf7 \u8f93\u5165 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u540e \u7684 \u56e0\u5b50 \u503c   Parameters   \u00b6   fac   :   pd . DataFrame   \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   way   :   str   \u56e0\u5b50 \u7684 \u65b9\u5411 \uff0c \u53ef\u9009 \u53ef\u9009\u503c   pos   \u6216   neg   period   :   int   \u9891\u7387 \uff0c \u5982 5 \u5929\u5219 \u4e3a 5 ,   by   default   None   comments _ writer   :   pd . ExcelWriter ,   optional   \u5199\u5165 \u7ee9\u6548 \u7684 xlsx ,   by   default   None   nets _ writer   :   pd . ExcelWriter ,   optional   \u5199\u5165 \u51c0\u503c \u7684 xlsx ,   by   default   None   sheetname   :   str ,   optional   \u5de5\u4f5c \u8868 \u540d\u79f0 ,   by   default   None   group _ num   :   int ,   optional   \u56de \u6d4b\u65f6 \u5206\u7ec4 \u6570\u91cf ,   by   default   10   Returns   \u00b6   Tuple [ pd . Series ]   \u7ee9\u6548 \u548c \u51c0\u503c   Source   code   in   pure _ ocean _ breeze / labor / comment . py   Python   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   def   other _ periods _ comments _ nets   (   fac   :   pd   .   DataFrame   ,   way   :   str   ,   period   :   int   ,   comments _ writer   :   pd   .   ExcelWriter   =   None   ,   nets _ writer   :   pd   .   ExcelWriter   =   None   ,   sheetname   :   str   =   None   ,   group _ num   :   int   =   10   ,   )   - >   Tuple   [   pd   .   Series   ] :   \" \" \" \u5c0f\u578b \u56de\u6d4b \u6846\u67b6 \uff0c \u4e0d\u540c \u9891\u7387 \u4e0b \u7684 \u8bc4\u4ef7 \u6307\u6807 \uff0c \u8bf7 \u8f93\u5165 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u540e \u7684 \u56e0\u5b50 \u503c   Parameters   ----------   fac   :   pd . DataFrame   \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   way   :   str   \u56e0\u5b50 \u7684 \u65b9\u5411 \uff0c \u53ef\u9009 \u53ef\u9009\u503c   pos   \u6216   neg   period   :   int   \u9891\u7387 \uff0c \u5982 5 \u5929\u5219 \u4e3a 5 ,   by   default   None   comments _ writer   :   pd . ExcelWriter ,   optional   \u5199\u5165 \u7ee9\u6548 \u7684 xlsx ,   by   default   None   nets _ writer   :   pd . ExcelWriter ,   optional   \u5199\u5165 \u51c0\u503c \u7684 xlsx ,   by   default   None   sheetname   :   str ,   optional   \u5de5\u4f5c \u8868 \u540d\u79f0 ,   by   default   None   group _ num   :   int ,   optional   \u56de \u6d4b\u65f6 \u5206\u7ec4 \u6570\u91cf ,   by   default   10   Returns   -------   ` Tuple [ pd . Series ] `   \u7ee9\u6548 \u548c \u51c0\u503c   \" \" \"   import   alphalens   as   al   closes   =   read _ daily   (   open   =   1   )   .   shift   (   -   1   )   fac1   =   fac   .   stack   ( )   df   =   al   .   utils   .   get _ clean _ factor _ and _ forward _ returns   (   fac1   ,   closes   [   closes   .   index   .   isin   (   fac   .   index   ) ] ,   quantiles   =   group _ num   ,   periods   =   (   period   , ) ,   )   df   =   df   .   reset _ index   ( )   ics   =   df   .   groupby   ( [   \" date \"   ] ) [ [   f   \"   {   period   }   D \"   ,   \" factor \"   ] ]   .   apply   (   lambda   x   :   x   .   corr   (   method   =   \" spearman \"   )   .   iloc   [   0   ,   1   ]   )   ic   =   ics   .   mean   ( )   ir   =   ics   .   std   ( )   icir   =   ic   /   ir   *   (   252   * *   0.5   )   /   (   period   * *   0.5   )   df   =   df   .   groupby   ( [   \" date \"   ,   \" factor _ quantile \"   ] ) [   f   \"   {   period   }   D \"   ]   .   mean   ( )   /   period   df   =   df   .   unstack   ( )   df   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   list   (   df   .   columns   ) ]   if   way   = =   \" pos \"   :   df   =   df   .   assign   (   \u591a\u7a7a \u5bf9\u51b2   =   df   [   f   \" \u5206\u7ec4   {   group _ num   }   \"   ]   -   df   .   \u5206\u7ec4 1   )   elif   way   = =   \" neg \"   :   df   =   df   .   assign   (   \u591a\u7a7a \u5bf9\u51b2   =   df   .   \u5206\u7ec4 1   -   df   [   f   \" \u5206\u7ec4   {   group _ num   }   \"   ] )   nets   =   (   df   +   1   )   .   cumprod   ( )   nets   =   nets   .   apply   (   lambda   x   :   x   /   x   .   iloc   [   0   ] )   nets   .   plot   (   rot   =   60   )   plt   .   show   ( )   comments   =   comments _ on _ twins _ periods   (   nets   .   \u591a\u7a7a \u5bf9\u51b2   ,   df   .   \u591a\u7a7a \u5bf9\u51b2   ,   period   )   comments   =   pd   .   concat   (   [   pd   .   Series   ( [   ic   ,   icir   ] ,   index   =   [   \" Rank   IC \"   ,   \" Rank   ICIR \"   ] ) ,   comments   ]   )   print   (   comments   )   if   sheetname   is   None   :   ...   else   :   if   comments _ writer   is   None   :   ...   else   :   comments   .   to _ excel   (   comments _ writer   ,   sheetname   )   if   nets _ writer   is   None   :   ...   else   :   nets   .   to _ excel   (   nets _ writer   ,   sheetname   )   return   comments   ,   nets","title":"comment"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/comment/#pure_ocean_breeze.labor.comment.comment_on_rets_and_nets","text":"\u8f93\u5165 \u6708\u9891 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u8f93\u51fa \u5e74\u5316 \u6536\u76ca \u3001 \u5e74\u5316 \u6ce2\u52a8 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u548c \u6700\u5927 \u56de\u64a4 \u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15","title":"comment _ on _ rets _ and _ nets ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/comment/#pure_ocean_breeze.labor.comment.comments_on_twins","text":"\u8f93\u5165 \u6708\u9891 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u7ed9\u51fa \u8bc4\u4ef7   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15","title":"comments _ on _ twins ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/comment/#pure_ocean_breeze.labor.comment.comments_on_twins_periods","text":"\u8f93\u5165 \u5176\u4ed6 \u9891\u7387 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \uff0c \u7ed9\u51fa \u8bc4\u4ef7   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \u8f93\u5165 2 \u4e2a pd . Series \uff0c \u65f6\u95f4 \u662f \u7d22\u5f15","title":"comments _ on _ twins _ periods ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/comment/#pure_ocean_breeze.labor.comment.make_relative_comments","text":"\u5bf9\u4e8e \u4e00\u4e2a \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c \u8ba1\u7b97 \u5176 \u76f8\u5bf9 \u4e8e \u67d0\u4e2a \u6307\u6570 \u7684 \u8d85\u989d \u8868\u73b0","title":"make _ relative _ comments ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/comment/#pure_ocean_breeze.labor.comment.make_relative_comments_plot","text":"\u5bf9\u4e8e \u4e00\u4e2a \u7ed9\u5b9a \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \uff0c \u8ba1\u7b97 \u5176 \u76f8\u5bf9 \u4e8e \u67d0\u4e2a \u6307\u6570 \u7684 \u8d85\u989d \u8868\u73b0 \uff0c \u7136\u540e \u7ed8\u56fe \uff0c \u5e76 \u8fd4\u56de \u8d85\u989d \u51c0\u503c \u5e8f\u5217","title":"make _ relative _ comments _ plot ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/comment/#pure_ocean_breeze.labor.comment.other_periods_comments_nets","text":"\u5c0f\u578b \u56de\u6d4b \u6846\u67b6 \uff0c \u4e0d\u540c \u9891\u7387 \u4e0b \u7684 \u8bc4\u4ef7 \u6307\u6807 \uff0c \u8bf7 \u8f93\u5165 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u540e \u7684 \u56e0\u5b50 \u503c","title":"other _ periods _ comments _ nets ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/","text":"frequency _ controller   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1402   1403   1404   1405   1406   1407   1408   1409   1410   1411   1412   1413   1414   1415   1416   1417   1418   1419   1420   1421   1422   1423   1424   1425   1426   1427   1428   1429   1430   1431   1432   1433   class   frequency _ controller   (   object   ) :   def   __ init __   (   self   ,   freq   :   str   ) :   self   .   homeplace   =   HomePlace   ( )   self   .   freq   =   freq   if   freq   = =   \" M \"   :   self   .   counts _ one _ year   =   12   self   .   time _ shift   =   pd   .   DateOffset   (   months   =   1   )   self   .   states _ files   =   (   self   .   homeplace   .   daily _ data _ file   +   \" states _ monthly . parquet \"   )   self   .   sts _ files   =   self   .   homeplace   .   daily _ data _ file   +   \" sts _ monthly . parquet \"   self   .   comment _ name   =   \" \u6708 \"   self   .   days _ in   =   20   elif   freq   = =   \" W \"   :   self   .   counts _ one _ year   =   52   self   .   time _ shift   =   pd   .   DateOffset   (   weeks   =   1   )   self   .   states _ files   =   self   .   homeplace   .   daily _ data _ file   +   \" states _ weekly . parquet \"   self   .   sts _ files   =   self   .   homeplace   .   daily _ data _ file   +   \" sts _ weekly . parquet \"   self   .   comment _ name   =   \" \u5468 \"   self   .   days _ in   =   5   else   :   raise   ValueError   (   \" ' \u6682\u65f6 \u4e0d \u652f\u6301 \u6b64 \u9891\u7387 \u54c8 \ud83e\udd12 \uff0c \u76ee\u524d \u4ec5 \u652f\u6301 \u6708\u9891 ' M ' \uff0c \u548c \u5468\u9891 ' W ' \"   )   def   next _ end   (   self   ,   x   ) :   \" \" \" \u627e\u5230 \u4e0b\u4e2a \u5468\u671f \u7684 \u6700\u540e \u4e00\u5929 \" \" \"   if   self   .   freq   = =   \" M \"   :   return   x   +   pd   .   DateOffset   (   months   =   1   )   +   pd   .   tseries   .   offsets   .   MonthEnd   ( )   elif   self   .   freq   = =   \" W \"   :   return   x   +   pd   .   DateOffset   (   weeks   =   1   )   else   :   raise   ValueError   (   \" ' \u6682\u65f6 \u4e0d \u652f\u6301 \u6b64 \u9891\u7387 \u54c8 \ud83e\udd12 \uff0c \u76ee\u524d \u4ec5 \u652f\u6301 \u6708\u9891 ' M ' \uff0c \u548c \u5468\u9891 ' W ' \"   )   next _ end   (   x   )   \u00b6   \u627e\u5230 \u4e0b\u4e2a \u5468\u671f \u7684 \u6700\u540e \u4e00\u5929   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1426   1427   1428   1429   1430   1431   1432   1433   def   next _ end   (   self   ,   x   ) :   \" \" \" \u627e\u5230 \u4e0b\u4e2a \u5468\u671f \u7684 \u6700\u540e \u4e00\u5929 \" \" \"   if   self   .   freq   = =   \" M \"   :   return   x   +   pd   .   DateOffset   (   months   =   1   )   +   pd   .   tseries   .   offsets   .   MonthEnd   ( )   elif   self   .   freq   = =   \" W \"   :   return   x   +   pd   .   DateOffset   (   weeks   =   1   )   else   :   raise   ValueError   (   \" ' \u6682\u65f6 \u4e0d \u652f\u6301 \u6b64 \u9891\u7387 \u54c8 \ud83e\udd12 \uff0c \u76ee\u524d \u4ec5 \u652f\u6301 \u6708\u9891 ' M ' \uff0c \u548c \u5468\u9891 ' W ' \"   )   pure _ coldwinter   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3750   3751   3752   3753   3754   3755   3756   3757   3758   3759   3760   3761   3762   3763   3764   3765   3766   3767   3768   3769   3770   3771   3772   3773   3774   3775   3776   3777   3778   3779   3780   3781   3782   3783   3784   3785   3786   3787   3788   3789   3790   3791   3792   3793   3794   3795   3796   3797   3798   3799   3800   3801   3802   3803   3804   3805   3806   3807   3808   3809   3810   3811   3812   3813   3814   3815   3816   3817   3818   3819   3820   3821   3822   3823   3824   3825   3826   3827   3828   3829   3830   3831   3832   3833   3834   3835   3836   3837   3838   3839   3840   3841   3842   3843   3844   3845   3846   3847   3848   3849   3850   3851   3852   3853   3854   3855   3856   3857   3858   3859   3860   3861   3862   3863   3864   3865   3866   3867   3868   3869   3870   3871   3872   3873   3874   3875   3876   3877   3878   3879   3880   3881   3882   3883   3884   3885   3886   3887   3888   3889   3890   3891   3892   3893   3894   3895   3896   3897   3898   3899   3900   3901   3902   3903   3904   3905   3906   3907   3908   3909   3910   3911   3912   3913   3914   3915   3916   3917   3918   3919   3920   3921   3922   3923   3924   3925   3926   3927   3928   3929   3930   class   pure _ coldwinter   (   object   ) :   #   DONE :   \u53ef\u4ee5 \u81ea\u7531 \u6dfb\u52a0 \u5176\u4ed6 \u8981 \u5254\u9664 \u7684 \u56e0\u5b50 \uff0c \u6216\u8005 \u66ff\u6362 \u67d0\u4e9b \u8981 \u5254\u9664 \u7684 \u56e0\u5b50   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   __ init __   (   cls   ,   momentum   :   bool   =   1   ,   earningsyield   :   bool   =   1   ,   growth   :   bool   =   1   ,   liquidity   :   bool   =   1   ,   size   :   bool   =   1   ,   leverage   :   bool   =   1   ,   beta   :   bool   =   1   ,   nonlinearsize   :   bool   =   1   ,   residualvolatility   :   bool   =   1   ,   booktoprice   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u8bfb\u5165 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \uff0c \u5e76 \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50   Parameters   ----------   facs _ dict   :   Dict ,   optional   \u989d\u5916 \u52a0\u5165 \u7684 \u56e0\u5b50 \uff0c \u540d\u5b57 \u4e3a key \uff0c \u56e0\u5b50 \u77e9\u9635 \u4e3a value \uff0c \u5f62 \u5982 ` { ' \u53cd\u8f6c ' :   ret20 ,   ' \u6362\u624b ' :   tr20 } ` ,   by   default   None   momentum   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u52a8\u91cf \u56e0\u5b50 ,   by   default   1   earningsyield   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u76c8\u5229 \u56e0\u5b50 ,   by   default   1   growth   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6210\u957f \u56e0\u5b50 ,   by   default   1   liquidity   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6d41\u52a8 \u6d41\u52a8\u6027 \u56e0\u5b50 ,   by   default   1   size   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u89c4\u6a21 \u56e0\u5b50 ,   by   default   1   leverage   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6760\u6746 \u56e0\u5b50 ,   by   default   1   beta   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d1d\u5854 \u56e0\u5b50 ,   by   default   1   nonlinearsize   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \u56e0\u5b50 ,   by   default   1   residualvolatility   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6b8b\u5dee \u6ce2\u52a8 \u7387 \u56e0\u5b50 ,   by   default   1   booktoprice   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d26\u9762 \u5e02\u503c \u6bd4 \u56e0\u5b50 ,   by   default   1   \" \" \"   cls   .   homeplace   =   HomePlace   ( )   #   barra \u56e0\u5b50 \u6570\u636e   styles   =   os   .   listdir   (   cls   .   homeplace   .   barra _ data _ file   )   styles   =   [   i   for   i   in   styles   if   (   i   .   endswith   (   \" . parquet \"   ) )   and   (   i   [   0   ]   ! =   \" . \"   ) ]   barras   =   { }   for   s   in   styles   :   k   =   s   .   split   (   \" . \"   ) [   0   ]   v   =   pd   .   read _ parquet   (   cls   .   homeplace   .   barra _ data _ file   +   s   )   .   resample   (   \" M \"   )   .   last   ( )   barras   [   k   ]   =   v   rename _ dict   =   {   \" size \"   :   \" \u5e02\u503c \"   ,   \" nonlinearsize \"   :   \" \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \"   ,   \" booktoprice \"   :   \" \u4f30\u503c \"   ,   \" earningsyield \"   :   \" \u76c8\u5229 \"   ,   \" growth \"   :   \" \u6210\u957f \"   ,   \" leverage \"   :   \" \u6760\u6746 \"   ,   \" liquidity \"   :   \" \u6d41\u52a8 \u6d41\u52a8\u6027 \"   ,   \" momentum \"   :   \" \u52a8\u91cf \"   ,   \" residualvolatility \"   :   \" \u6ce2\u52a8 \u7387 \"   ,   \" beta \"   :   \" \u8d1d\u5854 \"   ,   }   if   momentum   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" momentum \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" momentum \"   }   if   earningsyield   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" earningsyield \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" earningsyield \"   }   if   growth   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" growth \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" growth \"   }   if   liquidity   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" liquidity \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" liquidity \"   }   if   size   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" size \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" size \"   }   if   leverage   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" leverage \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" leverage \"   }   if   beta   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" beta \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" beta \"   }   if   nonlinearsize   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" nonlinearsize \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" nonlinearsize \"   }   if   residualvolatility   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" residualvolatility \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" residualvolatility \"   }   if   booktoprice   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" booktoprice \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" booktoprice \"   }   facs _ dict   =   {   \" \u53cd\u8f6c _ 20 \u5929 \u6536\u76ca \u6536\u76ca\u7387 \u5747\u503c \"   :   boom _ one   (   read _ daily   (   ret   =   1   ) ) ,   \" \u6ce2\u52a8 _ 20 \u5929 \u6536\u76ca \u6536\u76ca\u7387 \u6807\u51c6 \u6807\u51c6\u5dee \"   :   read _ daily   (   ret   =   1   )   .   rolling   (   20   ,   min _ periods   =   10   )   .   std   ( )   .   resample   (   \" M \"   )   .   last   ( ) ,   \" \u6362\u624b _ 20 \u5929 \u6362\u624b \u6362\u624b\u7387 \u5747\u503c \"   :   boom _ one   (   read _ daily   (   tr   =   1   ) ) ,   }   barras   .   update   (   facs _ dict   )   rename _ dict   .   update   ( {   k   :   k   for   k   in   facs _ dict   .   keys   ( ) } )   cls   .   barras   =   barras   cls   .   rename _ dict   =   rename _ dict   sort _ names   =   list   (   rename _ dict   .   values   ( ) )   cls   .   sort _ names   =   sort _ names   cls   .   barras _ together   =   merge _ many   (   list   (   barras   .   values   ( ) ) ,   list   (   barras   .   keys   ( ) ) ,   how   =   \" inner \"   )   def   __ call __   (   self   ) :   \" \" \" \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50 \u503c \" \" \"   return   self   .   snow _ fac   def   set _ factors _ df _ wide   (   self   ,   df   :   pd   .   DataFrame   ,   other _ factors   :   dict   =   None   ) :   \" \" \" \u4f20\u5165 \u56e0\u5b50 \u6570\u636e \uff0c \u65f6\u95f4 \u4e3a \u7d22\u5f15 \uff0c \u4ee3\u7801 \u4e3a \u5217\u540d \" \" \"   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   self   .   __ corr   =   [   df   .   corrwith   (   i   ,   axis   =   1   )   .   mean   ( )   for   i   in   list   (   self   .   barras   .   values   ( ) )   ]   self   .   __ corr   =   (   pd   .   Series   (   self   .   __ corr   ,   index   =   [   self   .   rename _ dict   [   i   ]   for   i   in   self   .   barras   .   keys   ( ) ]   )   .   to _ frame   (   \" \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   )   .   T   )   self   .   __ corr   =   self   .   __ corr   [   self   .   sort _ names   ]   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factors   =   df   self   .   corr _ pri   =   pd   .   merge   (   df   ,   self   .   barras _ together   ,   on   =   [   \" date \"   ,   \" code \"   ] )   .   dropna   ( )   if   other _ factors   is   not   None   :   other _ factors   =   merge _ many   (   list   (   other _ factors   .   values   ( ) ) ,   list   (   other _ factors   .   keys   ( ) ) ,   how   =   \" inner \"   )   self   .   corr _ pri   =   pd   .   merge   (   self   .   corr _ pri   ,   other _ factors   ,   on   =   [   \" date \"   ,   \" code \"   ] )   @ property   def   corr   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u56e0\u5b50 \u548c 10 \u4e2a \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   -------   pd . DataFrame   \u56e0\u5b50 \u548c 10 \u4e2a \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   \" \" \"   return   self   .   __ corr   .   copy   ( )   def   ols _ in _ group   (   self   ,   df   ) :   \" \" \" \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u8fdb\u884c \u56de\u5f52 \uff0c \u5e76 \u8ba1\u7b97 \u6b8b\u5dee \" \" \"   xs   =   list   (   df   .   columns   )   xs   =   [   i   for   i   in   xs   if   i   ! =   \" fac \"   ]   xs _ join   =   \" + \"   .   join   (   xs   )   ols _ formula   =   \" fac ~ \"   +   xs _ join   ols _ result   =   smf   .   ols   (   ols _ formula   ,   data   =   df   )   .   fit   ( )   ols _ ws   =   {   i   :   ols _ result   .   params   [   i   ]   for   i   in   xs   }   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   to _ minus   =   [   ols _ ws   [   i   ]   *   df   [   i   ]   for   i   in   xs   ]   to _ minus   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   to _ minus   )   df   =   df   .   assign   (   snow _ fac   =   df   .   fac   -   to _ minus   -   ols _ b   )   df   =   df   [ [   \" snow _ fac \"   ] ]   df   =   df   .   rename   (   columns   =   {   \" snow _ fac \"   :   \" fac \"   } )   return   df   def   get _ snow _ fac   (   self   ) :   \" \" \" \u83b7\u5f97 \u7eaf\u51c0 \u56e0\u5b50 \" \" \"   self   .   snow _ fac   =   (   self   .   corr _ pri   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   groupby   ( [   \" date \"   ] )   .   apply   (   self   .   ols _ in _ group   )   )   self   .   snow _ fac   =   self   .   snow _ fac   .   unstack   ( )   self   .   snow _ fac   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   self   .   snow _ fac   .   columns   ) ) )   corr   :   pd   .   DataFrame   property   \u00b6   \u56e0\u5b50 \u548c 10 \u4e2a \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   \u00b6   pd . DataFrame   \u56e0\u5b50 \u548c 10 \u4e2a \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   __ call __   ( )   \u00b6   \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3867   3868   3869   def   __ call __   (   self   ) :   \" \" \" \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50 \u503c \" \" \"   return   self   .   snow _ fac   __ init __   (   momentum   =   1   ,   earningsyield   =   1   ,   growth   =   1   ,   liquidity   =   1   ,   size   =   1   ,   leverage   =   1   ,   beta   =   1   ,   nonlinearsize   =   1   ,   residualvolatility   =   1   ,   booktoprice   =   1   )   cached   classmethod   \u00b6   \u8bfb\u5165 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \uff0c \u5e76 \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50   Parameters   \u00b6   facs _ dict   :   Dict ,   optional   \u989d\u5916 \u52a0\u5165 \u7684 \u56e0\u5b50 \uff0c \u540d\u5b57 \u4e3a key \uff0c \u56e0\u5b50 \u77e9\u9635 \u4e3a value \uff0c \u5f62 \u5982   { ' \u53cd\u8f6c ' :   ret20 ,   ' \u6362\u624b ' :   tr20 }   ,   by   default   None   momentum   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u52a8\u91cf \u56e0\u5b50 ,   by   default   1   earningsyield   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u76c8\u5229 \u56e0\u5b50 ,   by   default   1   growth   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6210\u957f \u56e0\u5b50 ,   by   default   1   liquidity   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6d41\u52a8 \u6d41\u52a8\u6027 \u56e0\u5b50 ,   by   default   1   size   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u89c4\u6a21 \u56e0\u5b50 ,   by   default   1   leverage   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6760\u6746 \u56e0\u5b50 ,   by   default   1   beta   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d1d\u5854 \u56e0\u5b50 ,   by   default   1   nonlinearsize   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \u56e0\u5b50 ,   by   default   1   residualvolatility   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6b8b\u5dee \u6ce2\u52a8 \u7387 \u56e0\u5b50 ,   by   default   1   booktoprice   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d26\u9762 \u5e02\u503c \u6bd4 \u56e0\u5b50 ,   by   default   1   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3753   3754   3755   3756   3757   3758   3759   3760   3761   3762   3763   3764   3765   3766   3767   3768   3769   3770   3771   3772   3773   3774   3775   3776   3777   3778   3779   3780   3781   3782   3783   3784   3785   3786   3787   3788   3789   3790   3791   3792   3793   3794   3795   3796   3797   3798   3799   3800   3801   3802   3803   3804   3805   3806   3807   3808   3809   3810   3811   3812   3813   3814   3815   3816   3817   3818   3819   3820   3821   3822   3823   3824   3825   3826   3827   3828   3829   3830   3831   3832   3833   3834   3835   3836   3837   3838   3839   3840   3841   3842   3843   3844   3845   3846   3847   3848   3849   3850   3851   3852   3853   3854   3855   3856   3857   3858   3859   3860   3861   3862   3863   3864   3865   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   __ init __   (   cls   ,   momentum   :   bool   =   1   ,   earningsyield   :   bool   =   1   ,   growth   :   bool   =   1   ,   liquidity   :   bool   =   1   ,   size   :   bool   =   1   ,   leverage   :   bool   =   1   ,   beta   :   bool   =   1   ,   nonlinearsize   :   bool   =   1   ,   residualvolatility   :   bool   =   1   ,   booktoprice   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u8bfb\u5165 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \uff0c \u5e76 \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50   Parameters   ----------   facs _ dict   :   Dict ,   optional   \u989d\u5916 \u52a0\u5165 \u7684 \u56e0\u5b50 \uff0c \u540d\u5b57 \u4e3a key \uff0c \u56e0\u5b50 \u77e9\u9635 \u4e3a value \uff0c \u5f62 \u5982 ` { ' \u53cd\u8f6c ' :   ret20 ,   ' \u6362\u624b ' :   tr20 } ` ,   by   default   None   momentum   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u52a8\u91cf \u56e0\u5b50 ,   by   default   1   earningsyield   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u76c8\u5229 \u56e0\u5b50 ,   by   default   1   growth   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6210\u957f \u56e0\u5b50 ,   by   default   1   liquidity   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6d41\u52a8 \u6d41\u52a8\u6027 \u56e0\u5b50 ,   by   default   1   size   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u89c4\u6a21 \u56e0\u5b50 ,   by   default   1   leverage   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6760\u6746 \u56e0\u5b50 ,   by   default   1   beta   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d1d\u5854 \u56e0\u5b50 ,   by   default   1   nonlinearsize   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \u56e0\u5b50 ,   by   default   1   residualvolatility   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6b8b\u5dee \u6ce2\u52a8 \u7387 \u56e0\u5b50 ,   by   default   1   booktoprice   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d26\u9762 \u5e02\u503c \u6bd4 \u56e0\u5b50 ,   by   default   1   \" \" \"   cls   .   homeplace   =   HomePlace   ( )   #   barra \u56e0\u5b50 \u6570\u636e   styles   =   os   .   listdir   (   cls   .   homeplace   .   barra _ data _ file   )   styles   =   [   i   for   i   in   styles   if   (   i   .   endswith   (   \" . parquet \"   ) )   and   (   i   [   0   ]   ! =   \" . \"   ) ]   barras   =   { }   for   s   in   styles   :   k   =   s   .   split   (   \" . \"   ) [   0   ]   v   =   pd   .   read _ parquet   (   cls   .   homeplace   .   barra _ data _ file   +   s   )   .   resample   (   \" M \"   )   .   last   ( )   barras   [   k   ]   =   v   rename _ dict   =   {   \" size \"   :   \" \u5e02\u503c \"   ,   \" nonlinearsize \"   :   \" \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \"   ,   \" booktoprice \"   :   \" \u4f30\u503c \"   ,   \" earningsyield \"   :   \" \u76c8\u5229 \"   ,   \" growth \"   :   \" \u6210\u957f \"   ,   \" leverage \"   :   \" \u6760\u6746 \"   ,   \" liquidity \"   :   \" \u6d41\u52a8 \u6d41\u52a8\u6027 \"   ,   \" momentum \"   :   \" \u52a8\u91cf \"   ,   \" residualvolatility \"   :   \" \u6ce2\u52a8 \u7387 \"   ,   \" beta \"   :   \" \u8d1d\u5854 \"   ,   }   if   momentum   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" momentum \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" momentum \"   }   if   earningsyield   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" earningsyield \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" earningsyield \"   }   if   growth   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" growth \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" growth \"   }   if   liquidity   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" liquidity \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" liquidity \"   }   if   size   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" size \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" size \"   }   if   leverage   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" leverage \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" leverage \"   }   if   beta   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" beta \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" beta \"   }   if   nonlinearsize   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" nonlinearsize \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" nonlinearsize \"   }   if   residualvolatility   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" residualvolatility \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" residualvolatility \"   }   if   booktoprice   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" booktoprice \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" booktoprice \"   }   facs _ dict   =   {   \" \u53cd\u8f6c _ 20 \u5929 \u6536\u76ca \u6536\u76ca\u7387 \u5747\u503c \"   :   boom _ one   (   read _ daily   (   ret   =   1   ) ) ,   \" \u6ce2\u52a8 _ 20 \u5929 \u6536\u76ca \u6536\u76ca\u7387 \u6807\u51c6 \u6807\u51c6\u5dee \"   :   read _ daily   (   ret   =   1   )   .   rolling   (   20   ,   min _ periods   =   10   )   .   std   ( )   .   resample   (   \" M \"   )   .   last   ( ) ,   \" \u6362\u624b _ 20 \u5929 \u6362\u624b \u6362\u624b\u7387 \u5747\u503c \"   :   boom _ one   (   read _ daily   (   tr   =   1   ) ) ,   }   barras   .   update   (   facs _ dict   )   rename _ dict   .   update   ( {   k   :   k   for   k   in   facs _ dict   .   keys   ( ) } )   cls   .   barras   =   barras   cls   .   rename _ dict   =   rename _ dict   sort _ names   =   list   (   rename _ dict   .   values   ( ) )   cls   .   sort _ names   =   sort _ names   cls   .   barras _ together   =   merge _ many   (   list   (   barras   .   values   ( ) ) ,   list   (   barras   .   keys   ( ) ) ,   how   =   \" inner \"   )   get _ snow _ fac   ( )   \u00b6   \u83b7\u5f97 \u7eaf\u51c0 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3922   3923   3924   3925   3926   3927   3928   3929   3930   def   get _ snow _ fac   (   self   ) :   \" \" \" \u83b7\u5f97 \u7eaf\u51c0 \u56e0\u5b50 \" \" \"   self   .   snow _ fac   =   (   self   .   corr _ pri   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   groupby   ( [   \" date \"   ] )   .   apply   (   self   .   ols _ in _ group   )   )   self   .   snow _ fac   =   self   .   snow _ fac   .   unstack   ( )   self   .   snow _ fac   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   self   .   snow _ fac   .   columns   ) ) )   ols _ in _ group   (   df   )   \u00b6   \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u8fdb\u884c \u56de\u5f52 \uff0c \u5e76 \u8ba1\u7b97 \u6b8b\u5dee   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3906   3907   3908   3909   3910   3911   3912   3913   3914   3915   3916   3917   3918   3919   3920   def   ols _ in _ group   (   self   ,   df   ) :   \" \" \" \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u8fdb\u884c \u56de\u5f52 \uff0c \u5e76 \u8ba1\u7b97 \u6b8b\u5dee \" \" \"   xs   =   list   (   df   .   columns   )   xs   =   [   i   for   i   in   xs   if   i   ! =   \" fac \"   ]   xs _ join   =   \" + \"   .   join   (   xs   )   ols _ formula   =   \" fac ~ \"   +   xs _ join   ols _ result   =   smf   .   ols   (   ols _ formula   ,   data   =   df   )   .   fit   ( )   ols _ ws   =   {   i   :   ols _ result   .   params   [   i   ]   for   i   in   xs   }   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   to _ minus   =   [   ols _ ws   [   i   ]   *   df   [   i   ]   for   i   in   xs   ]   to _ minus   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   to _ minus   )   df   =   df   .   assign   (   snow _ fac   =   df   .   fac   -   to _ minus   -   ols _ b   )   df   =   df   [ [   \" snow _ fac \"   ] ]   df   =   df   .   rename   (   columns   =   {   \" snow _ fac \"   :   \" fac \"   } )   return   df   set _ factors _ df _ wide   (   df   ,   other _ factors   =   None   )   \u00b6   \u4f20\u5165 \u56e0\u5b50 \u6570\u636e \uff0c \u65f6\u95f4 \u4e3a \u7d22\u5f15 \uff0c \u4ee3\u7801 \u4e3a \u5217\u540d   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3871   3872   3873   3874   3875   3876   3877   3878   3879   3880   3881   3882   3883   3884   3885   3886   3887   3888   3889   3890   3891   3892   3893   def   set _ factors _ df _ wide   (   self   ,   df   :   pd   .   DataFrame   ,   other _ factors   :   dict   =   None   ) :   \" \" \" \u4f20\u5165 \u56e0\u5b50 \u6570\u636e \uff0c \u65f6\u95f4 \u4e3a \u7d22\u5f15 \uff0c \u4ee3\u7801 \u4e3a \u5217\u540d \" \" \"   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   self   .   __ corr   =   [   df   .   corrwith   (   i   ,   axis   =   1   )   .   mean   ( )   for   i   in   list   (   self   .   barras   .   values   ( ) )   ]   self   .   __ corr   =   (   pd   .   Series   (   self   .   __ corr   ,   index   =   [   self   .   rename _ dict   [   i   ]   for   i   in   self   .   barras   .   keys   ( ) ]   )   .   to _ frame   (   \" \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   )   .   T   )   self   .   __ corr   =   self   .   __ corr   [   self   .   sort _ names   ]   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factors   =   df   self   .   corr _ pri   =   pd   .   merge   (   df   ,   self   .   barras _ together   ,   on   =   [   \" date \"   ,   \" code \"   ] )   .   dropna   ( )   if   other _ factors   is   not   None   :   other _ factors   =   merge _ many   (   list   (   other _ factors   .   values   ( ) ) ,   list   (   other _ factors   .   keys   ( ) ) ,   how   =   \" inner \"   )   self   .   corr _ pri   =   pd   .   merge   (   self   .   corr _ pri   ,   other _ factors   ,   on   =   [   \" date \"   ,   \" code \"   ] )   pure _ fall   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2963   2964   2965   2966   2967   2968   2969   2970   2971   2972   2973   2974   2975   2976   2977   2978   2979   2980   2981   2982   2983   2984   2985   2986   2987   2988   2989   2990   2991   2992   2993   2994   2995   2996   2997   2998   2999   3000   3001   3002   3003   3004   3005   3006   3007   3008   3009   3010   3011   3012   3013   3014   class   pure _ fall   (   object   ) :   #   DONE \uff1a \u4fee\u6539 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u53ef\u4ee5 \u5e26 \u201c \u65e5\u9891 _ \u201c \uff0c \u4e5f \u53ef\u4ee5 \u4e0d\u5e26 \u201c \u65e5\u9891 _ \u201c   def   __ init __   (   self   ,   daily _ path   :   str   )   - >   None   :   \" \" \" \u4e00\u4e2a \u4f7f\u7528 mysql \u4e2d \u7684 \u5206\u949f \u6570\u636e \uff0c \u6765 \u66f4\u65b0 \u56e0\u5b50 \u503c \u7684 \u6846\u67b6   Parameters   ----------   daily _ path   :   str   \u65e5\u9891 \u56e0\u5b50 \u503c \u5b58\u50a8 \u6587\u4ef6 \u7684 \u540d\u5b57 \uff0c \u8bf7\u4ee5 ' . parquet ' \u7ed3\u5c3e   \" \" \"   self   .   homeplace   =   HomePlace   ( )   #   \u5c06 \u5206\u949f \u6570\u636e \u62fc\u6210 \u4e00\u5f20 \u65e5\u9891 \u56e0\u5b50 \u8868   self   .   daily _ factors   =   None   self   .   daily _ factors _ path   =   self   .   homeplace   .   factor _ data _ file   +   \" \u65e5\u9891 _ \"   +   daily _ path   def   __ call __   (   self   ,   monthly   =   False   ) :   \" \" \" \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868 \" \" \"   if   monthly   :   return   self   .   monthly _ factors   .   copy   ( )   else   :   try   :   return   self   .   daily _ factors   .   copy   ( )   except   Exception   :   return   self   .   monthly _ factors   .   copy   ( )   def   wide _ to _ long   (   self   ,   df   ,   i   ) :   \" \" \" \u5c06 \u5bbd \u6570\u636e \u8f6c\u5316 \u4e3a\u957f \u6570\u636e \uff0c \u7528\u4e8e \u56e0\u5b50 \u8868 \u8f6c\u5316 \u548c \u62fc\u63a5 \" \" \"   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   i   ]   df   =   df   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   return   df   def   de _ in _ group   (   self   ,   df   ,   help _ names   ) :   \" \" \" \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \uff0c \u5206\u522b \u505a \u56de\u5f52 \uff0c \u5254\u9664 \u76f8\u5173 \u56e0\u5b50 \" \" \"   ols _ order   =   \" fac ~ \"   +   \" + \"   .   join   (   help _ names   )   ols _ result   =   smf   .   ols   (   ols _ order   ,   data   =   df   )   .   fit   ( )   params   =   {   i   :   ols _ result   .   params   [   i   ]   for   i   in   help _ names   }   predict   =   [   params   [   i   ]   *   df   [   i   ]   for   i   in   help _ names   ]   predict   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   predict   )   df   .   fac   =   df   .   fac   -   predict   -   ols _ result   .   params   [   \" Intercept \"   ]   df   =   df   [ [   \" fac \"   ] ]   return   df   def   standardlize _ in _ cross _ section   (   self   ,   df   ) :   \" \" \"   \u5728 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u505a \u6807\u51c6 \u6807\u51c6\u5316   \u8f93\u5165 \u7684 df \u5e94\u4e3a \uff0c \u5217\u540d \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u662f \u65f6\u95f4   \" \" \"   df   =   df   .   T   df   =   (   df   -   df   .   mean   ( ) )   /   df   .   std   ( )   df   =   df   .   T   return   df   __ call __   (   monthly   =   False   )   \u00b6   \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2978   2979   2980   2981   2982   2983   2984   2985   2986   def   __ call __   (   self   ,   monthly   =   False   ) :   \" \" \" \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868 \" \" \"   if   monthly   :   return   self   .   monthly _ factors   .   copy   ( )   else   :   try   :   return   self   .   daily _ factors   .   copy   ( )   except   Exception   :   return   self   .   monthly _ factors   .   copy   ( )   __ init __   (   daily _ path   )   \u00b6   \u4e00\u4e2a \u4f7f\u7528 mysql \u4e2d \u7684 \u5206\u949f \u6570\u636e \uff0c \u6765 \u66f4\u65b0 \u56e0\u5b50 \u503c \u7684 \u6846\u67b6   Parameters   \u00b6   daily _ path   :   str   \u65e5\u9891 \u56e0\u5b50 \u503c \u5b58\u50a8 \u6587\u4ef6 \u7684 \u540d\u5b57 \uff0c \u8bf7\u4ee5 ' . parquet ' \u7ed3\u5c3e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2965   2966   2967   2968   2969   2970   2971   2972   2973   2974   2975   2976   def   __ init __   (   self   ,   daily _ path   :   str   )   - >   None   :   \" \" \" \u4e00\u4e2a \u4f7f\u7528 mysql \u4e2d \u7684 \u5206\u949f \u6570\u636e \uff0c \u6765 \u66f4\u65b0 \u56e0\u5b50 \u503c \u7684 \u6846\u67b6   Parameters   ----------   daily _ path   :   str   \u65e5\u9891 \u56e0\u5b50 \u503c \u5b58\u50a8 \u6587\u4ef6 \u7684 \u540d\u5b57 \uff0c \u8bf7\u4ee5 ' . parquet ' \u7ed3\u5c3e   \" \" \"   self   .   homeplace   =   HomePlace   ( )   #   \u5c06 \u5206\u949f \u6570\u636e \u62fc\u6210 \u4e00\u5f20 \u65e5\u9891 \u56e0\u5b50 \u8868   self   .   daily _ factors   =   None   self   .   daily _ factors _ path   =   self   .   homeplace   .   factor _ data _ file   +   \" \u65e5\u9891 _ \"   +   daily _ path   de _ in _ group   (   df   ,   help _ names   )   \u00b6   \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \uff0c \u5206\u522b \u505a \u56de\u5f52 \uff0c \u5254\u9664 \u76f8\u5173 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2995   2996   2997   2998   2999   3000   3001   3002   3003   3004   def   de _ in _ group   (   self   ,   df   ,   help _ names   ) :   \" \" \" \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \uff0c \u5206\u522b \u505a \u56de\u5f52 \uff0c \u5254\u9664 \u76f8\u5173 \u56e0\u5b50 \" \" \"   ols _ order   =   \" fac ~ \"   +   \" + \"   .   join   (   help _ names   )   ols _ result   =   smf   .   ols   (   ols _ order   ,   data   =   df   )   .   fit   ( )   params   =   {   i   :   ols _ result   .   params   [   i   ]   for   i   in   help _ names   }   predict   =   [   params   [   i   ]   *   df   [   i   ]   for   i   in   help _ names   ]   predict   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   predict   )   df   .   fac   =   df   .   fac   -   predict   -   ols _ result   .   params   [   \" Intercept \"   ]   df   =   df   [ [   \" fac \"   ] ]   return   df   standardlize _ in _ cross _ section   (   df   )   \u00b6   \u5728 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u505a \u6807\u51c6 \u6807\u51c6\u5316   \u8f93\u5165 \u7684 df \u5e94\u4e3a \uff0c \u5217\u540d \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u662f \u65f6\u95f4   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3006   3007   3008   3009   3010   3011   3012   3013   3014   def   standardlize _ in _ cross _ section   (   self   ,   df   ) :   \" \" \"   \u5728 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u505a \u6807\u51c6 \u6807\u51c6\u5316   \u8f93\u5165 \u7684 df \u5e94\u4e3a \uff0c \u5217\u540d \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u662f \u65f6\u95f4   \" \" \"   df   =   df   .   T   df   =   (   df   -   df   .   mean   ( ) )   /   df   .   std   ( )   df   =   df   .   T   return   df   wide _ to _ long   (   df   ,   i   )   \u00b6   \u5c06 \u5bbd \u6570\u636e \u8f6c\u5316 \u4e3a\u957f \u6570\u636e \uff0c \u7528\u4e8e \u56e0\u5b50 \u8868 \u8f6c\u5316 \u548c \u62fc\u63a5   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2988   2989   2990   2991   2992   2993   def   wide _ to _ long   (   self   ,   df   ,   i   ) :   \" \" \" \u5c06 \u5bbd \u6570\u636e \u8f6c\u5316 \u4e3a\u957f \u6570\u636e \uff0c \u7528\u4e8e \u56e0\u5b50 \u8868 \u8f6c\u5316 \u548c \u62fc\u63a5 \" \" \"   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   i   ]   df   =   df   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   return   df   pure _ fall _ frequent   \u00b6   Bases :   object   \u5bf9\u5355 \u53ea \u80a1\u7968 \u5355\u65e5 \u8fdb\u884c \u64cd\u4f5c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3154   3155   3156   3157   3158   3159   3160   3161   3162   3163   3164   3165   3166   3167   3168   3169   3170   3171   3172   3173   3174   3175   3176   3177   3178   3179   3180   3181   3182   3183   3184   3185   3186   3187   3188   3189   3190   3191   3192   3193   3194   3195   3196   3197   3198   3199   3200   3201   3202   3203   3204   3205   3206   3207   3208   3209   3210   3211   3212   3213   3214   3215   3216   3217   3218   3219   3220   3221   3222   3223   3224   3225   3226   3227   3228   3229   3230   3231   3232   3233   3234   3235   3236   3237   3238   3239   3240   3241   3242   3243   3244   3245   3246   3247   3248   3249   3250   3251   3252   3253   3254   3255   3256   3257   3258   3259   3260   3261   3262   3263   3264   3265   3266   3267   3268   3269   3270   3271   3272   3273   3274   3275   3276   3277   3278   3279   3280   3281   3282   3283   3284   3285   3286   3287   3288   3289   3290   3291   3292   3293   3294   3295   3296   3297   3298   3299   3300   3301   3302   3303   3304   3305   3306   3307   3308   3309   3310   3311   3312   3313   3314   3315   3316   3317   3318   3319   3320   3321   3322   3323   3324   3325   3326   3327   3328   3329   3330   3331   3332   3333   3334   3335   3336   3337   3338   3339   3340   3341   3342   3343   3344   3345   3346   3347   3348   3349   3350   3351   3352   3353   3354   3355   3356   3357   3358   3359   3360   3361   3362   3363   3364   3365   3366   3367   3368   3369   3370   3371   3372   3373   3374   3375   3376   3377   3378   3379   3380   3381   3382   3383   3384   3385   3386   3387   3388   3389   3390   3391   3392   3393   3394   3395   3396   3397   3398   3399   3400   3401   3402   3403   3404   3405   3406   3407   3408   3409   3410   3411   3412   3413   3414   3415   3416   3417   3418   3419   3420   3421   3422   3423   3424   3425   3426   3427   3428   3429   3430   3431   3432   3433   3434   3435   3436   3437   3438   3439   3440   3441   3442   3443   3444   3445   3446   3447   3448   3449   3450   3451   3452   3453   3454   3455   3456   3457   3458   3459   3460   3461   3462   3463   3464   3465   3466   3467   3468   3469   3470   3471   3472   3473   3474   3475   3476   3477   3478   3479   3480   3481   3482   3483   3484   3485   3486   3487   3488   3489   3490   3491   3492   3493   3494   3495   3496   3497   3498   3499   3500   3501   3502   3503   3504   3505   3506   3507   3508   3509   3510   3511   3512   3513   3514   3515   3516   3517   3518   3519   3520   3521   3522   3523   3524   3525   3526   3527   3528   3529   3530   3531   3532   3533   3534   3535   3536   3537   3538   3539   3540   3541   3542   3543   3544   3545   3546   3547   3548   3549   3550   3551   3552   3553   3554   3555   3556   3557   3558   3559   3560   3561   3562   3563   3564   3565   3566   3567   3568   3569   3570   3571   3572   3573   3574   3575   3576   3577   3578   3579   3580   3581   3582   3583   3584   3585   3586   3587   3588   3589   3590   3591   3592   3593   3594   3595   3596   3597   3598   3599   3600   3601   3602   3603   3604   3605   3606   3607   3608   3609   3610   3611   3612   3613   3614   3615   3616   3617   3618   3619   3620   3621   3622   3623   3624   3625   3626   3627   3628   3629   3630   3631   3632   3633   3634   3635   3636   3637   3638   3639   3640   3641   3642   3643   3644   3645   3646   3647   3648   3649   3650   3651   3652   3653   3654   3655   3656   3657   3658   3659   3660   3661   3662   3663   3664   3665   3666   3667   3668   3669   3670   3671   3672   3673   3674   3675   3676   3677   3678   3679   3680   3681   3682   3683   3684   3685   3686   3687   3688   3689   3690   3691   3692   3693   3694   3695   3696   3697   3698   3699   3700   3701   3702   3703   3704   3705   3706   3707   3708   3709   3710   3711   3712   3713   3714   3715   3716   3717   3718   3719   3720   3721   3722   3723   3724   3725   3726   3727   3728   3729   3730   3731   3732   3733   3734   3735   3736   3737   3738   3739   3740   3741   3742   3743   3744   3745   3746   3747   class   pure _ fall _ frequent   (   object   ) :   \" \" \" \u5bf9\u5355 \u53ea \u80a1\u7968 \u5355\u65e5 \u8fdb\u884c \u64cd\u4f5c \" \" \"   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   kind   :   str   =   \" stock \"   ,   clickhouse   :   bool   =   0   ,   questdb   :   bool   =   0   ,   questdb _ web _ port   :   str   =   \" 9001 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ target   :   list   =   [   \" date \"   ,   \" code \"   ] ,   )   - >   None   :   \" \" \" \u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   kind   :   str ,   optional   \u7c7b\u578b \u4e3a \u80a1\u7968 \u8fd8\u662f \u6307\u6570 \uff0c \u6307\u6570 \u4e3a ' index ' ,   by   default   \" stock \"   clickhouse   :   bool ,   optional   \u4f7f\u7528 clickhouse \u4f5c\u4e3a \u6570\u636e \u6570\u636e\u6e90 \uff0c \u5982\u679c postgresql \u4e0e \u672c \u53c2\u6570 \u90fd \u4e3a 0 \uff0c \u5c06 \u4f9d\u7136 \u4ece clickhouse \u4e2d \u8bfb\u53d6 ,   by   default   0   questdb   :   bool ,   optional   \u4f7f\u7528 questdb \u4f5c\u4e3a \u6570\u636e \u6570\u636e\u6e90 ,   by   default   0   questdb _ web _ port   :   str ,   optional   questdb \u7684 web _ port ,   by   default   ' 9001 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e \uff0c \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \u65f6 \uff0c \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u51fd\u6570 \u7684 \u90e8\u5206 \uff0c \u5982\u679c \u6307\u5b9a \u6309\u7167 [ ' date ' ] \u5206\u7ec4 groupby \u8ba1\u7b97 \uff0c   \u5219 \u8fd4\u56de \u65f6 \uff0c \u5e94\u5f53 \u8fd4\u56de \u4e00\u4e2a \u4e24\u5217 \u7684 dataframe \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7b2c\u4e8c \u5217\u4e3a \u4e3a \u56e0\u5b50 \u503c ,   by   default   [ ' date ' , ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   kind   =   kind   self   .   groupby _ target   =   groupby _ target   if   clickhouse   = =   0   and   questdb   = =   0   :   clickhouse   =   1   self   .   clickhouse   =   clickhouse   self   .   questdb   =   questdb   self   .   questdb _ web _ port   =   questdb _ web _ port   if   clickhouse   = =   1   :   #   \u8fde\u63a5 clickhouse   self   .   chc   =   ClickHouseClient   (   \" minute _ data \"   )   elif   questdb   = =   1   :   self   .   chc   =   Questdb   (   host   =   questdb _ host   ,   web _ port   =   questdb _ web _ port   )   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   ,   web _ port   =   questdb _ web _ port   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   self   .   chc   .   show _ all _ dates   (   f   \" minute _ data _   {   kind   }   \"   )   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   def   forward _ dates   (   self   ,   dates   ,   many _ days   ) :   dates _ index   =   [   self   .   dates _ all   .   index   (   i   )   for   i   in   dates   ]   def   value   (   x   ,   a   ) :   if   x   > =   0   :   return   a   [   x   ]   else   :   return   None   return   [   value   (   i   -   many _ days   ,   self   .   dates _ all   )   for   i   in   dates _ index   ]   def   select _ one _ calculate   (   self   ,   date   :   pd   .   Timestamp   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   show _ time   :   bool   =   0   ,   )   - >   None   :   the _ func   =   partial   (   func   )   if   not   isinstance   (   date   ,   int   ) :   date   =   int   (   datetime   .   datetime   .   strftime   (   date   ,   \" % Y% m   % d   \"   ) )   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date =   {   date   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   (   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   date = '   {   date   }   ' \"   )   if   show _ time   :   df   =   self   .   chc   .   get _ data _ show _ time   (   sql _ order   )   else   :   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   df   =   df   .   groupby   (   self   .   groupby _ target   )   .   apply   (   the _ func   )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ] :   df   =   df   .   to _ frame   (   \" fac \"   )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   df   =   df   .   reset _ index   ( )   if   (   df   is   not   None   )   and   (   df   .   shape   [   0   ]   >   0   ) :   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   def   select _ many _ calculate   (   self   ,   dates   :   List   [   pd   .   Timestamp   ] ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   use _ mpire   :   bool   =   0   ,   )   - >   None   :   the _ func   =   partial   (   func   )   factor _ new   =   [ ]   dates   =   [   int   (   datetime   .   datetime   .   strftime   (   i   ,   \" % Y% m   % d   \"   ) )   for   i   in   dates   ]   if   many _ days   = =   1   :   #   \u5c06 \u9700\u8981 \u66f4\u65b0 \u7684 \u65e5\u5b50 \u5206\u5757 \uff0c \u6bcf 200 \u5929 \u4e00\u7ec4 \uff0c \u4e00\u8d77 \u8fd0\u7b97   dates _ new _ len   =   len   (   dates   )   cut _ points   =   list   (   range   (   0   ,   dates _ new _ len   ,   chunksize   ) )   +   [   dates _ new _ len   -   1   ]   if   cut _ points   [   -   1   ]   = =   cut _ points   [   -   2   ] :   cut _ points   =   cut _ points   [ :   -   1   ]   cuts   =   tuple   (   zip   (   cut _ points   [ :   -   many _ days   ] ,   cut _ points   [   many _ days   : ] ) )   df _ first   =   self   .   select _ one _ calculate   (   date   =   dates   [   0   ] ,   func   =   func   ,   fields   =   fields   ,   show _ time   =   show _ time   ,   )   factor _ new   .   append   (   df _ first   )   def   cal _ one   (   date1   ,   date2   ) :   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date >   {   dates   [   date1   ]   *   100   }   and   date < =   {   dates   [   date2   ]   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   cast ( date   as   int ) >   {   dates   [   date1   ]   }   and   cast ( date   as   int ) < =   {   dates   [   date2   ]   }   order   by   code , date , num \"   if   show _ time   :   df   =   self   .   chc   .   get _ data _ show _ time   (   sql _ order   )   else   :   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   df   =   df   .   groupby   (   self   .   groupby _ target   )   .   apply   (   the _ func   )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ] :   df   =   df   .   to _ frame   (   \" fac \"   )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   df   =   df   .   reset _ index   ( )   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   if   n _ jobs   >   1   :   if   use _ mpire   :   with   WorkerPool   (   n _ jobs   =   n _ jobs   )   as   pool   :   factor _ new _ more   =   pool   .   map   (   cal _ one   ,   cut _ points   [ :   -   many _ days   ] ,   cut _ points   [   many _ days   : ] ,   progress _ bar   =   True   ,   )   else   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   factor _ new _ more   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   cal _ one   ,   cut _ points   [ :   -   many _ days   ] ,   cut _ points   [   many _ days   : ] ,   ) ,   total   =   len   (   cut _ points   [   many _ days   : ] ) ,   )   )   factor _ new   =   factor _ new   +   factor _ new _ more   else   :   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   for   date1   ,   date2   in   tqdm   .   auto   .   tqdm   (   cuts   ,   desc   =   \" \u4e0d\u77e5 \u4e58\u6708 \u51e0\u4eba \u5f52 \uff0c \u843d\u6708 \u6447\u60c5 \u6ee1\u6c5f \u6811 \u3002 \"   ) :   df   =   cal _ one   (   date1   ,   date2   )   factor _ new   .   append   (   df   )   else   :   def   cal _ two   (   date1   ,   date2   ) :   if   date1   is   not   None   :   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date >   {   date1   *   100   }   and   date < =   {   date2   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   cast ( date   as   int ) >   {   date1   }   and   cast ( date   as   int ) < =   {   date2   }   order   by   code , date , num \"   if   show _ time   :   df   =   self   .   chc   .   get _ data _ show _ time   (   sql _ order   )   else   :   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ,   ]   or   self   .   groupby _ target   = =   [   \" code \"   ] :   df   =   df   .   groupby   ( [   \" code \"   ] )   .   apply   (   the _ func   )   .   reset _ index   ( )   else   :   df   =   the _ func   (   df   )   df   =   df   .   assign   (   date   =   date2   )   df   .   columns   =   [   \" code \"   ,   \" fac \"   ,   \" date \"   ]   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   pairs   =   self   .   forward _ dates   (   dates   ,   many _ days   =   many _ days   )   cuts2   =   tuple   (   zip   (   pairs   ,   dates   ) )   if   n _ jobs   >   1   :   if   use _ mpire   :   with   WorkerPool   (   n _ jobs   =   n _ jobs   )   as   pool   :   factor _ new _ more   =   pool   .   map   (   cal _ two   ,   pairs   ,   dates   ,   progress _ bar   =   True   )   else   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   factor _ new _ more   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   cal _ two   ,   pairs   ,   dates   ) ,   total   =   len   (   pairs   ) ,   )   )   factor _ new   =   factor _ new   +   factor _ new _ more   else   :   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   for   date1   ,   date2   in   tqdm   .   auto   .   tqdm   (   cuts2   ,   desc   =   \" \u77e5 \u4e0d\u53ef \u4e4e \u9aa4\u5f97 \uff0c \u6258 \u9057\u54cd \u4e8e \u60b2\u98ce \u3002 \"   ) :   df   =   cal _ two   (   date1   ,   date2   )   factor _ new   .   append   (   df   )   if   len   (   factor _ new   )   >   0   :   factor _ new   =   pd   .   concat   (   factor _ new   )   return   factor _ new   else   :   return   None   def   select _ any _ calculate   (   self   ,   dates   :   List   [   pd   .   Timestamp   ] ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   use _ mpire   :   bool   =   0   ,   )   - >   None   :   if   len   (   dates   )   = =   1   and   many _ days   = =   1   :   res   =   self   .   select _ one _ calculate   (   dates   [   0   ] ,   func   =   func   ,   fields   =   fields   ,   show _ time   =   show _ time   ,   )   else   :   res   =   self   .   select _ many _ calculate   (   dates   =   dates   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   use _ mpire   =   use _ mpire   ,   )   if   res   is   not   None   :   self   .   factor _ new   .   append   (   res   )   return   res   @ staticmethod   def   for _ cross _ via _ str   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   ` ` ` python   return   [ [ 0.11 , 0.24 , 0.55 ] , [ 2.59 , 1.99 , 0.43 ] , [ 1.32 , 8.88 , 7.77 ] \u2026 \u2026 ]   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   codes   =   sorted   (   list   (   set   (   df   .   code   ) ) )   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   [   0   ] ,   list   ) :   kind   =   1   res   =   [   \" , \"   .   join   (   i   )   for   i   in   res   ]   else   :   kind   =   0   df   =   pd   .   DataFrame   ( {   \" code \"   :   codes   ,   \" fac \"   :   res   } )   if   kind   :   df   .   fac   =   df   .   fac   .   apply   (   lambda   x   :   [   float   (   i   )   for   i   in   x   .   split   (   \" , \"   ) ] )   return   df   return   full _ run   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   res   =   res   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   isinstance   (   res   ,   pd   .   DataFrame   ) :   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   res   is   None   :   ...   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   return   full _ run   def   get _ daily _ factors _ one   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   use _ mpire   :   bool   =   0   ,   ) :   if   len   (   self   .   dates _ new   )   >   0   :   for   interval   in   self   .   dates _ new _ intervals   :   df   =   self   .   select _ any _ calculate   (   dates   =   interval   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   use _ mpire   =   use _ mpire   ,   )   if   len   (   self   .   factor _ new   )   >   0   :   self   .   factor _ new   =   pd   .   concat   (   self   .   factor _ new   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   self   .   factor   =   pd   .   concat   ( [   self   .   factor _ old   ,   self   .   factor _ new   ] )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   logger   .   info   (   f   \" \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5b8c \u4e86 \"   )   #   \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u7684 \u4e2d\u9014 \u5907\u4efd \u6570\u636e   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   info   (   \" \u5907\u4efd \u5728 questdb \u7684 \u8868\u683c \u5df2 \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   \" \u5220\u9664 questdb \u4e2d \u8868\u683c \u65f6 \uff0c \u5b58\u5728 \u67d0\u4e2a \u672a\u77e5 \u9519\u8bef \uff0c \u8bf7 \u5f53\u5fc3 \"   )   else   :   logger   .   warning   (   \" \u7531\u4e8e \u67d0\u79cd \u539f\u56e0 \u67d0\u79cd\u539f\u56e0 \uff0c \u66f4\u65b0 \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5931\u8d25 \uff0c \u5efa\u8bae \u68c0\u67e5 \ud83e\udd12 \"   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   self   .   factor   =   pd   .   concat   ( [   self   .   factor _ old   ] )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   else   :   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor _ old   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5f53\u524d \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u5206\u949f \u6570\u636e \u5904\u7406 \u6570\u636e\u5904\u7406 \u5b8c \u5566 \uff5e \ud83c\udf88 \"   )   def   get _ daily _ factors _ two   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   ) :   self   .   get _ daily _ factors _ one   (   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   fields   :   str ,   optional   \u80a1\u7968 \u6570\u636e \u6d89\u53ca \u5230 \u54ea\u4e9b \u5b57 \u6bb5 \uff0c \u6392\u9664 \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u5b57 \u6bb5 \uff0c \u53ef\u4ee5 \u8282\u7ea6 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u7684 \u65f6\u95f4 \uff0c \u5f62 \u5982 ' date , code , num , close , amount , open '   \u63d0\u53d6 \u51fa \u7684 \u6570\u636e \uff0c \u81ea\u52a8 \u6309\u7167 code , date , num \u6392\u5e8f \uff0c \u56e0\u6b64 code , date , num \u662f \u4e0d\u53ef \u5fc5\u4e0d\u53ef\u5c11 \u7684 \u5b57 \u6bb5 ,   by   default   \" * \"   chunksize   :   int ,   optional   \u6bcf\u6b21 \u8bfb\u53d6 \u7684 \u622a\u9762 \u4e0a \u7684 \u5929\u6570 ,   by   default   10   show _ time   :   bool ,   optional   \u5c55\u793a \u6bcf\u6b21 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6240 \u9700\u8981 \u7684 \u65f6\u95f4 ,   by   default   0   many _ days   :   int ,   optional   \u8ba1\u7b97 \u67d0\u5929 \u7684 \u56e0\u5b50 \u503c\u65f6 \uff0c \u9700\u8981 \u4f7f\u7528 \u4e4b\u524d \u591a\u5c11 \u5929 \u7684 \u6570\u636e   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   \" \" \"   try   :   self   .   get _ daily _ factors _ two   (   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   except   Exception   :   self   .   get _ daily _ factors _ one   (   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )   __ call __   ( )   \u00b6   \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   \u00b6   pd . DataFrame   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3308   3309   3310   3311   3312   3313   3314   3315   3316   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   __ init __   (   factor _ file   ,   project   =   None   ,   startdate   =   None   ,   enddate   =   None   ,   questdb _ host   =   ' 127.0 . 0.1 '   ,   kind   =   ' stock '   ,   clickhouse   =   0   ,   questdb   =   0   ,   questdb _ web _ port   =   ' 9001 '   ,   ignore _ history _ in _ questdb   =   0   ,   groupby _ target   =   [   ' date '   ,   ' code '   ] )   \u00b6   \u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   \u00b6   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   kind   :   str ,   optional   \u7c7b\u578b \u4e3a \u80a1\u7968 \u8fd8\u662f \u6307\u6570 \uff0c \u6307\u6570 \u4e3a ' index ' ,   by   default   \" stock \"   clickhouse   :   bool ,   optional   \u4f7f\u7528 clickhouse \u4f5c\u4e3a \u6570\u636e \u6570\u636e\u6e90 \uff0c \u5982\u679c postgresql \u4e0e \u672c \u53c2\u6570 \u90fd \u4e3a 0 \uff0c \u5c06 \u4f9d\u7136 \u4ece clickhouse \u4e2d \u8bfb\u53d6 ,   by   default   0   questdb   :   bool ,   optional   \u4f7f\u7528 questdb \u4f5c\u4e3a \u6570\u636e \u6570\u636e\u6e90 ,   by   default   0   questdb _ web _ port   :   str ,   optional   questdb \u7684 web _ port ,   by   default   ' 9001 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e \uff0c \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \u65f6 \uff0c \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u51fd\u6570 \u7684 \u90e8\u5206 \uff0c \u5982\u679c \u6307\u5b9a \u6309\u7167 [ ' date ' ] \u5206\u7ec4 groupby \u8ba1\u7b97 \uff0c   \u5219 \u8fd4\u56de \u65f6 \uff0c \u5e94\u5f53 \u8fd4\u56de \u4e00\u4e2a \u4e24\u5217 \u7684 dataframe \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7b2c\u4e8c \u5217\u4e3a \u4e3a \u56e0\u5b50 \u503c ,   by   default   [ ' date ' , ' code ' ]   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3157   3158   3159   3160   3161   3162   3163   3164   3165   3166   3167   3168   3169   3170   3171   3172   3173   3174   3175   3176   3177   3178   3179   3180   3181   3182   3183   3184   3185   3186   3187   3188   3189   3190   3191   3192   3193   3194   3195   3196   3197   3198   3199   3200   3201   3202   3203   3204   3205   3206   3207   3208   3209   3210   3211   3212   3213   3214   3215   3216   3217   3218   3219   3220   3221   3222   3223   3224   3225   3226   3227   3228   3229   3230   3231   3232   3233   3234   3235   3236   3237   3238   3239   3240   3241   3242   3243   3244   3245   3246   3247   3248   3249   3250   3251   3252   3253   3254   3255   3256   3257   3258   3259   3260   3261   3262   3263   3264   3265   3266   3267   3268   3269   3270   3271   3272   3273   3274   3275   3276   3277   3278   3279   3280   3281   3282   3283   3284   3285   3286   3287   3288   3289   3290   3291   3292   3293   3294   3295   3296   3297   3298   3299   3300   3301   3302   3303   3304   3305   3306   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   kind   :   str   =   \" stock \"   ,   clickhouse   :   bool   =   0   ,   questdb   :   bool   =   0   ,   questdb _ web _ port   :   str   =   \" 9001 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ target   :   list   =   [   \" date \"   ,   \" code \"   ] ,   )   - >   None   :   \" \" \" \u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   kind   :   str ,   optional   \u7c7b\u578b \u4e3a \u80a1\u7968 \u8fd8\u662f \u6307\u6570 \uff0c \u6307\u6570 \u4e3a ' index ' ,   by   default   \" stock \"   clickhouse   :   bool ,   optional   \u4f7f\u7528 clickhouse \u4f5c\u4e3a \u6570\u636e \u6570\u636e\u6e90 \uff0c \u5982\u679c postgresql \u4e0e \u672c \u53c2\u6570 \u90fd \u4e3a 0 \uff0c \u5c06 \u4f9d\u7136 \u4ece clickhouse \u4e2d \u8bfb\u53d6 ,   by   default   0   questdb   :   bool ,   optional   \u4f7f\u7528 questdb \u4f5c\u4e3a \u6570\u636e \u6570\u636e\u6e90 ,   by   default   0   questdb _ web _ port   :   str ,   optional   questdb \u7684 web _ port ,   by   default   ' 9001 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e \uff0c \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \u65f6 \uff0c \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u51fd\u6570 \u7684 \u90e8\u5206 \uff0c \u5982\u679c \u6307\u5b9a \u6309\u7167 [ ' date ' ] \u5206\u7ec4 groupby \u8ba1\u7b97 \uff0c   \u5219 \u8fd4\u56de \u65f6 \uff0c \u5e94\u5f53 \u8fd4\u56de \u4e00\u4e2a \u4e24\u5217 \u7684 dataframe \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7b2c\u4e8c \u5217\u4e3a \u4e3a \u56e0\u5b50 \u503c ,   by   default   [ ' date ' , ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   kind   =   kind   self   .   groupby _ target   =   groupby _ target   if   clickhouse   = =   0   and   questdb   = =   0   :   clickhouse   =   1   self   .   clickhouse   =   clickhouse   self   .   questdb   =   questdb   self   .   questdb _ web _ port   =   questdb _ web _ port   if   clickhouse   = =   1   :   #   \u8fde\u63a5 clickhouse   self   .   chc   =   ClickHouseClient   (   \" minute _ data \"   )   elif   questdb   = =   1   :   self   .   chc   =   Questdb   (   host   =   questdb _ host   ,   web _ port   =   questdb _ web _ port   )   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   ,   web _ port   =   questdb _ web _ port   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   self   .   chc   .   show _ all _ dates   (   f   \" minute _ data _   {   kind   }   \"   )   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   drop _ table   ( )   \u00b6   \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3741   3742   3743   3744   3745   3746   3747   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )   for _ cross _ via _ str   (   func   )   staticmethod   \u00b6   \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   Python   1   return   [ [   0.11   ,   0.24   ,   0.55   ] , [   2.59   ,   1.99   ,   0.43   ] , [   1.32   ,   8.88   ,   7.77   ]   \u2026 \u2026   ]   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3560   3561   3562   3563   3564   3565   3566   3567   3568   3569   3570   3571   3572   3573   3574   3575   3576   3577   3578   3579   3580   3581   3582   @ staticmethod   def   for _ cross _ via _ str   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   ` ` ` python   return   [ [ 0.11 , 0.24 , 0.55 ] , [ 2.59 , 1.99 , 0.43 ] , [ 1.32 , 8.88 , 7.77 ] \u2026 \u2026 ]   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   codes   =   sorted   (   list   (   set   (   df   .   code   ) ) )   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   [   0   ] ,   list   ) :   kind   =   1   res   =   [   \" , \"   .   join   (   i   )   for   i   in   res   ]   else   :   kind   =   0   df   =   pd   .   DataFrame   ( {   \" code \"   :   codes   ,   \" fac \"   :   res   } )   if   kind   :   df   .   fac   =   df   .   fac   .   apply   (   lambda   x   :   [   float   (   i   )   for   i   in   x   .   split   (   \" , \"   ) ] )   return   df   return   full _ run   for _ cross _ via _ zip   (   func   )   staticmethod   \u00b6   \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   Python   1   2   3   4   return   (   pd   .   Series   ( [   1.54   ,   8.77   ,   9.99   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   pd   .   Series   ( [   3.54   ,   6.98   ,   9.01   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   )   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3584   3585   3586   3587   3588   3589   3590   3591   3592   3593   3594   3595   3596   3597   3598   3599   3600   3601   3602   3603   3604   3605   3606   3607   3608   3609   3610   3611   3612   3613   3614   3615   3616   3617   3618   3619   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   res   =   res   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   isinstance   (   res   ,   pd   .   DataFrame   ) :   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   res   is   None   :   ...   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   return   full _ run   get _ daily _ factors   (   func   ,   fields   =   ' * '   ,   chunksize   =   10   ,   show _ time   =   0   ,   many _ days   =   1   ,   n _ jobs   =   1   )   \u00b6   \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   \u00b6   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   fields   :   str ,   optional   \u80a1\u7968 \u6570\u636e \u6d89\u53ca \u5230 \u54ea\u4e9b \u5b57 \u6bb5 \uff0c \u6392\u9664 \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u5b57 \u6bb5 \uff0c \u53ef\u4ee5 \u8282\u7ea6 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u7684 \u65f6\u95f4 \uff0c \u5f62 \u5982 ' date , code , num , close , amount , open '   \u63d0\u53d6 \u51fa \u7684 \u6570\u636e \uff0c \u81ea\u52a8 \u6309\u7167 code , date , num \u6392\u5e8f \uff0c \u56e0\u6b64 code , date , num \u662f \u4e0d\u53ef \u5fc5\u4e0d\u53ef\u5c11 \u7684 \u5b57 \u6bb5 ,   by   default   \" * \"   chunksize   :   int ,   optional   \u6bcf\u6b21 \u8bfb\u53d6 \u7684 \u622a\u9762 \u4e0a \u7684 \u5929\u6570 ,   by   default   10   show _ time   :   bool ,   optional   \u5c55\u793a \u6bcf\u6b21 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6240 \u9700\u8981 \u7684 \u65f6\u95f4 ,   by   default   0   many _ days   :   int ,   optional   \u8ba1\u7b97 \u67d0\u5929 \u7684 \u56e0\u5b50 \u503c\u65f6 \uff0c \u9700\u8981 \u4f7f\u7528 \u4e4b\u524d \u591a\u5c11 \u5929 \u7684 \u6570\u636e   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3694   3695   3696   3697   3698   3699   3700   3701   3702   3703   3704   3705   3706   3707   3708   3709   3710   3711   3712   3713   3714   3715   3716   3717   3718   3719   3720   3721   3722   3723   3724   3725   3726   3727   3728   3729   3730   3731   3732   3733   3734   3735   3736   3737   3738   3739   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   fields   :   str ,   optional   \u80a1\u7968 \u6570\u636e \u6d89\u53ca \u5230 \u54ea\u4e9b \u5b57 \u6bb5 \uff0c \u6392\u9664 \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u5b57 \u6bb5 \uff0c \u53ef\u4ee5 \u8282\u7ea6 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u7684 \u65f6\u95f4 \uff0c \u5f62 \u5982 ' date , code , num , close , amount , open '   \u63d0\u53d6 \u51fa \u7684 \u6570\u636e \uff0c \u81ea\u52a8 \u6309\u7167 code , date , num \u6392\u5e8f \uff0c \u56e0\u6b64 code , date , num \u662f \u4e0d\u53ef \u5fc5\u4e0d\u53ef\u5c11 \u7684 \u5b57 \u6bb5 ,   by   default   \" * \"   chunksize   :   int ,   optional   \u6bcf\u6b21 \u8bfb\u53d6 \u7684 \u622a\u9762 \u4e0a \u7684 \u5929\u6570 ,   by   default   10   show _ time   :   bool ,   optional   \u5c55\u793a \u6bcf\u6b21 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6240 \u9700\u8981 \u7684 \u65f6\u95f4 ,   by   default   0   many _ days   :   int ,   optional   \u8ba1\u7b97 \u67d0\u5929 \u7684 \u56e0\u5b50 \u503c\u65f6 \uff0c \u9700\u8981 \u4f7f\u7528 \u4e4b\u524d \u591a\u5c11 \u5929 \u7684 \u6570\u636e   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   \" \" \"   try   :   self   .   get _ daily _ factors _ two   (   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   except   Exception   :   self   .   get _ daily _ factors _ one   (   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   pure _ fall _ nature   \u00b6   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6525   6526   6527   6528   6529   6530   6531   6532   6533   6534   6535   6536   6537   6538   6539   6540   6541   6542   6543   6544   6545   6546   6547   6548   6549   6550   6551   6552   6553   6554   6555   6556   6557   6558   6559   6560   6561   6562   6563   6564   6565   6566   6567   6568   6569   6570   6571   6572   6573   6574   6575   6576   6577   6578   6579   6580   6581   6582   6583   6584   6585   6586   6587   6588   6589   6590   6591   6592   6593   6594   6595   6596   6597   6598   6599   6600   6601   6602   6603   6604   6605   6606   6607   6608   6609   6610   6611   6612   6613   6614   6615   6616   6617   6618   6619   6620   6621   6622   6623   6624   6625   6626   6627   6628   6629   6630   6631   6632   6633   6634   6635   6636   6637   6638   6639   6640   6641   6642   6643   6644   6645   6646   6647   6648   6649   6650   6651   6652   6653   6654   6655   6656   6657   6658   6659   6660   6661   6662   6663   6664   6665   6666   6667   6668   6669   6670   6671   6672   6673   6674   6675   6676   6677   6678   6679   6680   6681   6682   6683   6684   6685   6686   6687   6688   6689   6690   6691   6692   6693   6694   6695   6696   6697   6698   6699   6700   6701   6702   6703   6704   6705   6706   6707   6708   6709   6710   6711   6712   6713   6714   6715   6716   6717   6718   6719   6720   6721   6722   6723   6724   6725   6726   6727   6728   6729   6730   6731   6732   6733   6734   6735   6736   6737   6738   6739   6740   6741   6742   6743   6744   6745   6746   6747   6748   6749   6750   6751   6752   6753   6754   6755   6756   6757   6758   6759   6760   6761   6762   6763   6764   6765   6766   6767   6768   6769   6770   6771   6772   6773   6774   6775   6776   6777   6778   6779   6780   6781   6782   6783   6784   6785   6786   6787   6788   6789   6790   6791   6792   6793   6794   6795   6796   6797   6798   6799   6800   6801   6802   6803   6804   6805   6806   6807   6808   6809   6810   6811   6812   6813   6814   6815   6816   6817   6818   6819   6820   6821   6822   6823   6824   6825   6826   6827   6828   6829   6830   6831   6832   6833   6834   6835   6836   6837   6838   6839   6840   6841   6842   6843   6844   6845   6846   6847   6848   6849   6850   6851   6852   6853   6854   6855   6856   6857   6858   6859   6860   6861   6862   6863   6864   6865   6866   6867   6868   6869   6870   6871   6872   6873   6874   6875   6876   6877   6878   6879   6880   6881   6882   6883   6884   6885   6886   6887   6888   6889   6890   6891   6892   6893   6894   6895   6896   6897   6898   6899   6900   6901   6902   6903   6904   6905   6906   6907   6908   6909   6910   6911   6912   6913   6914   6915   6916   6917   6918   6919   6920   6921   6922   6923   6924   6925   6926   6927   6928   6929   6930   6931   6932   6933   6934   6935   6936   6937   6938   6939   6940   6941   6942   6943   6944   6945   6946   6947   6948   6949   class   pure _ fall _ nature   :   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ code   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u57fa\u4e8e \u80a1\u7968 \u9010\u7b14 \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e ,   by   default   [ ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   groupby _ code   =   groupby _ code   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   os   .   listdir   (   homeplace   .   tick _ by _ tick _ data   )   dates _ all   =   [   i   .   split   (   \" . \"   ) [   0   ]   for   i   in   dates _ all   if   i   .   endswith   (   \" . parquet \"   ) ]   dates _ all   =   [   i   .   replace   (   \" - \"   ,   \" \"   )   for   i   in   dates _ all   ]   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   if   \" 20 \"   if   i   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   self   .   age   =   read _ daily   (   age   =   1   )   self   .   state   =   read _ daily   (   state   =   1   )   self   .   closes _ unadj   =   read _ daily   (   close   =   1   ,   unadjust   =   1   )   .   shift   (   1   )   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   def   select _ one _ calculate   (   self   ,   date   :   pd   .   Timestamp   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   resample _ frequency   :   str   =   None   ,   opens _ in   :   bool   =   0   ,   highs _ in   :   bool   =   0   ,   lows _ in   :   bool   =   0   ,   amounts _ in   :   bool   =   0   ,   merge _ them   :   bool   =   0   ,   )   - >   None   :   the _ func   =   partial   (   func   )   if   not   isinstance   (   date   ,   int   ) :   date   =   int   (   datetime   .   datetime   .   strftime   (   date   ,   \" % Y% m   % d   \"   ) )   parquet _ name   =   (   homeplace   .   tick _ by _ tick _ data   +   str   (   date   ) [ :   4   ]   +   \" - \"   +   str   (   date   ) [   4   :   6   ]   +   \" - \"   +   str   (   date   ) [   6   : ]   +   \" . parquet \"   )   if   resample _ frequency   is   not   None   :   fields   =   \" date , code , price , amount \"   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   cursor   =   duckdb   .   connect   ( )   df   =   (   cursor   .   execute   (   f   \" select   {   fields   }   from   '   {   parquet _ name   }   ' ; \"   )   .   arrow   ( )   .   to _ pandas   ( )   )   date   =   df   .   date   .   iloc   [   0   ]   date0   =   pd   .   Timestamp   (   year   =   date   .   year   ,   month   =   date   .   month   ,   day   =   date   .   day   )   age _ here   =   self   .   age   .   loc   [   pd   .   Timestamp   (   pd   .   Timestamp   (   df   .   date   .   iloc   [   0   ] )   .   date   ( ) ) ]   age _ here   =   age _ here   .   where   (   age _ here   >   180   ,   np   .   nan   )   .   dropna   ( )   state _ here   =   self   .   state   .   loc   [   pd   .   Timestamp   (   pd   .   Timestamp   (   df   .   date   .   iloc   [   0   ] )   .   date   ( ) ) ]   state _ here   =   state _ here   .   where   (   state _ here   >   0   ,   np   .   nan   )   .   dropna   ( )   df   =   df   [   df   .   code   .   isin   (   age _ here   .   index   ) ]   df   =   df   [   df   .   code   .   isin   (   state _ here   .   index   ) ]   if   resample _ frequency   is   not   None   :   date   =   df   .   date   .   iloc   [   0   ]   date0   =   pd   .   Timestamp   (   year   =   date   .   year   ,   month   =   date   .   month   ,   day   =   date   .   day   )   head   =   self   .   closes _ unadj   .   loc   [   date0   ]   .   to _ frame   (   \" head _ temp \"   )   .   T   df   =   df   [   df   .   code   .   isin   (   head   .   columns   ) ]   price   =   df   .   drop _ duplicates   (   subset   =   [   \" code \"   ,   \" date \"   ] ,   keep   =   \" last \"   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" price \"   )   closes   =   price   .   resample   (   resample _ frequency   )   .   last   ( )   head   =   head   [ [   i   for   i   in   head   .   columns   if   i   in   closes   .   columns   ] ]   price   =   pd   .   concat   ( [   head   ,   closes   ] )   closes   =   closes   .   ffill   ( )   .   iloc   [   1   : ,   : ]   self   .   closes   =   closes   names   =   [ ]   if   opens _ in   :   price   =   df   .   drop _ duplicates   (   subset   =   [   \" code \"   ,   \" date \"   ] ,   keep   =   \" first \"   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" price \"   )   opens   =   price   .   resample   (   resample _ frequency   )   .   first   ( )   opens   =   np   .   isnan   (   opens   )   .   replace   (   True   ,   1   )   .   replace   (   False   ,   0   )   *   closes   .   shift   (   1   )   +   opens   .   fillna   (   0   )   self   .   opens   =   opens   names   .   append   (   \" open \"   )   else   :   self   .   opens   =   None   if   highs _ in   :   price   =   (   df   .   sort _ values   ( [   \" code \"   ,   \" date \"   ,   \" price \"   ] )   .   drop _ duplicates   (   subset   =   [   \" code \"   ,   \" date \"   ] ,   keep   =   \" last \"   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" price \"   )   )   highs   =   price   .   resample   (   resample _ frequency   )   .   max   ( )   highs   =   np   .   isnan   (   highs   )   .   replace   (   True   ,   1   )   .   replace   (   False   ,   0   )   *   closes   .   shift   (   1   )   +   highs   .   fillna   (   0   )   self   .   highs   =   highs   names   .   append   (   \" high \"   )   else   :   self   .   highs   =   None   if   lows _ in   :   price   =   (   df   .   sort _ values   ( [   \" code \"   ,   \" date \"   ,   \" price \"   ] )   .   drop _ duplicates   (   subset   =   [   \" code \"   ,   \" date \"   ] ,   keep   =   \" first \"   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" price \"   )   )   lows   =   price   .   resample   (   resample _ frequency   )   .   min   ( )   lows   =   np   .   isnan   (   lows   )   .   replace   (   True   ,   1   )   .   replace   (   False   ,   0   )   *   closes   .   shift   (   1   )   +   lows   .   fillna   (   0   )   self   .   lows   =   lows   names   .   append   (   \" low \"   )   else   :   self   .   low   =   None   names   .   append   (   \" close \"   )   if   amounts _ in   :   amounts   =   df   .   groupby   ( [   \" code \"   ,   \" date \"   ] )   .   amount   .   sum   ( )   .   reset _ index   ( )   amounts   =   amounts   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" amount \"   )   amounts   =   amounts   .   resample   (   resample _ frequency   )   .   sum   ( )   .   fillna   (   0   )   self   .   amounts   =   amounts   names   .   append   (   \" amount \"   )   else   :   self   .   amounts   =   None   if   merge _ them   :   self   .   data   =   merge _ many   (   [   i   for   i   in   [   self   .   opens   ,   self   .   highs   ,   self   .   lows   ,   self   .   closes   ,   self   .   amounts   ,   ]   if   i   is   not   None   ] ,   names   ,   )   if   self   .   groupby _ code   :   df   =   df   .   groupby   ( [   \" code \"   ] )   .   apply   (   the _ func   )   else   :   df   =   the _ func   (   df   )   if   isinstance   (   df   ,   pd   .   DataFrame   ) :   df   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   df   .   columns   ) ) ]   df   =   df   .   assign   (   fac   =   list   (   zip   (   *   [   df   [   i   ]   for   i   in   list   (   df   .   columns   ) ] ) ) )   df   =   df   [ [   \" fac \"   ] ]   elif   isinstance   (   df   ,   list   )   or   isinstance   (   df   ,   tuple   ) :   df   =   pd   .   concat   (   list   (   df   ) ,   axis   =   1   )   df   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   df   .   columns   ) ) ]   df   =   df   .   assign   (   fac   =   list   (   zip   (   *   [   df   [   i   ]   for   i   in   list   (   df   .   columns   ) ] ) ) )   df   =   df   [ [   \" fac \"   ] ]   df   =   df   .   reset _ index   ( )   df   .   columns   =   [   \" code \"   ,   \" fac \"   ]   df   .   insert   (   0   ,   \" date \"   ,   pd   .   Timestamp   (   year   =   date   .   year   ,   month   =   date   .   month   ,   day   =   date   .   day   )   )   if   (   df   is   not   None   )   and   (   df   .   shape   [   0   ]   >   0   ) :   df1   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   self   .   factor _ steps   .   write _ via _ df   (   df   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df1   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   n _ jobs   :   int   =   1   ,   fields   :   str   =   \" * \"   ,   resample _ frequency   :   str   =   None   ,   opens _ in   :   bool   =   0   ,   highs _ in   :   bool   =   0   ,   lows _ in   :   bool   =   0   ,   amounts _ in   :   bool   =   0   ,   merge _ them   :   bool   =   0   ,   use _ mpire   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   fields   :   str ,   optional   \u8981 \u8bfb\u53d6 \u7684 \u5b57 \u6bb5 \uff0c \u53ef \u9009 \u5305\u542b ` date , code , price , amount , saleamount , buyamount , action , saleid , saleprice , buyid , buyprice ` \uff0c \u5176\u4e2d date , code \u5fc5\u987b \u5305\u542b ,   by   default   ` ' * ' `   resample _ frequency   :   str ,   optional   \u5c06 \u9010\u7b14 \u6570\u636e \u8f6c\u5316 \u4e3a \u79d2 \u7ea7 \u6216 \u5206\u949f \u9891 \u6570\u636e \uff0c \u53ef\u4ee5 \u586b\u5199 \u8981 \u8f6c\u5316 \u7684 \u9891\u7387 \uff0c \u5982 ' 3s ' \uff08 3 \u79d2 \u6570\u636e \uff09 \uff0c ' 1m ' \uff08 1 \u5206\u949f \u6570\u636e \uff09 \uff0c   \u6307\u5b9a \u53c2\u6570 \u6b64\u53c2\u6570 \u540e \uff0c \u5c06 \u81ea\u52a8 \u751f\u6210 \u4e00\u4e2a self . closes \u7684 \u6536\u76d8 \u6536\u76d8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6536\u76d8 \u6536\u76d8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . closes ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c ,   by   default   None   opens _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u5f00\u76d8 \u5f00\u76d8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . opens ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   highs _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . highs ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   lows _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . lows ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   amounts _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6210\u4ea4 \u6210\u4ea4\u989d \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6210\u4ea4 \u6210\u4ea4\u91cf ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . amounts ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   merge _ them   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u5c06 \u8ba1\u7b97 \u597d \u7684 \u56e0\u5b50 \u503c \u5408\u5e76 \u5230 \u4e00\u8d77 \uff0c \u751f\u6210 \u7c7b\u4f3c \u4e8e \u5206\u949f \u6570\u636e \u7684 sql \u5f62\u5f0f \uff0c by   default   0   use _ mpire   :   bool ,   optional   \u5e76\u884c \u662f\u5426 \u4f7f\u7528 mpire \uff0c \u9ed8\u8ba4 \u4f7f\u7528 concurrent \uff0c by   default   0   \" \" \"   if   len   (   self   .   dates _ new   )   >   0   :   if   n _ jobs   >   1   :   if   use _ mpire   :   with   WorkerPool   (   n _ jobs   =   n _ jobs   )   as   pool   :   self   .   factor _ new   =   pool   .   map   (   lambda   x   :   self   .   select _ one _ calculate   (   date   =   x   ,   func   =   func   ,   fields   =   fields   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   ) ,   self   .   dates _ new   ,   progress _ bar   =   True   ,   )   else   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   self   .   factor _ new   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   lambda   x   :   self   .   select _ one _ calculate   (   date   =   x   ,   func   =   func   ,   fields   =   fields   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   ) ,   self   .   dates _ new   ,   ) ,   total   =   len   (   self   .   dates _ new   ) ,   )   )   else   :   for   date   in   tqdm   .   auto   .   tqdm   (   self   .   dates _ new   ,   \" \u60a8 \u73b0\u5728 \u5904\u4e8e \u5355\u6838 \u8fd0\u7b97 \u72b6\u6001 \uff0c \u5efa\u8bae \u4ec5 \u5728 \u8c03\u8bd5 \u65f6 \u4f7f\u7528 \u5355\u6838 \"   ) :   df   =   self   .   select _ one _ calculate   (   date   =   date   ,   func   =   func   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   )   self   .   factor _ new   .   append   (   df   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   if   self   .   factor _ old   is   not   None   :   self   .   factor   =   pd   .   concat   (   [   self   .   factor _ old   ]   +   self   .   factor _ new   )   .   sort _ index   ( )   else   :   self   .   factor   =   pd   .   concat   (   self   .   factor _ new   )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   logger   .   info   (   f   \" \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5b8c \u4e86 \"   )   #   \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u7684 \u4e2d\u9014 \u5907\u4efd \u6570\u636e   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   info   (   \" \u5907\u4efd \u5728 questdb \u7684 \u8868\u683c \u5df2 \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   \" \u5220\u9664 questdb \u4e2d \u8868\u683c \u65f6 \uff0c \u5b58\u5728 \u67d0\u4e2a \u672a\u77e5 \u9519\u8bef \uff0c \u8bf7 \u5f53\u5fc3 \"   )   else   :   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor _ old   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5f53\u524d \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )   __ call __   ( )   \u00b6   \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   \u00b6   pd . DataFrame   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6658   6659   6660   6661   6662   6663   6664   6665   6666   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   __ init __   (   factor _ file   ,   project   =   None   ,   startdate   =   None   ,   enddate   =   None   ,   questdb _ host   =   ' 127.0 . 0.1 '   ,   ignore _ history _ in _ questdb   =   0   ,   groupby _ code   =   1   )   \u00b6   \u57fa\u4e8e \u80a1\u7968 \u9010\u7b14 \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   \u00b6   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e ,   by   default   [ ' code ' ]   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6526   6527   6528   6529   6530   6531   6532   6533   6534   6535   6536   6537   6538   6539   6540   6541   6542   6543   6544   6545   6546   6547   6548   6549   6550   6551   6552   6553   6554   6555   6556   6557   6558   6559   6560   6561   6562   6563   6564   6565   6566   6567   6568   6569   6570   6571   6572   6573   6574   6575   6576   6577   6578   6579   6580   6581   6582   6583   6584   6585   6586   6587   6588   6589   6590   6591   6592   6593   6594   6595   6596   6597   6598   6599   6600   6601   6602   6603   6604   6605   6606   6607   6608   6609   6610   6611   6612   6613   6614   6615   6616   6617   6618   6619   6620   6621   6622   6623   6624   6625   6626   6627   6628   6629   6630   6631   6632   6633   6634   6635   6636   6637   6638   6639   6640   6641   6642   6643   6644   6645   6646   6647   6648   6649   6650   6651   6652   6653   6654   6655   6656   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ code   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u57fa\u4e8e \u80a1\u7968 \u9010\u7b14 \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e ,   by   default   [ ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   groupby _ code   =   groupby _ code   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   os   .   listdir   (   homeplace   .   tick _ by _ tick _ data   )   dates _ all   =   [   i   .   split   (   \" . \"   ) [   0   ]   for   i   in   dates _ all   if   i   .   endswith   (   \" . parquet \"   ) ]   dates _ all   =   [   i   .   replace   (   \" - \"   ,   \" \"   )   for   i   in   dates _ all   ]   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   if   \" 20 \"   if   i   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   self   .   age   =   read _ daily   (   age   =   1   )   self   .   state   =   read _ daily   (   state   =   1   )   self   .   closes _ unadj   =   read _ daily   (   close   =   1   ,   unadjust   =   1   )   .   shift   (   1   )   drop _ table   ( )   \u00b6   \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6943   6944   6945   6946   6947   6948   6949   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )   get _ daily _ factors   (   func   ,   n _ jobs   =   1   ,   fields   =   ' * '   ,   resample _ frequency   =   None   ,   opens _ in   =   0   ,   highs _ in   =   0   ,   lows _ in   =   0   ,   amounts _ in   =   0   ,   merge _ them   =   0   ,   use _ mpire   =   0   )   \u00b6   \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   \u00b6   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   fields   :   str ,   optional   \u8981 \u8bfb\u53d6 \u7684 \u5b57 \u6bb5 \uff0c \u53ef \u9009 \u5305\u542b   date , code , price , amount , saleamount , buyamount , action , saleid , saleprice , buyid , buyprice   \uff0c \u5176\u4e2d date , code \u5fc5\u987b \u5305\u542b ,   by   default   ' * '   resample _ frequency   :   str ,   optional   \u5c06 \u9010\u7b14 \u6570\u636e \u8f6c\u5316 \u4e3a \u79d2 \u7ea7 \u6216 \u5206\u949f \u9891 \u6570\u636e \uff0c \u53ef\u4ee5 \u586b\u5199 \u8981 \u8f6c\u5316 \u7684 \u9891\u7387 \uff0c \u5982 ' 3s ' \uff08 3 \u79d2 \u6570\u636e \uff09 \uff0c ' 1m ' \uff08 1 \u5206\u949f \u6570\u636e \uff09 \uff0c   \u6307\u5b9a \u53c2\u6570 \u6b64\u53c2\u6570 \u540e \uff0c \u5c06 \u81ea\u52a8 \u751f\u6210 \u4e00\u4e2a self . closes \u7684 \u6536\u76d8 \u6536\u76d8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6536\u76d8 \u6536\u76d8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528   self . closes   \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c ,   by   default   None   opens _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u5f00\u76d8 \u5f00\u76d8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528   self . opens   \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   highs _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528   self . highs   \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   lows _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528   self . lows   \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   amounts _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6210\u4ea4 \u6210\u4ea4\u989d \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6210\u4ea4 \u6210\u4ea4\u91cf ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528   self . amounts   \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   merge _ them   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u5c06 \u8ba1\u7b97 \u597d \u7684 \u56e0\u5b50 \u503c \u5408\u5e76 \u5230 \u4e00\u8d77 \uff0c \u751f\u6210 \u7c7b\u4f3c \u4e8e \u5206\u949f \u6570\u636e \u7684 sql \u5f62\u5f0f \uff0c by   default   0   use _ mpire   :   bool ,   optional   \u5e76\u884c \u662f\u5426 \u4f7f\u7528 mpire \uff0c \u9ed8\u8ba4 \u4f7f\u7528 concurrent \uff0c by   default   0   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6817   6818   6819   6820   6821   6822   6823   6824   6825   6826   6827   6828   6829   6830   6831   6832   6833   6834   6835   6836   6837   6838   6839   6840   6841   6842   6843   6844   6845   6846   6847   6848   6849   6850   6851   6852   6853   6854   6855   6856   6857   6858   6859   6860   6861   6862   6863   6864   6865   6866   6867   6868   6869   6870   6871   6872   6873   6874   6875   6876   6877   6878   6879   6880   6881   6882   6883   6884   6885   6886   6887   6888   6889   6890   6891   6892   6893   6894   6895   6896   6897   6898   6899   6900   6901   6902   6903   6904   6905   6906   6907   6908   6909   6910   6911   6912   6913   6914   6915   6916   6917   6918   6919   6920   6921   6922   6923   6924   6925   6926   6927   6928   6929   6930   6931   6932   6933   6934   6935   6936   6937   6938   6939   6940   6941   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   n _ jobs   :   int   =   1   ,   fields   :   str   =   \" * \"   ,   resample _ frequency   :   str   =   None   ,   opens _ in   :   bool   =   0   ,   highs _ in   :   bool   =   0   ,   lows _ in   :   bool   =   0   ,   amounts _ in   :   bool   =   0   ,   merge _ them   :   bool   =   0   ,   use _ mpire   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   fields   :   str ,   optional   \u8981 \u8bfb\u53d6 \u7684 \u5b57 \u6bb5 \uff0c \u53ef \u9009 \u5305\u542b ` date , code , price , amount , saleamount , buyamount , action , saleid , saleprice , buyid , buyprice ` \uff0c \u5176\u4e2d date , code \u5fc5\u987b \u5305\u542b ,   by   default   ` ' * ' `   resample _ frequency   :   str ,   optional   \u5c06 \u9010\u7b14 \u6570\u636e \u8f6c\u5316 \u4e3a \u79d2 \u7ea7 \u6216 \u5206\u949f \u9891 \u6570\u636e \uff0c \u53ef\u4ee5 \u586b\u5199 \u8981 \u8f6c\u5316 \u7684 \u9891\u7387 \uff0c \u5982 ' 3s ' \uff08 3 \u79d2 \u6570\u636e \uff09 \uff0c ' 1m ' \uff08 1 \u5206\u949f \u6570\u636e \uff09 \uff0c   \u6307\u5b9a \u53c2\u6570 \u6b64\u53c2\u6570 \u540e \uff0c \u5c06 \u81ea\u52a8 \u751f\u6210 \u4e00\u4e2a self . closes \u7684 \u6536\u76d8 \u6536\u76d8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6536\u76d8 \u6536\u76d8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . closes ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c ,   by   default   None   opens _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u5f00\u76d8 \u5f00\u76d8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . opens ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   highs _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . highs ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   lows _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . lows ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   amounts _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6210\u4ea4 \u6210\u4ea4\u989d \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6210\u4ea4 \u6210\u4ea4\u91cf ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . amounts ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   merge _ them   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u5c06 \u8ba1\u7b97 \u597d \u7684 \u56e0\u5b50 \u503c \u5408\u5e76 \u5230 \u4e00\u8d77 \uff0c \u751f\u6210 \u7c7b\u4f3c \u4e8e \u5206\u949f \u6570\u636e \u7684 sql \u5f62\u5f0f \uff0c by   default   0   use _ mpire   :   bool ,   optional   \u5e76\u884c \u662f\u5426 \u4f7f\u7528 mpire \uff0c \u9ed8\u8ba4 \u4f7f\u7528 concurrent \uff0c by   default   0   \" \" \"   if   len   (   self   .   dates _ new   )   >   0   :   if   n _ jobs   >   1   :   if   use _ mpire   :   with   WorkerPool   (   n _ jobs   =   n _ jobs   )   as   pool   :   self   .   factor _ new   =   pool   .   map   (   lambda   x   :   self   .   select _ one _ calculate   (   date   =   x   ,   func   =   func   ,   fields   =   fields   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   ) ,   self   .   dates _ new   ,   progress _ bar   =   True   ,   )   else   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   self   .   factor _ new   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   lambda   x   :   self   .   select _ one _ calculate   (   date   =   x   ,   func   =   func   ,   fields   =   fields   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   ) ,   self   .   dates _ new   ,   ) ,   total   =   len   (   self   .   dates _ new   ) ,   )   )   else   :   for   date   in   tqdm   .   auto   .   tqdm   (   self   .   dates _ new   ,   \" \u60a8 \u73b0\u5728 \u5904\u4e8e \u5355\u6838 \u8fd0\u7b97 \u72b6\u6001 \uff0c \u5efa\u8bae \u4ec5 \u5728 \u8c03\u8bd5 \u65f6 \u4f7f\u7528 \u5355\u6838 \"   ) :   df   =   self   .   select _ one _ calculate   (   date   =   date   ,   func   =   func   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   )   self   .   factor _ new   .   append   (   df   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   if   self   .   factor _ old   is   not   None   :   self   .   factor   =   pd   .   concat   (   [   self   .   factor _ old   ]   +   self   .   factor _ new   )   .   sort _ index   ( )   else   :   self   .   factor   =   pd   .   concat   (   self   .   factor _ new   )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   logger   .   info   (   f   \" \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5b8c \u4e86 \"   )   #   \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u7684 \u4e2d\u9014 \u5907\u4efd \u6570\u636e   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   info   (   \" \u5907\u4efd \u5728 questdb \u7684 \u8868\u683c \u5df2 \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   \" \u5220\u9664 questdb \u4e2d \u8868\u683c \u65f6 \uff0c \u5b58\u5728 \u67d0\u4e2a \u672a\u77e5 \u9519\u8bef \uff0c \u8bf7 \u5f53\u5fc3 \"   )   else   :   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor _ old   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5f53\u524d \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   pure _ fall _ second   \u00b6   Bases :   object   \u5bf9\u5355 \u53ea \u80a1\u7968 \u5355\u65e5 \u8fdb\u884c \u64cd\u4f5c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6056   6057   6058   6059   6060   6061   6062   6063   6064   6065   6066   6067   6068   6069   6070   6071   6072   6073   6074   6075   6076   6077   6078   6079   6080   6081   6082   6083   6084   6085   6086   6087   6088   6089   6090   6091   6092   6093   6094   6095   6096   6097   6098   6099   6100   6101   6102   6103   6104   6105   6106   6107   6108   6109   6110   6111   6112   6113   6114   6115   6116   6117   6118   6119   6120   6121   6122   6123   6124   6125   6126   6127   6128   6129   6130   6131   6132   6133   6134   6135   6136   6137   6138   6139   6140   6141   6142   6143   6144   6145   6146   6147   6148   6149   6150   6151   6152   6153   6154   6155   6156   6157   6158   6159   6160   6161   6162   6163   6164   6165   6166   6167   6168   6169   6170   6171   6172   6173   6174   6175   6176   6177   6178   6179   6180   6181   6182   6183   6184   6185   6186   6187   6188   6189   6190   6191   6192   6193   6194   6195   6196   6197   6198   6199   6200   6201   6202   6203   6204   6205   6206   6207   6208   6209   6210   6211   6212   6213   6214   6215   6216   6217   6218   6219   6220   6221   6222   6223   6224   6225   6226   6227   6228   6229   6230   6231   6232   6233   6234   6235   6236   6237   6238   6239   6240   6241   6242   6243   6244   6245   6246   6247   6248   6249   6250   6251   6252   6253   6254   6255   6256   6257   6258   6259   6260   6261   6262   6263   6264   6265   6266   6267   6268   6269   6270   6271   6272   6273   6274   6275   6276   6277   6278   6279   6280   6281   6282   6283   6284   6285   6286   6287   6288   6289   6290   6291   6292   6293   6294   6295   6296   6297   6298   6299   6300   6301   6302   6303   6304   6305   6306   6307   6308   6309   6310   6311   6312   6313   6314   6315   6316   6317   6318   6319   6320   6321   6322   6323   6324   6325   6326   6327   6328   6329   6330   6331   6332   6333   6334   6335   6336   6337   6338   6339   6340   6341   6342   6343   6344   6345   6346   6347   6348   6349   6350   6351   6352   6353   6354   6355   6356   6357   6358   6359   6360   6361   6362   6363   6364   6365   6366   6367   6368   6369   6370   6371   6372   6373   6374   6375   6376   6377   6378   6379   6380   6381   6382   6383   6384   6385   6386   6387   6388   6389   6390   6391   6392   6393   6394   6395   6396   6397   6398   6399   6400   6401   6402   6403   6404   6405   6406   6407   6408   6409   6410   6411   6412   6413   6414   6415   6416   6417   6418   6419   6420   6421   6422   6423   6424   6425   6426   6427   6428   6429   6430   6431   6432   6433   6434   6435   6436   6437   6438   6439   6440   6441   6442   6443   6444   6445   6446   6447   6448   6449   6450   6451   6452   6453   6454   6455   6456   6457   6458   6459   6460   6461   6462   6463   6464   6465   6466   6467   6468   6469   6470   6471   6472   6473   6474   6475   6476   6477   6478   6479   6480   6481   6482   6483   6484   6485   6486   6487   6488   6489   6490   6491   6492   6493   6494   6495   6496   6497   6498   6499   6500   6501   6502   6503   6504   6505   6506   6507   6508   6509   6510   6511   6512   6513   6514   6515   6516   6517   6518   6519   6520   6521   6522   class   pure _ fall _ second   (   object   ) :   \" \" \" \u5bf9\u5355 \u53ea \u80a1\u7968 \u5355\u65e5 \u8fdb\u884c \u64cd\u4f5c \" \" \"   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ target   :   list   =   [   \" date \"   ,   \" code \"   ] ,   )   - >   None   :   \" \" \" \u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e \uff0c \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \u65f6 \uff0c \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u51fd\u6570 \u7684 \u90e8\u5206 \uff0c \u5982\u679c \u6307\u5b9a \u6309\u7167 [ ' date ' ] \u5206\u7ec4 groupby \u8ba1\u7b97 \uff0c   \u5219 \u8fd4\u56de \u65f6 \uff0c \u5e94\u5f53 \u8fd4\u56de \u4e00\u4e2a \u4e24\u5217 \u7684 dataframe \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7b2c\u4e8c \u5217\u4e3a \u4e3a \u56e0\u5b50 \u503c ,   by   default   [ ' date ' , ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   groupby _ target   =   groupby _ target   self   .   chc   =   ClickHouseClient   (   \" second _ data \"   )   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   self   .   chc   .   show _ all _ dates   (   f   \" second _ data _ stock _ 10s \"   )   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   def   forward _ dates   (   self   ,   dates   ,   many _ days   ) :   dates _ index   =   [   self   .   dates _ all   .   index   (   i   )   for   i   in   dates   ]   def   value   (   x   ,   a   ) :   if   x   > =   0   :   return   a   [   x   ]   else   :   return   None   return   [   value   (   i   -   many _ days   ,   self   .   dates _ all   )   for   i   in   dates _ index   ]   def   select _ one _ calculate   (   self   ,   date   :   pd   .   Timestamp   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   )   - >   None   :   the _ func   =   partial   (   func   )   if   not   isinstance   (   date   ,   int   ) :   date   =   int   (   datetime   .   datetime   .   strftime   (   date   ,   \" % Y% m   % d   \"   ) )   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   sql _ order   =   f   \" select   {   fields   }   from   second _ data . second _ data _ stock _ 10s   where   toYYYYMMDD ( date ) = date   order   by   code , date \"   df   =   self   .   chc   .   get _ data   (   sql _ order   )   df   =   ( (   df   .   set _ index   ( [   \" code \"   ,   \" date \"   ] ) )   /   100   )   .   reset _ index   ( )   df   =   df   .   groupby   (   self   .   groupby _ target   )   .   apply   (   the _ func   )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ] :   df   =   df   .   to _ frame   (   \" fac \"   )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   df   =   df   .   reset _ index   ( )   if   (   df   is   not   None   )   and   (   df   .   shape   [   0   ]   >   0   ) :   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   def   select _ many _ calculate   (   self   ,   dates   :   List   [   pd   .   Timestamp   ] ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   the _ func   =   partial   (   func   )   factor _ new   =   [ ]   dates   =   [   int   (   datetime   .   datetime   .   strftime   (   i   ,   \" % Y% m   % d   \"   ) )   for   i   in   dates   ]   if   many _ days   = =   1   :   #   \u5c06 \u9700\u8981 \u66f4\u65b0 \u7684 \u65e5\u5b50 \u5206\u5757 \uff0c \u6bcf 200 \u5929 \u4e00\u7ec4 \uff0c \u4e00\u8d77 \u8fd0\u7b97   dates _ new _ len   =   len   (   dates   )   cut _ points   =   list   (   range   (   0   ,   dates _ new _ len   ,   chunksize   ) )   +   [   dates _ new _ len   -   1   ]   if   cut _ points   [   -   1   ]   = =   cut _ points   [   -   2   ] :   cut _ points   =   cut _ points   [ :   -   1   ]   cuts   =   tuple   (   zip   (   cut _ points   [ :   -   many _ days   ] ,   cut _ points   [   many _ days   : ] ) )   df _ first   =   self   .   select _ one _ calculate   (   date   =   dates   [   0   ] ,   func   =   func   ,   fields   =   fields   ,   )   factor _ new   .   append   (   df _ first   )   def   cal _ one   (   date1   ,   date2   ) :   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date >   {   dates   [   date1   ]   *   100   }   and   date < =   {   dates   [   date2   ]   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   cast ( date   as   int ) >   {   dates   [   date1   ]   }   and   cast ( date   as   int ) < =   {   dates   [   date2   ]   }   order   by   code , date , num \"   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   df   =   df   .   groupby   (   self   .   groupby _ target   )   .   apply   (   the _ func   )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ] :   df   =   df   .   to _ frame   (   \" fac \"   )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   df   =   df   .   reset _ index   ( )   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   if   n _ jobs   >   1   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   factor _ new _ more   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   cal _ one   ,   cuts   ) ,   total   =   len   (   cuts   ) )   )   factor _ new   =   factor _ new   +   factor _ new _ more   else   :   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   for   date1   ,   date2   in   tqdm   .   auto   .   tqdm   (   cuts   ,   desc   =   \" \u4e0d\u77e5 \u4e58\u6708 \u51e0\u4eba \u5f52 \uff0c \u843d\u6708 \u6447\u60c5 \u6ee1\u6c5f \u6811 \u3002 \"   ) :   df   =   cal _ one   (   date1   ,   date2   )   factor _ new   .   append   (   df   )   else   :   def   cal _ two   (   date1   ,   date2   ) :   if   date1   is   not   None   :   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date >   {   date1   *   100   }   and   date < =   {   date2   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   cast ( date   as   int ) >   {   date1   }   and   cast ( date   as   int ) < =   {   date2   }   order   by   code , date , num \"   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ,   ]   or   self   .   groupby _ target   = =   [   \" code \"   ] :   df   =   df   .   groupby   ( [   \" code \"   ] )   .   apply   (   the _ func   )   .   reset _ index   ( )   else   :   df   =   the _ func   (   df   )   df   =   df   .   assign   (   date   =   date2   )   df   .   columns   =   [   \" code \"   ,   \" fac \"   ,   \" date \"   ]   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   pairs   =   self   .   forward _ dates   (   dates   ,   many _ days   =   many _ days   )   cuts2   =   tuple   (   zip   (   pairs   ,   dates   ) )   if   n _ jobs   >   1   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   factor _ new _ more   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   cal _ two   ,   cuts2   ) ,   total   =   len   (   cuts2   ) )   )   factor _ new   =   factor _ new   +   factor _ new _ more   else   :   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   for   date1   ,   date2   in   tqdm   .   auto   .   tqdm   (   cuts2   ,   desc   =   \" \u77e5 \u4e0d\u53ef \u4e4e \u9aa4\u5f97 \uff0c \u6258 \u9057\u54cd \u4e8e \u60b2\u98ce \u3002 \"   ) :   df   =   cal _ two   (   date1   ,   date2   )   factor _ new   .   append   (   df   )   if   len   (   factor _ new   )   >   0   :   factor _ new   =   pd   .   concat   (   factor _ new   )   return   factor _ new   else   :   return   None   def   select _ any _ calculate   (   self   ,   dates   :   List   [   pd   .   Timestamp   ] ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   if   len   (   dates   )   = =   1   and   many _ days   = =   1   :   res   =   self   .   select _ one _ calculate   (   dates   [   0   ] ,   func   =   func   ,   fields   =   fields   ,   show _ time   =   show _ time   ,   )   else   :   res   =   self   .   select _ many _ calculate   (   dates   =   dates   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   if   res   is   not   None   :   self   .   factor _ new   .   append   (   res   )   return   res   @ staticmethod   def   for _ cross _ via _ str   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   ` ` ` python   return   [ [ 0.11 , 0.24 , 0.55 ] , [ 2.59 , 1.99 , 0.43 ] , [ 1.32 , 8.88 , 7.77 ] \u2026 \u2026 ]   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   codes   =   sorted   (   list   (   set   (   df   .   code   ) ) )   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   [   0   ] ,   list   ) :   kind   =   1   res   =   [   \" , \"   .   join   (   i   )   for   i   in   res   ]   else   :   kind   =   0   df   =   pd   .   DataFrame   ( {   \" code \"   :   codes   ,   \" fac \"   :   res   } )   if   kind   :   df   .   fac   =   df   .   fac   .   apply   (   lambda   x   :   [   float   (   i   )   for   i   in   x   .   split   (   \" , \"   ) ] )   return   df   return   full _ run   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   res   =   res   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   isinstance   (   res   ,   pd   .   DataFrame   ) :   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   res   is   None   :   ...   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   return   full _ run   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u5206\u949f \u6570\u636e \u5904\u7406 \u6570\u636e\u5904\u7406 \u5b8c \u5566 \uff5e \ud83c\udf88 \"   )   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   fields   :   str ,   optional   \u80a1\u7968 \u6570\u636e \u6d89\u53ca \u5230 \u54ea\u4e9b \u5b57 \u6bb5 \uff0c \u6392\u9664 \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u5b57 \u6bb5 \uff0c \u53ef\u4ee5 \u8282\u7ea6 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u7684 \u65f6\u95f4 \uff0c \u5f62 \u5982 ' date , code , num , close , amount , open '   \u63d0\u53d6 \u51fa \u7684 \u6570\u636e \uff0c \u81ea\u52a8 \u6309\u7167 code , date , num \u6392\u5e8f \uff0c \u56e0\u6b64 code , date , num \u662f \u4e0d\u53ef \u5fc5\u4e0d\u53ef\u5c11 \u7684 \u5b57 \u6bb5 ,   by   default   \" * \"   chunksize   :   int ,   optional   \u6bcf\u6b21 \u8bfb\u53d6 \u7684 \u622a\u9762 \u4e0a \u7684 \u5929\u6570 ,   by   default   10   show _ time   :   bool ,   optional   \u5c55\u793a \u6bcf\u6b21 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6240 \u9700\u8981 \u7684 \u65f6\u95f4 ,   by   default   0   many _ days   :   int ,   optional   \u8ba1\u7b97 \u67d0\u5929 \u7684 \u56e0\u5b50 \u503c\u65f6 \uff0c \u9700\u8981 \u4f7f\u7528 \u4e4b\u524d \u591a\u5c11 \u5929 \u7684 \u6570\u636e   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf \uff0c \u4e0d \u5efa\u8bae \u8bbe\u7f6e \u4e3a \u5927\u4e8e 2 \u7684 \u6570 \uff0c \u6b64\u5916 \u5f53 \u53c2\u6570 \u6b64\u53c2\u6570 \u5927\u4e8e 1 \u65f6 \uff0c \u8bf7 \u4f7f\u7528 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u6765 \u8bfb\u53d6 \u5206\u949f \u6570\u636e ,   by   default   1   \" \" \"   if   len   (   self   .   dates _ new   )   >   0   :   for   interval   in   self   .   dates _ new _ intervals   :   df   =   self   .   select _ any _ calculate   (   dates   =   interval   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   self   .   factor _ new   =   pd   .   concat   (   self   .   factor _ new   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   self   .   factor   =   pd   .   concat   ( [   self   .   factor _ old   ,   self   .   factor _ new   ] )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   logger   .   info   (   f   \" \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5b8c \u4e86 \"   )   #   \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u7684 \u4e2d\u9014 \u5907\u4efd \u6570\u636e   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   info   (   \" \u5907\u4efd \u5728 questdb \u7684 \u8868\u683c \u5df2 \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   \" \u5220\u9664 questdb \u4e2d \u8868\u683c \u65f6 \uff0c \u5b58\u5728 \u67d0\u4e2a \u672a\u77e5 \u9519\u8bef \uff0c \u8bf7 \u5f53\u5fc3 \"   )   else   :   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor _ old   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5f53\u524d \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )   __ call __   ( )   \u00b6   \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   \u00b6   pd . DataFrame   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6188   6189   6190   6191   6192   6193   6194   6195   6196   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   __ init __   (   factor _ file   ,   project   =   None   ,   startdate   =   None   ,   enddate   =   None   ,   questdb _ host   =   ' 127.0 . 0.1 '   ,   ignore _ history _ in _ questdb   =   0   ,   groupby _ target   =   [   ' date '   ,   ' code '   ] )   \u00b6   \u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   \u00b6   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e \uff0c \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \u65f6 \uff0c \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u51fd\u6570 \u7684 \u90e8\u5206 \uff0c \u5982\u679c \u6307\u5b9a \u6309\u7167 [ ' date ' ] \u5206\u7ec4 groupby \u8ba1\u7b97 \uff0c   \u5219 \u8fd4\u56de \u65f6 \uff0c \u5e94\u5f53 \u8fd4\u56de \u4e00\u4e2a \u4e24\u5217 \u7684 dataframe \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7b2c\u4e8c \u5217\u4e3a \u4e3a \u56e0\u5b50 \u503c ,   by   default   [ ' date ' , ' code ' ]   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6059   6060   6061   6062   6063   6064   6065   6066   6067   6068   6069   6070   6071   6072   6073   6074   6075   6076   6077   6078   6079   6080   6081   6082   6083   6084   6085   6086   6087   6088   6089   6090   6091   6092   6093   6094   6095   6096   6097   6098   6099   6100   6101   6102   6103   6104   6105   6106   6107   6108   6109   6110   6111   6112   6113   6114   6115   6116   6117   6118   6119   6120   6121   6122   6123   6124   6125   6126   6127   6128   6129   6130   6131   6132   6133   6134   6135   6136   6137   6138   6139   6140   6141   6142   6143   6144   6145   6146   6147   6148   6149   6150   6151   6152   6153   6154   6155   6156   6157   6158   6159   6160   6161   6162   6163   6164   6165   6166   6167   6168   6169   6170   6171   6172   6173   6174   6175   6176   6177   6178   6179   6180   6181   6182   6183   6184   6185   6186   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ target   :   list   =   [   \" date \"   ,   \" code \"   ] ,   )   - >   None   :   \" \" \" \u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e \uff0c \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \u65f6 \uff0c \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u51fd\u6570 \u7684 \u90e8\u5206 \uff0c \u5982\u679c \u6307\u5b9a \u6309\u7167 [ ' date ' ] \u5206\u7ec4 groupby \u8ba1\u7b97 \uff0c   \u5219 \u8fd4\u56de \u65f6 \uff0c \u5e94\u5f53 \u8fd4\u56de \u4e00\u4e2a \u4e24\u5217 \u7684 dataframe \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7b2c\u4e8c \u5217\u4e3a \u4e3a \u56e0\u5b50 \u503c ,   by   default   [ ' date ' , ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   groupby _ target   =   groupby _ target   self   .   chc   =   ClickHouseClient   (   \" second _ data \"   )   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   self   .   chc   .   show _ all _ dates   (   f   \" second _ data _ stock _ 10s \"   )   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   drop _ table   ( )   \u00b6   \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6516   6517   6518   6519   6520   6521   6522   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )   for _ cross _ via _ str   (   func   )   staticmethod   \u00b6   \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   Python   1   return   [ [   0.11   ,   0.24   ,   0.55   ] , [   2.59   ,   1.99   ,   0.43   ] , [   1.32   ,   8.88   ,   7.77   ]   \u2026 \u2026   ]   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6393   6394   6395   6396   6397   6398   6399   6400   6401   6402   6403   6404   6405   6406   6407   6408   6409   6410   6411   6412   6413   6414   6415   @ staticmethod   def   for _ cross _ via _ str   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   ` ` ` python   return   [ [ 0.11 , 0.24 , 0.55 ] , [ 2.59 , 1.99 , 0.43 ] , [ 1.32 , 8.88 , 7.77 ] \u2026 \u2026 ]   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   codes   =   sorted   (   list   (   set   (   df   .   code   ) ) )   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   [   0   ] ,   list   ) :   kind   =   1   res   =   [   \" , \"   .   join   (   i   )   for   i   in   res   ]   else   :   kind   =   0   df   =   pd   .   DataFrame   ( {   \" code \"   :   codes   ,   \" fac \"   :   res   } )   if   kind   :   df   .   fac   =   df   .   fac   .   apply   (   lambda   x   :   [   float   (   i   )   for   i   in   x   .   split   (   \" , \"   ) ] )   return   df   return   full _ run   for _ cross _ via _ zip   (   func   )   staticmethod   \u00b6   \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   Python   1   2   3   4   return   (   pd   .   Series   ( [   1.54   ,   8.77   ,   9.99   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   pd   .   Series   ( [   3.54   ,   6.98   ,   9.01   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   )   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6417   6418   6419   6420   6421   6422   6423   6424   6425   6426   6427   6428   6429   6430   6431   6432   6433   6434   6435   6436   6437   6438   6439   6440   6441   6442   6443   6444   6445   6446   6447   6448   6449   6450   6451   6452   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   res   =   res   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   isinstance   (   res   ,   pd   .   DataFrame   ) :   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   res   is   None   :   ...   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   return   full _ run   get _ daily _ factors   (   func   ,   fields   =   ' * '   ,   chunksize   =   10   ,   show _ time   =   0   ,   many _ days   =   1   ,   n _ jobs   =   1   )   \u00b6   \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   \u00b6   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   fields   :   str ,   optional   \u80a1\u7968 \u6570\u636e \u6d89\u53ca \u5230 \u54ea\u4e9b \u5b57 \u6bb5 \uff0c \u6392\u9664 \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u5b57 \u6bb5 \uff0c \u53ef\u4ee5 \u8282\u7ea6 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u7684 \u65f6\u95f4 \uff0c \u5f62 \u5982 ' date , code , num , close , amount , open '   \u63d0\u53d6 \u51fa \u7684 \u6570\u636e \uff0c \u81ea\u52a8 \u6309\u7167 code , date , num \u6392\u5e8f \uff0c \u56e0\u6b64 code , date , num \u662f \u4e0d\u53ef \u5fc5\u4e0d\u53ef\u5c11 \u7684 \u5b57 \u6bb5 ,   by   default   \" * \"   chunksize   :   int ,   optional   \u6bcf\u6b21 \u8bfb\u53d6 \u7684 \u622a\u9762 \u4e0a \u7684 \u5929\u6570 ,   by   default   10   show _ time   :   bool ,   optional   \u5c55\u793a \u6bcf\u6b21 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6240 \u9700\u8981 \u7684 \u65f6\u95f4 ,   by   default   0   many _ days   :   int ,   optional   \u8ba1\u7b97 \u67d0\u5929 \u7684 \u56e0\u5b50 \u503c\u65f6 \uff0c \u9700\u8981 \u4f7f\u7528 \u4e4b\u524d \u591a\u5c11 \u5929 \u7684 \u6570\u636e   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf \uff0c \u4e0d \u5efa\u8bae \u8bbe\u7f6e \u4e3a \u5927\u4e8e 2 \u7684 \u6570 \uff0c \u6b64\u5916 \u5f53 \u53c2\u6570 \u6b64\u53c2\u6570 \u5927\u4e8e 1 \u65f6 \uff0c \u8bf7 \u4f7f\u7528 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u6765 \u8bfb\u53d6 \u5206\u949f \u6570\u636e ,   by   default   1   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6454   6455   6456   6457   6458   6459   6460   6461   6462   6463   6464   6465   6466   6467   6468   6469   6470   6471   6472   6473   6474   6475   6476   6477   6478   6479   6480   6481   6482   6483   6484   6485   6486   6487   6488   6489   6490   6491   6492   6493   6494   6495   6496   6497   6498   6499   6500   6501   6502   6503   6504   6505   6506   6507   6508   6509   6510   6511   6512   6513   6514   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u5206\u949f \u6570\u636e \u5904\u7406 \u6570\u636e\u5904\u7406 \u5b8c \u5566 \uff5e \ud83c\udf88 \"   )   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   fields   :   str ,   optional   \u80a1\u7968 \u6570\u636e \u6d89\u53ca \u5230 \u54ea\u4e9b \u5b57 \u6bb5 \uff0c \u6392\u9664 \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u5b57 \u6bb5 \uff0c \u53ef\u4ee5 \u8282\u7ea6 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u7684 \u65f6\u95f4 \uff0c \u5f62 \u5982 ' date , code , num , close , amount , open '   \u63d0\u53d6 \u51fa \u7684 \u6570\u636e \uff0c \u81ea\u52a8 \u6309\u7167 code , date , num \u6392\u5e8f \uff0c \u56e0\u6b64 code , date , num \u662f \u4e0d\u53ef \u5fc5\u4e0d\u53ef\u5c11 \u7684 \u5b57 \u6bb5 ,   by   default   \" * \"   chunksize   :   int ,   optional   \u6bcf\u6b21 \u8bfb\u53d6 \u7684 \u622a\u9762 \u4e0a \u7684 \u5929\u6570 ,   by   default   10   show _ time   :   bool ,   optional   \u5c55\u793a \u6bcf\u6b21 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6240 \u9700\u8981 \u7684 \u65f6\u95f4 ,   by   default   0   many _ days   :   int ,   optional   \u8ba1\u7b97 \u67d0\u5929 \u7684 \u56e0\u5b50 \u503c\u65f6 \uff0c \u9700\u8981 \u4f7f\u7528 \u4e4b\u524d \u591a\u5c11 \u5929 \u7684 \u6570\u636e   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf \uff0c \u4e0d \u5efa\u8bae \u8bbe\u7f6e \u4e3a \u5927\u4e8e 2 \u7684 \u6570 \uff0c \u6b64\u5916 \u5f53 \u53c2\u6570 \u6b64\u53c2\u6570 \u5927\u4e8e 1 \u65f6 \uff0c \u8bf7 \u4f7f\u7528 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u6765 \u8bfb\u53d6 \u5206\u949f \u6570\u636e ,   by   default   1   \" \" \"   if   len   (   self   .   dates _ new   )   >   0   :   for   interval   in   self   .   dates _ new _ intervals   :   df   =   self   .   select _ any _ calculate   (   dates   =   interval   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   self   .   factor _ new   =   pd   .   concat   (   self   .   factor _ new   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   self   .   factor   =   pd   .   concat   ( [   self   .   factor _ old   ,   self   .   factor _ new   ] )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   logger   .   info   (   f   \" \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5b8c \u4e86 \"   )   #   \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u7684 \u4e2d\u9014 \u5907\u4efd \u6570\u636e   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   info   (   \" \u5907\u4efd \u5728 questdb \u7684 \u8868\u683c \u5df2 \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   \" \u5220\u9664 questdb \u4e2d \u8868\u683c \u65f6 \uff0c \u5b58\u5728 \u67d0\u4e2a \u672a\u77e5 \u9519\u8bef \uff0c \u8bf7 \u5f53\u5fc3 \"   )   else   :   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor _ old   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5f53\u524d \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   pure _ fallmount   \u00b6   Bases :   pure _ fall   \u7ee7\u627f \u81ea\u7236 \u7c7b \uff0c \u4e13\u4e3a \u505a \u56e0\u5b50 \u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u76f8\u52a0 \u548c \u56e0\u5b50 \u5254\u9664 \u5176\u4ed6 \u8f85\u52a9 \u56e0\u5b50 \u8f85\u52a9\u56e0\u5b50 \u7684 \u4f5c\u7528   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3017   3018   3019   3020   3021   3022   3023   3024   3025   3026   3027   3028   3029   3030   3031   3032   3033   3034   3035   3036   3037   3038   3039   3040   3041   3042   3043   3044   3045   3046   3047   3048   3049   3050   3051   3052   3053   3054   3055   3056   3057   3058   3059   3060   3061   3062   3063   3064   3065   3066   3067   3068   3069   3070   3071   3072   3073   3074   3075   3076   3077   3078   3079   3080   3081   3082   3083   3084   3085   3086   3087   3088   3089   3090   3091   3092   3093   3094   3095   3096   3097   3098   3099   3100   3101   3102   3103   3104   3105   3106   3107   3108   3109   3110   3111   3112   3113   3114   3115   3116   3117   3118   3119   3120   3121   3122   3123   3124   3125   3126   3127   3128   3129   3130   3131   3132   3133   3134   3135   3136   3137   3138   3139   3140   3141   3142   3143   3144   3145   3146   3147   3148   3149   3150   3151   class   pure _ fallmount   (   pure _ fall   ) :   \" \" \" \u7ee7\u627f \u81ea\u7236 \u7c7b \uff0c \u4e13\u4e3a \u505a \u56e0\u5b50 \u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u76f8\u52a0 \u548c \u56e0\u5b50 \u5254\u9664 \u5176\u4ed6 \u8f85\u52a9 \u56e0\u5b50 \u8f85\u52a9\u56e0\u5b50 \u7684 \u4f5c\u7528 \" \" \"   def   __ init __   (   self   ,   monthly _ factors   ) :   \" \" \" \u8f93\u5165 \u6708\u5ea6 \u56e0\u5b50 \u503c \uff0c \u4ee5 \u8bbe\u5b9a \u65b0 \u7684 \u5bf9\u8c61 \" \" \"   super   (   pure _ fall   ,   self   )   .   __ init __   ( )   self   .   monthly _ factors   =   monthly _ factors   def   __ call __   (   self   ,   monthly   =   False   ) :   \" \" \" \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868 \" \" \"   if   monthly   :   return   self   .   monthly _ factors   .   copy   ( )   else   :   try   :   return   self   .   daily _ factors   .   copy   ( )   except   Exception   :   return   self   .   monthly _ factors   .   copy   ( )   def   __ add __   (   self   ,   selfas   ) :   \" \" \" \u8fd4\u56de \u4e00\u4e2a \u5bf9\u8c61 \uff0c \u800c \u975e \u4e00\u4e2a \u8868\u683c \uff0c \u5982\u9700 \u8868\u683c \u8bf7 \u8c03\u7528 \u5bf9\u8c61 \" \" \"   fac1   =   self   .   standardlize _ in _ cross _ section   (   self   .   monthly _ factors   )   fac2s   =   [ ]   if   not   isinstance   (   selfas   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfas   }   is   changed   into   Iterable \"   )   selfas   =   (   selfas   , )   for   selfa   in   selfas   :   fac2   =   self   .   standardlize _ in _ cross _ section   (   selfa   .   monthly _ factors   )   fac2s   .   append   (   fac2   )   for   i   in   fac2s   :   fac1   =   fac1   +   i   new _ pure   =   pure _ fallmount   (   fac1   )   return   new _ pure   def   __ mul __   (   self   ,   selfas   ) :   \" \" \" \u5c06 \u51e0\u4e2a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \uff0c \u4f7f \u5176 \u90fd \u4e3a \u6b63\u6570 \uff0c \u7136\u540e \u56e0\u5b50 \u503c \u76f8\u4e58 \" \" \"   fac1   =   self   .   standardlize _ in _ cross _ section   (   self   .   monthly _ factors   )   fac1   =   fac1   -   fac1   .   min   ( )   fac2s   =   [ ]   if   not   isinstance   (   selfas   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfas   }   is   changed   into   Iterable \"   )   selfas   =   (   selfas   , )   for   selfa   in   selfas   :   fac2   =   self   .   standardlize _ in _ cross _ section   (   selfa   .   monthly _ factors   )   fac2   =   fac2   -   fac2   .   min   ( )   fac2s   .   append   (   fac2   )   for   i   in   fac2s   :   fac1   =   fac1   *   i   new _ pure   =   pure _ fall   ( )   new _ pure   .   monthly _ factors   =   fac1   return   new _ pure   def   __ sub __   (   self   ,   selfa   ) :   \" \" \" \u8fd4\u56de \u5bf9\u8c61 \uff0c \u5982\u9700 \u8868\u683c \uff0c \u8bf7 \u8c03\u7528 \u5bf9\u8c61 \" \" \"   tqdm   .   auto   .   tqdm   .   pandas   ( )   if   not   isinstance   (   selfa   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfa   }   is   changed   into   Iterable \"   )   selfa   =   (   selfa   , )   fac _ main   =   self   .   wide _ to _ long   (   self   .   monthly _ factors   ,   \" fac \"   )   fac _ helps   =   [   i   .   monthly _ factors   for   i   in   selfa   ]   help _ names   =   [   \" help \"   +   str   (   i   )   for   i   in   range   (   1   ,   (   len   (   fac _ helps   )   +   1   ) ) ]   fac _ helps   =   list   (   map   (   self   .   wide _ to _ long   ,   fac _ helps   ,   help _ names   ) )   fac _ helps   =   pd   .   concat   (   fac _ helps   ,   axis   =   1   )   facs   =   pd   .   concat   ( [   fac _ main   ,   fac _ helps   ] ,   axis   =   1   )   .   dropna   ( )   facs   =   facs   .   groupby   (   \" date \"   )   .   progress _ apply   (   lambda   x   :   self   .   de _ in _ group   (   x   ,   help _ names   )   )   facs   =   facs   .   unstack   ( )   facs   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   facs   .   columns   ) ) )   new _ pure   =   pure _ fallmount   (   facs   )   return   new _ pure   def   __ gt __   (   self   ,   selfa   ) :   \" \" \" \u7528\u4e8e \u8f93\u51fa 25 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50 \" \" \"   x   =   self   .   monthly _ factors   .   copy   ( )   y   =   selfa   .   monthly _ factors   .   copy   ( )   x   =   x   .   stack   ( )   .   reset _ index   ( )   y   =   y   .   stack   ( )   .   reset _ index   ( )   x   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   shen   =   pure _ moon   ( )   x   =   x   .   groupby   (   \" date \"   )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   5   ) )   x   =   (   x   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupx \"   } )   )   xy   =   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] )   xy   =   xy   .   groupby   ( [   \" date \"   ,   \" groupx \"   ] )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   5   ) )   xy   =   (   xy   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupy \"   } )   )   xy   =   xy   .   assign   (   fac   =   xy   .   groupx   *   5   +   xy   .   groupy   )   xy   =   xy   [ [   \" date \"   ,   \" code \"   ,   \" fac \"   ] ]   xy   =   xy   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   xy   .   columns   =   [   i   [   1   ]   for   i   in   list   (   xy   .   columns   ) ]   new _ pure   =   pure _ fallmount   (   xy   )   return   new _ pure   def   __ rshift __   (   self   ,   selfa   ) :   \" \" \" \u7528\u4e8e \u8f93\u51fa 100 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50 \" \" \"   x   =   self   .   monthly _ factors   .   copy   ( )   y   =   selfa   .   monthly _ factors   .   copy   ( )   x   =   x   .   stack   ( )   .   reset _ index   ( )   y   =   y   .   stack   ( )   .   reset _ index   ( )   x   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   shen   =   pure _ moon   ( )   x   =   x   .   groupby   (   \" date \"   )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   10   ) )   x   =   (   x   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupx \"   } )   )   xy   =   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] )   xy   =   xy   .   groupby   ( [   \" date \"   ,   \" groupx \"   ] )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   10   ) )   xy   =   (   xy   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupy \"   } )   )   xy   =   xy   .   assign   (   fac   =   xy   .   groupx   *   10   +   xy   .   groupy   )   xy   =   xy   [ [   \" date \"   ,   \" code \"   ,   \" fac \"   ] ]   xy   =   xy   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   xy   .   columns   =   [   i   [   1   ]   for   i   in   list   (   xy   .   columns   ) ]   new _ pure   =   pure _ fallmount   (   xy   )   return   new _ pure   __ add __   (   selfas   )   \u00b6   \u8fd4\u56de \u4e00\u4e2a \u5bf9\u8c61 \uff0c \u800c \u975e \u4e00\u4e2a \u8868\u683c \uff0c \u5982\u9700 \u8868\u683c \u8bf7 \u8c03\u7528 \u5bf9\u8c61   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3035   3036   3037   3038   3039   3040   3041   3042   3043   3044   3045   3046   3047   3048   3049   def   __ add __   (   self   ,   selfas   ) :   \" \" \" \u8fd4\u56de \u4e00\u4e2a \u5bf9\u8c61 \uff0c \u800c \u975e \u4e00\u4e2a \u8868\u683c \uff0c \u5982\u9700 \u8868\u683c \u8bf7 \u8c03\u7528 \u5bf9\u8c61 \" \" \"   fac1   =   self   .   standardlize _ in _ cross _ section   (   self   .   monthly _ factors   )   fac2s   =   [ ]   if   not   isinstance   (   selfas   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfas   }   is   changed   into   Iterable \"   )   selfas   =   (   selfas   , )   for   selfa   in   selfas   :   fac2   =   self   .   standardlize _ in _ cross _ section   (   selfa   .   monthly _ factors   )   fac2s   .   append   (   fac2   )   for   i   in   fac2s   :   fac1   =   fac1   +   i   new _ pure   =   pure _ fallmount   (   fac1   )   return   new _ pure   __ call __   (   monthly   =   False   )   \u00b6   \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3025   3026   3027   3028   3029   3030   3031   3032   3033   def   __ call __   (   self   ,   monthly   =   False   ) :   \" \" \" \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868 \" \" \"   if   monthly   :   return   self   .   monthly _ factors   .   copy   ( )   else   :   try   :   return   self   .   daily _ factors   .   copy   ( )   except   Exception   :   return   self   .   monthly _ factors   .   copy   ( )   __ gt __   (   selfa   )   \u00b6   \u7528\u4e8e \u8f93\u51fa 25 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3091   3092   3093   3094   3095   3096   3097   3098   3099   3100   3101   3102   3103   3104   3105   3106   3107   3108   3109   3110   3111   3112   3113   3114   3115   3116   3117   3118   3119   3120   def   __ gt __   (   self   ,   selfa   ) :   \" \" \" \u7528\u4e8e \u8f93\u51fa 25 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50 \" \" \"   x   =   self   .   monthly _ factors   .   copy   ( )   y   =   selfa   .   monthly _ factors   .   copy   ( )   x   =   x   .   stack   ( )   .   reset _ index   ( )   y   =   y   .   stack   ( )   .   reset _ index   ( )   x   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   shen   =   pure _ moon   ( )   x   =   x   .   groupby   (   \" date \"   )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   5   ) )   x   =   (   x   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupx \"   } )   )   xy   =   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] )   xy   =   xy   .   groupby   ( [   \" date \"   ,   \" groupx \"   ] )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   5   ) )   xy   =   (   xy   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupy \"   } )   )   xy   =   xy   .   assign   (   fac   =   xy   .   groupx   *   5   +   xy   .   groupy   )   xy   =   xy   [ [   \" date \"   ,   \" code \"   ,   \" fac \"   ] ]   xy   =   xy   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   xy   .   columns   =   [   i   [   1   ]   for   i   in   list   (   xy   .   columns   ) ]   new _ pure   =   pure _ fallmount   (   xy   )   return   new _ pure   __ init __   (   monthly _ factors   )   \u00b6   \u8f93\u5165 \u6708\u5ea6 \u56e0\u5b50 \u503c \uff0c \u4ee5 \u8bbe\u5b9a \u65b0 \u7684 \u5bf9\u8c61   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3020   3021   3022   3023   def   __ init __   (   self   ,   monthly _ factors   ) :   \" \" \" \u8f93\u5165 \u6708\u5ea6 \u56e0\u5b50 \u503c \uff0c \u4ee5 \u8bbe\u5b9a \u65b0 \u7684 \u5bf9\u8c61 \" \" \"   super   (   pure _ fall   ,   self   )   .   __ init __   ( )   self   .   monthly _ factors   =   monthly _ factors   __ mul __   (   selfas   )   \u00b6   \u5c06 \u51e0\u4e2a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \uff0c \u4f7f \u5176 \u90fd \u4e3a \u6b63\u6570 \uff0c \u7136\u540e \u56e0\u5b50 \u503c \u76f8\u4e58   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3051   3052   3053   3054   3055   3056   3057   3058   3059   3060   3061   3062   3063   3064   3065   3066   3067   3068   def   __ mul __   (   self   ,   selfas   ) :   \" \" \" \u5c06 \u51e0\u4e2a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \uff0c \u4f7f \u5176 \u90fd \u4e3a \u6b63\u6570 \uff0c \u7136\u540e \u56e0\u5b50 \u503c \u76f8\u4e58 \" \" \"   fac1   =   self   .   standardlize _ in _ cross _ section   (   self   .   monthly _ factors   )   fac1   =   fac1   -   fac1   .   min   ( )   fac2s   =   [ ]   if   not   isinstance   (   selfas   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfas   }   is   changed   into   Iterable \"   )   selfas   =   (   selfas   , )   for   selfa   in   selfas   :   fac2   =   self   .   standardlize _ in _ cross _ section   (   selfa   .   monthly _ factors   )   fac2   =   fac2   -   fac2   .   min   ( )   fac2s   .   append   (   fac2   )   for   i   in   fac2s   :   fac1   =   fac1   *   i   new _ pure   =   pure _ fall   ( )   new _ pure   .   monthly _ factors   =   fac1   return   new _ pure   __ rshift __   (   selfa   )   \u00b6   \u7528\u4e8e \u8f93\u51fa 100 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3122   3123   3124   3125   3126   3127   3128   3129   3130   3131   3132   3133   3134   3135   3136   3137   3138   3139   3140   3141   3142   3143   3144   3145   3146   3147   3148   3149   3150   3151   def   __ rshift __   (   self   ,   selfa   ) :   \" \" \" \u7528\u4e8e \u8f93\u51fa 100 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50 \" \" \"   x   =   self   .   monthly _ factors   .   copy   ( )   y   =   selfa   .   monthly _ factors   .   copy   ( )   x   =   x   .   stack   ( )   .   reset _ index   ( )   y   =   y   .   stack   ( )   .   reset _ index   ( )   x   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   shen   =   pure _ moon   ( )   x   =   x   .   groupby   (   \" date \"   )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   10   ) )   x   =   (   x   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupx \"   } )   )   xy   =   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] )   xy   =   xy   .   groupby   ( [   \" date \"   ,   \" groupx \"   ] )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   10   ) )   xy   =   (   xy   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupy \"   } )   )   xy   =   xy   .   assign   (   fac   =   xy   .   groupx   *   10   +   xy   .   groupy   )   xy   =   xy   [ [   \" date \"   ,   \" code \"   ,   \" fac \"   ] ]   xy   =   xy   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   xy   .   columns   =   [   i   [   1   ]   for   i   in   list   (   xy   .   columns   ) ]   new _ pure   =   pure _ fallmount   (   xy   )   return   new _ pure   __ sub __   (   selfa   )   \u00b6   \u8fd4\u56de \u5bf9\u8c61 \uff0c \u5982\u9700 \u8868\u683c \uff0c \u8bf7 \u8c03\u7528 \u5bf9\u8c61   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3070   3071   3072   3073   3074   3075   3076   3077   3078   3079   3080   3081   3082   3083   3084   3085   3086   3087   3088   3089   def   __ sub __   (   self   ,   selfa   ) :   \" \" \" \u8fd4\u56de \u5bf9\u8c61 \uff0c \u5982\u9700 \u8868\u683c \uff0c \u8bf7 \u8c03\u7528 \u5bf9\u8c61 \" \" \"   tqdm   .   auto   .   tqdm   .   pandas   ( )   if   not   isinstance   (   selfa   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfa   }   is   changed   into   Iterable \"   )   selfa   =   (   selfa   , )   fac _ main   =   self   .   wide _ to _ long   (   self   .   monthly _ factors   ,   \" fac \"   )   fac _ helps   =   [   i   .   monthly _ factors   for   i   in   selfa   ]   help _ names   =   [   \" help \"   +   str   (   i   )   for   i   in   range   (   1   ,   (   len   (   fac _ helps   )   +   1   ) ) ]   fac _ helps   =   list   (   map   (   self   .   wide _ to _ long   ,   fac _ helps   ,   help _ names   ) )   fac _ helps   =   pd   .   concat   (   fac _ helps   ,   axis   =   1   )   facs   =   pd   .   concat   ( [   fac _ main   ,   fac _ helps   ] ,   axis   =   1   )   .   dropna   ( )   facs   =   facs   .   groupby   (   \" date \"   )   .   progress _ apply   (   lambda   x   :   self   .   de _ in _ group   (   x   ,   help _ names   )   )   facs   =   facs   .   unstack   ( )   facs   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   facs   .   columns   ) ) )   new _ pure   =   pure _ fallmount   (   facs   )   return   new _ pure   pure _ fama   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4667   4668   4669   4670   4671   4672   4673   4674   4675   4676   4677   4678   4679   4680   4681   4682   4683   4684   4685   4686   4687   4688   4689   4690   4691   4692   4693   4694   4695   4696   4697   4698   4699   4700   4701   4702   4703   4704   4705   4706   4707   4708   4709   4710   4711   4712   4713   4714   4715   4716   4717   4718   4719   4720   4721   4722   4723   4724   4725   4726   4727   4728   4729   4730   4731   4732   4733   4734   4735   4736   4737   4738   4739   4740   4741   4742   4743   4744   4745   4746   4747   4748   4749   4750   4751   4752   4753   4754   4755   4756   4757   4758   4759   4760   4761   4762   4763   4764   4765   4766   4767   4768   4769   4770   4771   4772   4773   4774   4775   4776   4777   4778   4779   4780   4781   4782   4783   4784   4785   4786   4787   4788   4789   4790   4791   4792   4793   4794   4795   4796   4797   4798   4799   4800   4801   4802   4803   4804   4805   4806   4807   4808   4809   4810   4811   4812   4813   4814   4815   4816   4817   4818   4819   4820   4821   4822   4823   4824   4825   4826   4827   4828   4829   4830   4831   4832   4833   4834   4835   4836   4837   4838   4839   4840   4841   4842   4843   4844   4845   4846   4847   4848   4849   4850   4851   4852   4853   4854   4855   4856   4857   4858   4859   4860   4861   4862   4863   4864   4865   4866   4867   4868   4869   4870   4871   4872   4873   4874   4875   4876   4877   4878   4879   4880   4881   4882   4883   4884   4885   4886   4887   4888   4889   4890   class   pure _ fama   (   object   ) :   #   @ lru _ cache ( maxsize = None )   def   __ init __   (   self   ,   factors   :   List   [   pd   .   DataFrame   ] ,   minus _ group   :   Union   [   list   ,   float   ]   =   3   ,   backsee   :   int   =   20   ,   rets   :   pd   .   DataFrame   =   None   ,   value _ weighted   :   bool   =   1   ,   add _ market   :   bool   =   1   ,   add _ market _ series   :   pd   .   Series   =   None   ,   factors _ names   :   list   =   None   ,   betas _ rets   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 fama \u4e09 \u56e0\u5b50 \u7684 \u65b9\u6cd5 \uff0c \u5c06 \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u62c6\u5206 \u51fa \u5404\u4e2a \u56e0\u5b50 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u4ee5\u53ca \u7279\u8d28 \u7684 \u6536\u76ca \u6536\u76ca\u7387   \u5206\u522b \u8ba1\u7b97 \u6bcf \u4e00\u671f \uff0c \u5404\u4e2a \u56e0\u5b50 \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u503c \uff0c \u8d85\u989d \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u56e0\u5b50 \u7684 \u66b4\u9732 \uff0c \u4ee5\u53ca \u7279\u8d28 \u6536\u76ca \u6536\u76ca\u7387   Parameters   ----------   factors   :   List [ pd . DataFrame ]   \u7528\u4e8e \u89e3\u91ca \u6536\u76ca \u7684 \u5404\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf \u4e00\u4e2a \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 dataframe   minus _ group   :   Union [ list ,   float ] ,   optional   \u6bcf \u4e00\u4e2a \u56e0\u5b50 \u5c06 \u622a\u9762 \u4e0a \u7684 \u80a1\u7968 \u5206\u4e3a \u51e0\u7ec4 ,   by   default   3   backsee   :   int ,   optional   \u505a \u65f6\u5e8f \u56de\u5f52 \u65f6 \uff0c \u56de\u770b \u7684 \u5929\u6570 ,   by   default   20   rets   :   pd . DataFrame ,   optional   \u6bcf \u53ea \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u5f53\u65e5 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   None   value _ weighted   :   bool ,   optional   \u662f\u5426 \u4f7f\u7528 \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   1   add _ market   :   bool ,   optional   \u662f\u5426 \u52a0\u5165 \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u56e0\u5b50 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307 \u7684 \u6bcf\u65e5 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   1   add _ market _ series   :   bool ,   optional   \u52a0\u5165 \u7684 \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u6570\u636e \uff0c \u5982\u679c \u6ca1 \u6307\u5b9a \uff0c \u5219 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307 \u7684 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   None   factors _ names   :   list ,   optional   \u5404\u4e2a \u56e0\u5b50 \u7684 \u540d\u5b57 \uff0c \u9ed8\u8ba4 \u4e3a fac0 ( \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u56e0\u5b50 \uff0c \u5982\u679c \u6ca1\u6709 \uff0c \u5219 \u4ece fac1 \u5f00\u59cb ) , fac1 , fac2 , fac3 ,   by   default   None   betas _ rets   :   bool ,   optional   \u662f\u5426 \u8ba1\u7b97 \u6bcf \u53ea \u4e2a\u80a1 \u7684 \u7531\u4e8e \u66b4\u9732 \u5728 \u6bcf\u4e2a \u56e0\u5b50 \u4e0a \u6240 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   \" \" \"   start   =   max   (   [   int   (   datetime   .   datetime   .   strftime   (   i   .   index   .   min   ( ) ,   \" % Y% m   % d   \"   ) )   for   i   in   factors   ]   )   self   .   backsee   =   backsee   self   .   factors   =   factors   self   .   factors _ names   =   factors _ names   if   isinstance   (   minus _ group   ,   int   ) :   minus _ group   =   [   minus _ group   ]   *   len   (   factors   )   self   .   minus _ group   =   minus _ group   if   rets   is   None   :   closes   =   read _ daily   (   close   =   1   ,   start   =   start   )   rets   =   closes   /   closes   .   shift   (   1   )   -   1   self   .   rets   =   rets   self   .   factors _ group   =   [   to _ group   (   i   ,   group   =   j   )   for   i   ,   j   in   zip   (   self   .   factors   ,   self   .   minus _ group   )   ]   self   .   factors _ group _ long   =   [ (   i   = =   0   )   +   0   for   i   in   self   .   factors _ group   ]   self   .   factors _ group _ short   =   [   (   i   = =   (   j   -   1   ) )   +   0   for   i   ,   j   in   zip   (   self   .   factors _ group   ,   self   .   minus _ group   )   ]   self   .   value _ weighted   =   value _ weighted   if   value _ weighted   :   if   total _ cap   :   self   .   cap   =   read _ daily   (   total _ cap   =   1   ,   start   =   start   )   self   .   cap   =   read _ daily   (   flow _ cap   =   1   ,   start   =   start   )   self   .   factors _ group _ long   =   [   self   .   cap   *   i   for   i   in   self   .   factors _ group _ long   ]   self   .   factors _ group _ short   =   [   self   .   cap   *   i   for   i   in   self   .   factors _ group _ short   ]   self   .   factors _ group _ long   =   [   (   i   .   T   /   i   .   T   .   sum   ( ) )   .   T   for   i   in   self   .   factors _ group _ long   ]   self   .   factors _ group _ short   =   [   (   i   .   T   /   i   .   T   .   sum   ( ) )   .   T   for   i   in   self   .   factors _ group _ short   ]   self   .   factors _ rets _ long   =   [   (   self   .   rets   *   i   )   .   sum   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ long   )   ]   self   .   factors _ rets _ short   =   [   (   self   .   rets   *   i   )   .   sum   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ short   )   ]   else   :   self   .   factors _ rets _ long   =   [   (   self   .   rets   *   i   )   .   mean   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ long   )   ]   self   .   factors _ rets _ short   =   [   (   self   .   rets   *   i   )   .   mean   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ short   )   ]   self   .   rets _ long   =   pd   .   concat   (   self   .   factors _ rets _ long   ,   axis   =   1   )   self   .   rets _ short   =   pd   .   concat   (   self   .   factors _ rets _ short   ,   axis   =   1   )   self   .   __ factors _ rets   =   self   .   rets _ long   -   self   .   rets _ short   if   add _ market _ series   is   not   None   :   add _ market   =   1   self   .   add _ market   =   add _ market   if   add _ market   :   if   add _ market _ series   is   None   :   closes   =   read _ market   (   close   =   1   ,   every _ stock   =   0   ,   start   =   start   )   .   to _ frame   (   \" fac0 \"   )   else   :   closes   =   add _ market _ series   .   to _ frame   (   \" fac0 \"   )   rets   =   closes   /   closes   .   shift   (   1   )   -   1   self   .   __ factors _ rets   =   pd   .   concat   ( [   rets   ,   self   .   __ factors _ rets   ] ,   axis   =   1   )   if   factors _ names   is   not   None   :   factors _ names   =   [   \" \u5e02\u573a \"   ]   +   factors _ names   self   .   __ data   =   self   .   make _ df   (   self   .   rets   ,   self   .   __ factors _ rets   )   tqdm   .   auto   .   tqdm   .   pandas   ( )   self   .   __ coefficients   =   (   self   .   __ data   .   groupby   (   \" code \"   )   .   progress _ apply   (   self   .   ols _ in   )   .   reset _ index   ( )   )   self   .   __ coefficients   =   self   .   __ coefficients   .   rename   (   columns   =   {   i   :   \" co \"   +   i   for   i   in   list   (   self   .   __ coefficients   .   columns   )   if   \" fac \"   in   i   }   )   self   .   __ data   =   pd   .   merge   (   self   .   __ data   .   reset _ index   ( ) ,   self   .   __ coefficients   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   betas   =   [   self   .   __ data   [   i   ]   *   self   .   __ data   [   \" co \"   +   i   ]   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   )   ]   betas   =   sum   (   betas   )   self   .   __ data   =   self   .   __ data   .   assign   (   idiosyncratic   =   self   .   __ data   .   ret   -   self   .   __ data   .   intercept   -   betas   )   self   .   __ idiosyncratic   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" idiosyncratic \"   )   self   .   __ alphas   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" intercept \"   )   if   factors _ names   is   None   :   self   .   __ betas   =   {   i   :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   )   }   else   :   facs   =   [   i   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   ) ]   self   .   __ betas   =   {   factors _ names   [   num   ] :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   num   ,   i   in   enumerate   (   facs   )   }   if   betas _ rets   :   if   add _ market   :   if   add _ market _ series   is   None   :   factors   =   [   read _ market   (   close   =   1   ,   start   =   start   ) ]   +   factors   else   :   factors   =   [   pd   .   DataFrame   (   {   k   :   add _ market _ series   for   k   in   list   (   factors   [   0   ]   .   columns   ) } ,   index   =   factors   [   0   ]   .   index   ,   )   ]   +   factors   self   .   __ betas _ rets   =   {   d1   [   0   ] :   d1   [   1   ]   *   d2   for   d1   ,   d2   in   zip   (   self   .   __ betas   ,   factors   )   }   else   :   self   .   __ betas _ rets   =   \" \u60a8 \u5982\u679c \u60f3 \u8ba1\u7b97 \u5404\u4e2a \u80a1\u7968 \u5728 \u5404\u4e2a \u56e0\u5b50 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u8bf7 \u5148 \u6307\u5b9a betas _ rets \u53c2\u6570 \u4e3a True \"   @ property   def   idiosyncratic   (   self   ) :   return   self   .   __ idiosyncratic   @ property   def   data   (   self   ) :   return   self   .   __ data   @ property   def   alphas   (   self   ) :   return   self   .   __ alphas   @ property   def   betas   (   self   ) :   return   self   .   __ betas   @ property   def   betas _ rets   (   self   ) :   return   self   .   __ betas _ rets   @ property   def   factors _ rets   (   self   ) :   return   self   .   __ factors _ rets   @ property   def   coefficients   (   self   ) :   return   self   .   __ coefficients   def   __ call __   (   self   ) :   return   self   .   idiosyncratic   def   make _ df   (   self   ,   rets   ,   facs   ) :   rets   =   rets   .   stack   ( )   .   reset _ index   ( )   rets   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" ret \"   ]   facs   =   facs   .   reset _ index   ( )   facs   .   columns   =   [   \" date \"   ]   +   list   (   facs   .   columns   ) [   1   : ]   df   =   pd   .   merge   (   rets   ,   facs   ,   on   =   [   \" date \"   ] )   df   =   df   .   set _ index   (   \" date \"   )   return   df   def   ols _ in   (   self   ,   df   ) :   try   :   if   self   .   add _ market   :   x   =   df   [ [   \" fac0 \"   ]   +   [   f   \" fac   {   i   +   1   }   \"   for   i   in   range   (   len   (   self   .   factors   ) ) ] ]   else   :   x   =   df   [ [   f   \" fac   {   i   +   1   }   \"   for   i   in   range   (   len   (   self   .   factors   ) ) ] ]   ols   =   po   .   PandasRollingOLS   (   y   =   df   [ [   \" ret \"   ] ] ,   x   =   x   ,   window   =   self   .   backsee   ,   )   betas   =   ols   .   beta   alpha   =   ols   .   alpha   return   pd   .   concat   ( [   alpha   ,   betas   ] ,   axis   =   1   )   except   Exception   :   #   \u6709\u4e9b \u6570\u636e \u603b\u5171 \u4e0d\u8db3 \uff0c \u90a3 \u5c31 \u8df3 \u8fc7   ...   __ init __   (   factors   ,   minus _ group   =   3   ,   backsee   =   20   ,   rets   =   None   ,   value _ weighted   =   1   ,   add _ market   =   1   ,   add _ market _ series   =   None   ,   factors _ names   =   None   ,   betas _ rets   =   0   ,   total _ cap   =   0   )   \u00b6   \u4f7f\u7528 fama \u4e09 \u56e0\u5b50 \u7684 \u65b9\u6cd5 \uff0c \u5c06 \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u62c6\u5206 \u51fa \u5404\u4e2a \u56e0\u5b50 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u4ee5\u53ca \u7279\u8d28 \u7684 \u6536\u76ca \u6536\u76ca\u7387   \u5206\u522b \u8ba1\u7b97 \u6bcf \u4e00\u671f \uff0c \u5404\u4e2a \u56e0\u5b50 \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u503c \uff0c \u8d85\u989d \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u56e0\u5b50 \u7684 \u66b4\u9732 \uff0c \u4ee5\u53ca \u7279\u8d28 \u6536\u76ca \u6536\u76ca\u7387   Parameters   \u00b6   factors   :   List [ pd . DataFrame ]   \u7528\u4e8e \u89e3\u91ca \u6536\u76ca \u7684 \u5404\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf \u4e00\u4e2a \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 dataframe   minus _ group   :   Union [ list ,   float ] ,   optional   \u6bcf \u4e00\u4e2a \u56e0\u5b50 \u5c06 \u622a\u9762 \u4e0a \u7684 \u80a1\u7968 \u5206\u4e3a \u51e0\u7ec4 ,   by   default   3   backsee   :   int ,   optional   \u505a \u65f6\u5e8f \u56de\u5f52 \u65f6 \uff0c \u56de\u770b \u7684 \u5929\u6570 ,   by   default   20   rets   :   pd . DataFrame ,   optional   \u6bcf \u53ea \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u5f53\u65e5 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   None   value _ weighted   :   bool ,   optional   \u662f\u5426 \u4f7f\u7528 \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   1   add _ market   :   bool ,   optional   \u662f\u5426 \u52a0\u5165 \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u56e0\u5b50 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307 \u7684 \u6bcf\u65e5 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   1   add _ market _ series   :   bool ,   optional   \u52a0\u5165 \u7684 \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u6570\u636e \uff0c \u5982\u679c \u6ca1 \u6307\u5b9a \uff0c \u5219 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307 \u7684 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   None   factors _ names   :   list ,   optional   \u5404\u4e2a \u56e0\u5b50 \u7684 \u540d\u5b57 \uff0c \u9ed8\u8ba4 \u4e3a fac0 ( \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u56e0\u5b50 \uff0c \u5982\u679c \u6ca1\u6709 \uff0c \u5219 \u4ece fac1 \u5f00\u59cb ) , fac1 , fac2 , fac3 ,   by   default   None   betas _ rets   :   bool ,   optional   \u662f\u5426 \u8ba1\u7b97 \u6bcf \u53ea \u4e2a\u80a1 \u7684 \u7531\u4e8e \u66b4\u9732 \u5728 \u6bcf\u4e2a \u56e0\u5b50 \u4e0a \u6240 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4669   4670   4671   4672   4673   4674   4675   4676   4677   4678   4679   4680   4681   4682   4683   4684   4685   4686   4687   4688   4689   4690   4691   4692   4693   4694   4695   4696   4697   4698   4699   4700   4701   4702   4703   4704   4705   4706   4707   4708   4709   4710   4711   4712   4713   4714   4715   4716   4717   4718   4719   4720   4721   4722   4723   4724   4725   4726   4727   4728   4729   4730   4731   4732   4733   4734   4735   4736   4737   4738   4739   4740   4741   4742   4743   4744   4745   4746   4747   4748   4749   4750   4751   4752   4753   4754   4755   4756   4757   4758   4759   4760   4761   4762   4763   4764   4765   4766   4767   4768   4769   4770   4771   4772   4773   4774   4775   4776   4777   4778   4779   4780   4781   4782   4783   4784   4785   4786   4787   4788   4789   4790   4791   4792   4793   4794   4795   4796   4797   4798   4799   4800   4801   4802   4803   4804   4805   4806   4807   4808   4809   4810   4811   4812   4813   4814   4815   4816   4817   4818   4819   4820   4821   4822   4823   4824   4825   4826   4827   4828   4829   4830   4831   4832   def   __ init __   (   self   ,   factors   :   List   [   pd   .   DataFrame   ] ,   minus _ group   :   Union   [   list   ,   float   ]   =   3   ,   backsee   :   int   =   20   ,   rets   :   pd   .   DataFrame   =   None   ,   value _ weighted   :   bool   =   1   ,   add _ market   :   bool   =   1   ,   add _ market _ series   :   pd   .   Series   =   None   ,   factors _ names   :   list   =   None   ,   betas _ rets   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 fama \u4e09 \u56e0\u5b50 \u7684 \u65b9\u6cd5 \uff0c \u5c06 \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u62c6\u5206 \u51fa \u5404\u4e2a \u56e0\u5b50 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u4ee5\u53ca \u7279\u8d28 \u7684 \u6536\u76ca \u6536\u76ca\u7387   \u5206\u522b \u8ba1\u7b97 \u6bcf \u4e00\u671f \uff0c \u5404\u4e2a \u56e0\u5b50 \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u503c \uff0c \u8d85\u989d \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u56e0\u5b50 \u7684 \u66b4\u9732 \uff0c \u4ee5\u53ca \u7279\u8d28 \u6536\u76ca \u6536\u76ca\u7387   Parameters   ----------   factors   :   List [ pd . DataFrame ]   \u7528\u4e8e \u89e3\u91ca \u6536\u76ca \u7684 \u5404\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf \u4e00\u4e2a \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 dataframe   minus _ group   :   Union [ list ,   float ] ,   optional   \u6bcf \u4e00\u4e2a \u56e0\u5b50 \u5c06 \u622a\u9762 \u4e0a \u7684 \u80a1\u7968 \u5206\u4e3a \u51e0\u7ec4 ,   by   default   3   backsee   :   int ,   optional   \u505a \u65f6\u5e8f \u56de\u5f52 \u65f6 \uff0c \u56de\u770b \u7684 \u5929\u6570 ,   by   default   20   rets   :   pd . DataFrame ,   optional   \u6bcf \u53ea \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u5f53\u65e5 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   None   value _ weighted   :   bool ,   optional   \u662f\u5426 \u4f7f\u7528 \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   1   add _ market   :   bool ,   optional   \u662f\u5426 \u52a0\u5165 \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u56e0\u5b50 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307 \u7684 \u6bcf\u65e5 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   1   add _ market _ series   :   bool ,   optional   \u52a0\u5165 \u7684 \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u6570\u636e \uff0c \u5982\u679c \u6ca1 \u6307\u5b9a \uff0c \u5219 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307 \u7684 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   None   factors _ names   :   list ,   optional   \u5404\u4e2a \u56e0\u5b50 \u7684 \u540d\u5b57 \uff0c \u9ed8\u8ba4 \u4e3a fac0 ( \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u56e0\u5b50 \uff0c \u5982\u679c \u6ca1\u6709 \uff0c \u5219 \u4ece fac1 \u5f00\u59cb ) , fac1 , fac2 , fac3 ,   by   default   None   betas _ rets   :   bool ,   optional   \u662f\u5426 \u8ba1\u7b97 \u6bcf \u53ea \u4e2a\u80a1 \u7684 \u7531\u4e8e \u66b4\u9732 \u5728 \u6bcf\u4e2a \u56e0\u5b50 \u4e0a \u6240 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   \" \" \"   start   =   max   (   [   int   (   datetime   .   datetime   .   strftime   (   i   .   index   .   min   ( ) ,   \" % Y% m   % d   \"   ) )   for   i   in   factors   ]   )   self   .   backsee   =   backsee   self   .   factors   =   factors   self   .   factors _ names   =   factors _ names   if   isinstance   (   minus _ group   ,   int   ) :   minus _ group   =   [   minus _ group   ]   *   len   (   factors   )   self   .   minus _ group   =   minus _ group   if   rets   is   None   :   closes   =   read _ daily   (   close   =   1   ,   start   =   start   )   rets   =   closes   /   closes   .   shift   (   1   )   -   1   self   .   rets   =   rets   self   .   factors _ group   =   [   to _ group   (   i   ,   group   =   j   )   for   i   ,   j   in   zip   (   self   .   factors   ,   self   .   minus _ group   )   ]   self   .   factors _ group _ long   =   [ (   i   = =   0   )   +   0   for   i   in   self   .   factors _ group   ]   self   .   factors _ group _ short   =   [   (   i   = =   (   j   -   1   ) )   +   0   for   i   ,   j   in   zip   (   self   .   factors _ group   ,   self   .   minus _ group   )   ]   self   .   value _ weighted   =   value _ weighted   if   value _ weighted   :   if   total _ cap   :   self   .   cap   =   read _ daily   (   total _ cap   =   1   ,   start   =   start   )   self   .   cap   =   read _ daily   (   flow _ cap   =   1   ,   start   =   start   )   self   .   factors _ group _ long   =   [   self   .   cap   *   i   for   i   in   self   .   factors _ group _ long   ]   self   .   factors _ group _ short   =   [   self   .   cap   *   i   for   i   in   self   .   factors _ group _ short   ]   self   .   factors _ group _ long   =   [   (   i   .   T   /   i   .   T   .   sum   ( ) )   .   T   for   i   in   self   .   factors _ group _ long   ]   self   .   factors _ group _ short   =   [   (   i   .   T   /   i   .   T   .   sum   ( ) )   .   T   for   i   in   self   .   factors _ group _ short   ]   self   .   factors _ rets _ long   =   [   (   self   .   rets   *   i   )   .   sum   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ long   )   ]   self   .   factors _ rets _ short   =   [   (   self   .   rets   *   i   )   .   sum   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ short   )   ]   else   :   self   .   factors _ rets _ long   =   [   (   self   .   rets   *   i   )   .   mean   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ long   )   ]   self   .   factors _ rets _ short   =   [   (   self   .   rets   *   i   )   .   mean   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ short   )   ]   self   .   rets _ long   =   pd   .   concat   (   self   .   factors _ rets _ long   ,   axis   =   1   )   self   .   rets _ short   =   pd   .   concat   (   self   .   factors _ rets _ short   ,   axis   =   1   )   self   .   __ factors _ rets   =   self   .   rets _ long   -   self   .   rets _ short   if   add _ market _ series   is   not   None   :   add _ market   =   1   self   .   add _ market   =   add _ market   if   add _ market   :   if   add _ market _ series   is   None   :   closes   =   read _ market   (   close   =   1   ,   every _ stock   =   0   ,   start   =   start   )   .   to _ frame   (   \" fac0 \"   )   else   :   closes   =   add _ market _ series   .   to _ frame   (   \" fac0 \"   )   rets   =   closes   /   closes   .   shift   (   1   )   -   1   self   .   __ factors _ rets   =   pd   .   concat   ( [   rets   ,   self   .   __ factors _ rets   ] ,   axis   =   1   )   if   factors _ names   is   not   None   :   factors _ names   =   [   \" \u5e02\u573a \"   ]   +   factors _ names   self   .   __ data   =   self   .   make _ df   (   self   .   rets   ,   self   .   __ factors _ rets   )   tqdm   .   auto   .   tqdm   .   pandas   ( )   self   .   __ coefficients   =   (   self   .   __ data   .   groupby   (   \" code \"   )   .   progress _ apply   (   self   .   ols _ in   )   .   reset _ index   ( )   )   self   .   __ coefficients   =   self   .   __ coefficients   .   rename   (   columns   =   {   i   :   \" co \"   +   i   for   i   in   list   (   self   .   __ coefficients   .   columns   )   if   \" fac \"   in   i   }   )   self   .   __ data   =   pd   .   merge   (   self   .   __ data   .   reset _ index   ( ) ,   self   .   __ coefficients   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   betas   =   [   self   .   __ data   [   i   ]   *   self   .   __ data   [   \" co \"   +   i   ]   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   )   ]   betas   =   sum   (   betas   )   self   .   __ data   =   self   .   __ data   .   assign   (   idiosyncratic   =   self   .   __ data   .   ret   -   self   .   __ data   .   intercept   -   betas   )   self   .   __ idiosyncratic   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" idiosyncratic \"   )   self   .   __ alphas   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" intercept \"   )   if   factors _ names   is   None   :   self   .   __ betas   =   {   i   :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   )   }   else   :   facs   =   [   i   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   ) ]   self   .   __ betas   =   {   factors _ names   [   num   ] :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   num   ,   i   in   enumerate   (   facs   )   }   if   betas _ rets   :   if   add _ market   :   if   add _ market _ series   is   None   :   factors   =   [   read _ market   (   close   =   1   ,   start   =   start   ) ]   +   factors   else   :   factors   =   [   pd   .   DataFrame   (   {   k   :   add _ market _ series   for   k   in   list   (   factors   [   0   ]   .   columns   ) } ,   index   =   factors   [   0   ]   .   index   ,   )   ]   +   factors   self   .   __ betas _ rets   =   {   d1   [   0   ] :   d1   [   1   ]   *   d2   for   d1   ,   d2   in   zip   (   self   .   __ betas   ,   factors   )   }   else   :   self   .   __ betas _ rets   =   \" \u60a8 \u5982\u679c \u60f3 \u8ba1\u7b97 \u5404\u4e2a \u80a1\u7968 \u5728 \u5404\u4e2a \u56e0\u5b50 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u8bf7 \u5148 \u6307\u5b9a betas _ rets \u53c2\u6570 \u4e3a True \"   pure _ helper   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4607   4608   4609   4610   4611   4612   4613   4614   4615   4616   4617   4618   4619   4620   4621   4622   4623   4624   4625   4626   4627   4628   4629   4630   4631   4632   4633   4634   4635   4636   4637   4638   4639   4640   4641   4642   4643   4644   4645   4646   4647   4648   4649   4650   4651   4652   4653   4654   4655   4656   4657   4658   4659   4660   4661   4662   4663   4664   class   pure _ helper   (   object   ) :   def   __ init __   (   self   ,   df _ main   :   pd   .   DataFrame   ,   df _ helper   :   pd   .   DataFrame   ,   func   :   Callable   =   None   ,   group   :   int   =   10   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 \u56e0\u5b50 b \u7684 \u503c \u5927\u5c0f \uff0c \u5bf9 \u56e0\u5b50 a \u8fdb\u884c \u5206\u7ec4 \uff0c \u5e76 \u53ef\u4ee5 \u5728 \u7ec4\u5185 \u8fdb\u884c \u67d0\u79cd \u64cd\u4f5c   Parameters   ----------   df _ main   :   pd . DataFrame   \u8981 \u88ab \u5206\u7ec4 \u5e76 \u8fdb\u884c \u64cd\u4f5c \u7684 \u56e0\u5b50   df _ helper   :   pd . DataFrame   \u7528\u6765 \u505a \u5206\u7ec4 \u7684 \u4f9d\u636e   func   :   Callable ,   optional   \u5206\u7ec4 \u540e \uff0c \u7ec4\u5185 \u8981 \u8fdb\u884c \u7684 \u64cd\u4f5c ,   by   default   None   group   :   int ,   optional   \u8981\u5206 \u7684 \u7ec4\u6570 ,   by   default   10   \" \" \"   self   .   df _ main   =   df _ main   self   .   df _ helper   =   df _ helper   self   .   func   =   func   self   .   group   =   group   if   self   .   func   is   None   :   self   .   __ data   =   self   .   sort _ a _ with _ b   ( )   else   :   self   .   __ data   =   self   .   sort _ a _ with _ b _ func   ( )   @ property   def   data   (   self   ) :   return   self   .   __ data   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   return   self   .   data   def   sort _ a _ with _ b   (   self   ) :   dfb   =   to _ group   (   self   .   df _ helper   ,   group   =   self   .   group   )   dfb   =   dfb   .   stack   ( )   .   reset _ index   ( )   dfb   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" group \"   ]   dfa   =   self   .   df _ main   .   stack   ( )   .   reset _ index   ( )   dfa   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" target \"   ]   df   =   pd   .   merge   (   dfa   ,   dfb   ,   on   =   [   \" date \"   ,   \" code \"   ] )   return   df   def   sort _ a _ with _ b _ func   (   self   ) :   the _ func   =   partial   (   self   .   func   )   df   =   self   .   sort _ a _ with _ b   ( )   .   drop   (   columns   =   [   \" code \"   ] )   df   =   (   df   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   the _ func   )   .   drop   (   columns   =   [   \" group \"   ] )   .   reset _ index   ( )   )   df   =   df   .   pivot   (   index   =   \" date \"   ,   columns   =   \" group \"   ,   values   =   \" target \"   )   df   .   columns   =   [   f   \" group   {   str   (   int   (   i   +   1   ) )   }   \"   for   i   in   list   (   df   .   columns   ) ]   return   df   __ init __   (   df _ main   ,   df _ helper   ,   func   =   None   ,   group   =   10   )   \u00b6   \u4f7f\u7528 \u56e0\u5b50 b \u7684 \u503c \u5927\u5c0f \uff0c \u5bf9 \u56e0\u5b50 a \u8fdb\u884c \u5206\u7ec4 \uff0c \u5e76 \u53ef\u4ee5 \u5728 \u7ec4\u5185 \u8fdb\u884c \u67d0\u79cd \u64cd\u4f5c   Parameters   \u00b6   df _ main   :   pd . DataFrame   \u8981 \u88ab \u5206\u7ec4 \u5e76 \u8fdb\u884c \u64cd\u4f5c \u7684 \u56e0\u5b50   df _ helper   :   pd . DataFrame   \u7528\u6765 \u505a \u5206\u7ec4 \u7684 \u4f9d\u636e   func   :   Callable ,   optional   \u5206\u7ec4 \u540e \uff0c \u7ec4\u5185 \u8981 \u8fdb\u884c \u7684 \u64cd\u4f5c ,   by   default   None   group   :   int ,   optional   \u8981\u5206 \u7684 \u7ec4\u6570 ,   by   default   10   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4608   4609   4610   4611   4612   4613   4614   4615   4616   4617   4618   4619   4620   4621   4622   4623   4624   4625   4626   4627   4628   4629   4630   4631   4632   4633   4634   4635   def   __ init __   (   self   ,   df _ main   :   pd   .   DataFrame   ,   df _ helper   :   pd   .   DataFrame   ,   func   :   Callable   =   None   ,   group   :   int   =   10   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 \u56e0\u5b50 b \u7684 \u503c \u5927\u5c0f \uff0c \u5bf9 \u56e0\u5b50 a \u8fdb\u884c \u5206\u7ec4 \uff0c \u5e76 \u53ef\u4ee5 \u5728 \u7ec4\u5185 \u8fdb\u884c \u67d0\u79cd \u64cd\u4f5c   Parameters   ----------   df _ main   :   pd . DataFrame   \u8981 \u88ab \u5206\u7ec4 \u5e76 \u8fdb\u884c \u64cd\u4f5c \u7684 \u56e0\u5b50   df _ helper   :   pd . DataFrame   \u7528\u6765 \u505a \u5206\u7ec4 \u7684 \u4f9d\u636e   func   :   Callable ,   optional   \u5206\u7ec4 \u540e \uff0c \u7ec4\u5185 \u8981 \u8fdb\u884c \u7684 \u64cd\u4f5c ,   by   default   None   group   :   int ,   optional   \u8981\u5206 \u7684 \u7ec4\u6570 ,   by   default   10   \" \" \"   self   .   df _ main   =   df _ main   self   .   df _ helper   =   df _ helper   self   .   func   =   func   self   .   group   =   group   if   self   .   func   is   None   :   self   .   __ data   =   self   .   sort _ a _ with _ b   ( )   else   :   self   .   __ data   =   self   .   sort _ a _ with _ b _ func   ( )   pure _ linprog   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5557   5558   5559   5560   5561   5562   5563   5564   5565   5566   5567   5568   5569   5570   5571   5572   5573   5574   5575   5576   5577   5578   5579   5580   5581   5582   5583   5584   5585   5586   5587   5588   5589   5590   5591   5592   5593   5594   5595   5596   5597   5598   5599   5600   5601   5602   5603   5604   5605   5606   5607   5608   5609   5610   5611   5612   5613   5614   5615   5616   5617   5618   5619   5620   5621   5622   5623   5624   5625   5626   5627   5628   5629   5630   5631   5632   5633   5634   5635   5636   5637   5638   5639   5640   5641   5642   5643   5644   5645   5646   5647   5648   5649   5650   5651   5652   5653   5654   5655   5656   5657   5658   5659   5660   5661   5662   5663   5664   5665   5666   5667   5668   5669   5670   5671   5672   5673   5674   5675   5676   5677   5678   5679   5680   5681   5682   5683   5684   5685   5686   5687   5688   5689   5690   5691   5692   5693   5694   5695   5696   5697   5698   5699   5700   5701   5702   5703   5704   5705   5706   5707   5708   5709   5710   5711   5712   5713   5714   5715   5716   5717   5718   5719   5720   5721   5722   5723   5724   5725   5726   5727   5728   5729   5730   5731   5732   5733   5734   5735   5736   5737   5738   5739   5740   5741   5742   5743   5744   5745   5746   5747   5748   5749   5750   5751   5752   5753   5754   5755   5756   5757   5758   5759   5760   5761   5762   5763   5764   5765   5766   5767   5768   5769   5770   5771   5772   5773   5774   5775   5776   5777   5778   5779   5780   5781   5782   5783   5784   5785   5786   5787   5788   5789   5790   5791   5792   5793   5794   5795   5796   5797   5798   5799   5800   5801   5802   5803   5804   5805   5806   5807   5808   5809   5810   5811   5812   5813   5814   5815   5816   5817   5818   5819   class   pure _ linprog   (   object   ) :   def   __ init __   (   self   ,   facs   :   pd   .   DataFrame   ,   total _ caps   :   pd   .   DataFrame   =   None   ,   indu _ dummys   :   pd   .   DataFrame   =   None   ,   index _ weights _ hs300   :   pd   .   DataFrame   =   None   ,   index _ weights _ zz500   :   pd   .   DataFrame   =   None   ,   index _ weights _ zz1000   :   pd   .   DataFrame   =   None   ,   opens   :   pd   .   DataFrame   =   None   ,   closes   :   pd   .   DataFrame   =   None   ,   hs300 _ closes   :   pd   .   DataFrame   =   None   ,   zz500 _ closes   :   pd   .   DataFrame   =   None   ,   zz1000 _ closes   :   pd   .   DataFrame   =   None   ,   )   - >   None   :   \" \" \" \u7ebf\u6027 \u89c4\u5212 \u7ebf\u6027\u89c4\u5212 \u6c42\u89e3 \uff0c \u76ee\u6807 \u4e3a \u9884\u671f \u6536\u76ca \u6536\u76ca\u7387 \u6700\u5927 \uff08 \u5373 \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f\u65f6 \uff0c \u7ec4\u5408 \u56e0\u5b50 \u503c \u6700\u5c0f \uff09   \u6761\u4ef6 \u4e3a \uff0c \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u5e02\u503c \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u603b \u5e02\u503c \u7684 \u5bf9\u6570 \uff1b \u542b\u4e49 \uff1a \u7ec4\u5408 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u4e0e \u6307\u6570 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u76f8\u7b49 \uff09   \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u884c\u4e1a \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff09 \uff0c \u4e2a\u80a1 \u504f\u79bb \u5728 1% \u4ee5\u5185 \uff0c \u6210\u5206 \u80a1\u6743 \u91cd\u4e4b \u548c \u5728 80% \u4ee5\u4e0a   \u5206\u522b \u5728 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4e0a \u4f18\u5316 \u6c42\u89e3   Parameters   ----------   facs   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   total _ caps   :   pd . DataFrame ,   optional   \u603b \u5e02\u503c \u6570\u636e \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u603b \u5e02\u503c ,   by   default   None   indu _ dummys   :   pd . DataFrame ,   optional   \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u5305\u542b \u4e24\u5217 \u540d\u4e3a date \u7684 \u65f6\u95f4 \u548c code \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u4ee5\u53ca 30 + \u5217 \u884c\u4e1a \u54d1 \u53d8\u91cf ,   by   default   None   index _ weights _ hs300   :   pd . DataFrame ,   optional   \u6caa \u6df1 300 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   index _ weights _ zz500   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 500 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   index _ weights _ zz1000   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 1000 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   opens   :   pd . DataFrame ,   optional   \u6bcf\u6708 \u6708\u521d \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e ,   by   default   None   closes   :   pd . DataFrame ,   optional   \u6bcf\u6708 \u6708\u672b \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e ,   by   default   None   hs300 _ closes   :   pd . DataFrame ,   optional   \u6caa \u6df1 300 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e ,   by   default   None   zz500 _ closes   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 500 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e , ,   by   default   None   zz1000 _ closes   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 1000 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e , ,   by   default   None   \" \" \"   self   .   facs   =   facs   .   resample   (   \" M \"   )   .   last   ( )   if   total _ caps   is   None   :   total _ caps   =   standardlize   (   np   .   log   (   read _ daily   (   total _ cap   =   1   )   .   resample   (   \" M \"   )   .   last   ( ) )   )   if   indu _ dummys   is   None   :   indu _ dummys   =   read _ daily   (   zxindustry _ dummy _ code   =   1   )   if   index _ weights _ hs300   is   None   :   index _ weights _ hs300   =   read _ daily   (   hs300 _ member _ weight   =   1   )   if   index _ weights _ zz500   is   None   :   index _ weights _ zz500   =   read _ daily   (   zz500 _ member _ weight   =   1   )   if   index _ weights _ zz1000   is   None   :   index _ weights _ zz1000   =   read _ daily   (   zz1000 _ member _ weight   =   1   )   if   opens   is   None   :   opens   =   read _ daily   (   open   =   1   )   .   resample   (   \" M \"   )   .   first   ( )   if   closes   is   None   :   closes   =   read _ daily   (   close   =   1   )   .   resample   (   \" M \"   )   .   last   ( )   if   hs300 _ closes   is   None   :   hs300 _ closes   =   read _ index _ single   (   \" 000300 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   if   zz500 _ closes   is   None   :   zz500 _ closes   =   read _ index _ single   (   \" 000905 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   if   zz1000 _ closes   is   None   :   zz1000 _ closes   =   read _ index _ single   (   \" 000852 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   self   .   total _ caps   =   total _ caps   self   .   indu _ dummys   =   indu _ dummys   self   .   index _ weights _ hs300   =   index _ weights _ hs300   self   .   index _ weights _ zz500   =   index _ weights _ zz500   self   .   index _ weights _ zz1000   =   index _ weights _ zz1000   self   .   hs300 _ weights   =   [ ]   self   .   zz500 _ weights   =   [ ]   self   .   zz1000 _ weights   =   [ ]   self   .   ret _ next   =   closes   /   opens   -   1   self   .   ret _ hs300   =   hs300 _ closes   .   pct _ change   ( )   self   .   ret _ zz500   =   zz500 _ closes   .   pct _ change   ( )   self   .   ret _ zz1000   =   zz1000 _ closes   .   pct _ change   ( )   def   optimize _ one _ day   (   self   ,   fac   :   pd   .   DataFrame   ,   flow _ cap   :   pd   .   DataFrame   ,   indu _ dummy   :   pd   .   DataFrame   ,   index _ weight   :   pd   .   DataFrame   ,   name   :   str   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4f18\u5316 \u5355\u671f \u6c42\u89e3   Parameters   ----------   fac   :   pd . DataFrame   \u5355\u671f \u56e0\u5b50 \u503c \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u56e0\u5b50 \u503c   flow _ cap   :   pd . DataFrame   \u6d41\u901a \u5e02\u503c \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u7684 \u6d41\u901a \u5e02\u503c   indu _ dummy   :   pd . DataFrame   \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c index \u4e3a code \uff0c columns \u4e3a \u884c\u4e1a \u4ee3\u7801 \uff0c values \u4e3a \u54d1 \u53d8\u91cf   index _ weight   :   pd . DataFrame   \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u6743\u91cd   Returns   -------   pd . DataFrame   \u5f53\u671f \u6700\u4f73 \u6743\u91cd   \" \" \"   if   fac   .   shape   [   0   ]   >   0   and   index _ weight   .   shape   [   1   ]   >   0   :   date   =   fac   .   columns   .   tolist   ( ) [   0   ]   codes   =   list   (   set   (   fac   .   index   )   |   set   (   flow _ cap   .   index   )   |   set   (   indu _ dummy   .   index   )   |   set   (   index _ weight   .   index   )   )   fac   ,   flow _ cap   ,   indu _ dummy   ,   index _ weight   =   list   (   map   (   lambda   x   :   x   .   reindex   (   codes   )   .   fillna   (   0   )   .   to _ numpy   ( ) ,   [   fac   ,   flow _ cap   ,   indu _ dummy   ,   index _ weight   ] ,   )   )   sign _ index _ weight   =   np   .   sign   (   index _ weight   )   #   \u4e2a \u80a1\u6743 \u91cd\u5927 \u4e8e \u96f6 \u3001 \u504f\u79bb 1%   bounds   =   list   (   zip   (   select _ max   (   index _ weight   -   0.01   ,   0   )   .   flatten   ( ) ,   select _ min   (   index _ weight   +   0.01   ,   1   )   .   flatten   ( ) ,   )   )   #   \u5e02\u503c \u4e2d\u6027 + \u884c\u4e1a \u4e2d\u6027 + \u6743\u91cd \u548c \u4e3a 1   huge   =   np   .   vstack   ( [   flow _ cap   .   T   ,   indu _ dummy   .   T   ,   np   .   array   ( [   1   ]   *   len   (   codes   ) ) ] )   target   =   (   list   (   flow _ cap   .   T   @   index _ weight   .   flatten   ( ) )   +   list   ( (   indu _ dummy   .   T   @   index _ weight   )   .   flatten   ( ) )   +   [   np   .   sum   (   index _ weight   ) ]   )   #   \u5199 \u7ebf\u6027 \u6761\u4ef6   c   =   fac   .   T   .   flatten   ( )   .   tolist   ( )   a   =   sign _ index _ weight   .   reshape   ( (   1   ,   -   1   ) )   .   tolist   ( )   b   =   [   0.8   ]   #   \u4f18\u5316 \u6c42\u89e3   res   =   linprog   (   c   ,   a   ,   b   ,   huge   ,   target   ,   bounds   )   if   res   .   success   :   return   pd   .   DataFrame   ( {   date   :   res   .   x   .   tolist   ( ) } ,   index   =   codes   )   else   :   #   raise   NotImplementedError ( f \" { date } \u8fd9 \u4e00\u671f \u7684 \u4f18\u5316 \u5931\u8d25 \uff0c \u8bf7 \u68c0\u67e5 \" )   logger   .   warning   (   f   \"   {   name   }   \u5728   {   date   }   \u8fd9 \u4e00\u671f \u7684 \u4f18\u5316 \u5931\u8d25 \uff0c \u8bf7 \u68c0\u67e5 \"   )   return   None   else   :   return   None   def   optimize _ many _ days   (   self   ,   startdate   :   int   =   STATES   [   \" START \"   ] ) :   dates   =   [   i   for   i   in   self   .   facs   .   index   if   i   > =   pd   .   Timestamp   (   str   (   startdate   ) ) ]   for   date   in   tqdm   .   auto   .   tqdm   (   dates   ) :   fac   =   self   .   facs   [   self   .   facs   .   index   = =   date   ]   .   T   .   dropna   ( )   total _ cap   =   self   .   total _ caps   [   self   .   total _ caps   .   index   = =   date   ]   .   T   .   dropna   ( )   indu _ dummy   =   self   .   indu _ dummys   [   self   .   indu _ dummys   .   date   < =   date   ]   indu _ dummy   =   (   indu _ dummy   [   indu _ dummy   .   date   = =   indu _ dummy   .   date   .   max   ( ) ]   .   drop   (   columns   =   [   \" date \"   ] )   .   set _ index   (   \" code \"   )   )   index _ weight _ hs300   =   self   .   index _ weights _ hs300   [   self   .   index _ weights _ hs300   .   index   = =   date   ]   .   T   .   dropna   ( )   index _ weight _ zz500   =   self   .   index _ weights _ zz500   [   self   .   index _ weights _ zz500   .   index   = =   date   ]   .   T   .   dropna   ( )   index _ weight _ zz1000   =   self   .   index _ weights _ zz1000   [   self   .   index _ weights _ zz1000   .   index   = =   date   ]   .   T   .   dropna   ( )   weight _ hs300   =   self   .   optimize _ one _ day   (   fac   ,   total _ cap   ,   indu _ dummy   ,   index _ weight _ hs300   ,   \" hs300 \"   )   weight _ zz500   =   self   .   optimize _ one _ day   (   fac   ,   total _ cap   ,   indu _ dummy   ,   index _ weight _ zz500   ,   \" zz500 \"   )   weight _ zz1000   =   self   .   optimize _ one _ day   (   fac   ,   total _ cap   ,   indu _ dummy   ,   index _ weight _ zz1000   ,   \" zz1000 \"   )   self   .   hs300 _ weights   .   append   (   weight _ hs300   )   self   .   zz500 _ weights   .   append   (   weight _ zz500   )   self   .   zz1000 _ weights   .   append   (   weight _ zz1000   )   self   .   hs300 _ weights   =   pd   .   concat   (   self   .   hs300 _ weights   ,   axis   =   1   )   .   T   self   .   zz500 _ weights   =   pd   .   concat   (   self   .   zz500 _ weights   ,   axis   =   1   )   .   T   self   .   zz1000 _ weights   =   pd   .   concat   (   self   .   zz1000 _ weights   ,   axis   =   1   )   .   T   def   make _ contrast   (   self   ,   weight   ,   index   ,   name   )   - >   list   [   pd   .   DataFrame   ] :   ret   =   (   weight   .   shift   (   1   )   *   self   .   ret _ next   )   .   sum   (   axis   =   1   )   abret   =   ret   -   index   rets   =   pd   .   concat   ( [   ret   ,   index   ,   abret   ] ,   axis   =   1   )   .   dropna   ( )   rets   .   columns   =   [   f   \"   {   name   }   \u589e\u5f3a \u7ec4\u5408 \u51c0\u503c \"   ,   f   \"   {   name   }   \u6307\u6570 \u51c0\u503c \"   ,   f   \"   {   name   }   \u589e\u5f3a \u7ec4\u5408 \u8d85\u989d \u51c0\u503c \"   ]   rets   =   (   rets   +   1   )   .   cumprod   ( )   rets   =   rets   .   apply   (   lambda   x   :   x   /   x   .   iloc   [   0   ] )   comments   =   comments _ on _ twins   (   rets   [   f   \"   {   name   }   \u589e\u5f3a \u7ec4\u5408 \u8d85\u989d \u51c0\u503c \"   ] ,   abret   .   dropna   ( ) )   return   comments   ,   rets   def   run   (   self   ,   startdate   :   int   =   STATES   [   \" START \"   ] )   - >   pd   .   DataFrame   :   \" \" \" \u8fd0\u884c \u89c4\u5212 \u6c42\u89e3   Parameters   ----------   startdate   :   int ,   optional   \u8d77\u59cb \u65e5\u671f ,   by   default   20130101   Returns   -------   pd . DataFrame   \u8d85\u989d \u7ee9\u6548 \u6307\u6807   \" \" \"   self   .   optimize _ many _ days   (   startdate   =   startdate   )   self   .   hs300 _ comments   ,   self   .   hs300 _ nets   =   self   .   make _ contrast   (   self   .   hs300 _ weights   ,   self   .   ret _ hs300   ,   \" \u6caa \u6df1 300 \"   )   self   .   zz500 _ comments   ,   self   .   zz500 _ nets   =   self   .   make _ contrast   (   self   .   zz500 _ weights   ,   self   .   ret _ zz500   ,   \" \u4e2d\u8bc1 500 \"   )   self   .   zz1000 _ comments   ,   self   .   zz1000 _ nets   =   self   .   make _ contrast   (   self   .   zz1000 _ weights   ,   self   .   ret _ zz1000   ,   \" \u4e2d\u8bc1 1000 \"   )   figs   =   cf   .   figures   (   pd   .   concat   ( [   self   .   hs300 _ nets   ,   self   .   zz500 _ nets   ,   self   .   zz1000 _ nets   ] ) ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   hs300 _ nets   .   columns   ) ) ,   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   zz500 _ nets   .   columns   ) ) ,   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   zz1000 _ nets   .   columns   ) ) ,   ] ,   asList   =   True   ,   )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   1   ,   3   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   subplot _ titles   =   [   \" \u6caa \u6df1 300 \u589e\u5f3a \"   ,   \" \u4e2d\u8bc1 500 \u589e\u5f3a \"   ,   \" \u4e2d\u8bc1 1000 \u589e\u5f3a \"   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   True   )   cf   .   iplot   (   sp   )   self   .   comments   =   pd   .   concat   (   [   self   .   hs300 _ comments   ,   self   .   zz500 _ comments   ,   self   .   zz1000 _ comments   ] ,   axis   =   1   )   self   .   comments   .   columns   =   [   \" \u6caa \u6df1 300 \u8d85\u989d \"   ,   \" \u4e2d\u8bc1 500 \u8d85\u989d \"   ,   \" \u4e2d\u8bc1 1000 \u8d85\u989d \"   ]   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   ,   NET _ VALUES _ WRITER   comments _ writer   =   COMMENTS _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   if   comments _ writer   is   not   None   :   self   .   hs300 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u6caa \u6df1 300 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   self   .   zz500 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 500 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   self   .   zz1000 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 1000 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   if   net _ values _ writer   is   not   None   :   self   .   hs300 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u6caa \u6df1 300 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   self   .   zz500 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 500 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   self   .   zz1000 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 1000 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   return   self   .   comments   .   T   __ init __   (   facs   ,   total _ caps   =   None   ,   indu _ dummys   =   None   ,   index _ weights _ hs300   =   None   ,   index _ weights _ zz500   =   None   ,   index _ weights _ zz1000   =   None   ,   opens   =   None   ,   closes   =   None   ,   hs300 _ closes   =   None   ,   zz500 _ closes   =   None   ,   zz1000 _ closes   =   None   )   \u00b6   \u7ebf\u6027 \u89c4\u5212 \u7ebf\u6027\u89c4\u5212 \u6c42\u89e3 \uff0c \u76ee\u6807 \u4e3a \u9884\u671f \u6536\u76ca \u6536\u76ca\u7387 \u6700\u5927 \uff08 \u5373 \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f\u65f6 \uff0c \u7ec4\u5408 \u56e0\u5b50 \u503c \u6700\u5c0f \uff09   \u6761\u4ef6 \u4e3a \uff0c \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u5e02\u503c \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u603b \u5e02\u503c \u7684 \u5bf9\u6570 \uff1b \u542b\u4e49 \uff1a \u7ec4\u5408 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u4e0e \u6307\u6570 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u76f8\u7b49 \uff09   \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u884c\u4e1a \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff09 \uff0c \u4e2a\u80a1 \u504f\u79bb \u5728 1% \u4ee5\u5185 \uff0c \u6210\u5206 \u80a1\u6743 \u91cd\u4e4b \u548c \u5728 80% \u4ee5\u4e0a   \u5206\u522b \u5728 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4e0a \u4f18\u5316 \u6c42\u89e3   Parameters   \u00b6   facs   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   total _ caps   :   pd . DataFrame ,   optional   \u603b \u5e02\u503c \u6570\u636e \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u603b \u5e02\u503c ,   by   default   None   indu _ dummys   :   pd . DataFrame ,   optional   \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u5305\u542b \u4e24\u5217 \u540d\u4e3a date \u7684 \u65f6\u95f4 \u548c code \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u4ee5\u53ca 30 + \u5217 \u884c\u4e1a \u54d1 \u53d8\u91cf ,   by   default   None   index _ weights _ hs300   :   pd . DataFrame ,   optional   \u6caa \u6df1 300 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   index _ weights _ zz500   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 500 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   index _ weights _ zz1000   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 1000 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   opens   :   pd . DataFrame ,   optional   \u6bcf\u6708 \u6708\u521d \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e ,   by   default   None   closes   :   pd . DataFrame ,   optional   \u6bcf\u6708 \u6708\u672b \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e ,   by   default   None   hs300 _ closes   :   pd . DataFrame ,   optional   \u6caa \u6df1 300 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e ,   by   default   None   zz500 _ closes   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 500 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e , ,   by   default   None   zz1000 _ closes   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 1000 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e , ,   by   default   None   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5558   5559   5560   5561   5562   5563   5564   5565   5566   5567   5568   5569   5570   5571   5572   5573   5574   5575   5576   5577   5578   5579   5580   5581   5582   5583   5584   5585   5586   5587   5588   5589   5590   5591   5592   5593   5594   5595   5596   5597   5598   5599   5600   5601   5602   5603   5604   5605   5606   5607   5608   5609   5610   5611   5612   5613   5614   5615   5616   5617   5618   5619   5620   5621   5622   5623   5624   5625   5626   5627   5628   5629   5630   5631   5632   5633   5634   5635   5636   def   __ init __   (   self   ,   facs   :   pd   .   DataFrame   ,   total _ caps   :   pd   .   DataFrame   =   None   ,   indu _ dummys   :   pd   .   DataFrame   =   None   ,   index _ weights _ hs300   :   pd   .   DataFrame   =   None   ,   index _ weights _ zz500   :   pd   .   DataFrame   =   None   ,   index _ weights _ zz1000   :   pd   .   DataFrame   =   None   ,   opens   :   pd   .   DataFrame   =   None   ,   closes   :   pd   .   DataFrame   =   None   ,   hs300 _ closes   :   pd   .   DataFrame   =   None   ,   zz500 _ closes   :   pd   .   DataFrame   =   None   ,   zz1000 _ closes   :   pd   .   DataFrame   =   None   ,   )   - >   None   :   \" \" \" \u7ebf\u6027 \u89c4\u5212 \u7ebf\u6027\u89c4\u5212 \u6c42\u89e3 \uff0c \u76ee\u6807 \u4e3a \u9884\u671f \u6536\u76ca \u6536\u76ca\u7387 \u6700\u5927 \uff08 \u5373 \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f\u65f6 \uff0c \u7ec4\u5408 \u56e0\u5b50 \u503c \u6700\u5c0f \uff09   \u6761\u4ef6 \u4e3a \uff0c \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u5e02\u503c \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u603b \u5e02\u503c \u7684 \u5bf9\u6570 \uff1b \u542b\u4e49 \uff1a \u7ec4\u5408 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u4e0e \u6307\u6570 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u76f8\u7b49 \uff09   \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u884c\u4e1a \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff09 \uff0c \u4e2a\u80a1 \u504f\u79bb \u5728 1% \u4ee5\u5185 \uff0c \u6210\u5206 \u80a1\u6743 \u91cd\u4e4b \u548c \u5728 80% \u4ee5\u4e0a   \u5206\u522b \u5728 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4e0a \u4f18\u5316 \u6c42\u89e3   Parameters   ----------   facs   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   total _ caps   :   pd . DataFrame ,   optional   \u603b \u5e02\u503c \u6570\u636e \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u603b \u5e02\u503c ,   by   default   None   indu _ dummys   :   pd . DataFrame ,   optional   \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u5305\u542b \u4e24\u5217 \u540d\u4e3a date \u7684 \u65f6\u95f4 \u548c code \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u4ee5\u53ca 30 + \u5217 \u884c\u4e1a \u54d1 \u53d8\u91cf ,   by   default   None   index _ weights _ hs300   :   pd . DataFrame ,   optional   \u6caa \u6df1 300 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   index _ weights _ zz500   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 500 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   index _ weights _ zz1000   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 1000 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   opens   :   pd . DataFrame ,   optional   \u6bcf\u6708 \u6708\u521d \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e ,   by   default   None   closes   :   pd . DataFrame ,   optional   \u6bcf\u6708 \u6708\u672b \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e ,   by   default   None   hs300 _ closes   :   pd . DataFrame ,   optional   \u6caa \u6df1 300 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e ,   by   default   None   zz500 _ closes   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 500 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e , ,   by   default   None   zz1000 _ closes   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 1000 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e , ,   by   default   None   \" \" \"   self   .   facs   =   facs   .   resample   (   \" M \"   )   .   last   ( )   if   total _ caps   is   None   :   total _ caps   =   standardlize   (   np   .   log   (   read _ daily   (   total _ cap   =   1   )   .   resample   (   \" M \"   )   .   last   ( ) )   )   if   indu _ dummys   is   None   :   indu _ dummys   =   read _ daily   (   zxindustry _ dummy _ code   =   1   )   if   index _ weights _ hs300   is   None   :   index _ weights _ hs300   =   read _ daily   (   hs300 _ member _ weight   =   1   )   if   index _ weights _ zz500   is   None   :   index _ weights _ zz500   =   read _ daily   (   zz500 _ member _ weight   =   1   )   if   index _ weights _ zz1000   is   None   :   index _ weights _ zz1000   =   read _ daily   (   zz1000 _ member _ weight   =   1   )   if   opens   is   None   :   opens   =   read _ daily   (   open   =   1   )   .   resample   (   \" M \"   )   .   first   ( )   if   closes   is   None   :   closes   =   read _ daily   (   close   =   1   )   .   resample   (   \" M \"   )   .   last   ( )   if   hs300 _ closes   is   None   :   hs300 _ closes   =   read _ index _ single   (   \" 000300 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   if   zz500 _ closes   is   None   :   zz500 _ closes   =   read _ index _ single   (   \" 000905 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   if   zz1000 _ closes   is   None   :   zz1000 _ closes   =   read _ index _ single   (   \" 000852 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   self   .   total _ caps   =   total _ caps   self   .   indu _ dummys   =   indu _ dummys   self   .   index _ weights _ hs300   =   index _ weights _ hs300   self   .   index _ weights _ zz500   =   index _ weights _ zz500   self   .   index _ weights _ zz1000   =   index _ weights _ zz1000   self   .   hs300 _ weights   =   [ ]   self   .   zz500 _ weights   =   [ ]   self   .   zz1000 _ weights   =   [ ]   self   .   ret _ next   =   closes   /   opens   -   1   self   .   ret _ hs300   =   hs300 _ closes   .   pct _ change   ( )   self   .   ret _ zz500   =   zz500 _ closes   .   pct _ change   ( )   self   .   ret _ zz1000   =   zz1000 _ closes   .   pct _ change   ( )   optimize _ one _ day   (   fac   ,   flow _ cap   ,   indu _ dummy   ,   index _ weight   ,   name   )   \u00b6   \u4f18\u5316 \u5355\u671f \u6c42\u89e3   Parameters   \u00b6   fac   :   pd . DataFrame   \u5355\u671f \u56e0\u5b50 \u503c \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u56e0\u5b50 \u503c   flow _ cap   :   pd . DataFrame   \u6d41\u901a \u5e02\u503c \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u7684 \u6d41\u901a \u5e02\u503c   indu _ dummy   :   pd . DataFrame   \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c index \u4e3a code \uff0c columns \u4e3a \u884c\u4e1a \u4ee3\u7801 \uff0c values \u4e3a \u54d1 \u53d8\u91cf   index _ weight   :   pd . DataFrame   \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u6743\u91cd   Returns   \u00b6   pd . DataFrame   \u5f53\u671f \u6700\u4f73 \u6743\u91cd   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5638   5639   5640   5641   5642   5643   5644   5645   5646   5647   5648   5649   5650   5651   5652   5653   5654   5655   5656   5657   5658   5659   5660   5661   5662   5663   5664   5665   5666   5667   5668   5669   5670   5671   5672   5673   5674   5675   5676   5677   5678   5679   5680   5681   5682   5683   5684   5685   5686   5687   5688   5689   5690   5691   5692   5693   5694   5695   5696   5697   5698   5699   5700   5701   5702   5703   5704   5705   5706   def   optimize _ one _ day   (   self   ,   fac   :   pd   .   DataFrame   ,   flow _ cap   :   pd   .   DataFrame   ,   indu _ dummy   :   pd   .   DataFrame   ,   index _ weight   :   pd   .   DataFrame   ,   name   :   str   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4f18\u5316 \u5355\u671f \u6c42\u89e3   Parameters   ----------   fac   :   pd . DataFrame   \u5355\u671f \u56e0\u5b50 \u503c \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u56e0\u5b50 \u503c   flow _ cap   :   pd . DataFrame   \u6d41\u901a \u5e02\u503c \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u7684 \u6d41\u901a \u5e02\u503c   indu _ dummy   :   pd . DataFrame   \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c index \u4e3a code \uff0c columns \u4e3a \u884c\u4e1a \u4ee3\u7801 \uff0c values \u4e3a \u54d1 \u53d8\u91cf   index _ weight   :   pd . DataFrame   \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u6743\u91cd   Returns   -------   pd . DataFrame   \u5f53\u671f \u6700\u4f73 \u6743\u91cd   \" \" \"   if   fac   .   shape   [   0   ]   >   0   and   index _ weight   .   shape   [   1   ]   >   0   :   date   =   fac   .   columns   .   tolist   ( ) [   0   ]   codes   =   list   (   set   (   fac   .   index   )   |   set   (   flow _ cap   .   index   )   |   set   (   indu _ dummy   .   index   )   |   set   (   index _ weight   .   index   )   )   fac   ,   flow _ cap   ,   indu _ dummy   ,   index _ weight   =   list   (   map   (   lambda   x   :   x   .   reindex   (   codes   )   .   fillna   (   0   )   .   to _ numpy   ( ) ,   [   fac   ,   flow _ cap   ,   indu _ dummy   ,   index _ weight   ] ,   )   )   sign _ index _ weight   =   np   .   sign   (   index _ weight   )   #   \u4e2a \u80a1\u6743 \u91cd\u5927 \u4e8e \u96f6 \u3001 \u504f\u79bb 1%   bounds   =   list   (   zip   (   select _ max   (   index _ weight   -   0.01   ,   0   )   .   flatten   ( ) ,   select _ min   (   index _ weight   +   0.01   ,   1   )   .   flatten   ( ) ,   )   )   #   \u5e02\u503c \u4e2d\u6027 + \u884c\u4e1a \u4e2d\u6027 + \u6743\u91cd \u548c \u4e3a 1   huge   =   np   .   vstack   ( [   flow _ cap   .   T   ,   indu _ dummy   .   T   ,   np   .   array   ( [   1   ]   *   len   (   codes   ) ) ] )   target   =   (   list   (   flow _ cap   .   T   @   index _ weight   .   flatten   ( ) )   +   list   ( (   indu _ dummy   .   T   @   index _ weight   )   .   flatten   ( ) )   +   [   np   .   sum   (   index _ weight   ) ]   )   #   \u5199 \u7ebf\u6027 \u6761\u4ef6   c   =   fac   .   T   .   flatten   ( )   .   tolist   ( )   a   =   sign _ index _ weight   .   reshape   ( (   1   ,   -   1   ) )   .   tolist   ( )   b   =   [   0.8   ]   #   \u4f18\u5316 \u6c42\u89e3   res   =   linprog   (   c   ,   a   ,   b   ,   huge   ,   target   ,   bounds   )   if   res   .   success   :   return   pd   .   DataFrame   ( {   date   :   res   .   x   .   tolist   ( ) } ,   index   =   codes   )   else   :   #   raise   NotImplementedError ( f \" { date } \u8fd9 \u4e00\u671f \u7684 \u4f18\u5316 \u5931\u8d25 \uff0c \u8bf7 \u68c0\u67e5 \" )   logger   .   warning   (   f   \"   {   name   }   \u5728   {   date   }   \u8fd9 \u4e00\u671f \u7684 \u4f18\u5316 \u5931\u8d25 \uff0c \u8bf7 \u68c0\u67e5 \"   )   return   None   else   :   return   None   run   (   startdate   =   STATES   [   ' START '   ] )   \u00b6   \u8fd0\u884c \u89c4\u5212 \u6c42\u89e3   Parameters   \u00b6   startdate   :   int ,   optional   \u8d77\u59cb \u65e5\u671f ,   by   default   20130101   Returns   \u00b6   pd . DataFrame   \u8d85\u989d \u7ee9\u6548 \u6307\u6807   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5754   5755   5756   5757   5758   5759   5760   5761   5762   5763   5764   5765   5766   5767   5768   5769   5770   5771   5772   5773   5774   5775   5776   5777   5778   5779   5780   5781   5782   5783   5784   5785   5786   5787   5788   5789   5790   5791   5792   5793   5794   5795   5796   5797   5798   5799   5800   5801   5802   5803   5804   5805   5806   5807   5808   5809   5810   5811   5812   5813   5814   5815   5816   5817   5818   5819   def   run   (   self   ,   startdate   :   int   =   STATES   [   \" START \"   ] )   - >   pd   .   DataFrame   :   \" \" \" \u8fd0\u884c \u89c4\u5212 \u6c42\u89e3   Parameters   ----------   startdate   :   int ,   optional   \u8d77\u59cb \u65e5\u671f ,   by   default   20130101   Returns   -------   pd . DataFrame   \u8d85\u989d \u7ee9\u6548 \u6307\u6807   \" \" \"   self   .   optimize _ many _ days   (   startdate   =   startdate   )   self   .   hs300 _ comments   ,   self   .   hs300 _ nets   =   self   .   make _ contrast   (   self   .   hs300 _ weights   ,   self   .   ret _ hs300   ,   \" \u6caa \u6df1 300 \"   )   self   .   zz500 _ comments   ,   self   .   zz500 _ nets   =   self   .   make _ contrast   (   self   .   zz500 _ weights   ,   self   .   ret _ zz500   ,   \" \u4e2d\u8bc1 500 \"   )   self   .   zz1000 _ comments   ,   self   .   zz1000 _ nets   =   self   .   make _ contrast   (   self   .   zz1000 _ weights   ,   self   .   ret _ zz1000   ,   \" \u4e2d\u8bc1 1000 \"   )   figs   =   cf   .   figures   (   pd   .   concat   ( [   self   .   hs300 _ nets   ,   self   .   zz500 _ nets   ,   self   .   zz1000 _ nets   ] ) ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   hs300 _ nets   .   columns   ) ) ,   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   zz500 _ nets   .   columns   ) ) ,   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   zz1000 _ nets   .   columns   ) ) ,   ] ,   asList   =   True   ,   )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   1   ,   3   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   subplot _ titles   =   [   \" \u6caa \u6df1 300 \u589e\u5f3a \"   ,   \" \u4e2d\u8bc1 500 \u589e\u5f3a \"   ,   \" \u4e2d\u8bc1 1000 \u589e\u5f3a \"   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   True   )   cf   .   iplot   (   sp   )   self   .   comments   =   pd   .   concat   (   [   self   .   hs300 _ comments   ,   self   .   zz500 _ comments   ,   self   .   zz1000 _ comments   ] ,   axis   =   1   )   self   .   comments   .   columns   =   [   \" \u6caa \u6df1 300 \u8d85\u989d \"   ,   \" \u4e2d\u8bc1 500 \u8d85\u989d \"   ,   \" \u4e2d\u8bc1 1000 \u8d85\u989d \"   ]   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   ,   NET _ VALUES _ WRITER   comments _ writer   =   COMMENTS _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   if   comments _ writer   is   not   None   :   self   .   hs300 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u6caa \u6df1 300 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   self   .   zz500 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 500 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   self   .   zz1000 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 1000 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   if   net _ values _ writer   is   not   None   :   self   .   hs300 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u6caa \u6df1 300 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   self   .   zz500 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 500 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   self   .   zz1000 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 1000 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   return   self   .   comments   .   T   pure _ moon   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1436   1437   1438   1439   1440   1441   1442   1443   1444   1445   1446   1447   1448   1449   1450   1451   1452   1453   1454   1455   1456   1457   1458   1459   1460   1461   1462   1463   1464   1465   1466   1467   1468   1469   1470   1471   1472   1473   1474   1475   1476   1477   1478   1479   1480   1481   1482   1483   1484   1485   1486   1487   1488   1489   1490   1491   1492   1493   1494   1495   1496   1497   1498   1499   1500   1501   1502   1503   1504   1505   1506   1507   1508   1509   1510   1511   1512   1513   1514   1515   1516   1517   1518   1519   1520   1521   1522   1523   1524   1525   1526   1527   1528   1529   1530   1531   1532   1533   1534   1535   1536   1537   1538   1539   1540   1541   1542   1543   1544   1545   1546   1547   1548   1549   1550   1551   1552   1553   1554   1555   1556   1557   1558   1559   1560   1561   1562   1563   1564   1565   1566   1567   1568   1569   1570   1571   1572   1573   1574   1575   1576   1577   1578   1579   1580   1581   1582   1583   1584   1585   1586   1587   1588   1589   1590   1591   1592   1593   1594   1595   1596   1597   1598   1599   1600   1601   1602   1603   1604   1605   1606   1607   1608   1609   1610   1611   1612   1613   1614   1615   1616   1617   1618   1619   1620   1621   1622   1623   1624   1625   1626   1627   1628   1629   1630   1631   1632   1633   1634   1635   1636   1637   1638   1639   1640   1641   1642   1643   1644   1645   1646   1647   1648   1649   1650   1651   1652   1653   1654   1655   1656   1657   1658   1659   1660   1661   1662   1663   1664   1665   1666   1667   1668   1669   1670   1671   1672   1673   1674   1675   1676   1677   1678   1679   1680   1681   1682   1683   1684   1685   1686   1687   1688   1689   1690   1691   1692   1693   1694   1695   1696   1697   1698   1699   1700   1701   1702   1703   1704   1705   1706   1707   1708   1709   1710   1711   1712   1713   1714   1715   1716   1717   1718   1719   1720   1721   1722   1723   1724   1725   1726   1727   1728   1729   1730   1731   1732   1733   1734   1735   1736   1737   1738   1739   1740   1741   1742   1743   1744   1745   1746   1747   1748   1749   1750   1751   1752   1753   1754   1755   1756   1757   1758   1759   1760   1761   1762   1763   1764   1765   1766   1767   1768   1769   1770   1771   1772   1773   1774   1775   1776   1777   1778   1779   1780   1781   1782   1783   1784   1785   1786   1787   1788   1789   1790   1791   1792   1793   1794   1795   1796   1797   1798   1799   1800   1801   1802   1803   1804   1805   1806   1807   1808   1809   1810   1811   1812   1813   1814   1815   1816   1817   1818   1819   1820   1821   1822   1823   1824   1825   1826   1827   1828   1829   1830   1831   1832   1833   1834   1835   1836   1837   1838   1839   1840   1841   1842   1843   1844   1845   1846   1847   1848   1849   1850   1851   1852   1853   1854   1855   1856   1857   1858   1859   1860   1861   1862   1863   1864   1865   1866   1867   1868   1869   1870   1871   1872   1873   1874   1875   1876   1877   1878   1879   1880   1881   1882   1883   1884   1885   1886   1887   1888   1889   1890   1891   1892   1893   1894   1895   1896   1897   1898   1899   1900   1901   1902   1903   1904   1905   1906   1907   1908   1909   1910   1911   1912   1913   1914   1915   1916   1917   1918   1919   1920   1921   1922   1923   1924   1925   1926   1927   1928   1929   1930   1931   1932   1933   1934   1935   1936   1937   1938   1939   1940   1941   1942   1943   1944   1945   1946   1947   1948   1949   1950   1951   1952   1953   1954   1955   1956   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   2017   2018   2019   2020   2021   2022   2023   2024   2025   2026   2027   2028   2029   2030   2031   2032   2033   2034   2035   2036   2037   2038   2039   2040   2041   2042   2043   2044   2045   2046   2047   2048   2049   2050   2051   2052   2053   2054   2055   2056   2057   2058   2059   2060   2061   2062   2063   2064   2065   2066   2067   2068   2069   2070   2071   2072   2073   2074   2075   2076   2077   2078   2079   2080   2081   2082   2083   2084   2085   2086   2087   2088   2089   2090   2091   2092   2093   2094   2095   2096   2097   2098   2099   2100   2101   2102   2103   2104   2105   2106   2107   2108   2109   2110   2111   2112   2113   2114   2115   2116   2117   2118   2119   2120   2121   2122   2123   2124   2125   2126   2127   2128   2129   2130   2131   2132   2133   2134   2135   2136   2137   2138   2139   2140   2141   2142   2143   2144   2145   2146   2147   2148   2149   2150   2151   2152   2153   2154   2155   2156   2157   2158   2159   2160   2161   2162   2163   2164   2165   2166   2167   2168   2169   2170   2171   2172   2173   2174   2175   2176   2177   2178   2179   2180   2181   2182   2183   2184   2185   2186   2187   2188   2189   2190   2191   2192   2193   2194   2195   2196   2197   2198   2199   2200   2201   2202   2203   2204   2205   2206   2207   2208   2209   2210   2211   2212   2213   2214   2215   2216   2217   2218   2219   2220   2221   2222   2223   2224   2225   2226   2227   2228   2229   2230   2231   2232   2233   2234   2235   2236   2237   2238   2239   2240   2241   2242   2243   2244   2245   2246   2247   2248   2249   2250   2251   2252   2253   2254   2255   2256   2257   2258   2259   2260   2261   2262   2263   2264   2265   2266   2267   2268   2269   2270   2271   2272   2273   2274   2275   2276   2277   2278   2279   2280   2281   2282   2283   2284   2285   2286   2287   2288   2289   2290   2291   2292   2293   2294   2295   2296   2297   2298   2299   2300   2301   2302   2303   2304   2305   2306   2307   2308   2309   2310   2311   2312   2313   2314   2315   2316   2317   2318   2319   2320   2321   2322   2323   2324   2325   2326   2327   2328   2329   2330   2331   2332   2333   2334   2335   2336   2337   2338   2339   2340   2341   2342   2343   2344   2345   2346   2347   2348   2349   2350   2351   2352   2353   2354   2355   2356   2357   2358   2359   2360   2361   2362   2363   2364   2365   2366   2367   2368   2369   2370   2371   2372   2373   2374   2375   2376   2377   2378   2379   2380   2381   2382   2383   2384   2385   2386   2387   2388   2389   2390   2391   2392   2393   2394   2395   2396   2397   2398   2399   2400   2401   2402   2403   2404   2405   2406   2407   2408   2409   2410   2411   2412   2413   2414   2415   2416   2417   2418   2419   2420   2421   2422   2423   2424   2425   2426   2427   2428   2429   2430   2431   2432   2433   2434   2435   2436   2437   2438   2439   2440   2441   2442   2443   2444   2445   2446   2447   2448   2449   2450   2451   2452   2453   2454   2455   2456   2457   2458   2459   2460   2461   2462   2463   2464   2465   2466   2467   2468   2469   2470   2471   2472   2473   2474   2475   2476   2477   2478   2479   2480   2481   2482   2483   2484   2485   2486   2487   2488   2489   2490   2491   2492   2493   2494   2495   2496   2497   2498   2499   2500   2501   2502   2503   2504   2505   2506   2507   2508   2509   2510   2511   2512   2513   2514   2515   2516   2517   2518   2519   2520   2521   2522   2523   2524   2525   2526   2527   2528   2529   2530   2531   2532   2533   2534   2535   2536   2537   2538   2539   2540   2541   2542   2543   2544   2545   2546   2547   2548   2549   2550   2551   2552   2553   2554   2555   2556   2557   2558   2559   2560   2561   2562   2563   2564   2565   2566   2567   2568   2569   2570   2571   2572   2573   2574   2575   2576   2577   2578   2579   2580   2581   2582   2583   2584   2585   2586   2587   2588   2589   2590   2591   2592   2593   2594   2595   2596   2597   2598   2599   2600   2601   2602   2603   2604   2605   2606   2607   2608   class   pure _ moon   (   object   ) :   __ slots __   =   [   \" homeplace \"   ,   \" sts _ monthly _ file \"   ,   \" states _ monthly _ file \"   ,   \" factors \"   ,   \" codes \"   ,   \" tradedays \"   ,   \" ages \"   ,   \" amounts \"   ,   \" closes \"   ,   \" opens \"   ,   \" capital \"   ,   \" states \"   ,   \" sts \"   ,   \" turnovers \"   ,   \" sts _ monthly \"   ,   \" states _ monthly \"   ,   \" ages _ monthly \"   ,   \" tris _ monthly \"   ,   \" opens _ monthly \"   ,   \" closes _ monthly \"   ,   \" rets _ monthly \"   ,   \" opens _ monthly _ shift \"   ,   \" rets _ monthly _ begin \"   ,   \" limit _ ups \"   ,   \" limit _ downs \"   ,   \" data \"   ,   \" ic _ icir _ and _ rank \"   ,   \" rets _ monthly _ limit _ downs \"   ,   \" group _ rets \"   ,   \" long _ short _ rets \"   ,   \" long _ short _ net _ values \"   ,   \" group _ net _ values \"   ,   \" long _ short _ ret _ yearly \"   ,   \" long _ short _ vol _ yearly \"   ,   \" long _ short _ info _ ratio \"   ,   \" long _ short _ win _ times \"   ,   \" long _ short _ win _ ratio \"   ,   \" retreats \"   ,   \" max _ retreat \"   ,   \" long _ short _ comments \"   ,   \" total _ comments \"   ,   \" square _ rets \"   ,   \" cap \"   ,   \" cap _ value \"   ,   \" industry _ dummy \"   ,   \" industry _ codes \"   ,   \" industry _ codes _ str \"   ,   \" industry _ ws \"   ,   \" __ factors _ out \"   ,   \" ics \"   ,   \" rankics \"   ,   \" factor _ turnover _ rates \"   ,   \" factor _ turnover _ rate \"   ,   \" group _ rets _ std \"   ,   \" group _ rets _ stds \"   ,   \" group _ rets _ skews \"   ,   \" group _ rets _ skew \"   ,   \" wind _ out \"   ,   \" swindustry _ dummy \"   ,   \" zxindustry _ dummy \"   ,   \" closes2 _ monthly \"   ,   \" rets _ monthly _ last \"   ,   \" freq _ ctrl \"   ,   \" freq \"   ,   \" factor _ cover \"   ,   \" factor _ cross _ skew \"   ,   \" factor _ cross _ skew _ after _ neu \"   ,   \" pos _ neg _ rate \"   ,   \" corr _ itself \"   ,   \" factor _ cross _ stds \"   ,   \" corr _ itself _ shift2 \"   ,   \" rets _ all \"   ,   \" inner _ long _ ret _ yearly \"   ,   \" inner _ short _ ret _ yearly \"   ,   \" inner _ long _ net _ values \"   ,   \" inner _ short _ net _ values \"   ,   \" group _ mean _ rets _ monthly \"   ]   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   __ init __   (   cls   ,   freq   :   str   =   \" M \"   ,   no _ read _ indu   :   bool   =   0   ,   swindustry _ dummy   :   pd   .   DataFrame   =   None   ,   zxindustry _ dummy   :   pd   .   DataFrame   =   None   ,   read _ in _ swindustry _ dummy   :   bool   =   0   ,   ) :   cls   .   homeplace   =   HomePlace   ( )   cls   .   freq   =   freq   cls   .   freq _ ctrl   =   frequency _ controller   (   freq   )   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u6708\u5ea6 st \u72b6\u6001 \u6587\u4ef6   #   week _ here   cls   .   sts _ monthly _ file   =   cls   .   freq _ ctrl   .   sts _ files   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u6708\u5ea6 \u4ea4\u6613 \u72b6\u6001 \u6587\u4ef6   #   week _ here   cls   .   states _ monthly _ file   =   cls   .   freq _ ctrl   .   states _ files   if   swindustry _ dummy   is   not   None   :   cls   .   swindustry _ dummy   =   swindustry _ dummy   if   zxindustry _ dummy   is   not   None   :   cls   .   zxindustry _ dummy   =   zxindustry _ dummy   def   deal _ dummy   (   industry _ dummy   ) :   industry _ dummy   =   industry _ dummy   .   drop   (   columns   =   [   \" code \"   ] )   .   reset _ index   ( )   industry _ ws   =   [   f   \" w   {   i   }   \"   for   i   in   range   (   1   ,   industry _ dummy   .   shape   [   1   ]   -   1   ) ]   col   =   [   \" code \"   ,   \" date \"   ]   +   industry _ ws   industry _ dummy   .   columns   =   col   industry _ dummy   =   industry _ dummy   [   industry _ dummy   .   date   > =   pd   .   Timestamp   (   \" 20100101 \"   )   ]   return   industry _ dummy   if   (   swindustry _ dummy   is   None   )   and   (   zxindustry _ dummy   is   None   ) :   if   not   no _ read _ indu   :   if   read _ in _ swindustry _ dummy   :   #   week _ here   cls   .   swindustry _ dummy   =   (   pd   .   read _ parquet   (   cls   .   homeplace   .   daily _ data _ file   +   \" \u7533\u4e07 \u884c\u4e1a 2021 \u7248\u54d1 \u53d8\u91cf . parquet \"   )   .   fillna   (   0   )   .   set _ index   (   \" date \"   )   .   groupby   (   \" code \"   )   .   resample   (   freq   )   .   last   ( )   )   cls   .   swindustry _ dummy   =   deal _ dummy   (   cls   .   swindustry _ dummy   )   #   week _ here   cls   .   zxindustry _ dummy   =   (   pd   .   read _ parquet   (   cls   .   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u4ee3\u7801 \u7248 . parquet \"   )   .   fillna   (   0   )   .   set _ index   (   \" date \"   )   .   groupby   (   \" code \"   )   .   resample   (   freq   )   .   last   ( )   .   fillna   (   0   )   )   cls   .   zxindustry _ dummy   =   deal _ dummy   (   cls   .   zxindustry _ dummy   )   @ property   def   factors _ out   (   self   ) :   return   self   .   __ factors _ out   def   __ call __   (   self   ) :   \" \" \" \u8c03\u7528 \u5bf9\u8c61 \u5219 \u8fd4\u56de \u56e0\u5b50 \u503c \" \" \"   return   self   .   factors _ out   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   set _ basic _ data   (   cls   ,   ages   :   pd   .   DataFrame   =   None   ,   sts   :   pd   .   DataFrame   =   None   ,   states   :   pd   .   DataFrame   =   None   ,   opens   :   pd   .   DataFrame   =   None   ,   closes   :   pd   .   DataFrame   =   None   ,   capitals   :   pd   .   DataFrame   =   None   ,   opens _ average _ first _ day   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   ) :   if   ages   is   None   :   ages   =   read _ daily   (   age   =   1   ,   start   =   20100101   )   if   sts   is   None   :   sts   =   read _ daily   (   st   =   1   ,   start   =   20100101   )   if   states   is   None   :   states   =   read _ daily   (   state   =   1   ,   start   =   20100101   )   if   opens   is   None   :   if   opens _ average _ first _ day   :   opens   =   read _ daily   (   vwap   =   1   ,   start   =   20100101   )   else   :   opens   =   read _ daily   (   open   =   1   ,   start   =   20100101   )   if   closes   is   None   :   closes   =   read _ daily   (   close   =   1   ,   start   =   20100101   )   if   capitals   is   None   :   if   total _ cap   :   capitals   =   (   read _ daily   (   total _ cap   =   1   ,   start   =   20100101   )   .   resample   (   cls   .   freq   )   .   last   ( )   )   else   :   capitals   =   (   read _ daily   (   flow _ cap   =   1   ,   start   =   20100101   )   .   resample   (   cls   .   freq   )   .   last   ( )   )   #   \u4e0a\u5e02 \u5929\u6570 \u6587\u4ef6   cls   .   ages   =   ages   #   st \u65e5\u5b50 \u6807\u5fd7 \u6587\u4ef6   cls   .   sts   =   sts   .   fillna   (   0   )   #   cls . sts   =   1   -   cls . sts . fillna ( 0 )   #   \u4ea4\u6613 \u72b6\u6001 \u6587\u4ef6   cls   .   states   =   states   #   \u590d\u6743 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e \u6587\u4ef6 \u6570\u636e\u6587\u4ef6   cls   .   opens   =   opens   #   \u590d\u6743 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e \u6587\u4ef6 \u6570\u636e\u6587\u4ef6   cls   .   closes   =   closes   #   \u6708\u5e95 \u6d41\u901a \u5e02\u503c \u6570\u636e   cls   .   capital   =   capitals   if   cls   .   opens   is   not   None   :   cls   .   opens   =   cls   .   opens   .   replace   (   0   ,   np   .   nan   )   if   cls   .   closes   is   not   None   :   cls   .   closes   =   cls   .   closes   .   replace   (   0   ,   np   .   nan   )   def   set _ factor _ df _ date _ as _ index   (   self   ,   df   :   pd   .   DataFrame   ) :   \" \" \" \u8bbe\u7f6e \u56e0\u5b50 \u6570\u636e \u7684 dataframe \uff0c \u56e0\u5b50 \u8868 \u5217\u540d \u5e94\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u5e94\u4e3a \u65f6\u95f4 \" \" \"   #   week _ here   self   .   factors   =   df   .   resample   (   self   .   freq   )   .   last   ( )   .   dropna   (   how   =   \" all \"   )   self   .   factor _ cover   =   np   .   sign   (   self   .   factors   .   abs   ( )   +   1   )   .   sum   ( )   .   sum   ( )   opens   =   self   .   opens   [   self   .   opens   .   index   > =   self   .   factors   .   index   .   min   ( ) ]   total   =   np   .   sign   (   opens   .   resample   (   self   .   freq   )   .   last   ( ) )   .   sum   ( )   .   sum   ( )   self   .   factor _ cover   =   min   (   self   .   factor _ cover   /   total   ,   1   )   self   .   factor _ cross _ skew   =   self   .   factors   .   skew   (   axis   =   1   )   .   mean   ( )   pos _ num   =   ( (   self   .   factors   >   0   )   +   0   )   .   sum   ( )   .   sum   ( )   neg _ num   =   ( (   self   .   factors   <   0   )   +   0   )   .   sum   ( )   .   sum   ( )   self   .   pos _ neg _ rate   =   pos _ num   /   (   neg _ num   +   pos _ num   )   self   .   corr _ itself   =   show _ corr   (   self   .   factors   ,   self   .   factors   .   shift   (   1   ) ,   plt _ plot   =   0   )   self   .   corr _ itself _ shift2   =   show _ corr   (   self   .   factors   ,   self   .   factors   .   shift   (   2   ) ,   plt _ plot   =   0   )   self   .   factor _ cross _ stds   =   self   .   factors   .   std   (   axis   =   1   )   @ classmethod   def   judge _ month _ st   (   cls   ,   df   ) :   \" \" \" \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 st \u7684 \u5929\u6570 \uff0c \u5982\u679c st \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5982\u679c \u6b63\u5e38 \u591a \uff0c \u5c31 \u4fdd\u7559 \u672c\u6708 \" \" \"   st _ count   =   len   (   df   [   df   = =   1   ] )   normal _ count   =   len   (   df   [   df   ! =   1   ] )   if   st _ count   > =   normal _ count   :   return   0   else   :   return   1   @ classmethod   def   judge _ month _ state   (   cls   ,   df   ) :   \" \" \" \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u7684 \u5929\u6570 \uff0c \u5982\u679c \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5426\u5219 \u4fdd\u7559 \u672c\u6708 \" \" \"   abnormal _ count   =   len   (   df   [   df   = =   0   ] )   normal _ count   =   len   (   df   [   df   = =   1   ] )   if   abnormal _ count   > =   normal _ count   :   return   0   else   :   return   1   @ classmethod   def   read _ add   (   cls   ,   pridf   ,   df   ,   func   ) :   \" \" \" \u7531\u4e8e \u6570\u636e \u66f4\u65b0 \uff0c \u8fc7\u53bb \u8ba1\u7b97 \u7684 \u6708\u5ea6 \u72b6\u6001 \u53ef\u80fd \u9700\u8981 \u8ffd\u52a0 \" \" \"   if   pridf   .   index   .   max   ( )   >   df   .   index   .   max   ( ) :   df _ add   =   pridf   [   pridf   .   index   >   df   .   index   .   max   ( ) ]   if   df _ add   .   shape   [   0   ]   >   int   (   cls   .   freq _ ctrl   .   days _ in   /   2   ) :   df _ 1   =   df _ add   .   index   .   max   ( )   year   =   df _ 1   .   year   month   =   df _ 1   .   month   last   =   tt   .   date   .   get _ close   (   year   =   year   ,   m   =   month   )   .   pd _ date   ( )   if   (   last   = =   df _ 1   ) [   0   ] :   #   week _ here   df _ add   =   df _ add   .   resample   (   cls   .   freq   )   .   apply   (   func   )   df   =   pd   .   concat   ( [   df   ,   df _ add   ] )   return   df   else   :   df _ add   =   df _ add   [   df _ add   .   index   <   pd   .   Timestamp   (   year   =   year   ,   month   =   month   ,   day   =   1   )   ]   if   df _ add   .   shape   [   0   ]   >   0   :   df _ add   =   df _ add   .   resample   (   cls   .   freq   )   .   apply   (   func   )   df   =   pd   .   concat   ( [   df   ,   df _ add   ] )   return   df   else   :   return   df   else   :   return   df   else   :   return   df   @ classmethod   def   daily _ to _ monthly   (   cls   ,   pridf   ,   path   ,   func   ) :   \" \" \" \u628a \u65e5\u5ea6 \u7684 \u4ea4\u6613 \u72b6\u6001 \u3001 st \u3001 \u4e0a\u5e02 \u5929\u6570 \uff0c \u8f6c\u5316 \u4e3a \u6708\u5ea6 \u7684 \uff0c \u5e76 \u751f\u6210 \u80fd\u5426 \u4ea4\u6613 \u7684 \u5224\u65ad   \u8bfb\u53d6 \u672c\u5730 \u5df2\u7ecf \u7b97\u597d \u7684 \u6587\u4ef6 \uff0c \u5e76 \u8ffd\u52a0 \u65b0 \u7684 \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u90e8\u5206 \uff0c \u5982\u679c \u672c\u5730 \u6ca1\u6709 \u5c31 \u76f4\u63a5 \u5168\u90e8 \u91cd\u65b0 \u7b97 \" \" \"   try   :   month _ df   =   pd   .   read _ parquet   (   path   )   month _ df   =   cls   .   read _ add   (   pridf   ,   month _ df   ,   func   )   month _ df   .   to _ parquet   (   path   )   except   Exception   as   e   :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   error   (   \" error   occurs   when   read   state   files \"   )   logger   .   error   (   e   )   print   (   \" state   file   rewriting \u2026 \u2026 \"   )   #   week _ here   df _ 1   =   pridf   .   index   .   max   ( )   year   =   df _ 1   .   year   month   =   df _ 1   .   month   last   =   tt   .   date   .   get _ close   (   year   =   year   ,   m   =   month   )   .   pd _ date   ( )   if   not   (   last   = =   df _ 1   ) [   0   ] :   pridf   =   pridf   [   pridf   .   index   <   pd   .   Timestamp   (   year   =   year   ,   month   =   month   ,   day   =   1   ) ]   month _ df   =   pridf   .   resample   (   cls   .   freq   )   .   apply   (   func   )   month _ df   .   to _ parquet   (   path   )   return   month _ df   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   judge _ month   (   cls   ) :   \" \" \" \u751f\u6210 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7efc\u5408 \u5224\u65ad \u7684 \u8868\u683c \" \" \"   if   cls   .   freq   = =   \" M \"   :   cls   .   sts _ monthly   =   cls   .   daily _ to _ monthly   (   cls   .   sts   ,   cls   .   sts _ monthly _ file   ,   cls   .   judge _ month _ st   )   cls   .   states _ monthly   =   cls   .   daily _ to _ monthly   (   cls   .   states   ,   cls   .   states _ monthly _ file   ,   cls   .   judge _ month _ state   )   #   week _ here   cls   .   ages _ monthly   =   (   cls   .   ages   .   resample   (   cls   .   freq   )   .   last   ( )   >   60   )   +   0   cls   .   tris _ monthly   =   cls   .   sts _ monthly   *   cls   .   states _ monthly   *   cls   .   ages _ monthly   cls   .   tris _ monthly   =   cls   .   tris _ monthly   .   replace   (   0   ,   np   .   nan   )   else   :   cls   .   tris _ monthly   =   (   (   1   -   cls   .   sts   )   .   resample   (   cls   .   freq   )   .   last   ( )   .   ffill   (   limit   =   2   )   *   cls   .   states   .   resample   (   cls   .   freq   )   .   last   ( )   .   ffill   (   limit   =   2   )   *   ( (   cls   .   ages   .   resample   (   cls   .   freq   )   .   last   ( )   >   60   )   +   0   )   )   .   replace   (   0   ,   np   .   nan   )   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ rets _ month   (   cls   ) :   \" \" \" \u8ba1\u7b97 \u6bcf\u6708 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u5e76 \u6839\u636e \u6bcf\u6708 \u505a\u51fa \u4ea4\u6613 \u72b6\u6001 \uff0c \u505a\u51fa \u5220\u51cf \" \" \"   #   week _ here   cls   .   opens _ monthly   =   cls   .   opens   .   resample   (   cls   .   freq   )   .   first   ( )   #   week _ here   cls   .   closes _ monthly   =   cls   .   closes   .   resample   (   cls   .   freq   )   .   last   ( )   cls   .   rets _ monthly   =   (   cls   .   closes _ monthly   -   cls   .   opens _ monthly   )   /   cls   .   opens _ monthly   cls   .   rets _ monthly   =   cls   .   rets _ monthly   *   cls   .   tris _ monthly   cls   .   rets _ monthly   =   cls   .   rets _ monthly   .   stack   ( )   .   reset _ index   ( )   cls   .   rets _ monthly   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" ret \"   ]   @ classmethod   def   neutralize _ factors   (   cls   ,   df   ) :   \" \" \" \u7ec4\u5185 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   industry _ codes   =   list   (   df   .   columns   )   industry _ codes   =   [   i   for   i   in   industry _ codes   if   i   .   startswith   (   \" w \"   ) ]   industry _ codes _ str   =   \" + \"   .   join   (   industry _ codes   )   if   len   (   industry _ codes _ str   )   >   0   :   ols _ result   =   smf   .   ols   (   \" fac ~ cap _ size + \"   +   industry _ codes _ str   ,   data   =   df   )   .   fit   ( )   else   :   ols _ result   =   smf   .   ols   (   \" fac ~ cap _ size \"   ,   data   =   df   )   .   fit   ( )   ols _ w   =   ols _ result   .   params   [   \" cap _ size \"   ]   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   ols _ bs   =   { }   for   ind   in   industry _ codes   :   ols _ bs   [   ind   ]   =   ols _ result   .   params   [   ind   ]   df   .   fac   =   df   .   fac   -   ols _ w   *   df   .   cap _ size   -   ols _ b   for   k   ,   v   in   ols _ bs   .   items   ( ) :   df   .   fac   =   df   .   fac   -   v   *   df   [   k   ]   df   =   df   [ [   \" fac \"   ] ]   return   df   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ log _ cap   (   cls   ,   boxcox   =   True   ) :   \" \" \" \u83b7\u5f97 \u5bf9\u6570 \u5e02\u503c \" \" \"   cls   .   cap   =   cls   .   capital   .   stack   ( )   .   reset _ index   ( )   cls   .   cap   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap _ size \"   ]   if   boxcox   :   def   single   (   x   ) :   x   .   cap _ size   =   ss   .   boxcox   (   x   .   cap _ size   ) [   0   ]   return   x   cls   .   cap   =   cls   .   cap   .   groupby   ( [   \" date \"   ] )   .   apply   (   single   )   else   :   cls   .   cap   [   \" cap _ size \"   ]   =   np   .   log   (   cls   .   cap   [   \" cap _ size \"   ] )   def   get _ neutral _ factors   (   self   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ) :   \" \" \" \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   #   week _ here   last _ date   =   self   .   freq _ ctrl   .   next _ end   (   self   .   tris _ monthly   .   index   .   max   ( ) )   add _ tail   =   pd   .   DataFrame   (   1   ,   index   =   [   last _ date   ] ,   columns   =   self   .   tris _ monthly   .   columns   )   tris _ monthly   =   pd   .   concat   ( [   self   .   tris _ monthly   ,   add _ tail   ] )   self   .   factors   =   self   .   factors   *   tris _ monthly   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   -   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   cap   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   if   not   only _ cap   :   if   swindustry _ dummies   :   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   swindustry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   else   :   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   zxindustry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   factors   =   self   .   factors   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   self   .   factors   =   self   .   factors   .   groupby   ( [   \" date \"   ] )   .   apply   (   self   .   neutralize _ factors   )   self   .   factors   =   self   .   factors   .   reset _ index   ( )   def   deal _ with _ factors   (   self   ) :   \" \" \" \u5220\u9664 \u4e0d \u7b26\u5408 \u4ea4\u6613 \u6761\u4ef6 \u7684 \u56e0\u5b50 \u6570\u636e \" \" \"   self   .   __ factors _ out   =   self   .   factors   .   copy   ( )   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   =   self   .   factors   *   self   .   tris _ monthly   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   def   deal _ with _ factors _ after _ neutralize   (   self   ) :   \" \" \" \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u5904\u7406 \u65b9\u6cd5 \" \" \"   self   .   factors   =   self   .   factors   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   self   .   factors   =   self   .   factors   .   unstack   ( )   self   .   __ factors _ out   =   self   .   factors   .   copy   ( )   self   .   __ factors _ out   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   __ factors _ out   .   columns   ) ]   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   self   .   factors   .   columns   ) ) )   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   @ classmethod   def   find _ limit   (   cls   ,   df   ,   up   =   1   ) :   \" \" \" \u8ba1\u7b97 \u6da8\u8dcc \u8dcc\u5e45 \u6da8\u8dcc\u5e45 \u8d85\u8fc7 9.8% \u7684 \u80a1\u7968 \uff0c \u5e76 \u5c06 \u5176 \u5b58\u50a8 \u8fdb \u4e00\u4e2a \u957f \u5217\u8868 \u91cc   \u5176\u4e2d \u65f6\u95f4 \u5217 \uff0c \u4e3a \u67d0\u6708 \u7684 \u6700\u540e \u4e00\u5929 \uff1b \u6da8\u505c \u65e5 \u867d\u7136 \u4e3a \u4e0b\u6708 \u6708\u521d \u4e0b\u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \uff0c \u4f46 \u8fd9\u91cc \u6807\u6ce8 \u7684 \u65f6\u95f4 \u7edf\u4e00 \u4e3a \u4e0a \u6708 \u6700\u540e \u4e00\u5929 \" \" \"   limit _ df   =   np   .   sign   (   df   .   applymap   (   lambda   x   :   x   -   up   *   0.098   ) )   .   replace   (   -   1   *   up   ,   np   .   nan   )   limit _ df   =   limit _ df   .   stack   ( )   .   reset _ index   ( )   limit _ df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" limit _ up _ signal \"   ]   limit _ df   =   limit _ df   [ [   \" date \"   ,   \" code \"   ] ]   return   limit _ df   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ limit _ ups _ downs   (   cls   ) :   \" \" \" \u627e \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5c31 \u6da8\u505c \" \" \"   \" \" \" \u6216\u8005 \u662f \u6708\u672b \u8dcc\u505c \u7684 \u80a1\u7968 \" \" \"   cls   .   opens _ monthly _ shift   =   cls   .   opens _ monthly   .   copy   ( )   cls   .   opens _ monthly _ shift   =   cls   .   opens _ monthly _ shift   .   shift   (   -   1   )   cls   .   rets _ monthly _ begin   =   (   cls   .   opens _ monthly _ shift   -   cls   .   closes _ monthly   )   /   cls   .   closes _ monthly   #   week _ here   cls   .   closes2 _ monthly   =   cls   .   closes   .   shift   (   1   )   .   resample   (   cls   .   freq   )   .   last   ( )   cls   .   rets _ monthly _ last   =   (   cls   .   closes _ monthly   -   cls   .   closes2 _ monthly   )   /   cls   .   closes2 _ monthly   cls   .   limit _ ups   =   cls   .   find _ limit   (   cls   .   rets _ monthly _ begin   ,   up   =   1   )   cls   .   limit _ downs   =   cls   .   find _ limit   (   cls   .   rets _ monthly _ last   ,   up   = -   1   )   def   get _ ic _ rankic   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 IC \u548c RankIC \" \" \"   df1   =   df   [ [   \" ret \"   ,   \" fac \"   ] ]   ic   =   df1   .   corr   (   method   =   \" pearson \"   )   .   iloc   [   0   ,   1   ]   rankic   =   df1   .   rank   ( )   .   corr   ( )   .   iloc   [   0   ,   1   ]   df2   =   pd   .   DataFrame   ( {   \" ic \"   :   [   ic   ] ,   \" rankic \"   :   [   rankic   ] } )   return   df2   def   get _ icir _ rankicir   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 ICIR \u548c RankICIR \" \" \"   ic   =   df   .   ic   .   mean   ( )   rankic   =   df   .   rankic   .   mean   ( )   #   week _ here   icir   =   ic   /   np   .   std   (   df   .   ic   )   *   (   cls   .   freq _ ctrl   .   counts _ one _ year   * *   (   0.5   ) )   #   week _ here   rankicir   =   rankic   /   np   .   std   (   df   .   rankic   )   *   (   cls   .   freq _ ctrl   .   counts _ one _ year   * *   (   0.5   ) )   return   pd   .   DataFrame   (   {   \" IC \"   :   [   ic   ] ,   \" ICIR \"   :   [   icir   ] ,   \" RankIC \"   :   [   rankic   ] ,   \" RankICIR \"   :   [   rankicir   ] } ,   index   =   [   \" \u8bc4\u4ef7 \u6307\u6807 \"   ] ,   )   def   get _ ic _ icir _ and _ rank   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR \" \" \"   df1   =   df   .   groupby   (   \" date \"   )   .   apply   (   cls   .   get _ ic _ rankic   )   cls   .   ics   =   df1   .   ic   cls   .   rankics   =   df1   .   rankic   cls   .   ics   =   cls   .   ics   .   reset _ index   (   drop   =   True   ,   level   =   1   )   .   to _ frame   ( )   cls   .   rankics   =   cls   .   rankics   .   reset _ index   (   drop   =   True   ,   level   =   1   )   .   to _ frame   ( )   df2   =   cls   .   get _ icir _ rankicir   (   df1   )   df2   =   df2   .   T   dura   =   (   df   .   date   .   max   ( )   -   df   .   date   .   min   ( ) )   .   days   /   365   t _ value   =   df2   .   iloc   [   3   ,   0   ]   *   (   dura   * *   (   1   /   2   ) )   df3   =   pd   .   DataFrame   ( {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   t _ value   ] } ,   index   =   [   \" RankIC . t \"   ] )   df4   =   pd   .   concat   ( [   df2   ,   df3   ] )   return   df4   @ classmethod   def   get _ groups   (   cls   ,   df   ,   groups _ num   ) :   \" \" \" \u4f9d\u636e \u56e0\u5b50 \u503c \uff0c \u5224\u65ad \u662f \u5728 \u7b2c \u51e0\u7ec4 \" \" \"   if   \" group \"   in   list   (   df   .   columns   ) :   df   =   df   .   drop   (   columns   =   [   \" group \"   ] )   df   =   df   .   sort _ values   ( [   \" fac \"   ] ,   ascending   =   True   )   each _ group   =   round   (   df   .   shape   [   0   ]   /   groups _ num   )   l   =   list   (   map   (   lambda   x   ,   y   :   [   x   ]   *   y   ,   list   (   range   (   1   ,   groups _ num   +   1   ) ) ,   [   each _ group   ]   *   groups _ num   ,   )   )   l   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   l   )   if   len   (   l   )   <   df   .   shape   [   0   ] :   l   =   l   +   [   groups _ num   ]   *   (   df   .   shape   [   0   ]   -   len   (   l   ) )   l   =   l   [ :   df   .   shape   [   0   ] ]   df   .   insert   (   0   ,   \" group \"   ,   l   )   return   df   @ classmethod   def   limit _ old _ to _ new   (   cls   ,   limit   ,   data   ) :   \" \" \" \u83b7\u53d6 \u8dcc\u505c \u80a1\u5728 \u65e7 \u6708 \u7684 \u7ec4\u53f7 \uff0c \u7136\u540e \u5c06 \u65e5\u671f \u8c03\u6574 \u5230 \u65b0\u6708 \u91cc   \u6da8\u505c \u80a1\u5219 \u83b7\u5f97 \u65b0\u6708 \u91cc \u6da8\u505c \u80a1 \u7684 \u4ee3\u7801 \u548c \u65f6\u95f4 \uff0c \u7136\u540e \u76f4\u63a5 \u5220\u53bb \" \" \"   data1   =   data   .   copy   ( )   data1   =   data1   .   reset _ index   ( )   data1   .   columns   =   [   \" data _ index \"   ]   +   list   (   data1   .   columns   ) [   1   : ]   old   =   pd   .   merge   (   limit   ,   data1   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ] )   old   =   old   .   set _ index   (   \" data _ index \"   )   old   =   old   [ [   \" group \"   ,   \" date \"   ,   \" code \"   ] ]   #   week _ here   old   .   date   =   list   (   map   (   cls   .   freq _ ctrl   .   next _ end   ,   list   (   old   .   date   ) ) )   return   old   def   get _ data   (   self   ,   groups _ num   ) :   \" \" \" \u62fc\u63a5 \u56e0\u5b50 \u6570\u636e \u548c \u6bcf\u6708 \u6536\u76ca \u6536\u76ca\u7387 \u6570\u636e \uff0c \u5e76 \u5bf9 \u6da8\u505c \u548c \u8dcc\u505c \u80a1 \u52a0\u4ee5 \u5904\u7406 \" \" \"   self   .   data   =   pd   .   merge   (   self   .   rets _ monthly   ,   self   .   factors   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   ic _ icir _ and _ rank   =   self   .   get _ ic _ icir _ and _ rank   (   self   .   data   )   self   .   data   =   self   .   data   .   groupby   (   \" date \"   )   .   apply   (   lambda   x   :   self   .   get _ groups   (   x   ,   groups _ num   )   )   self   .   wind _ out   =   self   .   data   .   copy   ( )   self   .   factor _ turnover _ rates   =   self   .   data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" group \"   )   rates   =   [ ]   for   i   in   range   (   1   ,   groups _ num   +   1   ) :   son   =   (   self   .   factor _ turnover _ rates   = =   i   )   +   0   son1   =   son   .   diff   ( )   #   self . factor _ turnover _ rates   =   self . factor _ turnover _ rates . diff ( )   change   =   ( (   np   .   abs   (   np   .   sign   (   son1   ) )   = =   1   )   +   0   )   .   sum   (   axis   =   1   )   still   =   ( ( (   son1   = =   0   )   +   0   )   *   son   )   .   sum   (   axis   =   1   )   rate   =   change   /   (   change   +   still   )   rates   .   append   (   rate   .   to _ frame   (   f   \" group   {   i   }   \"   ) )   rates   =   pd   .   concat   (   rates   ,   axis   =   1   )   .   fillna   (   0   )   self   .   factor _ turnover _ rates   =   rates   self   .   data   =   self   .   data   .   reset _ index   (   drop   =   True   )   limit _ ups _ object   =   self   .   limit _ old _ to _ new   (   self   .   limit _ ups   ,   self   .   data   )   limit _ downs _ object   =   self   .   limit _ old _ to _ new   (   self   .   limit _ downs   ,   self   .   data   )   self   .   data   =   self   .   data   .   drop   (   limit _ ups _ object   .   index   )   rets _ monthly _ limit _ downs   =   pd   .   merge   (   self   .   rets _ monthly   ,   limit _ downs _ object   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   data   =   pd   .   concat   ( [   self   .   data   ,   rets _ monthly _ limit _ downs   ] )   def   make _ start _ to _ one   (   self   ,   l   ) :   \" \" \" \u8ba9 \u51c0\u503c \u5e8f\u5217 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6570 \u53d8\u6210 1 \" \" \"   min _ date   =   self   .   factors   .   date   .   min   ( )   add _ date   =   min _ date   -   relativedelta   (   days   =   min _ date   .   day   )   add _ l   =   pd   .   Series   ( [   1   ] ,   index   =   [   add _ date   ] )   l   =   pd   .   concat   ( [   add _ l   ,   l   ] )   return   l   def   to _ group _ ret   (   self   ,   l   ) :   \" \" \" \u6bcf \u4e00\u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \" \" \"   #   week _ here   ret   =   l   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   l   ) )   -   1   return   ret   def   get _ group _ rets _ net _ values   (   self   ,   groups _ num   =   10   ,   value _ weighted   =   False   ,   trade _ cost _ double _ side   =   0   ) :   \" \" \" \u8ba1\u7b97 \u7ec4\u5185 \u6bcf \u4e00\u671f \u7684 \u5e73\u5747 \u6536\u76ca \uff0c \u751f\u6210 \u6bcf\u65e5 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \" \" \"   if   value _ weighted   :   cap _ value   =   self   .   capital   .   copy   ( )   #   week _ here   cap _ value   =   cap _ value   .   resample   (   self   .   freq   )   .   last   ( )   .   shift   (   1   )   cap _ value   =   cap _ value   *   self   .   tris _ monthly   #   cap _ value = np . log ( cap _ value )   cap _ value   =   cap _ value   .   stack   ( )   .   reset _ index   ( )   cap _ value   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap _ value \"   ]   self   .   data   =   pd   .   merge   (   self   .   data   ,   cap _ value   ,   on   =   [   \" date \"   ,   \" code \"   ] )   def   in _ g   (   df   ) :   df   .   cap _ value   =   df   .   cap _ value   /   df   .   cap _ value   .   sum   ( )   df   .   ret   =   df   .   ret   *   df   .   cap _ value   return   df   .   ret   .   sum   ( )   self   .   group _ rets   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   in _ g   )   self   .   rets _ all   =   self   .   data   .   groupby   ( [   \" date \"   ] )   .   apply   (   in _ g   )   self   .   group _ rets _ std   =   \" \u5e02\u503c \u52a0\u6743 \u6682\u672a \u8bbe\u7f6e \u8be5 \u529f\u80fd \uff0c \u656c\u8bf7 \u671f\u5f85 \u656c\u8bf7\u671f\u5f85 \ud83c\udf19 \"   else   :   self   .   group _ rets   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   lambda   x   :   x   .   ret   .   mean   ( )   )   self   .   rets _ all   =   self   .   data   .   groupby   ( [   \" date \"   ] )   .   apply   (   lambda   x   :   x   .   ret   .   mean   ( ) )   self   .   group _ rets _ stds   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   ret   .   std   ( )   self   .   group _ rets _ std   =   (   self   .   group _ rets _ stds   .   reset _ index   ( )   .   groupby   (   \" group \"   )   .   mean   ( )   )   self   .   group _ rets _ skews   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   ret   .   skew   ( )   self   .   group _ rets _ skew   =   (   self   .   group _ rets _ skews   .   reset _ index   ( )   .   groupby   (   \" group \"   )   .   mean   ( )   )   #   dropna \u56e0\u4e3a \u662f\u56e0\u4e3a \u5982\u679c \u80a1\u7968 \u884c\u60c5 \u80a1\u7968\u884c\u60c5 \u6570\u636e \u6bd4 \u56e0\u5b50 \u6570\u636e \u7684 \u622a\u6b62 \u65e5\u671f \u665a \uff0c \u800c \u6700\u540e \u4e00\u4e2a \u4e00\u4e2a\u6708 \u53d1\u751f \u6708\u521d \u8dcc\u505c \u65f6 \uff0c \u4f1a \u9020\u6210 \u6700\u540e \u67d0\u7ec4 \u591a\u51fa \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7684 \u6570\u636e   self   .   group _ rets   =   self   .   group _ rets   .   unstack   ( )   self   .   group _ rets   =   self   .   group _ rets   [   self   .   group _ rets   .   index   < =   self   .   factors   .   date   .   max   ( )   ]   self   .   group _ rets   .   columns   =   list   (   map   (   str   ,   list   (   self   .   group _ rets   .   columns   ) ) )   self   .   group _ rets   =   self   .   group _ rets   .   add _ prefix   (   \" group \"   )   self   .   group _ rets   =   (   self   .   group _ rets   -   self   .   factor _ turnover _ rates   *   trade _ cost _ double _ side   )   self   .   rets _ all   =   (   self   .   rets _ all   -   self   .   factor _ turnover _ rates   .   mean   (   axis   =   1   )   *   trade _ cost _ double _ side   )   .   dropna   ( )   self   .   long _ short _ rets   =   (   self   .   group _ rets   [   \" group1 \"   ]   -   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   )   self   .   inner _ rets _ long   =   self   .   group _ rets   .   group1   -   self   .   rets _ all   self   .   inner _ rets _ short   =   (   self   .   rets _ all   -   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   )   self   .   long _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   long _ short _ rets   +   1   )   .   cumprod   ( )   )   if   self   .   long _ short _ net _ values   [   -   1   ]   < =   self   .   long _ short _ net _ values   [   0   ] :   self   .   long _ short _ rets   =   (   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   -   self   .   group _ rets   [   \" group1 \"   ]   )   self   .   long _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   long _ short _ rets   +   1   )   .   cumprod   ( )   )   self   .   inner _ rets _ long   =   (   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   -   self   .   rets _ all   )   self   .   inner _ rets _ short   =   self   .   rets _ all   -   self   .   group _ rets   .   group1   self   .   inner _ long _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   inner _ rets _ long   +   1   )   .   cumprod   ( )   )   self   .   inner _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   inner _ rets _ short   +   1   )   .   cumprod   ( )   )   self   .   group _ rets   =   self   .   group _ rets   .   assign   (   long _ short   =   self   .   long _ short _ rets   )   self   .   group _ net _ values   =   self   .   group _ rets   .   applymap   (   lambda   x   :   x   +   1   )   self   .   group _ net _ values   =   self   .   group _ net _ values   .   cumprod   ( )   self   .   group _ net _ values   =   self   .   group _ net _ values   .   apply   (   self   .   make _ start _ to _ one   )   a   =   groups _ num   * *   (   0.5   )   #   \u5224\u65ad \u662f\u5426 \u8981 \u4e24\u4e2a \u56e0\u5b50 \u753b\u8868 \u8868\u683c \u753b\u8868\u683c   if   a   = =   int   (   a   ) :   self   .   square _ rets   =   (   self   .   group _ net _ values   .   iloc   [ : ,   :   -   1   ]   .   apply   (   self   .   to _ group _ ret   )   .   to _ numpy   ( )   )   self   .   square _ rets   =   self   .   square _ rets   .   reshape   ( (   int   (   a   ) ,   int   (   a   ) ) )   self   .   square _ rets   =   pd   .   DataFrame   (   self   .   square _ rets   ,   columns   =   list   (   range   (   1   ,   int   (   a   )   +   1   ) ) ,   index   =   list   (   range   (   1   ,   int   (   a   )   +   1   ) ) ,   )   print   (   \" \u8fd9\u662f self . square _ rets \"   ,   self   .   square _ rets   )   def   get _ long _ short _ comments   (   self   ,   on _ paper   =   False   ) :   \" \" \" \u8ba1\u7b97 \u591a\u7a7a \u5bf9\u51b2 \u7684 \u76f8\u5173 \u8bc4\u4ef7 \u6307\u6807   \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \" \" \"   #   week _ here   self   .   long _ short _ ret _ yearly   =   (   self   .   long _ short _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   long _ short _ net _ values   ) )   -   1   )   self   .   inner _ long _ ret _ yearly   =   (   self   .   inner _ long _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   inner _ long _ net _ values   ) )   -   1   )   self   .   inner _ short _ ret _ yearly   =   (   self   .   inner _ short _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   inner _ short _ net _ values   ) )   -   1   )   #   week _ here   self   .   long _ short _ vol _ yearly   =   np   .   std   (   self   .   long _ short _ rets   )   *   (   self   .   freq _ ctrl   .   counts _ one _ year   * *   0.5   )   self   .   long _ short _ info _ ratio   =   (   self   .   long _ short _ ret _ yearly   /   self   .   long _ short _ vol _ yearly   )   self   .   long _ short _ win _ times   =   len   (   self   .   long _ short _ rets   [   self   .   long _ short _ rets   >   0   ] )   self   .   long _ short _ win _ ratio   =   self   .   long _ short _ win _ times   /   len   (   self   .   long _ short _ rets   )   self   .   max _ retreat   =   -   (   self   .   long _ short _ net _ values   /   self   .   long _ short _ net _ values   .   expanding   (   1   )   .   max   ( )   -   1   )   .   min   ( )   if   on _ paper   :   self   .   long _ short _ comments   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   long _ short _ ret _ yearly   ,   self   .   long _ short _ vol _ yearly   ,   self   .   long _ short _ info _ ratio   ,   self   .   long _ short _ win _ ratio   ,   self   .   max _ retreat   ,   ]   } ,   #   week _ here   index   =   [   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u6536\u76ca \u6ce2\u52a8 \u6bd4 \"   ,   f   \"   {   self   .   freq _ ctrl   .   comment _ name   }   \u5ea6 \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ,   ] ,   )   else   :   self   .   long _ short _ comments   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   long _ short _ ret _ yearly   ,   self   .   long _ short _ vol _ yearly   ,   self   .   long _ short _ info _ ratio   ,   self   .   long _ short _ win _ ratio   ,   self   .   max _ retreat   ,   ]   } ,   #   week _ here   index   =   [   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u4fe1\u606f \u6bd4\u7387 \"   ,   f   \"   {   self   .   freq _ ctrl   .   comment _ name   }   \u5ea6 \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ,   ] ,   )   def   get _ total _ comments   (   self   ,   groups _ num   ) :   \" \" \" \u7efc\u5408 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR , \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \" \" \"   rankic   =   self   .   rankics   .   mean   ( )   rankic _ win   =   self   .   rankics   [   self   .   rankics   *   rankic   >   0   ]   rankic _ win _ ratio   =   rankic _ win   .   dropna   ( )   .   shape   [   0   ]   /   self   .   rankics   .   dropna   ( )   .   shape   [   0   ]   self   .   factor _ cross _ skew _ after _ neu   =   self   .   __ factors _ out   .   skew   (   axis   =   1   )   .   mean   ( )   if   self   .   ic _ icir _ and _ rank   .   iloc   [   2   ,   0   ]   >   0   :   self   .   factor _ turnover _ rate   =   self   .   factor _ turnover _ rates   [   f   \" group   {   groups _ num   }   \"   ]   .   mean   ( )   else   :   self   .   factor _ turnover _ rate   =   self   .   factor _ turnover _ rates   [   \" group1 \"   ]   .   mean   ( )   self   .   total _ comments   =   pd   .   concat   (   [   self   .   ic _ icir _ and _ rank   ,   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   rankic _ win _ ratio   ] } ,   index   =   [   \" RankIC \u80dc\u7387 \"   ] ,   ) ,   self   .   long _ short _ comments   ,   #   week _ here   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   factor _ turnover _ rate   ,   self   .   factor _ cover   ,   self   .   pos _ neg _ rate   ,   self   .   factor _ cross _ skew   ,   self   .   inner _ long _ ret _ yearly   ,   self   .   inner _ long _ ret _ yearly   /   (   self   .   inner _ long _ ret _ yearly   +   self   .   inner _ short _ ret _ yearly   ) ,   self   .   corr _ itself   ,   ]   } ,   index   =   [   f   \" \u591a\u5934   {   self   .   freq _ ctrl   .   comment _ name   }   \u5747 \u6362\u624b \"   ,   \" \u56e0\u5b50 \u8986\u76d6 \u8986\u76d6\u7387 \"   ,   \" \u56e0\u5b50 \u6b63\u503c \u5360 \u6bd4 \"   ,   \" \u56e0\u5b50 \u622a\u9762 \u504f\u5ea6 \"   ,   \" \u591a\u5934 \u8d85\u5747 \u6536\u76ca \"   ,   \" \u591a\u5934 \u6536\u76ca \u5360 \u6bd4 \"   ,   \" \u4e00\u9636\u81ea \u76f8\u5173 \u76f8\u5173\u6027 \"   ,   ] ,   ) ,   ]   )   self   .   group _ mean _ rets _ monthly   =   self   .   group _ rets   .   drop   (   columns   =   [   ' long _ short '   ] )   .   mean   ( )   self   .   group _ mean _ rets _ monthly   =   self   .   group _ mean _ rets _ monthly   -   self   .   group _ mean _ rets _ monthly   .   mean   ( )   def   plot _ net _ values   (   self   ,   y2   ,   filename   ,   iplot   =   1   ,   ilegend   =   1   ,   without _ breakpoint   =   0   ) :   \" \" \" \u4f7f\u7528 matplotlib \u6765 \u753b\u56fe \uff0c y2 \u4e3a \u662f\u5426 \u5bf9\u591a\u7a7a \u7ec4\u5408 \u91c7\u7528 \u53cc y \u8f74 \" \" \"   if   not   iplot   :   fig   ,   ax   =   plt   .   subplots   (   nrows   =   1   ,   ncols   =   3   ,   figsize   =   (   33   ,   8   ) )   self   .   group _ net _ values   .   plot   (   secondary _ y   =   y2   ,   rot   =   60   ,   ax   =   ax   [   0   ] )   self   .   group _ net _ values   .   plot   (   secondary _ y   =   y2   ,   ax   =   ax   [   0   ] )   b   =   self   .   rankics   .   copy   ( )   b   .   index   =   [   int   (   i   .   year   )   if   i   .   month   = =   1   else   \" \"   for   i   in   list   (   b   .   index   ) ]   b   .   plot   (   kind   =   \" bar \"   ,   rot   =   60   ,   ax   =   ax   [   1   ] )   self   .   factor _ cross _ stds   .   plot   (   rot   =   60   ,   ax   =   ax   [   2   ] )   filename _ path   =   filename   +   \" . png \"   if   not   STATES   [   \" NO _ SAVE \"   ] :   plt   .   savefig   (   filename _ path   )   else   :   tris   =   self   .   group _ net _ values   if   without _ breakpoint   :   tris   =   tris   .   dropna   ( )   figs   =   cf   .   figures   (   tris   ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   group _ net _ values   .   columns   ) ) ,   #   dict ( kind = \" bar \" ,   y = \" \u5404\u7ec4 \u6708\u5747 \u8d85\u5747 \u6536\u76ca \" ) ,   #   dict ( kind = \" bar \" ,   y = \" rankic \" ) ,   ] ,   asList   =   True   ,   )   comments   =   (   self   .   total _ comments   .   applymap   (   lambda   x   :   round   (   x   ,   4   ) )   .   rename   (   index   =   {   \" RankIC \u5747\u503c t \u503c \"   :   \" RankIC . t \"   } )   .   reset _ index   ( )   )   here   =   pd   .   concat   (   [   comments   .   iloc   [ :   6   ,   : ]   .   reset _ index   (   drop   =   True   ) ,   comments   .   iloc   [   6   :   12   ,   : ]   .   reset _ index   (   drop   =   True   ) ,   comments   .   iloc   [   12   : ,   : ]   .   reset _ index   (   drop   =   True   ) ,   ] ,   axis   =   1   ,   )   here   .   columns   =   [   \" \u4fe1\u606f \u7cfb\u6570 \"   ,   \" \u7ed3\u679c \"   ,   \" \u7ee9\u6548 \u6307\u6807 \"   ,   \" \u7ed3\u679c \"   ,   \" \u5176\u4ed6 \u6307\u6807 \"   ,   \" \u7ed3\u679c \"   ]   #   here = here . to _ numpy ( ) . tolist ( ) + [ [ ' \u4fe1\u606f \u7cfb\u6570 ' , ' \u7ed3\u679c ' , ' \u7ee9\u6548 \u6307\u6807 ' , ' \u7ed3\u679c ' ] ]   table   =   FF   .   create _ table   (   here   .   iloc   [ : :   -   1   ] )   table   .   update _ yaxes   (   matches   =   None   )   pic2   =   go   .   Figure   (   go   .   Bar   (   y   =   list   (   self   .   group _ mean _ rets _ monthly   ) ,   x   =   [   i   .   replace   (   ' roup '   ,   ' '   )   for   i   in   list   (   self   .   group _ mean _ rets _ monthly   .   index   ) ] ) )   #   table = go . Figure ( [ go . Table ( header = dict ( values = list ( here . columns ) ) , cells = dict ( values = here . to _ numpy ( ) . tolist ( ) ) ) ] )   pic3 _ data   =   go   .   Bar   (   y   =   list   (   self   .   rankics   .   rankic   ) ,   x   =   list   (   self   .   rankics   .   index   ) )   pic3   =   go   .   Figure   (   data   =   [   pic3 _ data   ] )   pic4 _ data   =   go   .   Line   (   y   =   list   (   self   .   rankics   .   rankic   .   cumsum   ( ) ) ,   x   =   list   (   self   .   rankics   .   index   ) ,   name   =   ' y2 '   ,   yaxis   =   ' y2 '   )   pic4 _ layout   =   go   .   Layout   (   yaxis2   =   dict   (   title   =   ' y2 '   ,   side   =   ' right '   ) )   pic4   =   go   .   Figure   (   data   =   [   pic4 _ data   ] ,   layout   =   pic4 _ layout   )   figs   .   append   (   table   )   figs   =   [   figs   [   -   1   ] ]   +   figs   [ :   -   1   ]   figs   .   append   (   pic2   )   figs   =   [   figs   [   0   ] ,   figs   [   1   ] ,   figs   [   -   1   ] ,   pic3   ]   figs   [   1   ]   .   update _ layout   (   legend   =   dict   (   yanchor   =   \" top \"   ,   y   =   0.99   ,   xanchor   =   \" left \"   ,   x   =   0.01   )   )   figs   [   3   ]   .   update _ layout   (   yaxis2   =   dict   (   title   =   ' y2 '   ,   side   =   ' right '   ) )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   2   ,   11   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   specs   =   [   [   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" colspan \"   :   3   } ,   None   ,   None   ,   ] ,   [   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   {   \" colspan \"   :   3   } ,   None   ,   None   ,   ] ,   ] ,   subplot _ titles   =   [   \" \u51c0\u503c \u66f2\u7ebf \"   ,   \" \u5404\u7ec4 \u6708\u5747 \u8d85\u5747 \u6536\u76ca \"   ,   \" Rank   IC \u65f6\u5e8f \u56fe \"   ,   \" \u7ee9\u6548 \u6307\u6807 \"   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   ilegend   )   #   los = sp [ ' layout ' ] [ ' annotations ' ]   #   los [ 0 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 1 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 2 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 3 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ - 1 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 2 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 3 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 4 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ 0 ] [ ' text ' ] = los [ 0 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 1 ] [ ' text ' ] = los [ 1 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 2 ] [ ' text ' ] = los [ 2 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 3 ] [ ' text ' ] = los [ 3 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ - 1 ] [ ' text ' ] = ' < b > ' + los [ - 1 ] [ ' text ' ] + ' < / b > '   #   los [ - 2 ] [ ' text ' ] = ' < b > ' + los [ - 2 ] [ ' text ' ] + ' < / b > '   #   los [ - 3 ] [ ' text ' ] = ' < b > ' + los [ - 3 ] [ ' text ' ] + ' < / b > '   #   los [ - 4 ] [ ' text ' ] = ' < b > ' + los [ - 4 ] [ ' text ' ] + ' < / b > '   #   sp [ ' layout ' ] [ ' annotations ' ] = los   #   print ( sp [ ' layout ' ] [ ' annotations ' ] )   #   sp [ ' layout ' ] [ ' annotations ' ] [ 0 ] [ ' yanchor ' ] = ' top '   cf   .   iplot   (   sp   )   #   tris = pd . concat ( [ self . group _ net _ values , self . rankics , self . factor _ turnover _ rates ] , axis = 1 ) . rename ( columns = { 0 : ' turnover _ rate ' } )   #   sp = plyoo . make _ subplots ( rows = 2 , cols = 8 , vertical _ spacing = . 15 , horizontal _ spacing = . 03 ,   #   specs = [ [ { ' rowspan ' : 2 , ' colspan ' : 2 , ' type ' : ' domain ' } , None , { ' rowspan ' : 2 , ' colspan ' : 4 , ' type ' : ' xy ' } , None , None , None , { ' colspan ' : 2 , ' type ' : ' xy ' } , None ] ,   #   [ None , None , None , None , None , None , { ' colspan ' : 2 , ' type ' : ' xy ' } , None ] ] ,   #   subplot _ titles = [ ' \u51c0\u503c \u66f2\u7ebf ' , ' Rank   IC \u65f6\u5e8f \u56fe ' , ' \u6708 \u6362\u624b \u6362\u624b\u7387 ' , ' \u7ee9\u6548 \u6307\u6807 ' ] )   #   comments = self . total _ comments . applymap ( lambda   x : round ( x , 4 ) ) . rename ( index = { ' RankIC \u5747\u503c t \u503c ' : ' RankIC . t ' } ) . reset _ index ( )   #   here = pd . concat ( [ comments . iloc [ : 5 , : ] . reset _ index ( drop = True ) , comments . iloc [ 5 : , : ] . reset _ index ( drop = True ) ] , axis = 1 )   #   here . columns = [ ' \u4fe1\u606f \u7cfb\u6570 ' , ' \u7ed3\u679c ' , ' \u7ee9\u6548 \u6307\u6807 ' , ' \u7ed3\u679c ' ]   #   table = FF . create _ table ( here )   #   sp . add _ trace ( table )   def   plotly _ net _ values   (   self   ,   filename   ) :   \" \" \" \u4f7f\u7528 plotly . express \u753b\u56fe \" \" \"   fig   =   pe   .   line   (   self   .   group _ net _ values   )   filename _ path   =   filename   +   \" . html \"   pio   .   write _ html   (   fig   ,   filename _ path   ,   auto _ open   =   True   )   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   prerpare   (   cls   ) :   \" \" \" \u901a\u7528 \u6570\u636e \u51c6\u5907 \" \" \"   cls   .   judge _ month   ( )   cls   .   get _ rets _ month   ( )   def   run   (   self   ,   groups _ num   =   10   ,   neutralize   =   False   ,   boxcox   =   False   ,   trade _ cost _ double _ side   =   0   ,   value _ weighted   =   False   ,   y2   =   False   ,   plt _ plot   =   True   ,   plotly _ plot   =   False   ,   filename   =   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   ,   print _ comments   =   True   ,   comments _ writer   =   None   ,   net _ values _ writer   =   None   ,   rets _ writer   =   None   ,   comments _ sheetname   =   None   ,   net _ values _ sheetname   =   None   ,   rets _ sheetname   =   None   ,   on _ paper   =   False   ,   sheetname   =   None   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ,   iplot   =   1   ,   ilegend   =   0   ,   without _ breakpoint   =   0   ,   beauty _ comments   =   0   ,   ) :   \" \" \" \u8fd0\u884c \u56de\u6d4b \u90e8\u5206 \" \" \"   if   comments _ writer   and   not   (   comments _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a total _ comments \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   net _ values _ writer   and   not   (   net _ values _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a group _ net _ values \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   rets _ writer   and   not   (   rets _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a group _ rets \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   neutralize   :   self   .   get _ log _ cap   ( )   self   .   get _ neutral _ factors   (   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   )   self   .   deal _ with _ factors _ after _ neutralize   ( )   elif   boxcox   :   self   .   get _ log _ cap   (   boxcox   =   True   )   self   .   get _ neutral _ factors   (   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   only _ cap   =   only _ cap   ,   )   self   .   deal _ with _ factors _ after _ neutralize   ( )   else   :   self   .   deal _ with _ factors   ( )   self   .   get _ limit _ ups _ downs   ( )   self   .   get _ data   (   groups _ num   )   self   .   get _ group _ rets _ net _ values   (   groups _ num   =   groups _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   )   self   .   get _ long _ short _ comments   (   on _ paper   =   on _ paper   )   self   .   get _ total _ comments   (   groups _ num   =   groups _ num   )   if   on _ paper   :   group1 _ ttest   =   ss   .   ttest _ 1samp   (   self   .   group _ rets   .   group1   ,   0   )   .   pvalue   group10 _ ttest   =   ss   .   ttest _ 1samp   (   self   .   group _ rets   [   f   \" group   {   groups _ num   }   \"   ] ,   0   )   .   pvalue   group _ long _ short _ ttest   =   ss   .   ttest _ 1samp   (   self   .   long _ short _ rets   ,   0   )   .   pvalue   group1 _ ret   =   self   .   group _ rets   .   group1   .   mean   ( )   group10 _ ret   =   self   .   group _ rets   [   f   \" group   {   groups _ num   }   \"   ]   .   mean   ( )   group _ long _ short _ ret   =   self   .   long _ short _ rets   .   mean   ( )   papers   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   group1 _ ttest   ,   group10 _ ttest   ,   group _ long _ short _ ttest   ,   group1 _ ret   ,   group10 _ ret   ,   group _ long _ short _ ret   ,   ]   } ,   index   =   [   \" \u5206\u7ec4 1p \u503c \"   ,   f   \" \u5206\u7ec4   {   groups _ num   }   p \u503c \"   ,   f   \" \u5206\u7ec4 1 - \u5206\u7ec4   {   groups _ num   }   p \u503c \"   ,   \" \u5206\u7ec4 1 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   f   \" \u5206\u7ec4   {   groups _ num   }   \u6536\u76ca \u6536\u76ca\u7387 \"   ,   f   \" \u5206\u7ec4 1 - \u5206\u7ec4   {   groups _ num   }   \u6536\u76ca \u6536\u76ca\u7387 \"   ,   ] ,   )   self   .   total _ comments   =   pd   .   concat   ( [   papers   ,   self   .   total _ comments   ] )   if   plt _ plot   :   if   not   STATES   [   \" NO _ PLOT \"   ] :   if   filename   :   self   .   plot _ net _ values   (   y2   =   y2   ,   filename   =   filename   ,   iplot   =   iplot   ,   ilegend   =   bool   (   ilegend   ) ,   without _ breakpoint   =   without _ breakpoint   ,   )   else   :   self   .   plot _ net _ values   (   y2   =   y2   ,   filename   =   self   .   factors _ file   .   split   (   \" . \"   ) [   -   2   ]   .   split   (   \" / \"   ) [   -   1   ]   +   str   (   groups _ num   )   +   \" \u5206\u7ec4 \"   ,   iplot   =   iplot   ,   ilegend   =   bool   (   ilegend   ) ,   without _ breakpoint   =   without _ breakpoint   ,   )   plt   .   show   ( )   if   plotly _ plot   :   if   not   STATES   [   \" NO _ PLOT \"   ] :   if   filename   :   self   .   plotly _ net _ values   (   filename   =   filename   )   else   :   self   .   plotly _ net _ values   (   filename   =   self   .   factors _ file   .   split   (   \" . \"   ) [   -   2   ]   .   split   (   \" / \"   ) [   -   1   ]   +   str   (   groups _ num   )   +   \" \u5206\u7ec4 \"   )   if   print _ comments   :   if   not   STATES   [   \" NO _ COMMENT \"   ] :   tb   =   Texttable   ( )   tb   .   set _ cols _ width   (   [   8   ]   *   5   +   [   9   ]   +   [   8   ]   *   2   +   [   7   ]   *   2   +   [   8   ]   +   [   8   ]   +   [   9   ]   +   [   10   ]   *   5   )   tb   .   set _ cols _ dtype   ( [   \" f \"   ]   *   18   )   tb   .   header   (   list   (   self   .   total _ comments   .   T   .   columns   ) )   tb   .   add _ rows   (   self   .   total _ comments   .   T   .   to _ numpy   ( ) ,   header   =   False   )   print   (   tb   .   draw   ( ) )   if   sheetname   :   if   comments _ writer   :   if   not   on _ paper   :   total _ comments   =   self   .   total _ comments   .   copy   ( )   tc   =   list   (   total _ comments   .   \u8bc4\u4ef7 \u6307\u6807   )   if   beauty _ comments   :   tc   [   0   ]   =   str   (   round   (   tc   [   0   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   1   ]   =   str   (   round   (   tc   [   1   ] ,   2   ) )   tc   [   2   ]   =   str   (   round   (   tc   [   2   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   3   ]   =   str   (   round   (   tc   [   3   ] ,   2   ) )   tc   [   4   ]   =   str   (   round   (   tc   [   4   ] ,   2   ) )   tc   [   5   ]   =   str   (   round   (   tc   [   5   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   6   ]   =   str   (   round   (   tc   [   6   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   7   ]   =   str   (   round   (   tc   [   7   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   8   ]   =   str   (   round   (   tc   [   8   ] ,   2   ) )   tc   [   9   ]   =   str   (   round   (   tc   [   9   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   10   ]   =   str   (   round   (   tc   [   10   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   11   ]   =   str   (   round   (   tc   [   11   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   12   ]   =   str   (   round   (   tc   [   12   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   13   ]   =   str   (   round   (   tc   [   13   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   14   ]   =   str   (   round   (   tc   [   14   ] ,   2   ) )   tc   [   15   ]   =   str   (   round   (   tc   [   15   ] ,   2   ) )   tc   [   16   ]   =   str   (   round   (   tc   [   16   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   17   ]   =   str   (   round   (   tc   [   17   ]   *   100   ,   2   ) )   +   \" % \"   tc   =   tc   +   list   (   self   .   group _ mean _ rets _ monthly   )   new _ total _ comments   =   pd   .   DataFrame   (   {   sheetname   :   tc   } ,   index   =   list   (   total _ comments   .   index   )   +   [   f   ' \u7b2c   {   i   }   \u7ec4 '   for   i   in   range   (   1   ,   groups _ num   +   1   ) ]   )   new _ total _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   rankic _ twins   =   pd   .   concat   ( [   self   .   rankics   .   rankic   ,   self   .   rankics   .   rankic   .   cumsum   ( ) ] ,   axis   =   1   )   rankic _ twins   .   columns   =   [   ' RankIC '   ,   ' RankIC \u7d2f\u79ef '   ]   rankic _ twins   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   +   ' RankIC '   )   else   :   self   .   total _ comments   .   rename   (   columns   =   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   sheetname   } )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   if   net _ values _ writer   :   groups _ net _ values   =   self   .   group _ net _ values   .   copy   ( )   groups _ net _ values   .   index   =   groups _ net _ values   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   groups _ net _ values   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   groups _ net _ values   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   groups _ net _ values   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   sheetname   )   if   rets _ writer   :   group _ rets   =   self   .   group _ rets   .   copy   ( )   group _ rets   .   index   =   group _ rets   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   group _ rets   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   group _ rets   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   group _ rets   .   to _ excel   (   rets _ writer   ,   sheet _ name   =   sheetname   )   else   :   if   comments _ writer   and   comments _ sheetname   :   total _ comments   =   self   .   total _ comments   .   copy   ( )   tc   =   list   (   total _ comments   .   \u8bc4\u4ef7 \u6307\u6807   )   tc   [   0   ]   =   str   (   round   (   tc   [   0   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   1   ]   =   str   (   round   (   tc   [   1   ] ,   2   ) )   tc   [   2   ]   =   str   (   round   (   tc   [   2   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   3   ]   =   str   (   round   (   tc   [   3   ] ,   2   ) )   tc   [   4   ]   =   str   (   round   (   tc   [   4   ] ,   2   ) )   tc   [   5   ]   =   str   (   round   (   tc   [   5   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   6   ]   =   str   (   round   (   tc   [   6   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   7   ]   =   str   (   round   (   tc   [   7   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   8   ]   =   str   (   round   (   tc   [   8   ] ,   2   ) )   tc   [   9   ]   =   str   (   round   (   tc   [   9   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   10   ]   =   str   (   round   (   tc   [   10   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   11   ]   =   str   (   round   (   tc   [   11   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   12   ]   =   str   (   round   (   tc   [   12   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   13   ]   =   str   (   round   (   tc   [   13   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   14   ]   =   str   (   round   (   tc   [   14   ] ,   2   ) )   tc   [   15   ]   =   str   (   round   (   tc   [   15   ] ,   2   ) )   tc   [   16   ]   =   str   (   round   (   tc   [   16   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   17   ]   =   str   (   round   (   tc   [   17   ]   *   100   ,   2   ) )   +   \" % \"   new _ total _ comments   =   pd   .   DataFrame   (   {   comments _ sheetname   :   tc   } ,   index   =   total _ comments   .   index   )   new _ total _ comments   .   T   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   comments _ sheetname   )   if   net _ values _ writer   and   net _ values _ sheetname   :   groups _ net _ values   =   self   .   group _ net _ values   .   copy   ( )   groups _ net _ values   .   index   =   groups _ net _ values   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   groups _ net _ values   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   groups _ net _ values   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   groups _ net _ values   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   net _ values _ sheetname   )   if   rets _ writer   and   rets _ sheetname   :   group _ rets   =   self   .   group _ rets   .   copy   ( )   group _ rets   .   index   =   group _ rets   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   group _ rets   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   group _ rets   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   group _ rets   .   to _ excel   (   rets _ writer   ,   sheet _ name   =   rets _ sheetname   )   __ call __   ( )   \u00b6   \u8c03\u7528 \u5bf9\u8c61 \u5219 \u8fd4\u56de \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1586   1587   1588   def   __ call __   (   self   ) :   \" \" \" \u8c03\u7528 \u5bf9\u8c61 \u5219 \u8fd4\u56de \u56e0\u5b50 \u503c \" \" \"   return   self   .   factors _ out   daily _ to _ monthly   (   pridf   ,   path   ,   func   )   classmethod   \u00b6   \u628a \u65e5\u5ea6 \u7684 \u4ea4\u6613 \u72b6\u6001 \u3001 st \u3001 \u4e0a\u5e02 \u5929\u6570 \uff0c \u8f6c\u5316 \u4e3a \u6708\u5ea6 \u7684 \uff0c \u5e76 \u751f\u6210 \u80fd\u5426 \u4ea4\u6613 \u7684 \u5224\u65ad   \u8bfb\u53d6 \u672c\u5730 \u5df2\u7ecf \u7b97\u597d \u7684 \u6587\u4ef6 \uff0c \u5e76 \u8ffd\u52a0 \u65b0 \u7684 \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u90e8\u5206 \uff0c \u5982\u679c \u672c\u5730 \u6ca1\u6709 \u5c31 \u76f4\u63a5 \u5168\u90e8 \u91cd\u65b0 \u7b97   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1711   1712   1713   1714   1715   1716   1717   1718   1719   1720   1721   1722   1723   1724   1725   1726   1727   1728   1729   1730   1731   1732   1733   @ classmethod   def   daily _ to _ monthly   (   cls   ,   pridf   ,   path   ,   func   ) :   \" \" \" \u628a \u65e5\u5ea6 \u7684 \u4ea4\u6613 \u72b6\u6001 \u3001 st \u3001 \u4e0a\u5e02 \u5929\u6570 \uff0c \u8f6c\u5316 \u4e3a \u6708\u5ea6 \u7684 \uff0c \u5e76 \u751f\u6210 \u80fd\u5426 \u4ea4\u6613 \u7684 \u5224\u65ad   \u8bfb\u53d6 \u672c\u5730 \u5df2\u7ecf \u7b97\u597d \u7684 \u6587\u4ef6 \uff0c \u5e76 \u8ffd\u52a0 \u65b0 \u7684 \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u90e8\u5206 \uff0c \u5982\u679c \u672c\u5730 \u6ca1\u6709 \u5c31 \u76f4\u63a5 \u5168\u90e8 \u91cd\u65b0 \u7b97 \" \" \"   try   :   month _ df   =   pd   .   read _ parquet   (   path   )   month _ df   =   cls   .   read _ add   (   pridf   ,   month _ df   ,   func   )   month _ df   .   to _ parquet   (   path   )   except   Exception   as   e   :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   error   (   \" error   occurs   when   read   state   files \"   )   logger   .   error   (   e   )   print   (   \" state   file   rewriting \u2026 \u2026 \"   )   #   week _ here   df _ 1   =   pridf   .   index   .   max   ( )   year   =   df _ 1   .   year   month   =   df _ 1   .   month   last   =   tt   .   date   .   get _ close   (   year   =   year   ,   m   =   month   )   .   pd _ date   ( )   if   not   (   last   = =   df _ 1   ) [   0   ] :   pridf   =   pridf   [   pridf   .   index   <   pd   .   Timestamp   (   year   =   year   ,   month   =   month   ,   day   =   1   ) ]   month _ df   =   pridf   .   resample   (   cls   .   freq   )   .   apply   (   func   )   month _ df   .   to _ parquet   (   path   )   return   month _ df   deal _ with _ factors   ( )   \u00b6   \u5220\u9664 \u4e0d \u7b26\u5408 \u4ea4\u6613 \u6761\u4ef6 \u7684 \u56e0\u5b50 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1842   1843   1844   1845   1846   1847   1848   1849   1850   1851   def   deal _ with _ factors   (   self   ) :   \" \" \" \u5220\u9664 \u4e0d \u7b26\u5408 \u4ea4\u6613 \u6761\u4ef6 \u7684 \u56e0\u5b50 \u6570\u636e \" \" \"   self   .   __ factors _ out   =   self   .   factors   .   copy   ( )   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   =   self   .   factors   *   self   .   tris _ monthly   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   deal _ with _ factors _ after _ neutralize   ( )   \u00b6   \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u5904\u7406 \u65b9\u6cd5   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1853   1854   1855   1856   1857   1858   1859   1860   1861   1862   1863   1864   1865   def   deal _ with _ factors _ after _ neutralize   (   self   ) :   \" \" \" \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u5904\u7406 \u65b9\u6cd5 \" \" \"   self   .   factors   =   self   .   factors   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   self   .   factors   =   self   .   factors   .   unstack   ( )   self   .   __ factors _ out   =   self   .   factors   .   copy   ( )   self   .   __ factors _ out   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   __ factors _ out   .   columns   ) ]   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   self   .   factors   .   columns   ) ) )   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   find _ limit   (   df   ,   up   =   1   )   classmethod   \u00b6   \u8ba1\u7b97 \u6da8\u8dcc \u8dcc\u5e45 \u6da8\u8dcc\u5e45 \u8d85\u8fc7 9.8% \u7684 \u80a1\u7968 \uff0c \u5e76 \u5c06 \u5176 \u5b58\u50a8 \u8fdb \u4e00\u4e2a \u957f \u5217\u8868 \u91cc   \u5176\u4e2d \u65f6\u95f4 \u5217 \uff0c \u4e3a \u67d0\u6708 \u7684 \u6700\u540e \u4e00\u5929 \uff1b \u6da8\u505c \u65e5 \u867d\u7136 \u4e3a \u4e0b\u6708 \u6708\u521d \u4e0b\u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \uff0c \u4f46 \u8fd9\u91cc \u6807\u6ce8 \u7684 \u65f6\u95f4 \u7edf\u4e00 \u4e3a \u4e0a \u6708 \u6700\u540e \u4e00\u5929   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1867   1868   1869   1870   1871   1872   1873   1874   1875   1876   1877   @ classmethod   def   find _ limit   (   cls   ,   df   ,   up   =   1   ) :   \" \" \" \u8ba1\u7b97 \u6da8\u8dcc \u8dcc\u5e45 \u6da8\u8dcc\u5e45 \u8d85\u8fc7 9.8% \u7684 \u80a1\u7968 \uff0c \u5e76 \u5c06 \u5176 \u5b58\u50a8 \u8fdb \u4e00\u4e2a \u957f \u5217\u8868 \u91cc   \u5176\u4e2d \u65f6\u95f4 \u5217 \uff0c \u4e3a \u67d0\u6708 \u7684 \u6700\u540e \u4e00\u5929 \uff1b \u6da8\u505c \u65e5 \u867d\u7136 \u4e3a \u4e0b\u6708 \u6708\u521d \u4e0b\u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \uff0c \u4f46 \u8fd9\u91cc \u6807\u6ce8 \u7684 \u65f6\u95f4 \u7edf\u4e00 \u4e3a \u4e0a \u6708 \u6700\u540e \u4e00\u5929 \" \" \"   limit _ df   =   np   .   sign   (   df   .   applymap   (   lambda   x   :   x   -   up   *   0.098   ) )   .   replace   (   -   1   *   up   ,   np   .   nan   )   limit _ df   =   limit _ df   .   stack   ( )   .   reset _ index   ( )   limit _ df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" limit _ up _ signal \"   ]   limit _ df   =   limit _ df   [ [   \" date \"   ,   \" code \"   ] ]   return   limit _ df   get _ data   (   groups _ num   )   \u00b6   \u62fc\u63a5 \u56e0\u5b50 \u6570\u636e \u548c \u6bcf\u6708 \u6536\u76ca \u6536\u76ca\u7387 \u6570\u636e \uff0c \u5e76 \u5bf9 \u6da8\u505c \u548c \u8dcc\u505c \u80a1 \u52a0\u4ee5 \u5904\u7406   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1968   1969   1970   1971   1972   1973   1974   1975   1976   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   1997   1998   1999   def   get _ data   (   self   ,   groups _ num   ) :   \" \" \" \u62fc\u63a5 \u56e0\u5b50 \u6570\u636e \u548c \u6bcf\u6708 \u6536\u76ca \u6536\u76ca\u7387 \u6570\u636e \uff0c \u5e76 \u5bf9 \u6da8\u505c \u548c \u8dcc\u505c \u80a1 \u52a0\u4ee5 \u5904\u7406 \" \" \"   self   .   data   =   pd   .   merge   (   self   .   rets _ monthly   ,   self   .   factors   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   ic _ icir _ and _ rank   =   self   .   get _ ic _ icir _ and _ rank   (   self   .   data   )   self   .   data   =   self   .   data   .   groupby   (   \" date \"   )   .   apply   (   lambda   x   :   self   .   get _ groups   (   x   ,   groups _ num   )   )   self   .   wind _ out   =   self   .   data   .   copy   ( )   self   .   factor _ turnover _ rates   =   self   .   data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" group \"   )   rates   =   [ ]   for   i   in   range   (   1   ,   groups _ num   +   1   ) :   son   =   (   self   .   factor _ turnover _ rates   = =   i   )   +   0   son1   =   son   .   diff   ( )   #   self . factor _ turnover _ rates   =   self . factor _ turnover _ rates . diff ( )   change   =   ( (   np   .   abs   (   np   .   sign   (   son1   ) )   = =   1   )   +   0   )   .   sum   (   axis   =   1   )   still   =   ( ( (   son1   = =   0   )   +   0   )   *   son   )   .   sum   (   axis   =   1   )   rate   =   change   /   (   change   +   still   )   rates   .   append   (   rate   .   to _ frame   (   f   \" group   {   i   }   \"   ) )   rates   =   pd   .   concat   (   rates   ,   axis   =   1   )   .   fillna   (   0   )   self   .   factor _ turnover _ rates   =   rates   self   .   data   =   self   .   data   .   reset _ index   (   drop   =   True   )   limit _ ups _ object   =   self   .   limit _ old _ to _ new   (   self   .   limit _ ups   ,   self   .   data   )   limit _ downs _ object   =   self   .   limit _ old _ to _ new   (   self   .   limit _ downs   ,   self   .   data   )   self   .   data   =   self   .   data   .   drop   (   limit _ ups _ object   .   index   )   rets _ monthly _ limit _ downs   =   pd   .   merge   (   self   .   rets _ monthly   ,   limit _ downs _ object   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   data   =   pd   .   concat   ( [   self   .   data   ,   rets _ monthly _ limit _ downs   ] )   get _ group _ rets _ net _ values   (   groups _ num   =   10   ,   value _ weighted   =   False   ,   trade _ cost _ double _ side   =   0   )   \u00b6   \u8ba1\u7b97 \u7ec4\u5185 \u6bcf \u4e00\u671f \u7684 \u5e73\u5747 \u6536\u76ca \uff0c \u751f\u6210 \u6bcf\u65e5 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2015   2016   2017   2018   2019   2020   2021   2022   2023   2024   2025   2026   2027   2028   2029   2030   2031   2032   2033   2034   2035   2036   2037   2038   2039   2040   2041   2042   2043   2044   2045   2046   2047   2048   2049   2050   2051   2052   2053   2054   2055   2056   2057   2058   2059   2060   2061   2062   2063   2064   2065   2066   2067   2068   2069   2070   2071   2072   2073   2074   2075   2076   2077   2078   2079   2080   2081   2082   2083   2084   2085   2086   2087   2088   2089   2090   2091   2092   2093   2094   2095   2096   2097   2098   2099   2100   2101   2102   2103   2104   2105   2106   2107   def   get _ group _ rets _ net _ values   (   self   ,   groups _ num   =   10   ,   value _ weighted   =   False   ,   trade _ cost _ double _ side   =   0   ) :   \" \" \" \u8ba1\u7b97 \u7ec4\u5185 \u6bcf \u4e00\u671f \u7684 \u5e73\u5747 \u6536\u76ca \uff0c \u751f\u6210 \u6bcf\u65e5 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \" \" \"   if   value _ weighted   :   cap _ value   =   self   .   capital   .   copy   ( )   #   week _ here   cap _ value   =   cap _ value   .   resample   (   self   .   freq   )   .   last   ( )   .   shift   (   1   )   cap _ value   =   cap _ value   *   self   .   tris _ monthly   #   cap _ value = np . log ( cap _ value )   cap _ value   =   cap _ value   .   stack   ( )   .   reset _ index   ( )   cap _ value   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap _ value \"   ]   self   .   data   =   pd   .   merge   (   self   .   data   ,   cap _ value   ,   on   =   [   \" date \"   ,   \" code \"   ] )   def   in _ g   (   df   ) :   df   .   cap _ value   =   df   .   cap _ value   /   df   .   cap _ value   .   sum   ( )   df   .   ret   =   df   .   ret   *   df   .   cap _ value   return   df   .   ret   .   sum   ( )   self   .   group _ rets   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   in _ g   )   self   .   rets _ all   =   self   .   data   .   groupby   ( [   \" date \"   ] )   .   apply   (   in _ g   )   self   .   group _ rets _ std   =   \" \u5e02\u503c \u52a0\u6743 \u6682\u672a \u8bbe\u7f6e \u8be5 \u529f\u80fd \uff0c \u656c\u8bf7 \u671f\u5f85 \u656c\u8bf7\u671f\u5f85 \ud83c\udf19 \"   else   :   self   .   group _ rets   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   lambda   x   :   x   .   ret   .   mean   ( )   )   self   .   rets _ all   =   self   .   data   .   groupby   ( [   \" date \"   ] )   .   apply   (   lambda   x   :   x   .   ret   .   mean   ( ) )   self   .   group _ rets _ stds   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   ret   .   std   ( )   self   .   group _ rets _ std   =   (   self   .   group _ rets _ stds   .   reset _ index   ( )   .   groupby   (   \" group \"   )   .   mean   ( )   )   self   .   group _ rets _ skews   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   ret   .   skew   ( )   self   .   group _ rets _ skew   =   (   self   .   group _ rets _ skews   .   reset _ index   ( )   .   groupby   (   \" group \"   )   .   mean   ( )   )   #   dropna \u56e0\u4e3a \u662f\u56e0\u4e3a \u5982\u679c \u80a1\u7968 \u884c\u60c5 \u80a1\u7968\u884c\u60c5 \u6570\u636e \u6bd4 \u56e0\u5b50 \u6570\u636e \u7684 \u622a\u6b62 \u65e5\u671f \u665a \uff0c \u800c \u6700\u540e \u4e00\u4e2a \u4e00\u4e2a\u6708 \u53d1\u751f \u6708\u521d \u8dcc\u505c \u65f6 \uff0c \u4f1a \u9020\u6210 \u6700\u540e \u67d0\u7ec4 \u591a\u51fa \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7684 \u6570\u636e   self   .   group _ rets   =   self   .   group _ rets   .   unstack   ( )   self   .   group _ rets   =   self   .   group _ rets   [   self   .   group _ rets   .   index   < =   self   .   factors   .   date   .   max   ( )   ]   self   .   group _ rets   .   columns   =   list   (   map   (   str   ,   list   (   self   .   group _ rets   .   columns   ) ) )   self   .   group _ rets   =   self   .   group _ rets   .   add _ prefix   (   \" group \"   )   self   .   group _ rets   =   (   self   .   group _ rets   -   self   .   factor _ turnover _ rates   *   trade _ cost _ double _ side   )   self   .   rets _ all   =   (   self   .   rets _ all   -   self   .   factor _ turnover _ rates   .   mean   (   axis   =   1   )   *   trade _ cost _ double _ side   )   .   dropna   ( )   self   .   long _ short _ rets   =   (   self   .   group _ rets   [   \" group1 \"   ]   -   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   )   self   .   inner _ rets _ long   =   self   .   group _ rets   .   group1   -   self   .   rets _ all   self   .   inner _ rets _ short   =   (   self   .   rets _ all   -   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   )   self   .   long _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   long _ short _ rets   +   1   )   .   cumprod   ( )   )   if   self   .   long _ short _ net _ values   [   -   1   ]   < =   self   .   long _ short _ net _ values   [   0   ] :   self   .   long _ short _ rets   =   (   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   -   self   .   group _ rets   [   \" group1 \"   ]   )   self   .   long _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   long _ short _ rets   +   1   )   .   cumprod   ( )   )   self   .   inner _ rets _ long   =   (   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   -   self   .   rets _ all   )   self   .   inner _ rets _ short   =   self   .   rets _ all   -   self   .   group _ rets   .   group1   self   .   inner _ long _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   inner _ rets _ long   +   1   )   .   cumprod   ( )   )   self   .   inner _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   inner _ rets _ short   +   1   )   .   cumprod   ( )   )   self   .   group _ rets   =   self   .   group _ rets   .   assign   (   long _ short   =   self   .   long _ short _ rets   )   self   .   group _ net _ values   =   self   .   group _ rets   .   applymap   (   lambda   x   :   x   +   1   )   self   .   group _ net _ values   =   self   .   group _ net _ values   .   cumprod   ( )   self   .   group _ net _ values   =   self   .   group _ net _ values   .   apply   (   self   .   make _ start _ to _ one   )   a   =   groups _ num   * *   (   0.5   )   #   \u5224\u65ad \u662f\u5426 \u8981 \u4e24\u4e2a \u56e0\u5b50 \u753b\u8868 \u8868\u683c \u753b\u8868\u683c   if   a   = =   int   (   a   ) :   self   .   square _ rets   =   (   self   .   group _ net _ values   .   iloc   [ : ,   :   -   1   ]   .   apply   (   self   .   to _ group _ ret   )   .   to _ numpy   ( )   )   self   .   square _ rets   =   self   .   square _ rets   .   reshape   ( (   int   (   a   ) ,   int   (   a   ) ) )   self   .   square _ rets   =   pd   .   DataFrame   (   self   .   square _ rets   ,   columns   =   list   (   range   (   1   ,   int   (   a   )   +   1   ) ) ,   index   =   list   (   range   (   1   ,   int   (   a   )   +   1   ) ) ,   )   print   (   \" \u8fd9\u662f self . square _ rets \"   ,   self   .   square _ rets   )   get _ groups   (   df   ,   groups _ num   )   classmethod   \u00b6   \u4f9d\u636e \u56e0\u5b50 \u503c \uff0c \u5224\u65ad \u662f \u5728 \u7b2c \u51e0\u7ec4   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1933   1934   1935   1936   1937   1938   1939   1940   1941   1942   1943   1944   1945   1946   1947   1948   1949   1950   1951   1952   @ classmethod   def   get _ groups   (   cls   ,   df   ,   groups _ num   ) :   \" \" \" \u4f9d\u636e \u56e0\u5b50 \u503c \uff0c \u5224\u65ad \u662f \u5728 \u7b2c \u51e0\u7ec4 \" \" \"   if   \" group \"   in   list   (   df   .   columns   ) :   df   =   df   .   drop   (   columns   =   [   \" group \"   ] )   df   =   df   .   sort _ values   ( [   \" fac \"   ] ,   ascending   =   True   )   each _ group   =   round   (   df   .   shape   [   0   ]   /   groups _ num   )   l   =   list   (   map   (   lambda   x   ,   y   :   [   x   ]   *   y   ,   list   (   range   (   1   ,   groups _ num   +   1   ) ) ,   [   each _ group   ]   *   groups _ num   ,   )   )   l   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   l   )   if   len   (   l   )   <   df   .   shape   [   0   ] :   l   =   l   +   [   groups _ num   ]   *   (   df   .   shape   [   0   ]   -   len   (   l   ) )   l   =   l   [ :   df   .   shape   [   0   ] ]   df   .   insert   (   0   ,   \" group \"   ,   l   )   return   df   get _ ic _ icir _ and _ rank   (   df   )   \u00b6   \u8ba1\u7b97 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1918   1919   1920   1921   1922   1923   1924   1925   1926   1927   1928   1929   1930   1931   def   get _ ic _ icir _ and _ rank   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR \" \" \"   df1   =   df   .   groupby   (   \" date \"   )   .   apply   (   cls   .   get _ ic _ rankic   )   cls   .   ics   =   df1   .   ic   cls   .   rankics   =   df1   .   rankic   cls   .   ics   =   cls   .   ics   .   reset _ index   (   drop   =   True   ,   level   =   1   )   .   to _ frame   ( )   cls   .   rankics   =   cls   .   rankics   .   reset _ index   (   drop   =   True   ,   level   =   1   )   .   to _ frame   ( )   df2   =   cls   .   get _ icir _ rankicir   (   df1   )   df2   =   df2   .   T   dura   =   (   df   .   date   .   max   ( )   -   df   .   date   .   min   ( ) )   .   days   /   365   t _ value   =   df2   .   iloc   [   3   ,   0   ]   *   (   dura   * *   (   1   /   2   ) )   df3   =   pd   .   DataFrame   ( {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   t _ value   ] } ,   index   =   [   \" RankIC . t \"   ] )   df4   =   pd   .   concat   ( [   df2   ,   df3   ] )   return   df4   get _ ic _ rankic   (   df   )   \u00b6   \u8ba1\u7b97 IC \u548c RankIC   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1897   1898   1899   1900   1901   1902   1903   def   get _ ic _ rankic   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 IC \u548c RankIC \" \" \"   df1   =   df   [ [   \" ret \"   ,   \" fac \"   ] ]   ic   =   df1   .   corr   (   method   =   \" pearson \"   )   .   iloc   [   0   ,   1   ]   rankic   =   df1   .   rank   ( )   .   corr   ( )   .   iloc   [   0   ,   1   ]   df2   =   pd   .   DataFrame   ( {   \" ic \"   :   [   ic   ] ,   \" rankic \"   :   [   rankic   ] } )   return   df2   get _ icir _ rankicir   (   df   )   \u00b6   \u8ba1\u7b97 ICIR \u548c RankICIR   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1905   1906   1907   1908   1909   1910   1911   1912   1913   1914   1915   1916   def   get _ icir _ rankicir   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 ICIR \u548c RankICIR \" \" \"   ic   =   df   .   ic   .   mean   ( )   rankic   =   df   .   rankic   .   mean   ( )   #   week _ here   icir   =   ic   /   np   .   std   (   df   .   ic   )   *   (   cls   .   freq _ ctrl   .   counts _ one _ year   * *   (   0.5   ) )   #   week _ here   rankicir   =   rankic   /   np   .   std   (   df   .   rankic   )   *   (   cls   .   freq _ ctrl   .   counts _ one _ year   * *   (   0.5   ) )   return   pd   .   DataFrame   (   {   \" IC \"   :   [   ic   ] ,   \" ICIR \"   :   [   icir   ] ,   \" RankIC \"   :   [   rankic   ] ,   \" RankICIR \"   :   [   rankicir   ] } ,   index   =   [   \" \u8bc4\u4ef7 \u6307\u6807 \"   ] ,   )   get _ limit _ ups _ downs   ( )   cached   classmethod   \u00b6   \u627e \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5c31 \u6da8\u505c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1879   1880   1881   1882   1883   1884   1885   1886   1887   1888   1889   1890   1891   1892   1893   1894   1895   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ limit _ ups _ downs   (   cls   ) :   \" \" \" \u627e \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5c31 \u6da8\u505c \" \" \"   \" \" \" \u6216\u8005 \u662f \u6708\u672b \u8dcc\u505c \u7684 \u80a1\u7968 \" \" \"   cls   .   opens _ monthly _ shift   =   cls   .   opens _ monthly   .   copy   ( )   cls   .   opens _ monthly _ shift   =   cls   .   opens _ monthly _ shift   .   shift   (   -   1   )   cls   .   rets _ monthly _ begin   =   (   cls   .   opens _ monthly _ shift   -   cls   .   closes _ monthly   )   /   cls   .   closes _ monthly   #   week _ here   cls   .   closes2 _ monthly   =   cls   .   closes   .   shift   (   1   )   .   resample   (   cls   .   freq   )   .   last   ( )   cls   .   rets _ monthly _ last   =   (   cls   .   closes _ monthly   -   cls   .   closes2 _ monthly   )   /   cls   .   closes2 _ monthly   cls   .   limit _ ups   =   cls   .   find _ limit   (   cls   .   rets _ monthly _ begin   ,   up   =   1   )   cls   .   limit _ downs   =   cls   .   find _ limit   (   cls   .   rets _ monthly _ last   ,   up   = -   1   )   get _ log _ cap   (   boxcox   =   True   )   cached   classmethod   \u00b6   \u83b7\u5f97 \u5bf9\u6570 \u5e02\u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1791   1792   1793   1794   1795   1796   1797   1798   1799   1800   1801   1802   1803   1804   1805   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ log _ cap   (   cls   ,   boxcox   =   True   ) :   \" \" \" \u83b7\u5f97 \u5bf9\u6570 \u5e02\u503c \" \" \"   cls   .   cap   =   cls   .   capital   .   stack   ( )   .   reset _ index   ( )   cls   .   cap   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap _ size \"   ]   if   boxcox   :   def   single   (   x   ) :   x   .   cap _ size   =   ss   .   boxcox   (   x   .   cap _ size   ) [   0   ]   return   x   cls   .   cap   =   cls   .   cap   .   groupby   ( [   \" date \"   ] )   .   apply   (   single   )   else   :   cls   .   cap   [   \" cap _ size \"   ]   =   np   .   log   (   cls   .   cap   [   \" cap _ size \"   ] )   get _ long _ short _ comments   (   on _ paper   =   False   )   \u00b6   \u8ba1\u7b97 \u591a\u7a7a \u5bf9\u51b2 \u7684 \u76f8\u5173 \u8bc4\u4ef7 \u6307\u6807   \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2109   2110   2111   2112   2113   2114   2115   2116   2117   2118   2119   2120   2121   2122   2123   2124   2125   2126   2127   2128   2129   2130   2131   2132   2133   2134   2135   2136   2137   2138   2139   2140   2141   2142   2143   2144   2145   2146   2147   2148   2149   2150   2151   2152   2153   2154   2155   2156   2157   2158   2159   2160   2161   2162   2163   2164   2165   2166   2167   2168   2169   2170   2171   2172   2173   2174   2175   2176   2177   2178   2179   2180   2181   2182   def   get _ long _ short _ comments   (   self   ,   on _ paper   =   False   ) :   \" \" \" \u8ba1\u7b97 \u591a\u7a7a \u5bf9\u51b2 \u7684 \u76f8\u5173 \u8bc4\u4ef7 \u6307\u6807   \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \" \" \"   #   week _ here   self   .   long _ short _ ret _ yearly   =   (   self   .   long _ short _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   long _ short _ net _ values   ) )   -   1   )   self   .   inner _ long _ ret _ yearly   =   (   self   .   inner _ long _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   inner _ long _ net _ values   ) )   -   1   )   self   .   inner _ short _ ret _ yearly   =   (   self   .   inner _ short _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   inner _ short _ net _ values   ) )   -   1   )   #   week _ here   self   .   long _ short _ vol _ yearly   =   np   .   std   (   self   .   long _ short _ rets   )   *   (   self   .   freq _ ctrl   .   counts _ one _ year   * *   0.5   )   self   .   long _ short _ info _ ratio   =   (   self   .   long _ short _ ret _ yearly   /   self   .   long _ short _ vol _ yearly   )   self   .   long _ short _ win _ times   =   len   (   self   .   long _ short _ rets   [   self   .   long _ short _ rets   >   0   ] )   self   .   long _ short _ win _ ratio   =   self   .   long _ short _ win _ times   /   len   (   self   .   long _ short _ rets   )   self   .   max _ retreat   =   -   (   self   .   long _ short _ net _ values   /   self   .   long _ short _ net _ values   .   expanding   (   1   )   .   max   ( )   -   1   )   .   min   ( )   if   on _ paper   :   self   .   long _ short _ comments   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   long _ short _ ret _ yearly   ,   self   .   long _ short _ vol _ yearly   ,   self   .   long _ short _ info _ ratio   ,   self   .   long _ short _ win _ ratio   ,   self   .   max _ retreat   ,   ]   } ,   #   week _ here   index   =   [   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u6536\u76ca \u6ce2\u52a8 \u6bd4 \"   ,   f   \"   {   self   .   freq _ ctrl   .   comment _ name   }   \u5ea6 \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ,   ] ,   )   else   :   self   .   long _ short _ comments   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   long _ short _ ret _ yearly   ,   self   .   long _ short _ vol _ yearly   ,   self   .   long _ short _ info _ ratio   ,   self   .   long _ short _ win _ ratio   ,   self   .   max _ retreat   ,   ]   } ,   #   week _ here   index   =   [   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u4fe1\u606f \u6bd4\u7387 \"   ,   f   \"   {   self   .   freq _ ctrl   .   comment _ name   }   \u5ea6 \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ,   ] ,   )   get _ neutral _ factors   (   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   )   \u00b6   \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1807   1808   1809   1810   1811   1812   1813   1814   1815   1816   1817   1818   1819   1820   1821   1822   1823   1824   1825   1826   1827   1828   1829   1830   1831   1832   1833   1834   1835   1836   1837   1838   1839   1840   def   get _ neutral _ factors   (   self   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ) :   \" \" \" \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   #   week _ here   last _ date   =   self   .   freq _ ctrl   .   next _ end   (   self   .   tris _ monthly   .   index   .   max   ( ) )   add _ tail   =   pd   .   DataFrame   (   1   ,   index   =   [   last _ date   ] ,   columns   =   self   .   tris _ monthly   .   columns   )   tris _ monthly   =   pd   .   concat   ( [   self   .   tris _ monthly   ,   add _ tail   ] )   self   .   factors   =   self   .   factors   *   tris _ monthly   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   -   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   cap   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   if   not   only _ cap   :   if   swindustry _ dummies   :   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   swindustry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   else   :   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   zxindustry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   factors   =   self   .   factors   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   self   .   factors   =   self   .   factors   .   groupby   ( [   \" date \"   ] )   .   apply   (   self   .   neutralize _ factors   )   self   .   factors   =   self   .   factors   .   reset _ index   ( )   get _ rets _ month   ( )   cached   classmethod   \u00b6   \u8ba1\u7b97 \u6bcf\u6708 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u5e76 \u6839\u636e \u6bcf\u6708 \u505a\u51fa \u4ea4\u6613 \u72b6\u6001 \uff0c \u505a\u51fa \u5220\u51cf   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1757   1758   1759   1760   1761   1762   1763   1764   1765   1766   1767   1768   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ rets _ month   (   cls   ) :   \" \" \" \u8ba1\u7b97 \u6bcf\u6708 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u5e76 \u6839\u636e \u6bcf\u6708 \u505a\u51fa \u4ea4\u6613 \u72b6\u6001 \uff0c \u505a\u51fa \u5220\u51cf \" \" \"   #   week _ here   cls   .   opens _ monthly   =   cls   .   opens   .   resample   (   cls   .   freq   )   .   first   ( )   #   week _ here   cls   .   closes _ monthly   =   cls   .   closes   .   resample   (   cls   .   freq   )   .   last   ( )   cls   .   rets _ monthly   =   (   cls   .   closes _ monthly   -   cls   .   opens _ monthly   )   /   cls   .   opens _ monthly   cls   .   rets _ monthly   =   cls   .   rets _ monthly   *   cls   .   tris _ monthly   cls   .   rets _ monthly   =   cls   .   rets _ monthly   .   stack   ( )   .   reset _ index   ( )   cls   .   rets _ monthly   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" ret \"   ]   get _ total _ comments   (   groups _ num   )   \u00b6   \u7efc\u5408 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR , \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2184   2185   2186   2187   2188   2189   2190   2191   2192   2193   2194   2195   2196   2197   2198   2199   2200   2201   2202   2203   2204   2205   2206   2207   2208   2209   2210   2211   2212   2213   2214   2215   2216   2217   2218   2219   2220   2221   2222   2223   2224   2225   2226   2227   2228   2229   2230   2231   2232   2233   def   get _ total _ comments   (   self   ,   groups _ num   ) :   \" \" \" \u7efc\u5408 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR , \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \" \" \"   rankic   =   self   .   rankics   .   mean   ( )   rankic _ win   =   self   .   rankics   [   self   .   rankics   *   rankic   >   0   ]   rankic _ win _ ratio   =   rankic _ win   .   dropna   ( )   .   shape   [   0   ]   /   self   .   rankics   .   dropna   ( )   .   shape   [   0   ]   self   .   factor _ cross _ skew _ after _ neu   =   self   .   __ factors _ out   .   skew   (   axis   =   1   )   .   mean   ( )   if   self   .   ic _ icir _ and _ rank   .   iloc   [   2   ,   0   ]   >   0   :   self   .   factor _ turnover _ rate   =   self   .   factor _ turnover _ rates   [   f   \" group   {   groups _ num   }   \"   ]   .   mean   ( )   else   :   self   .   factor _ turnover _ rate   =   self   .   factor _ turnover _ rates   [   \" group1 \"   ]   .   mean   ( )   self   .   total _ comments   =   pd   .   concat   (   [   self   .   ic _ icir _ and _ rank   ,   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   rankic _ win _ ratio   ] } ,   index   =   [   \" RankIC \u80dc\u7387 \"   ] ,   ) ,   self   .   long _ short _ comments   ,   #   week _ here   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   factor _ turnover _ rate   ,   self   .   factor _ cover   ,   self   .   pos _ neg _ rate   ,   self   .   factor _ cross _ skew   ,   self   .   inner _ long _ ret _ yearly   ,   self   .   inner _ long _ ret _ yearly   /   (   self   .   inner _ long _ ret _ yearly   +   self   .   inner _ short _ ret _ yearly   ) ,   self   .   corr _ itself   ,   ]   } ,   index   =   [   f   \" \u591a\u5934   {   self   .   freq _ ctrl   .   comment _ name   }   \u5747 \u6362\u624b \"   ,   \" \u56e0\u5b50 \u8986\u76d6 \u8986\u76d6\u7387 \"   ,   \" \u56e0\u5b50 \u6b63\u503c \u5360 \u6bd4 \"   ,   \" \u56e0\u5b50 \u622a\u9762 \u504f\u5ea6 \"   ,   \" \u591a\u5934 \u8d85\u5747 \u6536\u76ca \"   ,   \" \u591a\u5934 \u6536\u76ca \u5360 \u6bd4 \"   ,   \" \u4e00\u9636\u81ea \u76f8\u5173 \u76f8\u5173\u6027 \"   ,   ] ,   ) ,   ]   )   self   .   group _ mean _ rets _ monthly   =   self   .   group _ rets   .   drop   (   columns   =   [   ' long _ short '   ] )   .   mean   ( )   self   .   group _ mean _ rets _ monthly   =   self   .   group _ mean _ rets _ monthly   -   self   .   group _ mean _ rets _ monthly   .   mean   ( )   judge _ month   ( )   cached   classmethod   \u00b6   \u751f\u6210 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7efc\u5408 \u5224\u65ad \u7684 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1735   1736   1737   1738   1739   1740   1741   1742   1743   1744   1745   1746   1747   1748   1749   1750   1751   1752   1753   1754   1755   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   judge _ month   (   cls   ) :   \" \" \" \u751f\u6210 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7efc\u5408 \u5224\u65ad \u7684 \u8868\u683c \" \" \"   if   cls   .   freq   = =   \" M \"   :   cls   .   sts _ monthly   =   cls   .   daily _ to _ monthly   (   cls   .   sts   ,   cls   .   sts _ monthly _ file   ,   cls   .   judge _ month _ st   )   cls   .   states _ monthly   =   cls   .   daily _ to _ monthly   (   cls   .   states   ,   cls   .   states _ monthly _ file   ,   cls   .   judge _ month _ state   )   #   week _ here   cls   .   ages _ monthly   =   (   cls   .   ages   .   resample   (   cls   .   freq   )   .   last   ( )   >   60   )   +   0   cls   .   tris _ monthly   =   cls   .   sts _ monthly   *   cls   .   states _ monthly   *   cls   .   ages _ monthly   cls   .   tris _ monthly   =   cls   .   tris _ monthly   .   replace   (   0   ,   np   .   nan   )   else   :   cls   .   tris _ monthly   =   (   (   1   -   cls   .   sts   )   .   resample   (   cls   .   freq   )   .   last   ( )   .   ffill   (   limit   =   2   )   *   cls   .   states   .   resample   (   cls   .   freq   )   .   last   ( )   .   ffill   (   limit   =   2   )   *   ( (   cls   .   ages   .   resample   (   cls   .   freq   )   .   last   ( )   >   60   )   +   0   )   )   .   replace   (   0   ,   np   .   nan   )   judge _ month _ st   (   df   )   classmethod   \u00b6   \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 st \u7684 \u5929\u6570 \uff0c \u5982\u679c st \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5982\u679c \u6b63\u5e38 \u591a \uff0c \u5c31 \u4fdd\u7559 \u672c\u6708   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1661   1662   1663   1664   1665   1666   1667   1668   1669   @ classmethod   def   judge _ month _ st   (   cls   ,   df   ) :   \" \" \" \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 st \u7684 \u5929\u6570 \uff0c \u5982\u679c st \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5982\u679c \u6b63\u5e38 \u591a \uff0c \u5c31 \u4fdd\u7559 \u672c\u6708 \" \" \"   st _ count   =   len   (   df   [   df   = =   1   ] )   normal _ count   =   len   (   df   [   df   ! =   1   ] )   if   st _ count   > =   normal _ count   :   return   0   else   :   return   1   judge _ month _ state   (   df   )   classmethod   \u00b6   \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u7684 \u5929\u6570 \uff0c \u5982\u679c \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5426\u5219 \u4fdd\u7559 \u672c\u6708   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1671   1672   1673   1674   1675   1676   1677   1678   1679   @ classmethod   def   judge _ month _ state   (   cls   ,   df   ) :   \" \" \" \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u7684 \u5929\u6570 \uff0c \u5982\u679c \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5426\u5219 \u4fdd\u7559 \u672c\u6708 \" \" \"   abnormal _ count   =   len   (   df   [   df   = =   0   ] )   normal _ count   =   len   (   df   [   df   = =   1   ] )   if   abnormal _ count   > =   normal _ count   :   return   0   else   :   return   1   limit _ old _ to _ new   (   limit   ,   data   )   classmethod   \u00b6   \u83b7\u53d6 \u8dcc\u505c \u80a1\u5728 \u65e7 \u6708 \u7684 \u7ec4\u53f7 \uff0c \u7136\u540e \u5c06 \u65e5\u671f \u8c03\u6574 \u5230 \u65b0\u6708 \u91cc   \u6da8\u505c \u80a1\u5219 \u83b7\u5f97 \u65b0\u6708 \u91cc \u6da8\u505c \u80a1 \u7684 \u4ee3\u7801 \u548c \u65f6\u95f4 \uff0c \u7136\u540e \u76f4\u63a5 \u5220\u53bb   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1954   1955   1956   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   @ classmethod   def   limit _ old _ to _ new   (   cls   ,   limit   ,   data   ) :   \" \" \" \u83b7\u53d6 \u8dcc\u505c \u80a1\u5728 \u65e7 \u6708 \u7684 \u7ec4\u53f7 \uff0c \u7136\u540e \u5c06 \u65e5\u671f \u8c03\u6574 \u5230 \u65b0\u6708 \u91cc   \u6da8\u505c \u80a1\u5219 \u83b7\u5f97 \u65b0\u6708 \u91cc \u6da8\u505c \u80a1 \u7684 \u4ee3\u7801 \u548c \u65f6\u95f4 \uff0c \u7136\u540e \u76f4\u63a5 \u5220\u53bb \" \" \"   data1   =   data   .   copy   ( )   data1   =   data1   .   reset _ index   ( )   data1   .   columns   =   [   \" data _ index \"   ]   +   list   (   data1   .   columns   ) [   1   : ]   old   =   pd   .   merge   (   limit   ,   data1   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ] )   old   =   old   .   set _ index   (   \" data _ index \"   )   old   =   old   [ [   \" group \"   ,   \" date \"   ,   \" code \"   ] ]   #   week _ here   old   .   date   =   list   (   map   (   cls   .   freq _ ctrl   .   next _ end   ,   list   (   old   .   date   ) ) )   return   old   make _ start _ to _ one   (   l   )   \u00b6   \u8ba9 \u51c0\u503c \u5e8f\u5217 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6570 \u53d8\u6210 1   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2001   2002   2003   2004   2005   2006   2007   def   make _ start _ to _ one   (   self   ,   l   ) :   \" \" \" \u8ba9 \u51c0\u503c \u5e8f\u5217 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6570 \u53d8\u6210 1 \" \" \"   min _ date   =   self   .   factors   .   date   .   min   ( )   add _ date   =   min _ date   -   relativedelta   (   days   =   min _ date   .   day   )   add _ l   =   pd   .   Series   ( [   1   ] ,   index   =   [   add _ date   ] )   l   =   pd   .   concat   ( [   add _ l   ,   l   ] )   return   l   neutralize _ factors   (   df   )   classmethod   \u00b6   \u7ec4\u5185 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1770   1771   1772   1773   1774   1775   1776   1777   1778   1779   1780   1781   1782   1783   1784   1785   1786   1787   1788   1789   @ classmethod   def   neutralize _ factors   (   cls   ,   df   ) :   \" \" \" \u7ec4\u5185 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   industry _ codes   =   list   (   df   .   columns   )   industry _ codes   =   [   i   for   i   in   industry _ codes   if   i   .   startswith   (   \" w \"   ) ]   industry _ codes _ str   =   \" + \"   .   join   (   industry _ codes   )   if   len   (   industry _ codes _ str   )   >   0   :   ols _ result   =   smf   .   ols   (   \" fac ~ cap _ size + \"   +   industry _ codes _ str   ,   data   =   df   )   .   fit   ( )   else   :   ols _ result   =   smf   .   ols   (   \" fac ~ cap _ size \"   ,   data   =   df   )   .   fit   ( )   ols _ w   =   ols _ result   .   params   [   \" cap _ size \"   ]   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   ols _ bs   =   { }   for   ind   in   industry _ codes   :   ols _ bs   [   ind   ]   =   ols _ result   .   params   [   ind   ]   df   .   fac   =   df   .   fac   -   ols _ w   *   df   .   cap _ size   -   ols _ b   for   k   ,   v   in   ols _ bs   .   items   ( ) :   df   .   fac   =   df   .   fac   -   v   *   df   [   k   ]   df   =   df   [ [   \" fac \"   ] ]   return   df   plot _ net _ values   (   y2   ,   filename   ,   iplot   =   1   ,   ilegend   =   1   ,   without _ breakpoint   =   0   )   \u00b6   \u4f7f\u7528 matplotlib \u6765 \u753b\u56fe \uff0c y2 \u4e3a \u662f\u5426 \u5bf9\u591a\u7a7a \u7ec4\u5408 \u91c7\u7528 \u53cc y \u8f74   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2235   2236   2237   2238   2239   2240   2241   2242   2243   2244   2245   2246   2247   2248   2249   2250   2251   2252   2253   2254   2255   2256   2257   2258   2259   2260   2261   2262   2263   2264   2265   2266   2267   2268   2269   2270   2271   2272   2273   2274   2275   2276   2277   2278   2279   2280   2281   2282   2283   2284   2285   2286   2287   2288   2289   2290   2291   2292   2293   2294   2295   2296   2297   2298   2299   2300   2301   2302   2303   2304   2305   2306   2307   2308   2309   2310   2311   2312   2313   2314   2315   2316   2317   2318   2319   2320   2321   2322   2323   2324   2325   2326   2327   2328   2329   2330   2331   2332   2333   2334   2335   2336   2337   2338   2339   2340   2341   2342   2343   2344   2345   2346   2347   2348   2349   2350   2351   2352   2353   2354   2355   2356   2357   def   plot _ net _ values   (   self   ,   y2   ,   filename   ,   iplot   =   1   ,   ilegend   =   1   ,   without _ breakpoint   =   0   ) :   \" \" \" \u4f7f\u7528 matplotlib \u6765 \u753b\u56fe \uff0c y2 \u4e3a \u662f\u5426 \u5bf9\u591a\u7a7a \u7ec4\u5408 \u91c7\u7528 \u53cc y \u8f74 \" \" \"   if   not   iplot   :   fig   ,   ax   =   plt   .   subplots   (   nrows   =   1   ,   ncols   =   3   ,   figsize   =   (   33   ,   8   ) )   self   .   group _ net _ values   .   plot   (   secondary _ y   =   y2   ,   rot   =   60   ,   ax   =   ax   [   0   ] )   self   .   group _ net _ values   .   plot   (   secondary _ y   =   y2   ,   ax   =   ax   [   0   ] )   b   =   self   .   rankics   .   copy   ( )   b   .   index   =   [   int   (   i   .   year   )   if   i   .   month   = =   1   else   \" \"   for   i   in   list   (   b   .   index   ) ]   b   .   plot   (   kind   =   \" bar \"   ,   rot   =   60   ,   ax   =   ax   [   1   ] )   self   .   factor _ cross _ stds   .   plot   (   rot   =   60   ,   ax   =   ax   [   2   ] )   filename _ path   =   filename   +   \" . png \"   if   not   STATES   [   \" NO _ SAVE \"   ] :   plt   .   savefig   (   filename _ path   )   else   :   tris   =   self   .   group _ net _ values   if   without _ breakpoint   :   tris   =   tris   .   dropna   ( )   figs   =   cf   .   figures   (   tris   ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   group _ net _ values   .   columns   ) ) ,   #   dict ( kind = \" bar \" ,   y = \" \u5404\u7ec4 \u6708\u5747 \u8d85\u5747 \u6536\u76ca \" ) ,   #   dict ( kind = \" bar \" ,   y = \" rankic \" ) ,   ] ,   asList   =   True   ,   )   comments   =   (   self   .   total _ comments   .   applymap   (   lambda   x   :   round   (   x   ,   4   ) )   .   rename   (   index   =   {   \" RankIC \u5747\u503c t \u503c \"   :   \" RankIC . t \"   } )   .   reset _ index   ( )   )   here   =   pd   .   concat   (   [   comments   .   iloc   [ :   6   ,   : ]   .   reset _ index   (   drop   =   True   ) ,   comments   .   iloc   [   6   :   12   ,   : ]   .   reset _ index   (   drop   =   True   ) ,   comments   .   iloc   [   12   : ,   : ]   .   reset _ index   (   drop   =   True   ) ,   ] ,   axis   =   1   ,   )   here   .   columns   =   [   \" \u4fe1\u606f \u7cfb\u6570 \"   ,   \" \u7ed3\u679c \"   ,   \" \u7ee9\u6548 \u6307\u6807 \"   ,   \" \u7ed3\u679c \"   ,   \" \u5176\u4ed6 \u6307\u6807 \"   ,   \" \u7ed3\u679c \"   ]   #   here = here . to _ numpy ( ) . tolist ( ) + [ [ ' \u4fe1\u606f \u7cfb\u6570 ' , ' \u7ed3\u679c ' , ' \u7ee9\u6548 \u6307\u6807 ' , ' \u7ed3\u679c ' ] ]   table   =   FF   .   create _ table   (   here   .   iloc   [ : :   -   1   ] )   table   .   update _ yaxes   (   matches   =   None   )   pic2   =   go   .   Figure   (   go   .   Bar   (   y   =   list   (   self   .   group _ mean _ rets _ monthly   ) ,   x   =   [   i   .   replace   (   ' roup '   ,   ' '   )   for   i   in   list   (   self   .   group _ mean _ rets _ monthly   .   index   ) ] ) )   #   table = go . Figure ( [ go . Table ( header = dict ( values = list ( here . columns ) ) , cells = dict ( values = here . to _ numpy ( ) . tolist ( ) ) ) ] )   pic3 _ data   =   go   .   Bar   (   y   =   list   (   self   .   rankics   .   rankic   ) ,   x   =   list   (   self   .   rankics   .   index   ) )   pic3   =   go   .   Figure   (   data   =   [   pic3 _ data   ] )   pic4 _ data   =   go   .   Line   (   y   =   list   (   self   .   rankics   .   rankic   .   cumsum   ( ) ) ,   x   =   list   (   self   .   rankics   .   index   ) ,   name   =   ' y2 '   ,   yaxis   =   ' y2 '   )   pic4 _ layout   =   go   .   Layout   (   yaxis2   =   dict   (   title   =   ' y2 '   ,   side   =   ' right '   ) )   pic4   =   go   .   Figure   (   data   =   [   pic4 _ data   ] ,   layout   =   pic4 _ layout   )   figs   .   append   (   table   )   figs   =   [   figs   [   -   1   ] ]   +   figs   [ :   -   1   ]   figs   .   append   (   pic2   )   figs   =   [   figs   [   0   ] ,   figs   [   1   ] ,   figs   [   -   1   ] ,   pic3   ]   figs   [   1   ]   .   update _ layout   (   legend   =   dict   (   yanchor   =   \" top \"   ,   y   =   0.99   ,   xanchor   =   \" left \"   ,   x   =   0.01   )   )   figs   [   3   ]   .   update _ layout   (   yaxis2   =   dict   (   title   =   ' y2 '   ,   side   =   ' right '   ) )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   2   ,   11   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   specs   =   [   [   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" colspan \"   :   3   } ,   None   ,   None   ,   ] ,   [   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   {   \" colspan \"   :   3   } ,   None   ,   None   ,   ] ,   ] ,   subplot _ titles   =   [   \" \u51c0\u503c \u66f2\u7ebf \"   ,   \" \u5404\u7ec4 \u6708\u5747 \u8d85\u5747 \u6536\u76ca \"   ,   \" Rank   IC \u65f6\u5e8f \u56fe \"   ,   \" \u7ee9\u6548 \u6307\u6807 \"   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   ilegend   )   #   los = sp [ ' layout ' ] [ ' annotations ' ]   #   los [ 0 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 1 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 2 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 3 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ - 1 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 2 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 3 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 4 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ 0 ] [ ' text ' ] = los [ 0 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 1 ] [ ' text ' ] = los [ 1 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 2 ] [ ' text ' ] = los [ 2 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 3 ] [ ' text ' ] = los [ 3 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ - 1 ] [ ' text ' ] = ' < b > ' + los [ - 1 ] [ ' text ' ] + ' < / b > '   #   los [ - 2 ] [ ' text ' ] = ' < b > ' + los [ - 2 ] [ ' text ' ] + ' < / b > '   #   los [ - 3 ] [ ' text ' ] = ' < b > ' + los [ - 3 ] [ ' text ' ] + ' < / b > '   #   los [ - 4 ] [ ' text ' ] = ' < b > ' + los [ - 4 ] [ ' text ' ] + ' < / b > '   #   sp [ ' layout ' ] [ ' annotations ' ] = los   #   print ( sp [ ' layout ' ] [ ' annotations ' ] )   #   sp [ ' layout ' ] [ ' annotations ' ] [ 0 ] [ ' yanchor ' ] = ' top '   cf   .   iplot   (   sp   )   plotly _ net _ values   (   filename   )   \u00b6   \u4f7f\u7528 plotly . express \u753b\u56fe   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2369   2370   2371   2372   2373   def   plotly _ net _ values   (   self   ,   filename   ) :   \" \" \" \u4f7f\u7528 plotly . express \u753b\u56fe \" \" \"   fig   =   pe   .   line   (   self   .   group _ net _ values   )   filename _ path   =   filename   +   \" . html \"   pio   .   write _ html   (   fig   ,   filename _ path   ,   auto _ open   =   True   )   prerpare   ( )   cached   classmethod   \u00b6   \u901a\u7528 \u6570\u636e \u51c6\u5907   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2375   2376   2377   2378   2379   2380   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   prerpare   (   cls   ) :   \" \" \" \u901a\u7528 \u6570\u636e \u51c6\u5907 \" \" \"   cls   .   judge _ month   ( )   cls   .   get _ rets _ month   ( )   read _ add   (   pridf   ,   df   ,   func   )   classmethod   \u00b6   \u7531\u4e8e \u6570\u636e \u66f4\u65b0 \uff0c \u8fc7\u53bb \u8ba1\u7b97 \u7684 \u6708\u5ea6 \u72b6\u6001 \u53ef\u80fd \u9700\u8981 \u8ffd\u52a0   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1681   1682   1683   1684   1685   1686   1687   1688   1689   1690   1691   1692   1693   1694   1695   1696   1697   1698   1699   1700   1701   1702   1703   1704   1705   1706   1707   1708   1709   @ classmethod   def   read _ add   (   cls   ,   pridf   ,   df   ,   func   ) :   \" \" \" \u7531\u4e8e \u6570\u636e \u66f4\u65b0 \uff0c \u8fc7\u53bb \u8ba1\u7b97 \u7684 \u6708\u5ea6 \u72b6\u6001 \u53ef\u80fd \u9700\u8981 \u8ffd\u52a0 \" \" \"   if   pridf   .   index   .   max   ( )   >   df   .   index   .   max   ( ) :   df _ add   =   pridf   [   pridf   .   index   >   df   .   index   .   max   ( ) ]   if   df _ add   .   shape   [   0   ]   >   int   (   cls   .   freq _ ctrl   .   days _ in   /   2   ) :   df _ 1   =   df _ add   .   index   .   max   ( )   year   =   df _ 1   .   year   month   =   df _ 1   .   month   last   =   tt   .   date   .   get _ close   (   year   =   year   ,   m   =   month   )   .   pd _ date   ( )   if   (   last   = =   df _ 1   ) [   0   ] :   #   week _ here   df _ add   =   df _ add   .   resample   (   cls   .   freq   )   .   apply   (   func   )   df   =   pd   .   concat   ( [   df   ,   df _ add   ] )   return   df   else   :   df _ add   =   df _ add   [   df _ add   .   index   <   pd   .   Timestamp   (   year   =   year   ,   month   =   month   ,   day   =   1   )   ]   if   df _ add   .   shape   [   0   ]   >   0   :   df _ add   =   df _ add   .   resample   (   cls   .   freq   )   .   apply   (   func   )   df   =   pd   .   concat   ( [   df   ,   df _ add   ] )   return   df   else   :   return   df   else   :   return   df   else   :   return   df   run   (   groups _ num   =   10   ,   neutralize   =   False   ,   boxcox   =   False   ,   trade _ cost _ double _ side   =   0   ,   value _ weighted   =   False   ,   y2   =   False   ,   plt _ plot   =   True   ,   plotly _ plot   =   False   ,   filename   =   ' \u5206\u7ec4 \u51c0\u503c \u56fe '   ,   print _ comments   =   True   ,   comments _ writer   =   None   ,   net _ values _ writer   =   None   ,   rets _ writer   =   None   ,   comments _ sheetname   =   None   ,   net _ values _ sheetname   =   None   ,   rets _ sheetname   =   None   ,   on _ paper   =   False   ,   sheetname   =   None   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ,   iplot   =   1   ,   ilegend   =   0   ,   without _ breakpoint   =   0   ,   beauty _ comments   =   0   )   \u00b6   \u8fd0\u884c \u56de\u6d4b \u90e8\u5206   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2382   2383   2384   2385   2386   2387   2388   2389   2390   2391   2392   2393   2394   2395   2396   2397   2398   2399   2400   2401   2402   2403   2404   2405   2406   2407   2408   2409   2410   2411   2412   2413   2414   2415   2416   2417   2418   2419   2420   2421   2422   2423   2424   2425   2426   2427   2428   2429   2430   2431   2432   2433   2434   2435   2436   2437   2438   2439   2440   2441   2442   2443   2444   2445   2446   2447   2448   2449   2450   2451   2452   2453   2454   2455   2456   2457   2458   2459   2460   2461   2462   2463   2464   2465   2466   2467   2468   2469   2470   2471   2472   2473   2474   2475   2476   2477   2478   2479   2480   2481   2482   2483   2484   2485   2486   2487   2488   2489   2490   2491   2492   2493   2494   2495   2496   2497   2498   2499   2500   2501   2502   2503   2504   2505   2506   2507   2508   2509   2510   2511   2512   2513   2514   2515   2516   2517   2518   2519   2520   2521   2522   2523   2524   2525   2526   2527   2528   2529   2530   2531   2532   2533   2534   2535   2536   2537   2538   2539   2540   2541   2542   2543   2544   2545   2546   2547   2548   2549   2550   2551   2552   2553   2554   2555   2556   2557   2558   2559   2560   2561   2562   2563   2564   2565   2566   2567   2568   2569   2570   2571   2572   2573   2574   2575   2576   2577   2578   2579   2580   2581   2582   2583   2584   2585   2586   2587   2588   2589   2590   2591   2592   2593   2594   2595   2596   2597   2598   2599   2600   2601   2602   2603   2604   2605   2606   2607   2608   def   run   (   self   ,   groups _ num   =   10   ,   neutralize   =   False   ,   boxcox   =   False   ,   trade _ cost _ double _ side   =   0   ,   value _ weighted   =   False   ,   y2   =   False   ,   plt _ plot   =   True   ,   plotly _ plot   =   False   ,   filename   =   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   ,   print _ comments   =   True   ,   comments _ writer   =   None   ,   net _ values _ writer   =   None   ,   rets _ writer   =   None   ,   comments _ sheetname   =   None   ,   net _ values _ sheetname   =   None   ,   rets _ sheetname   =   None   ,   on _ paper   =   False   ,   sheetname   =   None   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ,   iplot   =   1   ,   ilegend   =   0   ,   without _ breakpoint   =   0   ,   beauty _ comments   =   0   ,   ) :   \" \" \" \u8fd0\u884c \u56de\u6d4b \u90e8\u5206 \" \" \"   if   comments _ writer   and   not   (   comments _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a total _ comments \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   net _ values _ writer   and   not   (   net _ values _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a group _ net _ values \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   rets _ writer   and   not   (   rets _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a group _ rets \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   neutralize   :   self   .   get _ log _ cap   ( )   self   .   get _ neutral _ factors   (   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   )   self   .   deal _ with _ factors _ after _ neutralize   ( )   elif   boxcox   :   self   .   get _ log _ cap   (   boxcox   =   True   )   self   .   get _ neutral _ factors   (   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   only _ cap   =   only _ cap   ,   )   self   .   deal _ with _ factors _ after _ neutralize   ( )   else   :   self   .   deal _ with _ factors   ( )   self   .   get _ limit _ ups _ downs   ( )   self   .   get _ data   (   groups _ num   )   self   .   get _ group _ rets _ net _ values   (   groups _ num   =   groups _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   )   self   .   get _ long _ short _ comments   (   on _ paper   =   on _ paper   )   self   .   get _ total _ comments   (   groups _ num   =   groups _ num   )   if   on _ paper   :   group1 _ ttest   =   ss   .   ttest _ 1samp   (   self   .   group _ rets   .   group1   ,   0   )   .   pvalue   group10 _ ttest   =   ss   .   ttest _ 1samp   (   self   .   group _ rets   [   f   \" group   {   groups _ num   }   \"   ] ,   0   )   .   pvalue   group _ long _ short _ ttest   =   ss   .   ttest _ 1samp   (   self   .   long _ short _ rets   ,   0   )   .   pvalue   group1 _ ret   =   self   .   group _ rets   .   group1   .   mean   ( )   group10 _ ret   =   self   .   group _ rets   [   f   \" group   {   groups _ num   }   \"   ]   .   mean   ( )   group _ long _ short _ ret   =   self   .   long _ short _ rets   .   mean   ( )   papers   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   group1 _ ttest   ,   group10 _ ttest   ,   group _ long _ short _ ttest   ,   group1 _ ret   ,   group10 _ ret   ,   group _ long _ short _ ret   ,   ]   } ,   index   =   [   \" \u5206\u7ec4 1p \u503c \"   ,   f   \" \u5206\u7ec4   {   groups _ num   }   p \u503c \"   ,   f   \" \u5206\u7ec4 1 - \u5206\u7ec4   {   groups _ num   }   p \u503c \"   ,   \" \u5206\u7ec4 1 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   f   \" \u5206\u7ec4   {   groups _ num   }   \u6536\u76ca \u6536\u76ca\u7387 \"   ,   f   \" \u5206\u7ec4 1 - \u5206\u7ec4   {   groups _ num   }   \u6536\u76ca \u6536\u76ca\u7387 \"   ,   ] ,   )   self   .   total _ comments   =   pd   .   concat   ( [   papers   ,   self   .   total _ comments   ] )   if   plt _ plot   :   if   not   STATES   [   \" NO _ PLOT \"   ] :   if   filename   :   self   .   plot _ net _ values   (   y2   =   y2   ,   filename   =   filename   ,   iplot   =   iplot   ,   ilegend   =   bool   (   ilegend   ) ,   without _ breakpoint   =   without _ breakpoint   ,   )   else   :   self   .   plot _ net _ values   (   y2   =   y2   ,   filename   =   self   .   factors _ file   .   split   (   \" . \"   ) [   -   2   ]   .   split   (   \" / \"   ) [   -   1   ]   +   str   (   groups _ num   )   +   \" \u5206\u7ec4 \"   ,   iplot   =   iplot   ,   ilegend   =   bool   (   ilegend   ) ,   without _ breakpoint   =   without _ breakpoint   ,   )   plt   .   show   ( )   if   plotly _ plot   :   if   not   STATES   [   \" NO _ PLOT \"   ] :   if   filename   :   self   .   plotly _ net _ values   (   filename   =   filename   )   else   :   self   .   plotly _ net _ values   (   filename   =   self   .   factors _ file   .   split   (   \" . \"   ) [   -   2   ]   .   split   (   \" / \"   ) [   -   1   ]   +   str   (   groups _ num   )   +   \" \u5206\u7ec4 \"   )   if   print _ comments   :   if   not   STATES   [   \" NO _ COMMENT \"   ] :   tb   =   Texttable   ( )   tb   .   set _ cols _ width   (   [   8   ]   *   5   +   [   9   ]   +   [   8   ]   *   2   +   [   7   ]   *   2   +   [   8   ]   +   [   8   ]   +   [   9   ]   +   [   10   ]   *   5   )   tb   .   set _ cols _ dtype   ( [   \" f \"   ]   *   18   )   tb   .   header   (   list   (   self   .   total _ comments   .   T   .   columns   ) )   tb   .   add _ rows   (   self   .   total _ comments   .   T   .   to _ numpy   ( ) ,   header   =   False   )   print   (   tb   .   draw   ( ) )   if   sheetname   :   if   comments _ writer   :   if   not   on _ paper   :   total _ comments   =   self   .   total _ comments   .   copy   ( )   tc   =   list   (   total _ comments   .   \u8bc4\u4ef7 \u6307\u6807   )   if   beauty _ comments   :   tc   [   0   ]   =   str   (   round   (   tc   [   0   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   1   ]   =   str   (   round   (   tc   [   1   ] ,   2   ) )   tc   [   2   ]   =   str   (   round   (   tc   [   2   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   3   ]   =   str   (   round   (   tc   [   3   ] ,   2   ) )   tc   [   4   ]   =   str   (   round   (   tc   [   4   ] ,   2   ) )   tc   [   5   ]   =   str   (   round   (   tc   [   5   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   6   ]   =   str   (   round   (   tc   [   6   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   7   ]   =   str   (   round   (   tc   [   7   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   8   ]   =   str   (   round   (   tc   [   8   ] ,   2   ) )   tc   [   9   ]   =   str   (   round   (   tc   [   9   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   10   ]   =   str   (   round   (   tc   [   10   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   11   ]   =   str   (   round   (   tc   [   11   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   12   ]   =   str   (   round   (   tc   [   12   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   13   ]   =   str   (   round   (   tc   [   13   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   14   ]   =   str   (   round   (   tc   [   14   ] ,   2   ) )   tc   [   15   ]   =   str   (   round   (   tc   [   15   ] ,   2   ) )   tc   [   16   ]   =   str   (   round   (   tc   [   16   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   17   ]   =   str   (   round   (   tc   [   17   ]   *   100   ,   2   ) )   +   \" % \"   tc   =   tc   +   list   (   self   .   group _ mean _ rets _ monthly   )   new _ total _ comments   =   pd   .   DataFrame   (   {   sheetname   :   tc   } ,   index   =   list   (   total _ comments   .   index   )   +   [   f   ' \u7b2c   {   i   }   \u7ec4 '   for   i   in   range   (   1   ,   groups _ num   +   1   ) ]   )   new _ total _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   rankic _ twins   =   pd   .   concat   ( [   self   .   rankics   .   rankic   ,   self   .   rankics   .   rankic   .   cumsum   ( ) ] ,   axis   =   1   )   rankic _ twins   .   columns   =   [   ' RankIC '   ,   ' RankIC \u7d2f\u79ef '   ]   rankic _ twins   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   +   ' RankIC '   )   else   :   self   .   total _ comments   .   rename   (   columns   =   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   sheetname   } )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   if   net _ values _ writer   :   groups _ net _ values   =   self   .   group _ net _ values   .   copy   ( )   groups _ net _ values   .   index   =   groups _ net _ values   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   groups _ net _ values   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   groups _ net _ values   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   groups _ net _ values   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   sheetname   )   if   rets _ writer   :   group _ rets   =   self   .   group _ rets   .   copy   ( )   group _ rets   .   index   =   group _ rets   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   group _ rets   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   group _ rets   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   group _ rets   .   to _ excel   (   rets _ writer   ,   sheet _ name   =   sheetname   )   else   :   if   comments _ writer   and   comments _ sheetname   :   total _ comments   =   self   .   total _ comments   .   copy   ( )   tc   =   list   (   total _ comments   .   \u8bc4\u4ef7 \u6307\u6807   )   tc   [   0   ]   =   str   (   round   (   tc   [   0   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   1   ]   =   str   (   round   (   tc   [   1   ] ,   2   ) )   tc   [   2   ]   =   str   (   round   (   tc   [   2   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   3   ]   =   str   (   round   (   tc   [   3   ] ,   2   ) )   tc   [   4   ]   =   str   (   round   (   tc   [   4   ] ,   2   ) )   tc   [   5   ]   =   str   (   round   (   tc   [   5   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   6   ]   =   str   (   round   (   tc   [   6   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   7   ]   =   str   (   round   (   tc   [   7   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   8   ]   =   str   (   round   (   tc   [   8   ] ,   2   ) )   tc   [   9   ]   =   str   (   round   (   tc   [   9   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   10   ]   =   str   (   round   (   tc   [   10   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   11   ]   =   str   (   round   (   tc   [   11   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   12   ]   =   str   (   round   (   tc   [   12   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   13   ]   =   str   (   round   (   tc   [   13   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   14   ]   =   str   (   round   (   tc   [   14   ] ,   2   ) )   tc   [   15   ]   =   str   (   round   (   tc   [   15   ] ,   2   ) )   tc   [   16   ]   =   str   (   round   (   tc   [   16   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   17   ]   =   str   (   round   (   tc   [   17   ]   *   100   ,   2   ) )   +   \" % \"   new _ total _ comments   =   pd   .   DataFrame   (   {   comments _ sheetname   :   tc   } ,   index   =   total _ comments   .   index   )   new _ total _ comments   .   T   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   comments _ sheetname   )   if   net _ values _ writer   and   net _ values _ sheetname   :   groups _ net _ values   =   self   .   group _ net _ values   .   copy   ( )   groups _ net _ values   .   index   =   groups _ net _ values   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   groups _ net _ values   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   groups _ net _ values   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   groups _ net _ values   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   net _ values _ sheetname   )   if   rets _ writer   and   rets _ sheetname   :   group _ rets   =   self   .   group _ rets   .   copy   ( )   group _ rets   .   index   =   group _ rets   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   group _ rets   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   group _ rets   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   group _ rets   .   to _ excel   (   rets _ writer   ,   sheet _ name   =   rets _ sheetname   )   set _ factor _ df _ date _ as _ index   (   df   )   \u00b6   \u8bbe\u7f6e \u56e0\u5b50 \u6570\u636e \u7684 dataframe \uff0c \u56e0\u5b50 \u8868 \u5217\u540d \u5e94\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u5e94\u4e3a \u65f6\u95f4   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1643   1644   1645   1646   1647   1648   1649   1650   1651   1652   1653   1654   1655   1656   1657   1658   1659   def   set _ factor _ df _ date _ as _ index   (   self   ,   df   :   pd   .   DataFrame   ) :   \" \" \" \u8bbe\u7f6e \u56e0\u5b50 \u6570\u636e \u7684 dataframe \uff0c \u56e0\u5b50 \u8868 \u5217\u540d \u5e94\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u5e94\u4e3a \u65f6\u95f4 \" \" \"   #   week _ here   self   .   factors   =   df   .   resample   (   self   .   freq   )   .   last   ( )   .   dropna   (   how   =   \" all \"   )   self   .   factor _ cover   =   np   .   sign   (   self   .   factors   .   abs   ( )   +   1   )   .   sum   ( )   .   sum   ( )   opens   =   self   .   opens   [   self   .   opens   .   index   > =   self   .   factors   .   index   .   min   ( ) ]   total   =   np   .   sign   (   opens   .   resample   (   self   .   freq   )   .   last   ( ) )   .   sum   ( )   .   sum   ( )   self   .   factor _ cover   =   min   (   self   .   factor _ cover   /   total   ,   1   )   self   .   factor _ cross _ skew   =   self   .   factors   .   skew   (   axis   =   1   )   .   mean   ( )   pos _ num   =   ( (   self   .   factors   >   0   )   +   0   )   .   sum   ( )   .   sum   ( )   neg _ num   =   ( (   self   .   factors   <   0   )   +   0   )   .   sum   ( )   .   sum   ( )   self   .   pos _ neg _ rate   =   pos _ num   /   (   neg _ num   +   pos _ num   )   self   .   corr _ itself   =   show _ corr   (   self   .   factors   ,   self   .   factors   .   shift   (   1   ) ,   plt _ plot   =   0   )   self   .   corr _ itself _ shift2   =   show _ corr   (   self   .   factors   ,   self   .   factors   .   shift   (   2   ) ,   plt _ plot   =   0   )   self   .   factor _ cross _ stds   =   self   .   factors   .   std   (   axis   =   1   )   to _ group _ ret   (   l   )   \u00b6   \u6bcf \u4e00\u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2009   2010   2011   2012   2013   def   to _ group _ ret   (   self   ,   l   ) :   \" \" \" \u6bcf \u4e00\u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \" \" \"   #   week _ here   ret   =   l   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   l   ) )   -   1   return   ret   pure _ moonnight   \u00b6   Bases :   object   \u5c01\u88c5 \u9009\u80a1 \u6846\u67b6   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2611   2612   2613   2614   2615   2616   2617   2618   2619   2620   2621   2622   2623   2624   2625   2626   2627   2628   2629   2630   2631   2632   2633   2634   2635   2636   2637   2638   2639   2640   2641   2642   2643   2644   2645   2646   2647   2648   2649   2650   2651   2652   2653   2654   2655   2656   2657   2658   2659   2660   2661   2662   2663   2664   2665   2666   2667   2668   2669   2670   2671   2672   2673   2674   2675   2676   2677   2678   2679   2680   2681   2682   2683   2684   2685   2686   2687   2688   2689   2690   2691   2692   2693   2694   2695   2696   2697   2698   2699   2700   2701   2702   2703   2704   2705   2706   2707   2708   2709   2710   2711   2712   2713   2714   2715   2716   2717   2718   2719   2720   2721   2722   2723   2724   2725   2726   2727   2728   2729   2730   2731   2732   2733   2734   2735   2736   2737   2738   2739   2740   2741   2742   2743   2744   2745   2746   2747   2748   2749   2750   2751   2752   2753   2754   2755   2756   2757   2758   2759   2760   2761   2762   2763   2764   2765   2766   2767   2768   2769   2770   2771   2772   2773   2774   2775   2776   2777   2778   2779   2780   2781   2782   2783   2784   2785   2786   2787   2788   2789   2790   2791   2792   2793   2794   2795   2796   2797   2798   2799   2800   2801   2802   2803   2804   2805   2806   2807   2808   2809   2810   2811   2812   2813   2814   2815   2816   2817   2818   2819   2820   2821   2822   2823   2824   2825   2826   2827   2828   2829   2830   2831   2832   2833   2834   2835   2836   2837   2838   2839   2840   2841   2842   2843   2844   2845   2846   2847   2848   2849   2850   2851   2852   2853   2854   2855   2856   2857   2858   2859   2860   2861   2862   2863   2864   2865   2866   2867   2868   2869   2870   2871   2872   2873   2874   2875   2876   2877   2878   2879   2880   2881   2882   2883   2884   2885   2886   2887   2888   2889   2890   2891   2892   2893   2894   2895   2896   2897   2898   2899   2900   2901   2902   2903   2904   2905   2906   2907   2908   2909   2910   2911   2912   2913   2914   2915   2916   2917   2918   2919   2920   2921   2922   2923   2924   2925   2926   2927   2928   2929   2930   2931   2932   @ do _ on _ dfs   class   pure _ moonnight   (   object   ) :   \" \" \" \u5c01\u88c5 \u9009\u80a1 \u6846\u67b6 \" \" \"   __ slots __   =   [   \" shen \"   ]   def   __ init __   (   self   ,   factors   :   pd   .   DataFrame   ,   groups _ num   :   int   =   10   ,   freq   :   str   =   \" M \"   ,   neutralize   :   bool   =   0   ,   boxcox   :   bool   =   1   ,   trade _ cost _ double _ side   :   float   =   0   ,   value _ weighted   :   bool   =   0   ,   y2   :   bool   =   0   ,   plt _ plot   :   bool   =   1   ,   plotly _ plot   :   bool   =   0   ,   filename   :   str   =   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   ,   time _ start   :   int   =   None   ,   time _ end   :   int   =   None   ,   print _ comments   :   bool   =   1   ,   comments _ writer   :   pd   .   ExcelWriter   =   None   ,   net _ values _ writer   :   pd   .   ExcelWriter   =   None   ,   rets _ writer   :   pd   .   ExcelWriter   =   None   ,   comments _ sheetname   :   str   =   None   ,   net _ values _ sheetname   :   str   =   None   ,   rets _ sheetname   :   str   =   None   ,   on _ paper   :   bool   =   0   ,   sheetname   :   str   =   None   ,   zxindustry _ dummies   :   bool   =   0   ,   swindustry _ dummies   :   bool   =   0   ,   ages   :   pd   .   DataFrame   =   None   ,   sts   :   pd   .   DataFrame   =   None   ,   states   :   pd   .   DataFrame   =   None   ,   opens   :   pd   .   DataFrame   =   None   ,   closes   :   pd   .   DataFrame   =   None   ,   capitals   :   pd   .   DataFrame   =   None   ,   swindustry _ dummy   :   pd   .   DataFrame   =   None   ,   zxindustry _ dummy   :   pd   .   DataFrame   =   None   ,   no _ read _ indu   :   bool   =   0   ,   only _ cap   :   bool   =   0   ,   iplot   :   bool   =   1   ,   ilegend   :   bool   =   0   ,   without _ breakpoint   :   bool   =   0   ,   opens _ average _ first _ day   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u4e00\u952e \u56de\u6d4b \u6846\u67b6 \uff0c \u6d4b\u8bd5 \u5355 \u56e0\u5b50 \u7684 \u6708 \u9891\u8c03 \u4ed3 \u7684 \u5206\u7ec4 \u8868\u73b0   \u6bcf\u6708 \u6708\u5e95 \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5f00\u76d8 \u65f6 \u4e70\u5165 \uff0c \u6708\u672b \u6536\u76d8 \u6700\u540e \u4e00\u5929 \u6536\u76d8 \u65f6 \u5356\u51fa   \u5254\u9664 \u4e0a\u5e02 \u4e0d\u8db3 60 \u5929 \u7684 \uff0c \u505c\u724c \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684 \uff0c st \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684   \u6708\u672b \u6536\u76d8 \u8dcc\u505c \u7684 \u4e0d \u5356\u51fa \uff0c \u6708\u521d \u5f00\u76d8 \u6da8\u505c \u7684 \u4e0d \u4e70\u5165   \u7531 \u6700\u597d \u7ec4\u548c \u6700\u5dee \u7ec4 \u7684 \u591a\u7a7a \u7ec4\u5408 \u6784\u6210 \u591a\u7a7a \u5bf9\u51b2 \u7ec4   Parameters   ----------   factors   :   pd . DataFrame   \u8981 \u7528\u4e8e \u68c0\u6d4b \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   groups _ num   :   int ,   optional   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   freq   :   str ,   optional   \u56de\u6d4b \u9891\u7387 ,   by   default   ' M '   neutralize   :   bool ,   optional   \u5bf9 \u6d41\u901a \u5e02\u503c \u53d6 \u81ea\u7136 \u5bf9\u6570 \u81ea\u7136\u5bf9\u6570 \uff0c \u4ee5 \u5b8c\u6210 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   boxcox   :   bool ,   optional   \u5bf9 \u6d41\u901a \u5e02\u503c \u505a \u622a\u9762 boxcox \u53d8\u6362 \uff0c \u4ee5 \u5b8c\u6210 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   1   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   value _ weighted   :   bool ,   optional   \u662f\u5426 \u7528 \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   0   y2   :   bool ,   optional   \u753b\u56fe \u65f6 \u662f\u5426 \u542f\u7528 \u7b2c\u4e8c y \u8f74 ,   by   default   0   plt _ plot   :   bool ,   optional   \u5c06 \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7528 matplotlib \u753b \u51fa\u6765 ,   by   default   1   plotly _ plot   :   bool ,   optional   \u5c06 \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7528 plotly \u753b \u51fa\u6765 ,   by   default   0   filename   :   str ,   optional   \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7684 \u56fe \u4fdd\u5b58 \u7684 \u540d\u79f0 ,   by   default   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   time _ start   :   int ,   optional   \u56de\u6d4b \u8d77\u59cb \u65f6\u95f4 ,   by   default   None   time _ end   :   int ,   optional   \u56de\u6d4b \u7ec8\u6b62 \u65f6\u95f4 ,   by   default   None   print _ comments   :   bool ,   optional   \u662f\u5426 \u6253\u5370 \u51fa \u8bc4\u4ef7 \u6307\u6807 ,   by   default   1   comments _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u8bc4\u4ef7 \u6307\u6807 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u51c0\u503c \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   rets _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   comments _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u8bc4\u4ef7 \u6307\u6807 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   net _ values _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u51c0\u503c \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   rets _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   on _ paper   :   bool ,   optional   \u4f7f\u7528 \u5b66\u672f \u5b66\u672f\u5316 \u8bc4\u4ef7 \u6307\u6807 ,   by   default   0   sheetname   :   str ,   optional   \u5404\u4e2a pd . Excelwriter \u4e2d \u5de5\u4f5c \u8868 \u7684 \u7edf\u4e00 \u540d\u79f0 ,   by   default   None   zxindustry _ dummies   :   bool ,   optional   \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \uff0c \u9009\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   swindustry _ dummies   :   bool ,   optional   \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \uff0c \u9009\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   ages   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u4e0a\u5e02 \u5929\u6570 \u7684 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u5929\u6570 ,   by   default   None   sts   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u6bcf\u5929 \u662f\u5426 st \u7684 \u6570\u636e \uff0c \u662f st \u80a1\u5373 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f 0 \u6216 1 ,   by   default   None   states   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u6bcf\u5929 \u4ea4\u6613 \u72b6\u6001 \u7684 \u6570\u636e \uff0c \u6b63\u5e38 \u4ea4\u6613 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f 0 \u6216 1 ,   by   default   None   opens   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u590d\u6743 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u4ef7\u683c ,   by   default   None   closes   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u590d\u6743 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u4ef7\u683c ,   by   default   None   capitals   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u6d41\u901a \u5e02\u503c \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u6d41\u901a \u5e02\u503c ,   by   default   None   swindustry _ dummy   :   pd . DataFrame ,   optioanl   \u719f\u4eba \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u7684 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u8868 \u5305\u542b 33 \u5217 \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u540d\u4e3a ` code ` \uff0c \u7b2c\u4e8c \u5217\u4e3a \u6708\u672b \u6700\u540e \u4e00\u5929 \u7684 \u65e5\u671f \uff0c \u540d\u4e3a ` date `   \u5176\u4f59 31 \u5217 \uff0c \u4e3a \u5404\u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \uff0c \u540d\u4e3a ` w1 ` \u3001 ` w2 ` \u3001 ` w3 ` \u2026 \u2026 ` w31 ` ,   by   default   None   zxindustry _ dummy   :   pd . DataFrame ,   optioanl   \u719f\u4eba \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u7684 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u8868 \u5305\u542b 32 \u5217 \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u540d\u4e3a ` code ` \uff0c \u7b2c\u4e8c \u5217\u4e3a \u6708\u672b \u6700\u540e \u4e00\u5929 \u7684 \u65e5\u671f \uff0c \u540d\u4e3a ` date `   \u5176\u4f59 30 \u5217 \uff0c \u4e3a \u5404\u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \uff0c \u540d\u4e3a ` w1 ` \u3001 ` w2 ` \u3001 ` w3 ` \u2026 \u2026 ` w30 ` ,   by   default   None   no _ read _ indu   :   bool ,   optional   \u4e0d \u8bfb\u5165 \u884c\u4e1a \u6570\u636e ,   by   default   0   only _ cap   :   bool ,   optional   \u4ec5 \u505a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   iplot   :   bool ,   optional   \u4f7f\u7528 cufflinks \u5448\u73b0 \u56de\u6d4b \u7ed3\u679c ,   by   default   1   ilegend   :   bool ,   optional   \u4f7f\u7528 cufflinks \u7ed8\u56fe \u65f6 \uff0c \u662f\u5426 \u663e\u793a \u56fe\u4f8b ,   by   default   1   without _ breakpoint   :   bool ,   optional   \u753b\u56fe \u7684 \u65f6\u5019 \u662f\u5426 \u53bb\u9664 \u95f4\u65ad \u70b9 ,   by   default   0   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   \" \" \"   if   not   isinstance   (   factors   ,   pd   .   DataFrame   ) :   factors   =   factors   ( )   if   comments _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   comments _ writer   =   COMMENTS _ WRITER   if   net _ values _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   NET _ VALUES _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   if   not   on _ paper   :   from   pure _ ocean _ breeze . state . states   import   ON _ PAPER   on _ paper   =   ON _ PAPER   if   time _ start   is   None   :   from   pure _ ocean _ breeze . state . states   import   MOON _ START   if   MOON _ START   is   not   None   :   factors   =   factors   [   factors   .   index   > =   pd   .   Timestamp   (   str   (   MOON _ START   ) ) ]   else   :   factors   =   factors   [   factors   .   index   > =   pd   .   Timestamp   (   str   (   time _ start   ) ) ]   if   time _ end   is   None   :   from   pure _ ocean _ breeze . state . states   import   MOON _ END   if   MOON _ END   is   not   None   :   factors   =   factors   [   factors   .   index   < =   pd   .   Timestamp   (   str   (   MOON _ END   ) ) ]   else   :   factors   =   factors   [   factors   .   index   < =   pd   .   Timestamp   (   str   (   time _ end   ) ) ]   if   boxcox   +   neutralize   = =   0   :   no _ read _ indu   =   1   if   only _ cap   +   no _ read _ indu   >   0   :   only _ cap   =   no _ read _ indu   =   1   if   iplot   :   print _ comments   =   0   if   total _ cap   :   if   opens _ average _ first _ day   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ b   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ b   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ c   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ c   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   opens _ average _ first _ day   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ a   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ a   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   self   .   shen   .   set _ basic _ data   (   ages   =   ages   ,   sts   =   sts   ,   states   =   states   ,   opens   =   opens   ,   closes   =   closes   ,   capitals   =   capitals   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   self   .   shen   .   set _ factor _ df _ date _ as _ index   (   factors   )   self   .   shen   .   prerpare   ( )   self   .   shen   .   run   (   groups _ num   =   groups _ num   ,   neutralize   =   neutralize   ,   boxcox   =   boxcox   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   value _ weighted   =   value _ weighted   ,   y2   =   y2   ,   plt _ plot   =   plt _ plot   ,   plotly _ plot   =   plotly _ plot   ,   filename   =   filename   ,   print _ comments   =   print _ comments   ,   comments _ writer   =   comments _ writer   ,   net _ values _ writer   =   net _ values _ writer   ,   rets _ writer   =   rets _ writer   ,   comments _ sheetname   =   comments _ sheetname   ,   net _ values _ sheetname   =   net _ values _ sheetname   ,   rets _ sheetname   =   rets _ sheetname   ,   on _ paper   =   on _ paper   ,   sheetname   =   sheetname   ,   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   only _ cap   =   only _ cap   ,   iplot   =   iplot   ,   ilegend   =   ilegend   ,   without _ breakpoint   =   without _ breakpoint   ,   )   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u8fd4\u56de \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e   Returns   -------   ` pd . DataFrame `   \u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e \uff0c \u5426\u5219 \u8fd4\u56de \u539f\u56e0 \u5b50 \u6570\u636e   \" \" \"   return   self   .   shen   .   factors _ out   def   comments _ ten   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56de\u6d4b \u7684 \u5341\u5206 \u7ec4 \u7ed3\u679c \u5206\u522b \u7ed9\u51fa \u8bc4\u4ef7   Returns   -------   ` pd . DataFrame `   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \" \" \"   rets _ cols   =   list   (   self   .   shen   .   group _ rets   .   columns   )   rets _ cols   =   rets _ cols   [ :   -   1   ]   coms   =   [ ]   for   i   in   rets _ cols   :   ret   =   self   .   shen   .   group _ rets   [   i   ]   net   =   self   .   shen   .   group _ net _ values   [   i   ]   com   =   comments _ on _ twins   (   net   ,   ret   )   com   =   com   .   to _ frame   (   i   )   coms   .   append   (   com   )   df   =   pd   .   concat   (   coms   ,   axis   =   1   )   return   df   .   T   def   comment _ yearly   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56de\u6d4b \u7684 \u6bcf\u5e74 \u8868\u73b0 \u7ed9\u51fa \u8bc4\u4ef7   Returns   -------   pd . DataFrame   \u5404 \u5e74\u5ea6 \u7684 \u6536\u76ca \u6536\u76ca\u7387   \" \" \"   df   =   self   .   shen   .   group _ net _ values   .   resample   (   \" Y \"   )   .   last   ( )   .   pct _ change   ( )   df   .   index   =   df   .   index   .   year   return   df   __ call __   ( )   \u00b6   \u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u8fd4\u56de \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e   Returns   \u00b6   pd . DataFrame   \u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e \uff0c \u5426\u5219 \u8fd4\u56de \u539f\u56e0 \u5b50 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2892   2893   2894   2895   2896   2897   2898   2899   2900   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u8fd4\u56de \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e   Returns   -------   ` pd . DataFrame `   \u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e \uff0c \u5426\u5219 \u8fd4\u56de \u539f\u56e0 \u5b50 \u6570\u636e   \" \" \"   return   self   .   shen   .   factors _ out   __ init __   (   factors   ,   groups _ num   =   10   ,   freq   =   ' M '   ,   neutralize   =   0   ,   boxcox   =   1   ,   trade _ cost _ double _ side   =   0   ,   value _ weighted   =   0   ,   y2   =   0   ,   plt _ plot   =   1   ,   plotly _ plot   =   0   ,   filename   =   ' \u5206\u7ec4 \u51c0\u503c \u56fe '   ,   time _ start   =   None   ,   time _ end   =   None   ,   print _ comments   =   1   ,   comments _ writer   =   None   ,   net _ values _ writer   =   None   ,   rets _ writer   =   None   ,   comments _ sheetname   =   None   ,   net _ values _ sheetname   =   None   ,   rets _ sheetname   =   None   ,   on _ paper   =   0   ,   sheetname   =   None   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   ages   =   None   ,   sts   =   None   ,   states   =   None   ,   opens   =   None   ,   closes   =   None   ,   capitals   =   None   ,   swindustry _ dummy   =   None   ,   zxindustry _ dummy   =   None   ,   no _ read _ indu   =   0   ,   only _ cap   =   0   ,   iplot   =   1   ,   ilegend   =   0   ,   without _ breakpoint   =   0   ,   opens _ average _ first _ day   =   0   ,   total _ cap   =   0   )   \u00b6   \u4e00\u952e \u56de\u6d4b \u6846\u67b6 \uff0c \u6d4b\u8bd5 \u5355 \u56e0\u5b50 \u7684 \u6708 \u9891\u8c03 \u4ed3 \u7684 \u5206\u7ec4 \u8868\u73b0   \u6bcf\u6708 \u6708\u5e95 \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5f00\u76d8 \u65f6 \u4e70\u5165 \uff0c \u6708\u672b \u6536\u76d8 \u6700\u540e \u4e00\u5929 \u6536\u76d8 \u65f6 \u5356\u51fa   \u5254\u9664 \u4e0a\u5e02 \u4e0d\u8db3 60 \u5929 \u7684 \uff0c \u505c\u724c \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684 \uff0c st \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684   \u6708\u672b \u6536\u76d8 \u8dcc\u505c \u7684 \u4e0d \u5356\u51fa \uff0c \u6708\u521d \u5f00\u76d8 \u6da8\u505c \u7684 \u4e0d \u4e70\u5165   \u7531 \u6700\u597d \u7ec4\u548c \u6700\u5dee \u7ec4 \u7684 \u591a\u7a7a \u7ec4\u5408 \u6784\u6210 \u591a\u7a7a \u5bf9\u51b2 \u7ec4   Parameters   \u00b6   factors   :   pd . DataFrame   \u8981 \u7528\u4e8e \u68c0\u6d4b \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   groups _ num   :   int ,   optional   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   freq   :   str ,   optional   \u56de\u6d4b \u9891\u7387 ,   by   default   ' M '   neutralize   :   bool ,   optional   \u5bf9 \u6d41\u901a \u5e02\u503c \u53d6 \u81ea\u7136 \u5bf9\u6570 \u81ea\u7136\u5bf9\u6570 \uff0c \u4ee5 \u5b8c\u6210 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   boxcox   :   bool ,   optional   \u5bf9 \u6d41\u901a \u5e02\u503c \u505a \u622a\u9762 boxcox \u53d8\u6362 \uff0c \u4ee5 \u5b8c\u6210 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   1   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   value _ weighted   :   bool ,   optional   \u662f\u5426 \u7528 \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   0   y2   :   bool ,   optional   \u753b\u56fe \u65f6 \u662f\u5426 \u542f\u7528 \u7b2c\u4e8c y \u8f74 ,   by   default   0   plt _ plot   :   bool ,   optional   \u5c06 \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7528 matplotlib \u753b \u51fa\u6765 ,   by   default   1   plotly _ plot   :   bool ,   optional   \u5c06 \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7528 plotly \u753b \u51fa\u6765 ,   by   default   0   filename   :   str ,   optional   \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7684 \u56fe \u4fdd\u5b58 \u7684 \u540d\u79f0 ,   by   default   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   time _ start   :   int ,   optional   \u56de\u6d4b \u8d77\u59cb \u65f6\u95f4 ,   by   default   None   time _ end   :   int ,   optional   \u56de\u6d4b \u7ec8\u6b62 \u65f6\u95f4 ,   by   default   None   print _ comments   :   bool ,   optional   \u662f\u5426 \u6253\u5370 \u51fa \u8bc4\u4ef7 \u6307\u6807 ,   by   default   1   comments _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u8bc4\u4ef7 \u6307\u6807 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u51c0\u503c \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   rets _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   comments _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u8bc4\u4ef7 \u6307\u6807 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   net _ values _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u51c0\u503c \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   rets _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   on _ paper   :   bool ,   optional   \u4f7f\u7528 \u5b66\u672f \u5b66\u672f\u5316 \u8bc4\u4ef7 \u6307\u6807 ,   by   default   0   sheetname   :   str ,   optional   \u5404\u4e2a pd . Excelwriter \u4e2d \u5de5\u4f5c \u8868 \u7684 \u7edf\u4e00 \u540d\u79f0 ,   by   default   None   zxindustry _ dummies   :   bool ,   optional   \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \uff0c \u9009\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   swindustry _ dummies   :   bool ,   optional   \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \uff0c \u9009\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   ages   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u4e0a\u5e02 \u5929\u6570 \u7684 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u5929\u6570 ,   by   default   None   sts   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u6bcf\u5929 \u662f\u5426 st \u7684 \u6570\u636e \uff0c \u662f st \u80a1\u5373 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f 0 \u6216 1 ,   by   default   None   states   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u6bcf\u5929 \u4ea4\u6613 \u72b6\u6001 \u7684 \u6570\u636e \uff0c \u6b63\u5e38 \u4ea4\u6613 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f 0 \u6216 1 ,   by   default   None   opens   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u590d\u6743 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u4ef7\u683c ,   by   default   None   closes   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u590d\u6743 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u4ef7\u683c ,   by   default   None   capitals   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u6d41\u901a \u5e02\u503c \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u6d41\u901a \u5e02\u503c ,   by   default   None   swindustry _ dummy   :   pd . DataFrame ,   optioanl   \u719f\u4eba \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u7684 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u8868 \u5305\u542b 33 \u5217 \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u540d\u4e3a   code   \uff0c \u7b2c\u4e8c \u5217\u4e3a \u6708\u672b \u6700\u540e \u4e00\u5929 \u7684 \u65e5\u671f \uff0c \u540d\u4e3a   date   \u5176\u4f59 31 \u5217 \uff0c \u4e3a \u5404\u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \uff0c \u540d\u4e3a   w1   \u3001   w2   \u3001   w3   \u2026 \u2026   w31   ,   by   default   None   zxindustry _ dummy   :   pd . DataFrame ,   optioanl   \u719f\u4eba \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u7684 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u8868 \u5305\u542b 32 \u5217 \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u540d\u4e3a   code   \uff0c \u7b2c\u4e8c \u5217\u4e3a \u6708\u672b \u6700\u540e \u4e00\u5929 \u7684 \u65e5\u671f \uff0c \u540d\u4e3a   date   \u5176\u4f59 30 \u5217 \uff0c \u4e3a \u5404\u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \uff0c \u540d\u4e3a   w1   \u3001   w2   \u3001   w3   \u2026 \u2026   w30   ,   by   default   None   no _ read _ indu   :   bool ,   optional   \u4e0d \u8bfb\u5165 \u884c\u4e1a \u6570\u636e ,   by   default   0   only _ cap   :   bool ,   optional   \u4ec5 \u505a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   iplot   :   bool ,   optional   \u4f7f\u7528 cufflinks \u5448\u73b0 \u56de\u6d4b \u7ed3\u679c ,   by   default   1   ilegend   :   bool ,   optional   \u4f7f\u7528 cufflinks \u7ed8\u56fe \u65f6 \uff0c \u662f\u5426 \u663e\u793a \u56fe\u4f8b ,   by   default   1   without _ breakpoint   :   bool ,   optional   \u753b\u56fe \u7684 \u65f6\u5019 \u662f\u5426 \u53bb\u9664 \u95f4\u65ad \u70b9 ,   by   default   0   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2617   2618   2619   2620   2621   2622   2623   2624   2625   2626   2627   2628   2629   2630   2631   2632   2633   2634   2635   2636   2637   2638   2639   2640   2641   2642   2643   2644   2645   2646   2647   2648   2649   2650   2651   2652   2653   2654   2655   2656   2657   2658   2659   2660   2661   2662   2663   2664   2665   2666   2667   2668   2669   2670   2671   2672   2673   2674   2675   2676   2677   2678   2679   2680   2681   2682   2683   2684   2685   2686   2687   2688   2689   2690   2691   2692   2693   2694   2695   2696   2697   2698   2699   2700   2701   2702   2703   2704   2705   2706   2707   2708   2709   2710   2711   2712   2713   2714   2715   2716   2717   2718   2719   2720   2721   2722   2723   2724   2725   2726   2727   2728   2729   2730   2731   2732   2733   2734   2735   2736   2737   2738   2739   2740   2741   2742   2743   2744   2745   2746   2747   2748   2749   2750   2751   2752   2753   2754   2755   2756   2757   2758   2759   2760   2761   2762   2763   2764   2765   2766   2767   2768   2769   2770   2771   2772   2773   2774   2775   2776   2777   2778   2779   2780   2781   2782   2783   2784   2785   2786   2787   2788   2789   2790   2791   2792   2793   2794   2795   2796   2797   2798   2799   2800   2801   2802   2803   2804   2805   2806   2807   2808   2809   2810   2811   2812   2813   2814   2815   2816   2817   2818   2819   2820   2821   2822   2823   2824   2825   2826   2827   2828   2829   2830   2831   2832   2833   2834   2835   2836   2837   2838   2839   2840   2841   2842   2843   2844   2845   2846   2847   2848   2849   2850   2851   2852   2853   2854   2855   2856   2857   2858   2859   2860   2861   2862   2863   2864   2865   2866   2867   2868   2869   2870   2871   2872   2873   2874   2875   2876   2877   2878   2879   2880   2881   2882   2883   2884   2885   2886   2887   2888   2889   2890   def   __ init __   (   self   ,   factors   :   pd   .   DataFrame   ,   groups _ num   :   int   =   10   ,   freq   :   str   =   \" M \"   ,   neutralize   :   bool   =   0   ,   boxcox   :   bool   =   1   ,   trade _ cost _ double _ side   :   float   =   0   ,   value _ weighted   :   bool   =   0   ,   y2   :   bool   =   0   ,   plt _ plot   :   bool   =   1   ,   plotly _ plot   :   bool   =   0   ,   filename   :   str   =   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   ,   time _ start   :   int   =   None   ,   time _ end   :   int   =   None   ,   print _ comments   :   bool   =   1   ,   comments _ writer   :   pd   .   ExcelWriter   =   None   ,   net _ values _ writer   :   pd   .   ExcelWriter   =   None   ,   rets _ writer   :   pd   .   ExcelWriter   =   None   ,   comments _ sheetname   :   str   =   None   ,   net _ values _ sheetname   :   str   =   None   ,   rets _ sheetname   :   str   =   None   ,   on _ paper   :   bool   =   0   ,   sheetname   :   str   =   None   ,   zxindustry _ dummies   :   bool   =   0   ,   swindustry _ dummies   :   bool   =   0   ,   ages   :   pd   .   DataFrame   =   None   ,   sts   :   pd   .   DataFrame   =   None   ,   states   :   pd   .   DataFrame   =   None   ,   opens   :   pd   .   DataFrame   =   None   ,   closes   :   pd   .   DataFrame   =   None   ,   capitals   :   pd   .   DataFrame   =   None   ,   swindustry _ dummy   :   pd   .   DataFrame   =   None   ,   zxindustry _ dummy   :   pd   .   DataFrame   =   None   ,   no _ read _ indu   :   bool   =   0   ,   only _ cap   :   bool   =   0   ,   iplot   :   bool   =   1   ,   ilegend   :   bool   =   0   ,   without _ breakpoint   :   bool   =   0   ,   opens _ average _ first _ day   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u4e00\u952e \u56de\u6d4b \u6846\u67b6 \uff0c \u6d4b\u8bd5 \u5355 \u56e0\u5b50 \u7684 \u6708 \u9891\u8c03 \u4ed3 \u7684 \u5206\u7ec4 \u8868\u73b0   \u6bcf\u6708 \u6708\u5e95 \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5f00\u76d8 \u65f6 \u4e70\u5165 \uff0c \u6708\u672b \u6536\u76d8 \u6700\u540e \u4e00\u5929 \u6536\u76d8 \u65f6 \u5356\u51fa   \u5254\u9664 \u4e0a\u5e02 \u4e0d\u8db3 60 \u5929 \u7684 \uff0c \u505c\u724c \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684 \uff0c st \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684   \u6708\u672b \u6536\u76d8 \u8dcc\u505c \u7684 \u4e0d \u5356\u51fa \uff0c \u6708\u521d \u5f00\u76d8 \u6da8\u505c \u7684 \u4e0d \u4e70\u5165   \u7531 \u6700\u597d \u7ec4\u548c \u6700\u5dee \u7ec4 \u7684 \u591a\u7a7a \u7ec4\u5408 \u6784\u6210 \u591a\u7a7a \u5bf9\u51b2 \u7ec4   Parameters   ----------   factors   :   pd . DataFrame   \u8981 \u7528\u4e8e \u68c0\u6d4b \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   groups _ num   :   int ,   optional   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   freq   :   str ,   optional   \u56de\u6d4b \u9891\u7387 ,   by   default   ' M '   neutralize   :   bool ,   optional   \u5bf9 \u6d41\u901a \u5e02\u503c \u53d6 \u81ea\u7136 \u5bf9\u6570 \u81ea\u7136\u5bf9\u6570 \uff0c \u4ee5 \u5b8c\u6210 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   boxcox   :   bool ,   optional   \u5bf9 \u6d41\u901a \u5e02\u503c \u505a \u622a\u9762 boxcox \u53d8\u6362 \uff0c \u4ee5 \u5b8c\u6210 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   1   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   value _ weighted   :   bool ,   optional   \u662f\u5426 \u7528 \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   0   y2   :   bool ,   optional   \u753b\u56fe \u65f6 \u662f\u5426 \u542f\u7528 \u7b2c\u4e8c y \u8f74 ,   by   default   0   plt _ plot   :   bool ,   optional   \u5c06 \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7528 matplotlib \u753b \u51fa\u6765 ,   by   default   1   plotly _ plot   :   bool ,   optional   \u5c06 \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7528 plotly \u753b \u51fa\u6765 ,   by   default   0   filename   :   str ,   optional   \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7684 \u56fe \u4fdd\u5b58 \u7684 \u540d\u79f0 ,   by   default   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   time _ start   :   int ,   optional   \u56de\u6d4b \u8d77\u59cb \u65f6\u95f4 ,   by   default   None   time _ end   :   int ,   optional   \u56de\u6d4b \u7ec8\u6b62 \u65f6\u95f4 ,   by   default   None   print _ comments   :   bool ,   optional   \u662f\u5426 \u6253\u5370 \u51fa \u8bc4\u4ef7 \u6307\u6807 ,   by   default   1   comments _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u8bc4\u4ef7 \u6307\u6807 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u51c0\u503c \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   rets _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   comments _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u8bc4\u4ef7 \u6307\u6807 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   net _ values _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u51c0\u503c \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   rets _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   on _ paper   :   bool ,   optional   \u4f7f\u7528 \u5b66\u672f \u5b66\u672f\u5316 \u8bc4\u4ef7 \u6307\u6807 ,   by   default   0   sheetname   :   str ,   optional   \u5404\u4e2a pd . Excelwriter \u4e2d \u5de5\u4f5c \u8868 \u7684 \u7edf\u4e00 \u540d\u79f0 ,   by   default   None   zxindustry _ dummies   :   bool ,   optional   \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \uff0c \u9009\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   swindustry _ dummies   :   bool ,   optional   \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \uff0c \u9009\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   ages   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u4e0a\u5e02 \u5929\u6570 \u7684 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u5929\u6570 ,   by   default   None   sts   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u6bcf\u5929 \u662f\u5426 st \u7684 \u6570\u636e \uff0c \u662f st \u80a1\u5373 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f 0 \u6216 1 ,   by   default   None   states   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u6bcf\u5929 \u4ea4\u6613 \u72b6\u6001 \u7684 \u6570\u636e \uff0c \u6b63\u5e38 \u4ea4\u6613 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f 0 \u6216 1 ,   by   default   None   opens   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u590d\u6743 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u4ef7\u683c ,   by   default   None   closes   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u590d\u6743 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u4ef7\u683c ,   by   default   None   capitals   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u6d41\u901a \u5e02\u503c \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u6d41\u901a \u5e02\u503c ,   by   default   None   swindustry _ dummy   :   pd . DataFrame ,   optioanl   \u719f\u4eba \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u7684 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u8868 \u5305\u542b 33 \u5217 \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u540d\u4e3a ` code ` \uff0c \u7b2c\u4e8c \u5217\u4e3a \u6708\u672b \u6700\u540e \u4e00\u5929 \u7684 \u65e5\u671f \uff0c \u540d\u4e3a ` date `   \u5176\u4f59 31 \u5217 \uff0c \u4e3a \u5404\u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \uff0c \u540d\u4e3a ` w1 ` \u3001 ` w2 ` \u3001 ` w3 ` \u2026 \u2026 ` w31 ` ,   by   default   None   zxindustry _ dummy   :   pd . DataFrame ,   optioanl   \u719f\u4eba \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u7684 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u8868 \u5305\u542b 32 \u5217 \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u540d\u4e3a ` code ` \uff0c \u7b2c\u4e8c \u5217\u4e3a \u6708\u672b \u6700\u540e \u4e00\u5929 \u7684 \u65e5\u671f \uff0c \u540d\u4e3a ` date `   \u5176\u4f59 30 \u5217 \uff0c \u4e3a \u5404\u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \uff0c \u540d\u4e3a ` w1 ` \u3001 ` w2 ` \u3001 ` w3 ` \u2026 \u2026 ` w30 ` ,   by   default   None   no _ read _ indu   :   bool ,   optional   \u4e0d \u8bfb\u5165 \u884c\u4e1a \u6570\u636e ,   by   default   0   only _ cap   :   bool ,   optional   \u4ec5 \u505a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   iplot   :   bool ,   optional   \u4f7f\u7528 cufflinks \u5448\u73b0 \u56de\u6d4b \u7ed3\u679c ,   by   default   1   ilegend   :   bool ,   optional   \u4f7f\u7528 cufflinks \u7ed8\u56fe \u65f6 \uff0c \u662f\u5426 \u663e\u793a \u56fe\u4f8b ,   by   default   1   without _ breakpoint   :   bool ,   optional   \u753b\u56fe \u7684 \u65f6\u5019 \u662f\u5426 \u53bb\u9664 \u95f4\u65ad \u70b9 ,   by   default   0   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   \" \" \"   if   not   isinstance   (   factors   ,   pd   .   DataFrame   ) :   factors   =   factors   ( )   if   comments _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   comments _ writer   =   COMMENTS _ WRITER   if   net _ values _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   NET _ VALUES _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   if   not   on _ paper   :   from   pure _ ocean _ breeze . state . states   import   ON _ PAPER   on _ paper   =   ON _ PAPER   if   time _ start   is   None   :   from   pure _ ocean _ breeze . state . states   import   MOON _ START   if   MOON _ START   is   not   None   :   factors   =   factors   [   factors   .   index   > =   pd   .   Timestamp   (   str   (   MOON _ START   ) ) ]   else   :   factors   =   factors   [   factors   .   index   > =   pd   .   Timestamp   (   str   (   time _ start   ) ) ]   if   time _ end   is   None   :   from   pure _ ocean _ breeze . state . states   import   MOON _ END   if   MOON _ END   is   not   None   :   factors   =   factors   [   factors   .   index   < =   pd   .   Timestamp   (   str   (   MOON _ END   ) ) ]   else   :   factors   =   factors   [   factors   .   index   < =   pd   .   Timestamp   (   str   (   time _ end   ) ) ]   if   boxcox   +   neutralize   = =   0   :   no _ read _ indu   =   1   if   only _ cap   +   no _ read _ indu   >   0   :   only _ cap   =   no _ read _ indu   =   1   if   iplot   :   print _ comments   =   0   if   total _ cap   :   if   opens _ average _ first _ day   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ b   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ b   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ c   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ c   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   opens _ average _ first _ day   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ a   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ a   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   self   .   shen   .   set _ basic _ data   (   ages   =   ages   ,   sts   =   sts   ,   states   =   states   ,   opens   =   opens   ,   closes   =   closes   ,   capitals   =   capitals   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   self   .   shen   .   set _ factor _ df _ date _ as _ index   (   factors   )   self   .   shen   .   prerpare   ( )   self   .   shen   .   run   (   groups _ num   =   groups _ num   ,   neutralize   =   neutralize   ,   boxcox   =   boxcox   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   value _ weighted   =   value _ weighted   ,   y2   =   y2   ,   plt _ plot   =   plt _ plot   ,   plotly _ plot   =   plotly _ plot   ,   filename   =   filename   ,   print _ comments   =   print _ comments   ,   comments _ writer   =   comments _ writer   ,   net _ values _ writer   =   net _ values _ writer   ,   rets _ writer   =   rets _ writer   ,   comments _ sheetname   =   comments _ sheetname   ,   net _ values _ sheetname   =   net _ values _ sheetname   ,   rets _ sheetname   =   rets _ sheetname   ,   on _ paper   =   on _ paper   ,   sheetname   =   sheetname   ,   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   only _ cap   =   only _ cap   ,   iplot   =   iplot   ,   ilegend   =   ilegend   ,   without _ breakpoint   =   without _ breakpoint   ,   )   comment _ yearly   ( )   \u00b6   \u5bf9 \u56de\u6d4b \u7684 \u6bcf\u5e74 \u8868\u73b0 \u7ed9\u51fa \u8bc4\u4ef7   Returns   \u00b6   pd . DataFrame   \u5404 \u5e74\u5ea6 \u7684 \u6536\u76ca \u6536\u76ca\u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2922   2923   2924   2925   2926   2927   2928   2929   2930   2931   2932   def   comment _ yearly   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56de\u6d4b \u7684 \u6bcf\u5e74 \u8868\u73b0 \u7ed9\u51fa \u8bc4\u4ef7   Returns   -------   pd . DataFrame   \u5404 \u5e74\u5ea6 \u7684 \u6536\u76ca \u6536\u76ca\u7387   \" \" \"   df   =   self   .   shen   .   group _ net _ values   .   resample   (   \" Y \"   )   .   last   ( )   .   pct _ change   ( )   df   .   index   =   df   .   index   .   year   return   df   comments _ ten   ( )   \u00b6   \u5bf9 \u56de\u6d4b \u7684 \u5341\u5206 \u7ec4 \u7ed3\u679c \u5206\u522b \u7ed9\u51fa \u8bc4\u4ef7   Returns   \u00b6   pd . DataFrame   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2902   2903   2904   2905   2906   2907   2908   2909   2910   2911   2912   2913   2914   2915   2916   2917   2918   2919   2920   def   comments _ ten   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56de\u6d4b \u7684 \u5341\u5206 \u7ec4 \u7ed3\u679c \u5206\u522b \u7ed9\u51fa \u8bc4\u4ef7   Returns   -------   ` pd . DataFrame `   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \" \" \"   rets _ cols   =   list   (   self   .   shen   .   group _ rets   .   columns   )   rets _ cols   =   rets _ cols   [ :   -   1   ]   coms   =   [ ]   for   i   in   rets _ cols   :   ret   =   self   .   shen   .   group _ rets   [   i   ]   net   =   self   .   shen   .   group _ net _ values   [   i   ]   com   =   comments _ on _ twins   (   net   ,   ret   )   com   =   com   .   to _ frame   (   i   )   coms   .   append   (   com   )   df   =   pd   .   concat   (   coms   ,   axis   =   1   )   return   df   .   T   pure _ newyear   \u00b6   Bases :   object   \u8f6c\u4e3a \u751f\u6210 25 \u5206\u7ec4 \u548c \u767e \u5206\u7ec4 \u7684 \u6536\u76ca \u77e9\u9635 \u800c \u5c01\u88c5   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4018   4019   4020   4021   4022   4023   4024   4025   4026   4027   4028   4029   4030   4031   4032   4033   4034   4035   4036   4037   4038   4039   4040   4041   4042   4043   4044   4045   4046   4047   4048   4049   4050   4051   4052   4053   4054   4055   4056   4057   4058   4059   4060   4061   4062   4063   4064   4065   4066   4067   4068   4069   4070   4071   4072   4073   4074   4075   4076   class   pure _ newyear   (   object   ) :   \" \" \" \u8f6c\u4e3a \u751f\u6210 25 \u5206\u7ec4 \u548c \u767e \u5206\u7ec4 \u7684 \u6536\u76ca \u77e9\u9635 \u800c \u5c01\u88c5 \" \" \"   def   __ init __   (   self   ,   facx   :   pd   .   DataFrame   ,   facy   :   pd   .   DataFrame   ,   group _ num _ single   :   int   ,   trade _ cost _ double _ side   :   float   =   0   ,   namex   :   str   =   \" \u4e3b \"   ,   namey   :   str   =   \" \u6b21 \"   ,   )   - >   None   :   \" \" \" \u6761\u4ef6 \u53cc \u53d8\u91cf \u6392\u5e8f \u6cd5 \uff0c \u5148\u5bf9 \u6240\u6709 \u80a1\u7968 \uff0c \u4f9d\u7167 \u56e0\u5b50 facx \u8fdb\u884c \u6392\u5e8f   \u7136\u540e \u5728 \u6bcf\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u6700\u540e \u7edf\u8ba1 \u5404\u4e2a \u7ec4\u5185 \u7684 \u5e73\u5747 \u6536\u76ca \u6536\u76ca\u7387   Parameters   ----------   facx   :   pd . DataFrame   \u9996\u5148 \u8fdb\u884c \u6392\u5e8f \u7684 \u56e0\u5b50 \uff0c \u901a\u5e38 \u4e3a \u63a7\u5236 \u53d8\u91cf \u63a7\u5236\u53d8 \u63a7\u5236\u53d8\u91cf \uff0c \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u6b63\u4ea4 \u5316\u4e2d \u7684 \u53d8\u91cf \u81ea\u53d8\u91cf   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   facy   :   pd . DataFrame   \u5728 facx \u7684 \u5404\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u4e3a \u4e3b\u8981 \u8981 \u7814\u7a76 \u7684 \u56e0\u5b50   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   group _ num _ single   :   int   \u5355\u4e2a \u56e0\u5b50 \u5206\u6210 \u51e0\u7ec4 \uff0c \u901a\u5e38 \u4e3a 5 \u6216 10   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   namex   :   str ,   optional   facx \u8fd9\u4e00 \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   \" \u4e3b \"   namey   :   str ,   optional   facy \u8fd9\u4e00 \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   \" \u6b21 \"   \" \" \"   homex   =   pure _ fallmount   (   facx   )   homey   =   pure _ fallmount   (   facy   )   if   group _ num _ single   = =   5   :   homexy   =   homex   >   homey   elif   group _ num _ single   = =   10   :   homexy   =   homex   > >   homey   shen   =   pure _ moonnight   (   homexy   ( ) ,   group _ num _ single   * *   2   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   plt _ plot   =   False   ,   print _ comments   =   False   ,   )   sq   =   shen   .   shen   .   square _ rets   .   copy   ( )   sq   .   index   =   [   namex   +   str   (   i   )   for   i   in   list   (   sq   .   index   ) ]   sq   .   columns   =   [   namey   +   str   (   i   )   for   i   in   list   (   sq   .   columns   ) ]   self   .   square _ rets   =   sq   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u8c03\u7528 \u5bf9\u8c61 \u65f6 \uff0c \u8fd4\u56de \u6700\u7ec8 \u7ed3\u679c \uff0c \u6b63\u65b9 \u65b9\u5f62 \u6b63\u65b9\u5f62 \u7684 \u5206\u7ec4 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u8868   Returns   -------   ` pd . DataFrame `   \u6bcf\u4e2a \u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387   \" \" \"   return   self   .   square _ rets   .   copy   ( )   __ call __   ( )   \u00b6   \u8c03\u7528 \u5bf9\u8c61 \u65f6 \uff0c \u8fd4\u56de \u6700\u7ec8 \u7ed3\u679c \uff0c \u6b63\u65b9 \u65b9\u5f62 \u6b63\u65b9\u5f62 \u7684 \u5206\u7ec4 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u8868   Returns   \u00b6   pd . DataFrame   \u6bcf\u4e2a \u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4068   4069   4070   4071   4072   4073   4074   4075   4076   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u8c03\u7528 \u5bf9\u8c61 \u65f6 \uff0c \u8fd4\u56de \u6700\u7ec8 \u7ed3\u679c \uff0c \u6b63\u65b9 \u65b9\u5f62 \u6b63\u65b9\u5f62 \u7684 \u5206\u7ec4 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u8868   Returns   -------   ` pd . DataFrame `   \u6bcf\u4e2a \u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387   \" \" \"   return   self   .   square _ rets   .   copy   ( )   __ init __   (   facx   ,   facy   ,   group _ num _ single   ,   trade _ cost _ double _ side   =   0   ,   namex   =   ' \u4e3b '   ,   namey   =   ' \u6b21 '   )   \u00b6   \u6761\u4ef6 \u53cc \u53d8\u91cf \u6392\u5e8f \u6cd5 \uff0c \u5148\u5bf9 \u6240\u6709 \u80a1\u7968 \uff0c \u4f9d\u7167 \u56e0\u5b50 facx \u8fdb\u884c \u6392\u5e8f   \u7136\u540e \u5728 \u6bcf\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u6700\u540e \u7edf\u8ba1 \u5404\u4e2a \u7ec4\u5185 \u7684 \u5e73\u5747 \u6536\u76ca \u6536\u76ca\u7387   Parameters   \u00b6   facx   :   pd . DataFrame   \u9996\u5148 \u8fdb\u884c \u6392\u5e8f \u7684 \u56e0\u5b50 \uff0c \u901a\u5e38 \u4e3a \u63a7\u5236 \u53d8\u91cf \u63a7\u5236\u53d8 \u63a7\u5236\u53d8\u91cf \uff0c \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u6b63\u4ea4 \u5316\u4e2d \u7684 \u53d8\u91cf \u81ea\u53d8\u91cf   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   facy   :   pd . DataFrame   \u5728 facx \u7684 \u5404\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u4e3a \u4e3b\u8981 \u8981 \u7814\u7a76 \u7684 \u56e0\u5b50   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   group _ num _ single   :   int   \u5355\u4e2a \u56e0\u5b50 \u5206\u6210 \u51e0\u7ec4 \uff0c \u901a\u5e38 \u4e3a 5 \u6216 10   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   namex   :   str ,   optional   facx \u8fd9\u4e00 \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   \" \u4e3b \"   namey   :   str ,   optional   facy \u8fd9\u4e00 \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   \" \u6b21 \"   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4021   4022   4023   4024   4025   4026   4027   4028   4029   4030   4031   4032   4033   4034   4035   4036   4037   4038   4039   4040   4041   4042   4043   4044   4045   4046   4047   4048   4049   4050   4051   4052   4053   4054   4055   4056   4057   4058   4059   4060   4061   4062   4063   4064   4065   4066   def   __ init __   (   self   ,   facx   :   pd   .   DataFrame   ,   facy   :   pd   .   DataFrame   ,   group _ num _ single   :   int   ,   trade _ cost _ double _ side   :   float   =   0   ,   namex   :   str   =   \" \u4e3b \"   ,   namey   :   str   =   \" \u6b21 \"   ,   )   - >   None   :   \" \" \" \u6761\u4ef6 \u53cc \u53d8\u91cf \u6392\u5e8f \u6cd5 \uff0c \u5148\u5bf9 \u6240\u6709 \u80a1\u7968 \uff0c \u4f9d\u7167 \u56e0\u5b50 facx \u8fdb\u884c \u6392\u5e8f   \u7136\u540e \u5728 \u6bcf\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u6700\u540e \u7edf\u8ba1 \u5404\u4e2a \u7ec4\u5185 \u7684 \u5e73\u5747 \u6536\u76ca \u6536\u76ca\u7387   Parameters   ----------   facx   :   pd . DataFrame   \u9996\u5148 \u8fdb\u884c \u6392\u5e8f \u7684 \u56e0\u5b50 \uff0c \u901a\u5e38 \u4e3a \u63a7\u5236 \u53d8\u91cf \u63a7\u5236\u53d8 \u63a7\u5236\u53d8\u91cf \uff0c \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u6b63\u4ea4 \u5316\u4e2d \u7684 \u53d8\u91cf \u81ea\u53d8\u91cf   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   facy   :   pd . DataFrame   \u5728 facx \u7684 \u5404\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u4e3a \u4e3b\u8981 \u8981 \u7814\u7a76 \u7684 \u56e0\u5b50   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   group _ num _ single   :   int   \u5355\u4e2a \u56e0\u5b50 \u5206\u6210 \u51e0\u7ec4 \uff0c \u901a\u5e38 \u4e3a 5 \u6216 10   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   namex   :   str ,   optional   facx \u8fd9\u4e00 \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   \" \u4e3b \"   namey   :   str ,   optional   facy \u8fd9\u4e00 \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   \" \u6b21 \"   \" \" \"   homex   =   pure _ fallmount   (   facx   )   homey   =   pure _ fallmount   (   facy   )   if   group _ num _ single   = =   5   :   homexy   =   homex   >   homey   elif   group _ num _ single   = =   10   :   homexy   =   homex   > >   homey   shen   =   pure _ moonnight   (   homexy   ( ) ,   group _ num _ single   * *   2   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   plt _ plot   =   False   ,   print _ comments   =   False   ,   )   sq   =   shen   .   shen   .   square _ rets   .   copy   ( )   sq   .   index   =   [   namex   +   str   (   i   )   for   i   in   list   (   sq   .   index   ) ]   sq   .   columns   =   [   namey   +   str   (   i   )   for   i   in   list   (   sq   .   columns   ) ]   self   .   square _ rets   =   sq   pure _ rollingols   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4893   4894   4895   4896   4897   4898   4899   4900   4901   4902   4903   4904   4905   4906   4907   4908   4909   4910   4911   4912   4913   4914   4915   4916   4917   4918   4919   4920   4921   4922   4923   4924   4925   4926   4927   4928   4929   4930   4931   4932   4933   4934   4935   4936   4937   4938   4939   4940   4941   4942   4943   4944   4945   4946   4947   4948   4949   4950   4951   4952   4953   4954   4955   4956   4957   4958   4959   4960   4961   4962   4963   4964   4965   4966   4967   4968   4969   4970   4971   4972   4973   4974   4975   4976   4977   4978   4979   4980   4981   4982   4983   4984   4985   4986   4987   4988   4989   4990   4991   4992   4993   4994   4995   4996   4997   4998   4999   5000   5001   5002   5003   5004   5005   5006   5007   5008   class   pure _ rollingols   (   object   ) :   def   __ init __   (   self   ,   y   :   pd   .   DataFrame   ,   xs   :   Union   [   List   [   pd   .   DataFrame   ] ,   pd   .   DataFrame   ] ,   backsee   :   int   =   20   ,   factors _ names   :   List   [   str   ]   =   None   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 \u82e5\u5e72 \u82e5\u5e72\u4e2a dataframe \uff0c \u5bf9\u5e94 \u7684 \u80a1\u7968 \u8fdb\u884c \u6307\u5b9a \u7a97\u53e3 \u7684 \u65f6\u5e8f \u6eda\u52a8 \u56de\u5f52   Parameters   ----------   y   :   pd . DataFrame   \u6eda\u52a8 \u56de\u5f52 \u4e2d \u7684 \u53d8\u91cf \u56e0\u53d8\u91cf y \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   xs   :   Union [ List [ pd . DataFrame ] ,   pd . DataFrame ]   \u6eda\u52a8 \u56de\u5f52 \u4e2d \u7684 \u53d8\u91cf \u81ea\u53d8\u91cf xi \uff0c \u6bcf \u4e00\u4e2a dataframe \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   backsee   :   int ,   optional   \u6eda\u52a8 \u56de\u5f52 \u7684 \u65f6\u95f4 \u7a97\u53e3 ,   by   default   20   factors _ names   :   List [ str ] ,   optional   xs \u4e2d \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   self   .   backsee   =   backsee   self   .   y   =   y   if   not   isinstance   (   xs   ,   list   ) :   xs   =   [   xs   ]   self   .   xs   =   xs   y   =   y   .   stack   ( )   .   reset _ index   ( )   xs   =   [   i   .   stack   ( )   .   reset _ index   ( )   for   i   in   xs   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" y \"   ]   xs   =   [   i   .   rename   (   columns   =   {   list   (   i   .   columns   ) [   1   ] :   \" code \"   ,   list   (   i   .   columns   ) [   2   ] :   f   \" x   {   j   +   1   }   \"   }   )   for   j   ,   i   in   enumerate   (   xs   )   ]   xs   =   [   y   ]   +   xs   xs   =   reduce   (   lambda   x   ,   y   :   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] ) ,   xs   )   xs   =   xs   .   set _ index   (   \" date \"   )   self   .   __ data   =   xs   self   .   haha   =   xs   tqdm   .   auto   .   tqdm   .   pandas   ( )   self   .   __ coefficients   =   (   self   .   __ data   .   groupby   (   \" code \"   )   .   progress _ apply   (   self   .   ols _ in   )   .   reset _ index   ( )   )   self   .   __ coefficients   =   self   .   __ coefficients   .   rename   (   columns   =   {   i   :   \" co \"   +   i   for   i   in   list   (   self   .   __ coefficients   .   columns   )   if   \" x \"   in   i   }   )   self   .   __ data   =   pd   .   merge   (   self   .   __ data   .   reset _ index   ( ) ,   self   .   __ coefficients   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   betas   =   [   self   .   __ data   [   i   ]   *   self   .   __ data   [   \" co \"   +   i   ]   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" x \"   )   ]   betas   =   sum   (   betas   )   self   .   __ data   =   self   .   __ data   .   assign   (   residual   =   self   .   __ data   .   y   -   self   .   __ data   .   intercept   -   betas   )   self   .   __ residual   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" residual \"   )   self   .   __ alphas   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" intercept \"   )   if   factors _ names   is   None   :   self   .   __ betas   =   {   i   :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" cox \"   )   }   else   :   facs   =   [   i   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" cox \"   ) ]   self   .   __ betas   =   {   factors _ names   [   num   ] :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   num   ,   i   in   enumerate   (   facs   )   }   if   len   (   list   (   self   .   __ betas   ) )   = =   1   :   self   .   __ betas   =   list   (   self   .   __ betas   .   values   ( ) ) [   0   ]   @ property   def   residual   (   self   ) :   return   self   .   __ residual   @ property   def   data   (   self   ) :   return   self   .   __ data   @ property   def   alphas   (   self   ) :   return   self   .   __ alphas   @ property   def   betas   (   self   ) :   return   self   .   __ betas   @ property   def   coefficients   (   self   ) :   return   self   .   __ coefficients   def   ols _ in   (   self   ,   df   ) :   try   :   ols   =   po   .   PandasRollingOLS   (   y   =   df   [ [   \" y \"   ] ] ,   x   =   df   [ [   f   \" x   {   i   +   1   }   \"   for   i   in   range   (   len   (   self   .   xs   ) ) ] ] ,   window   =   self   .   backsee   ,   )   betas   =   ols   .   beta   alpha   =   ols   .   alpha   return   pd   .   concat   ( [   alpha   ,   betas   ] ,   axis   =   1   )   except   Exception   :   #   \u6709\u4e9b \u6570\u636e \u603b\u5171 \u4e0d\u8db3 \uff0c \u90a3 \u5c31 \u8df3 \u8fc7   ...   __ init __   (   y   ,   xs   ,   backsee   =   20   ,   factors _ names   =   None   )   \u00b6   \u4f7f\u7528 \u82e5\u5e72 \u82e5\u5e72\u4e2a dataframe \uff0c \u5bf9\u5e94 \u7684 \u80a1\u7968 \u8fdb\u884c \u6307\u5b9a \u7a97\u53e3 \u7684 \u65f6\u5e8f \u6eda\u52a8 \u56de\u5f52   Parameters   \u00b6   y   :   pd . DataFrame   \u6eda\u52a8 \u56de\u5f52 \u4e2d \u7684 \u53d8\u91cf \u56e0\u53d8\u91cf y \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   xs   :   Union [ List [ pd . DataFrame ] ,   pd . DataFrame ]   \u6eda\u52a8 \u56de\u5f52 \u4e2d \u7684 \u53d8\u91cf \u81ea\u53d8\u91cf xi \uff0c \u6bcf \u4e00\u4e2a dataframe \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   backsee   :   int ,   optional   \u6eda\u52a8 \u56de\u5f52 \u7684 \u65f6\u95f4 \u7a97\u53e3 ,   by   default   20   factors _ names   :   List [ str ] ,   optional   xs \u4e2d \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   None   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4894   4895   4896   4897   4898   4899   4900   4901   4902   4903   4904   4905   4906   4907   4908   4909   4910   4911   4912   4913   4914   4915   4916   4917   4918   4919   4920   4921   4922   4923   4924   4925   4926   4927   4928   4929   4930   4931   4932   4933   4934   4935   4936   4937   4938   4939   4940   4941   4942   4943   4944   4945   4946   4947   4948   4949   4950   4951   4952   4953   4954   4955   4956   4957   4958   4959   4960   4961   4962   4963   4964   4965   4966   4967   4968   4969   4970   4971   4972   4973   def   __ init __   (   self   ,   y   :   pd   .   DataFrame   ,   xs   :   Union   [   List   [   pd   .   DataFrame   ] ,   pd   .   DataFrame   ] ,   backsee   :   int   =   20   ,   factors _ names   :   List   [   str   ]   =   None   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 \u82e5\u5e72 \u82e5\u5e72\u4e2a dataframe \uff0c \u5bf9\u5e94 \u7684 \u80a1\u7968 \u8fdb\u884c \u6307\u5b9a \u7a97\u53e3 \u7684 \u65f6\u5e8f \u6eda\u52a8 \u56de\u5f52   Parameters   ----------   y   :   pd . DataFrame   \u6eda\u52a8 \u56de\u5f52 \u4e2d \u7684 \u53d8\u91cf \u56e0\u53d8\u91cf y \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   xs   :   Union [ List [ pd . DataFrame ] ,   pd . DataFrame ]   \u6eda\u52a8 \u56de\u5f52 \u4e2d \u7684 \u53d8\u91cf \u81ea\u53d8\u91cf xi \uff0c \u6bcf \u4e00\u4e2a dataframe \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   backsee   :   int ,   optional   \u6eda\u52a8 \u56de\u5f52 \u7684 \u65f6\u95f4 \u7a97\u53e3 ,   by   default   20   factors _ names   :   List [ str ] ,   optional   xs \u4e2d \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   self   .   backsee   =   backsee   self   .   y   =   y   if   not   isinstance   (   xs   ,   list   ) :   xs   =   [   xs   ]   self   .   xs   =   xs   y   =   y   .   stack   ( )   .   reset _ index   ( )   xs   =   [   i   .   stack   ( )   .   reset _ index   ( )   for   i   in   xs   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" y \"   ]   xs   =   [   i   .   rename   (   columns   =   {   list   (   i   .   columns   ) [   1   ] :   \" code \"   ,   list   (   i   .   columns   ) [   2   ] :   f   \" x   {   j   +   1   }   \"   }   )   for   j   ,   i   in   enumerate   (   xs   )   ]   xs   =   [   y   ]   +   xs   xs   =   reduce   (   lambda   x   ,   y   :   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] ) ,   xs   )   xs   =   xs   .   set _ index   (   \" date \"   )   self   .   __ data   =   xs   self   .   haha   =   xs   tqdm   .   auto   .   tqdm   .   pandas   ( )   self   .   __ coefficients   =   (   self   .   __ data   .   groupby   (   \" code \"   )   .   progress _ apply   (   self   .   ols _ in   )   .   reset _ index   ( )   )   self   .   __ coefficients   =   self   .   __ coefficients   .   rename   (   columns   =   {   i   :   \" co \"   +   i   for   i   in   list   (   self   .   __ coefficients   .   columns   )   if   \" x \"   in   i   }   )   self   .   __ data   =   pd   .   merge   (   self   .   __ data   .   reset _ index   ( ) ,   self   .   __ coefficients   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   betas   =   [   self   .   __ data   [   i   ]   *   self   .   __ data   [   \" co \"   +   i   ]   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" x \"   )   ]   betas   =   sum   (   betas   )   self   .   __ data   =   self   .   __ data   .   assign   (   residual   =   self   .   __ data   .   y   -   self   .   __ data   .   intercept   -   betas   )   self   .   __ residual   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" residual \"   )   self   .   __ alphas   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" intercept \"   )   if   factors _ names   is   None   :   self   .   __ betas   =   {   i   :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" cox \"   )   }   else   :   facs   =   [   i   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" cox \"   ) ]   self   .   __ betas   =   {   factors _ names   [   num   ] :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   num   ,   i   in   enumerate   (   facs   )   }   if   len   (   list   (   self   .   __ betas   ) )   = =   1   :   self   .   __ betas   =   list   (   self   .   __ betas   .   values   ( ) ) [   0   ]   pure _ snowtrain   \u00b6   Bases :   object   \u76f4\u63a5 \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3933   3934   3935   3936   3937   3938   3939   3940   3941   3942   3943   3944   3945   3946   3947   3948   3949   3950   3951   3952   3953   3954   3955   3956   3957   3958   3959   3960   3961   3962   3963   3964   3965   3966   3967   3968   3969   3970   3971   3972   3973   3974   3975   3976   3977   3978   3979   3980   3981   3982   3983   3984   3985   3986   3987   3988   3989   3990   3991   3992   3993   3994   3995   3996   3997   3998   3999   4000   4001   4002   4003   4004   4005   4006   4007   4008   4009   4010   4011   4012   4013   4014   4015   @ do _ on _ dfs   class   pure _ snowtrain   (   object   ) :   \" \" \" \u76f4\u63a5 \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50 \" \" \"   def   __ init __   (   self   ,   factors   :   pd   .   DataFrame   ,   facs _ dict   :   Dict   =   None   ,   momentum   :   bool   =   1   ,   earningsyield   :   bool   =   1   ,   growth   :   bool   =   1   ,   liquidity   :   bool   =   1   ,   size   :   bool   =   1   ,   leverage   :   bool   =   1   ,   beta   :   bool   =   1   ,   nonlinearsize   :   bool   =   1   ,   residualvolatility   :   bool   =   1   ,   booktoprice   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u8ba1\u7b97 \u56e0\u5b50 \u503c \u4e0e 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u4e4b\u95f4 \u7684 \u76f8\u5173 \u76f8\u5173\u6027 \uff0c \u5e76 \u8fdb\u884c \u7eaf\u51c0 \u5316 \uff0c \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50   Parameters   ----------   factors   :   pd . DataFrame   \u8981 \u8003\u5bdf \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   facs _ dict   :   Dict ,   optional   \u989d\u5916 \u52a0\u5165 \u7684 \u56e0\u5b50 \uff0c \u540d\u5b57 \u4e3a key \uff0c \u56e0\u5b50 \u77e9\u9635 \u4e3a value \uff0c \u5f62 \u5982 ` { ' \u53cd\u8f6c ' :   ret20 ,   ' \u6362\u624b ' :   tr20 } ` ,   by   default   None   momentum   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u52a8\u91cf \u56e0\u5b50 ,   by   default   1   earningsyield   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u76c8\u5229 \u56e0\u5b50 ,   by   default   1   growth   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6210\u957f \u56e0\u5b50 ,   by   default   1   liquidity   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6d41\u52a8 \u6d41\u52a8\u6027 \u56e0\u5b50 ,   by   default   1   size   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u89c4\u6a21 \u56e0\u5b50 ,   by   default   1   leverage   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6760\u6746 \u56e0\u5b50 ,   by   default   1   beta   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d1d\u5854 \u56e0\u5b50 ,   by   default   1   nonlinearsize   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \u56e0\u5b50 ,   by   default   1   residualvolatility   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6b8b\u5dee \u6ce2\u52a8 \u7387 \u56e0\u5b50 ,   by   default   1   booktoprice   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d26\u9762 \u5e02\u503c \u6bd4 \u56e0\u5b50 ,   by   default   1   \" \" \"   self   .   winter   =   pure _ coldwinter   (   momentum   =   momentum   ,   earningsyield   =   earningsyield   ,   growth   =   growth   ,   liquidity   =   liquidity   ,   size   =   size   ,   leverage   =   leverage   ,   beta   =   beta   ,   nonlinearsize   =   nonlinearsize   ,   residualvolatility   =   residualvolatility   ,   booktoprice   =   booktoprice   ,   )   self   .   winter   .   set _ factors _ df _ wide   (   factors   ,   facs _ dict   )   self   .   winter   .   get _ snow _ fac   ( )   self   .   corr   =   self   .   winter   .   corr   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   Returns   -------   pd . DataFrame   \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   winter   .   snow _ fac   .   copy   ( )   def   show _ corr   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5c55\u793a \u56e0\u5b50 \u4e0e barra \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   -------   pd . DataFrame   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u8868\u683c   \" \" \"   return   self   .   corr   .   applymap   (   lambda   x   :   to _ percent   (   x   ) )   __ call __   ( )   \u00b6   \u83b7\u5f97 \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   Returns   \u00b6   pd . DataFrame   \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3997   3998   3999   4000   4001   4002   4003   4004   4005   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   Returns   -------   pd . DataFrame   \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   winter   .   snow _ fac   .   copy   ( )   __ init __   (   factors   ,   facs _ dict   =   None   ,   momentum   =   1   ,   earningsyield   =   1   ,   growth   =   1   ,   liquidity   =   1   ,   size   =   1   ,   leverage   =   1   ,   beta   =   1   ,   nonlinearsize   =   1   ,   residualvolatility   =   1   ,   booktoprice   =   1   )   \u00b6   \u8ba1\u7b97 \u56e0\u5b50 \u503c \u4e0e 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u4e4b\u95f4 \u7684 \u76f8\u5173 \u76f8\u5173\u6027 \uff0c \u5e76 \u8fdb\u884c \u7eaf\u51c0 \u5316 \uff0c \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50   Parameters   \u00b6   factors   :   pd . DataFrame   \u8981 \u8003\u5bdf \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   facs _ dict   :   Dict ,   optional   \u989d\u5916 \u52a0\u5165 \u7684 \u56e0\u5b50 \uff0c \u540d\u5b57 \u4e3a key \uff0c \u56e0\u5b50 \u77e9\u9635 \u4e3a value \uff0c \u5f62 \u5982   { ' \u53cd\u8f6c ' :   ret20 ,   ' \u6362\u624b ' :   tr20 }   ,   by   default   None   momentum   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u52a8\u91cf \u56e0\u5b50 ,   by   default   1   earningsyield   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u76c8\u5229 \u56e0\u5b50 ,   by   default   1   growth   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6210\u957f \u56e0\u5b50 ,   by   default   1   liquidity   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6d41\u52a8 \u6d41\u52a8\u6027 \u56e0\u5b50 ,   by   default   1   size   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u89c4\u6a21 \u56e0\u5b50 ,   by   default   1   leverage   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6760\u6746 \u56e0\u5b50 ,   by   default   1   beta   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d1d\u5854 \u56e0\u5b50 ,   by   default   1   nonlinearsize   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \u56e0\u5b50 ,   by   default   1   residualvolatility   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6b8b\u5dee \u6ce2\u52a8 \u7387 \u56e0\u5b50 ,   by   default   1   booktoprice   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d26\u9762 \u5e02\u503c \u6bd4 \u56e0\u5b50 ,   by   default   1   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3937   3938   3939   3940   3941   3942   3943   3944   3945   3946   3947   3948   3949   3950   3951   3952   3953   3954   3955   3956   3957   3958   3959   3960   3961   3962   3963   3964   3965   3966   3967   3968   3969   3970   3971   3972   3973   3974   3975   3976   3977   3978   3979   3980   3981   3982   3983   3984   3985   3986   3987   3988   3989   3990   3991   3992   3993   3994   3995   def   __ init __   (   self   ,   factors   :   pd   .   DataFrame   ,   facs _ dict   :   Dict   =   None   ,   momentum   :   bool   =   1   ,   earningsyield   :   bool   =   1   ,   growth   :   bool   =   1   ,   liquidity   :   bool   =   1   ,   size   :   bool   =   1   ,   leverage   :   bool   =   1   ,   beta   :   bool   =   1   ,   nonlinearsize   :   bool   =   1   ,   residualvolatility   :   bool   =   1   ,   booktoprice   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u8ba1\u7b97 \u56e0\u5b50 \u503c \u4e0e 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u4e4b\u95f4 \u7684 \u76f8\u5173 \u76f8\u5173\u6027 \uff0c \u5e76 \u8fdb\u884c \u7eaf\u51c0 \u5316 \uff0c \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50   Parameters   ----------   factors   :   pd . DataFrame   \u8981 \u8003\u5bdf \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   facs _ dict   :   Dict ,   optional   \u989d\u5916 \u52a0\u5165 \u7684 \u56e0\u5b50 \uff0c \u540d\u5b57 \u4e3a key \uff0c \u56e0\u5b50 \u77e9\u9635 \u4e3a value \uff0c \u5f62 \u5982 ` { ' \u53cd\u8f6c ' :   ret20 ,   ' \u6362\u624b ' :   tr20 } ` ,   by   default   None   momentum   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u52a8\u91cf \u56e0\u5b50 ,   by   default   1   earningsyield   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u76c8\u5229 \u56e0\u5b50 ,   by   default   1   growth   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6210\u957f \u56e0\u5b50 ,   by   default   1   liquidity   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6d41\u52a8 \u6d41\u52a8\u6027 \u56e0\u5b50 ,   by   default   1   size   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u89c4\u6a21 \u56e0\u5b50 ,   by   default   1   leverage   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6760\u6746 \u56e0\u5b50 ,   by   default   1   beta   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d1d\u5854 \u56e0\u5b50 ,   by   default   1   nonlinearsize   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \u56e0\u5b50 ,   by   default   1   residualvolatility   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6b8b\u5dee \u6ce2\u52a8 \u7387 \u56e0\u5b50 ,   by   default   1   booktoprice   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d26\u9762 \u5e02\u503c \u6bd4 \u56e0\u5b50 ,   by   default   1   \" \" \"   self   .   winter   =   pure _ coldwinter   (   momentum   =   momentum   ,   earningsyield   =   earningsyield   ,   growth   =   growth   ,   liquidity   =   liquidity   ,   size   =   size   ,   leverage   =   leverage   ,   beta   =   beta   ,   nonlinearsize   =   nonlinearsize   ,   residualvolatility   =   residualvolatility   ,   booktoprice   =   booktoprice   ,   )   self   .   winter   .   set _ factors _ df _ wide   (   factors   ,   facs _ dict   )   self   .   winter   .   get _ snow _ fac   ( )   self   .   corr   =   self   .   winter   .   corr   show _ corr   ( )   \u00b6   \u5c55\u793a \u56e0\u5b50 \u4e0e barra \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   \u00b6   pd . DataFrame   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4007   4008   4009   4010   4011   4012   4013   4014   4015   def   show _ corr   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5c55\u793a \u56e0\u5b50 \u4e0e barra \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   -------   pd . DataFrame   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u8868\u683c   \" \" \"   return   self   .   corr   .   applymap   (   lambda   x   :   to _ percent   (   x   ) )   pure _ star   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5373   5374   5375   5376   5377   5378   5379   5380   5381   5382   5383   5384   5385   5386   5387   5388   5389   5390   5391   5392   5393   5394   5395   5396   5397   5398   5399   5400   5401   5402   5403   5404   5405   5406   5407   5408   5409   5410   5411   5412   5413   5414   5415   5416   5417   5418   5419   5420   5421   5422   5423   5424   5425   5426   5427   5428   5429   5430   5431   5432   5433   5434   5435   5436   5437   5438   5439   5440   5441   5442   5443   5444   5445   5446   5447   5448   5449   5450   5451   5452   5453   5454   5455   5456   5457   5458   5459   5460   5461   5462   5463   5464   5465   5466   5467   5468   5469   5470   5471   5472   5473   5474   5475   5476   5477   5478   5479   5480   5481   5482   5483   5484   5485   5486   5487   5488   5489   5490   5491   5492   5493   5494   5495   5496   5497   5498   5499   5500   5501   5502   5503   5504   5505   5506   5507   5508   5509   5510   5511   5512   5513   5514   5515   5516   5517   5518   5519   5520   5521   5522   5523   5524   5525   5526   5527   5528   5529   5530   5531   @ do _ on _ dfs   class   pure _ star   (   object   ) :   def   __ init __   (   self   ,   fac   :   pd   .   Series   ,   code   :   str   =   None   ,   price _ opens   :   pd   .   Series   =   None   ,   iplot   :   bool   =   1   ,   comments _ writer   :   pd   .   ExcelWriter   =   None   ,   net _ values _ writer   :   pd   .   ExcelWriter   =   None   ,   sheetname   :   str   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ) :   \" \" \" \u62e9\u65f6 \u56de\u6d4b \u6846\u67b6 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u6216 \u4fe1\u53f7 \u503c \uff0c \u4f9d\u636e \u4fe1\u53f7 \u4e70\u5165 \u5bf9\u5e94 \u7684 \u80a1\u7968 \u6216 \u6307\u6570 \uff0c \u5e76 \u8003\u5bdf \u7edd\u5bf9 \u6536\u76ca \u3001 \u8d85\u989d \u6536\u76ca \u548c \u57fa\u51c6 \u6536\u76ca   \u56de\u6d4b \u65b9\u5f0f \u4e3a \uff0c t \u65e5 \u6536\u76d8 \u65f6 \u83b7\u5f97 \u4fe1\u53f7 \uff0c t + 1 \u65e5 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u4e70\u5165 \uff0c t + 2 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5356\u51fa   Parameters   ----------   fac   :   pd . Series   \u4ed3\u4f4d \u6bd4\u4f8b \u5e8f\u5217 \uff0c \u6216 \u4fe1\u53f7 \u5e8f\u5217 \uff0c \u8f93\u5165 \u4fe1\u53f7 \u5e8f\u5217 \u65f6\u5373 \u4e3a 0 \u548c 1 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u65f6 \uff0c \u5c06 \u6bcf \u4e00\u671f \u7684 \u6536\u76ca \u6309\u7167 \u5bf9\u5e94 \u6bd4\u4f8b \u7f29\u5c0f   code   :   str ,   optional   \u56de\u6d4b \u7684 \u8d44\u4ea7 \u4ee3\u7801 \uff0c \u53ef\u4ee5 \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u6216 \u57fa\u91d1 \u4ee3\u7801 ,   by   default   None   price _ opens   :   pd . Series ,   optional   \u8d44\u4ea7 \u7684 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5e8f\u5217 ,   by   default   None   iplot   :   bool ,   optional   \u4f7f\u7528 cufflinks \u5448\u73b0 \u56de\u6d4b \u7ee9\u6548 \u548c \u8d70\u52bf \u8d70\u52bf\u56fe ,   by   default   1   comments _ writer   :   pd . ExcelWriter ,   optional   \u7ee9\u6548 \u8bc4\u4ef7 \u7ee9\u6548\u8bc4\u4ef7 \u7684 \u5b58\u50a8 \u6587\u4ef6 ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u51c0\u503c \u5e8f\u5217 \u7684 \u5b58\u50a8 \u6587\u4ef6 ,   by   default   None   sheetname   :   str ,   optional   \u5b58\u50a8 \u6587\u4ef6 \u7684 \u5de5\u4f5c \u8868 \u7684 \u540d\u5b57 ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   \" \" \"   if   code   is   not   None   :   x1   =   code   .   split   (   \" . \"   ) [   0   ]   x2   =   code   .   split   (   \" . \"   ) [   1   ]   if   (   x1   [   0   ]   = =   \" 0 \"   or   x1   [ :   2   ]   = =   \" 30 \"   )   and   x2   = =   \" SZ \"   :   kind   =   \" stock \"   elif   x1   [   0   ]   = =   \" 6 \"   and   x2   = =   \" SH \"   :   kind   =   \" stock \"   else   :   kind   =   \" index \"   self   .   kind   =   kind   if   kind   = =   \" index \"   :   qdb   =   Questdb   (   host   =   questdb _ host   )   price _ opens   =   qdb   .   get _ data   (   f   \" select   date , num , close   from   minute _ data _   {   kind   }   where   code = '   {   code   }   ' \"   )   price _ opens   =   price _ opens   [   price _ opens   .   num   = =   \" 1 \"   ]   price _ opens   =   price _ opens   .   set _ index   (   \" date \"   )   .   close   price _ opens   .   index   =   pd   .   to _ datetime   (   price _ opens   .   index   ,   format   =   \" % Y% m   % d   \"   )   else   :   price _ opens   =   read _ daily   (   open   =   1   ) [   code   ]   price _ opens   =   price _ opens   [   price _ opens   .   index   > =   fac   .   index   .   min   ( ) ]   self   .   price _ opens   =   price _ opens   self   .   price _ rets   =   price _ opens   .   pct _ change   ( )   self   .   fac   =   fac   self   .   fac _ rets   =   (   self   .   fac   .   shift   (   2   )   *   self   .   price _ rets   )   .   dropna   ( )   self   .   ab _ rets   =   (   self   .   fac _ rets   -   self   .   price _ rets   )   .   dropna   ( )   self   .   price _ rets   =   self   .   price _ rets   .   dropna   ( )   self   .   fac _ nets   =   (   1   +   self   .   fac _ rets   )   .   cumprod   ( )   self   .   ab _ nets   =   (   1   +   self   .   ab _ rets   )   .   cumprod   ( )   self   .   price _ nets   =   (   1   +   self   .   price _ rets   )   .   cumprod   ( )   self   .   fac _ nets   =   self   .   fac _ nets   /   self   .   fac _ nets   .   iloc   [   0   ]   self   .   ab _ nets   =   self   .   ab _ nets   /   self   .   ab _ nets   .   iloc   [   0   ]   self   .   price _ nets   =   self   .   price _ nets   /   self   .   price _ nets   .   iloc   [   0   ]   self   .   fac _ comments   =   comments _ on _ twins   (   self   .   fac _ nets   ,   self   .   fac _ rets   )   self   .   ab _ comments   =   comments _ on _ twins   (   self   .   ab _ nets   ,   self   .   ab _ rets   )   self   .   price _ comments   =   comments _ on _ twins   (   self   .   price _ nets   ,   self   .   price _ rets   )   self   .   total _ comments   =   pd   .   concat   (   [   self   .   fac _ comments   ,   self   .   ab _ comments   ,   self   .   price _ comments   ] ,   axis   =   1   )   self   .   total _ nets   =   pd   .   concat   (   [   self   .   fac _ nets   ,   self   .   ab _ nets   ,   self   .   price _ nets   ] ,   axis   =   1   )   self   .   total _ rets   =   pd   .   concat   (   [   self   .   fac _ rets   ,   self   .   ab _ rets   ,   self   .   price _ rets   ] ,   axis   =   1   )   self   .   total _ comments   .   columns   =   (   self   .   total _ nets   .   columns   )   =   self   .   total _ rets   .   columns   =   [   \" \u56e0\u5b50 \u7edd\u5bf9 \"   ,   \" \u56e0\u5b50 \u8d85\u989d \"   ,   \" \u4e70\u5165 \u6301\u6709 \"   ]   self   .   total _ comments   =   np   .   around   (   self   .   total _ comments   ,   3   )   self   .   iplot   =   iplot   self   .   plot   ( )   if   comments _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   comments _ writer   =   COMMENTS _ WRITER   self   .   total _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   if   net _ values _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   NET _ VALUES _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   self   .   total _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   sheetname   )   def   plot   (   self   ) :   coms   =   self   .   total _ comments   .   copy   ( )   .   reset _ index   ( )   if   self   .   iplot   :   figs   =   cf   .   figures   (   self   .   total _ nets   ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   total _ nets   .   columns   ) ) ] ,   asList   =   True   ,   )   coms   =   coms   .   rename   (   columns   =   {   list   (   coms   ) [   0   ] :   \" \u7ee9\u6548 \u6307\u6807 \"   } )   table   =   FF   .   create _ table   (   coms   .   iloc   [ : :   -   1   ] )   table   .   update _ yaxes   (   matches   =   None   )   figs   .   append   (   table   )   figs   =   [   figs   [   -   1   ] ]   +   figs   [ :   -   1   ]   figs   [   1   ]   .   update _ layout   (   legend   =   dict   (   yanchor   =   \" top \"   ,   y   =   0.99   ,   xanchor   =   \" left \"   ,   x   =   0.01   )   )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   2   ,   10   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   specs   =   [   [   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   3   } ,   None   ,   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   6   } ,   None   ,   None   ,   None   ,   None   ,   None   ,   ] ,   [   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   ] ,   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   True   )   cf   .   iplot   (   sp   )   else   :   self   .   total _ nets   .   plot   ( )   plt   .   show   ( )   tb   =   Texttable   ( )   tb   .   set _ cols _ width   ( [   8   ]   +   [   7   ]   +   [   8   ]   *   2   +   [   7   ]   *   2   +   [   8   ] )   tb   .   set _ cols _ dtype   ( [   \" f \"   ]   *   7   )   tb   .   header   (   list   (   coms   .   T   .   reset _ index   ( )   .   columns   ) )   tb   .   add _ rows   (   coms   .   T   .   reset _ index   ( )   .   to _ numpy   ( ) ,   header   =   True   )   print   (   tb   .   draw   ( ) )   __ init __   (   fac   ,   code   =   None   ,   price _ opens   =   None   ,   iplot   =   1   ,   comments _ writer   =   None   ,   net _ values _ writer   =   None   ,   sheetname   =   None   ,   questdb _ host   =   ' 127.0 . 0.1 '   )   \u00b6   \u62e9\u65f6 \u56de\u6d4b \u6846\u67b6 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u6216 \u4fe1\u53f7 \u503c \uff0c \u4f9d\u636e \u4fe1\u53f7 \u4e70\u5165 \u5bf9\u5e94 \u7684 \u80a1\u7968 \u6216 \u6307\u6570 \uff0c \u5e76 \u8003\u5bdf \u7edd\u5bf9 \u6536\u76ca \u3001 \u8d85\u989d \u6536\u76ca \u548c \u57fa\u51c6 \u6536\u76ca   \u56de\u6d4b \u65b9\u5f0f \u4e3a \uff0c t \u65e5 \u6536\u76d8 \u65f6 \u83b7\u5f97 \u4fe1\u53f7 \uff0c t + 1 \u65e5 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u4e70\u5165 \uff0c t + 2 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5356\u51fa   Parameters   \u00b6   fac   :   pd . Series   \u4ed3\u4f4d \u6bd4\u4f8b \u5e8f\u5217 \uff0c \u6216 \u4fe1\u53f7 \u5e8f\u5217 \uff0c \u8f93\u5165 \u4fe1\u53f7 \u5e8f\u5217 \u65f6\u5373 \u4e3a 0 \u548c 1 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u65f6 \uff0c \u5c06 \u6bcf \u4e00\u671f \u7684 \u6536\u76ca \u6309\u7167 \u5bf9\u5e94 \u6bd4\u4f8b \u7f29\u5c0f   code   :   str ,   optional   \u56de\u6d4b \u7684 \u8d44\u4ea7 \u4ee3\u7801 \uff0c \u53ef\u4ee5 \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u6216 \u57fa\u91d1 \u4ee3\u7801 ,   by   default   None   price _ opens   :   pd . Series ,   optional   \u8d44\u4ea7 \u7684 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5e8f\u5217 ,   by   default   None   iplot   :   bool ,   optional   \u4f7f\u7528 cufflinks \u5448\u73b0 \u56de\u6d4b \u7ee9\u6548 \u548c \u8d70\u52bf \u8d70\u52bf\u56fe ,   by   default   1   comments _ writer   :   pd . ExcelWriter ,   optional   \u7ee9\u6548 \u8bc4\u4ef7 \u7ee9\u6548\u8bc4\u4ef7 \u7684 \u5b58\u50a8 \u6587\u4ef6 ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u51c0\u503c \u5e8f\u5217 \u7684 \u5b58\u50a8 \u6587\u4ef6 ,   by   default   None   sheetname   :   str ,   optional   \u5b58\u50a8 \u6587\u4ef6 \u7684 \u5de5\u4f5c \u8868 \u7684 \u540d\u5b57 ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5375   5376   5377   5378   5379   5380   5381   5382   5383   5384   5385   5386   5387   5388   5389   5390   5391   5392   5393   5394   5395   5396   5397   5398   5399   5400   5401   5402   5403   5404   5405   5406   5407   5408   5409   5410   5411   5412   5413   5414   5415   5416   5417   5418   5419   5420   5421   5422   5423   5424   5425   5426   5427   5428   5429   5430   5431   5432   5433   5434   5435   5436   5437   5438   5439   5440   5441   5442   5443   5444   5445   5446   5447   5448   5449   5450   5451   5452   5453   5454   5455   5456   5457   5458   5459   5460   5461   5462   5463   5464   5465   5466   5467   5468   def   __ init __   (   self   ,   fac   :   pd   .   Series   ,   code   :   str   =   None   ,   price _ opens   :   pd   .   Series   =   None   ,   iplot   :   bool   =   1   ,   comments _ writer   :   pd   .   ExcelWriter   =   None   ,   net _ values _ writer   :   pd   .   ExcelWriter   =   None   ,   sheetname   :   str   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ) :   \" \" \" \u62e9\u65f6 \u56de\u6d4b \u6846\u67b6 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u6216 \u4fe1\u53f7 \u503c \uff0c \u4f9d\u636e \u4fe1\u53f7 \u4e70\u5165 \u5bf9\u5e94 \u7684 \u80a1\u7968 \u6216 \u6307\u6570 \uff0c \u5e76 \u8003\u5bdf \u7edd\u5bf9 \u6536\u76ca \u3001 \u8d85\u989d \u6536\u76ca \u548c \u57fa\u51c6 \u6536\u76ca   \u56de\u6d4b \u65b9\u5f0f \u4e3a \uff0c t \u65e5 \u6536\u76d8 \u65f6 \u83b7\u5f97 \u4fe1\u53f7 \uff0c t + 1 \u65e5 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u4e70\u5165 \uff0c t + 2 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5356\u51fa   Parameters   ----------   fac   :   pd . Series   \u4ed3\u4f4d \u6bd4\u4f8b \u5e8f\u5217 \uff0c \u6216 \u4fe1\u53f7 \u5e8f\u5217 \uff0c \u8f93\u5165 \u4fe1\u53f7 \u5e8f\u5217 \u65f6\u5373 \u4e3a 0 \u548c 1 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u65f6 \uff0c \u5c06 \u6bcf \u4e00\u671f \u7684 \u6536\u76ca \u6309\u7167 \u5bf9\u5e94 \u6bd4\u4f8b \u7f29\u5c0f   code   :   str ,   optional   \u56de\u6d4b \u7684 \u8d44\u4ea7 \u4ee3\u7801 \uff0c \u53ef\u4ee5 \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u6216 \u57fa\u91d1 \u4ee3\u7801 ,   by   default   None   price _ opens   :   pd . Series ,   optional   \u8d44\u4ea7 \u7684 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5e8f\u5217 ,   by   default   None   iplot   :   bool ,   optional   \u4f7f\u7528 cufflinks \u5448\u73b0 \u56de\u6d4b \u7ee9\u6548 \u548c \u8d70\u52bf \u8d70\u52bf\u56fe ,   by   default   1   comments _ writer   :   pd . ExcelWriter ,   optional   \u7ee9\u6548 \u8bc4\u4ef7 \u7ee9\u6548\u8bc4\u4ef7 \u7684 \u5b58\u50a8 \u6587\u4ef6 ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u51c0\u503c \u5e8f\u5217 \u7684 \u5b58\u50a8 \u6587\u4ef6 ,   by   default   None   sheetname   :   str ,   optional   \u5b58\u50a8 \u6587\u4ef6 \u7684 \u5de5\u4f5c \u8868 \u7684 \u540d\u5b57 ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   \" \" \"   if   code   is   not   None   :   x1   =   code   .   split   (   \" . \"   ) [   0   ]   x2   =   code   .   split   (   \" . \"   ) [   1   ]   if   (   x1   [   0   ]   = =   \" 0 \"   or   x1   [ :   2   ]   = =   \" 30 \"   )   and   x2   = =   \" SZ \"   :   kind   =   \" stock \"   elif   x1   [   0   ]   = =   \" 6 \"   and   x2   = =   \" SH \"   :   kind   =   \" stock \"   else   :   kind   =   \" index \"   self   .   kind   =   kind   if   kind   = =   \" index \"   :   qdb   =   Questdb   (   host   =   questdb _ host   )   price _ opens   =   qdb   .   get _ data   (   f   \" select   date , num , close   from   minute _ data _   {   kind   }   where   code = '   {   code   }   ' \"   )   price _ opens   =   price _ opens   [   price _ opens   .   num   = =   \" 1 \"   ]   price _ opens   =   price _ opens   .   set _ index   (   \" date \"   )   .   close   price _ opens   .   index   =   pd   .   to _ datetime   (   price _ opens   .   index   ,   format   =   \" % Y% m   % d   \"   )   else   :   price _ opens   =   read _ daily   (   open   =   1   ) [   code   ]   price _ opens   =   price _ opens   [   price _ opens   .   index   > =   fac   .   index   .   min   ( ) ]   self   .   price _ opens   =   price _ opens   self   .   price _ rets   =   price _ opens   .   pct _ change   ( )   self   .   fac   =   fac   self   .   fac _ rets   =   (   self   .   fac   .   shift   (   2   )   *   self   .   price _ rets   )   .   dropna   ( )   self   .   ab _ rets   =   (   self   .   fac _ rets   -   self   .   price _ rets   )   .   dropna   ( )   self   .   price _ rets   =   self   .   price _ rets   .   dropna   ( )   self   .   fac _ nets   =   (   1   +   self   .   fac _ rets   )   .   cumprod   ( )   self   .   ab _ nets   =   (   1   +   self   .   ab _ rets   )   .   cumprod   ( )   self   .   price _ nets   =   (   1   +   self   .   price _ rets   )   .   cumprod   ( )   self   .   fac _ nets   =   self   .   fac _ nets   /   self   .   fac _ nets   .   iloc   [   0   ]   self   .   ab _ nets   =   self   .   ab _ nets   /   self   .   ab _ nets   .   iloc   [   0   ]   self   .   price _ nets   =   self   .   price _ nets   /   self   .   price _ nets   .   iloc   [   0   ]   self   .   fac _ comments   =   comments _ on _ twins   (   self   .   fac _ nets   ,   self   .   fac _ rets   )   self   .   ab _ comments   =   comments _ on _ twins   (   self   .   ab _ nets   ,   self   .   ab _ rets   )   self   .   price _ comments   =   comments _ on _ twins   (   self   .   price _ nets   ,   self   .   price _ rets   )   self   .   total _ comments   =   pd   .   concat   (   [   self   .   fac _ comments   ,   self   .   ab _ comments   ,   self   .   price _ comments   ] ,   axis   =   1   )   self   .   total _ nets   =   pd   .   concat   (   [   self   .   fac _ nets   ,   self   .   ab _ nets   ,   self   .   price _ nets   ] ,   axis   =   1   )   self   .   total _ rets   =   pd   .   concat   (   [   self   .   fac _ rets   ,   self   .   ab _ rets   ,   self   .   price _ rets   ] ,   axis   =   1   )   self   .   total _ comments   .   columns   =   (   self   .   total _ nets   .   columns   )   =   self   .   total _ rets   .   columns   =   [   \" \u56e0\u5b50 \u7edd\u5bf9 \"   ,   \" \u56e0\u5b50 \u8d85\u989d \"   ,   \" \u4e70\u5165 \u6301\u6709 \"   ]   self   .   total _ comments   =   np   .   around   (   self   .   total _ comments   ,   3   )   self   .   iplot   =   iplot   self   .   plot   ( )   if   comments _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   comments _ writer   =   COMMENTS _ WRITER   self   .   total _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   if   net _ values _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   NET _ VALUES _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   self   .   total _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   sheetname   )   add _ cross _ standardlize   (   *   args   )   \u00b6   \u5c06 \u4f17\u591a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u505a z - score \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u76f8\u52a0   Returns   \u00b6   pd . DataFrame   \u5408\u6210 \u540e \u7684 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   907   908   909   910   911   912   913   914   915   916   917   918   919   920   @ do _ on _ dfs   def   add _ cross _ standardlize   (   *   args   :   list   )   - >   pd   .   DataFrame   :   \" \" \" \u5c06 \u4f17\u591a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u505a z - score \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u76f8\u52a0   Returns   -------   ` pd . DataFrame `   \u5408\u6210 \u540e \u7684 \u56e0\u5b50   \" \" \"   fms   =   [   pure _ fallmount   (   i   )   for   i   in   args   ]   one   =   fms   [   0   ]   others   =   fms   [   1   : ]   final   =   one   +   others   return   final   ( )   boom _ four   (   df   ,   backsee   =   20   ,   daily   =   0   ,   min _ periods   =   None   )   \u00b6   \u751f\u6210 20 \u5929 \u5747\u503c \uff0c 20 \u5929 \u6807\u51c6 \u6807\u51c6\u5dee \uff0c \u53ca \u4e8c\u8005 \u6b63\u5411 z - score \u5408\u6210 \uff0c \u6b63\u5411 \u6392\u5e8f \u5408\u6210 \uff0c \u8d1f\u5411 z - score \u5408\u6210 \uff0c \u8d1f \u5411 \u6392\u5e8f \u5408\u6210 \u8fd9 6 \u4e2a \u56e0\u5b50   Parameters   \u00b6   df   :   pd . DataFrame   \u539f\u65e5\u9891 \u56e0\u5b50   backsee   :   int ,   optional   \u56de\u770b \u5929\u6570 ,   by   default   20   daily   :   bool ,   optional   \u4e3a 1 \u662f \u6bcf\u5929 \u90fd \u6eda\u52a8 \uff0c \u4e3a 0 \u5219 \u4ec5 \u4fdd\u7559 \u6708\u5e95 \u503c ,   by   default   0   min _ periods   :   int ,   optional   rolling \u65f6 \u7684 \u6700\u5c0f \u671f ,   by   default   backsee \u7684 \u4e00\u534a   Returns   \u00b6   Tuple [ pd . DataFrame ]   6 \u4e2a \u56e0\u5b50 \u7684 \u5143\u7ec4   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   837   838   839   840   841   842   843   844   845   846   847   848   849   850   851   852   853   854   855   856   857   858   859   860   861   862   863   864   865   866   867   868   869   870   871   872   873   874   875   876   877   @ do _ on _ dfs   def   boom _ four   (   df   :   pd   .   DataFrame   ,   backsee   :   int   =   20   ,   daily   :   bool   =   0   ,   min _ periods   :   int   =   None   )   - >   Tuple   [   pd   .   DataFrame   ] :   \" \" \" \u751f\u6210 20 \u5929 \u5747\u503c \uff0c 20 \u5929 \u6807\u51c6 \u6807\u51c6\u5dee \uff0c \u53ca \u4e8c\u8005 \u6b63\u5411 z - score \u5408\u6210 \uff0c \u6b63\u5411 \u6392\u5e8f \u5408\u6210 \uff0c \u8d1f\u5411 z - score \u5408\u6210 \uff0c \u8d1f \u5411 \u6392\u5e8f \u5408\u6210 \u8fd9 6 \u4e2a \u56e0\u5b50   Parameters   ----------   df   :   pd . DataFrame   \u539f\u65e5\u9891 \u56e0\u5b50   backsee   :   int ,   optional   \u56de\u770b \u5929\u6570 ,   by   default   20   daily   :   bool ,   optional   \u4e3a 1 \u662f \u6bcf\u5929 \u90fd \u6eda\u52a8 \uff0c \u4e3a 0 \u5219 \u4ec5 \u4fdd\u7559 \u6708\u5e95 \u503c ,   by   default   0   min _ periods   :   int ,   optional   rolling \u65f6 \u7684 \u6700\u5c0f \u671f ,   by   default   backsee \u7684 \u4e00\u534a   Returns   -------   ` Tuple [ pd . DataFrame ] `   6 \u4e2a \u56e0\u5b50 \u7684 \u5143\u7ec4   \" \" \"   if   min _ periods   is   None   :   min _ periods   =   int   (   backsee   *   0.5   )   if   not   daily   :   df _ mean   =   (   df   .   rolling   (   backsee   ,   min _ periods   =   min _ periods   )   .   mean   ( )   .   resample   (   \" M \"   )   .   last   ( )   )   df _ std   =   df   .   rolling   (   backsee   ,   min _ periods   =   min _ periods   )   .   std   ( )   .   resample   (   \" M \"   )   .   last   ( )   twins _ add   =   (   pure _ fallmount   (   df _ mean   )   +   (   pure _ fallmount   (   df _ std   ) , ) ) ( )   rtwins _ add   =   df _ mean   .   rank   (   axis   =   1   )   +   df _ std   .   rank   (   axis   =   1   )   twins _ minus   =   (   pure _ fallmount   (   df _ mean   )   +   (   pure _ fallmount   (   -   df _ std   ) , ) ) ( )   rtwins _ minus   =   df _ mean   .   rank   (   axis   =   1   )   -   df _ std   .   rank   (   axis   =   1   )   else   :   df _ mean   =   df   .   rolling   (   backsee   ,   min _ periods   =   min _ periods   )   .   mean   ( )   df _ std   =   df   .   rolling   (   backsee   ,   min _ periods   =   min _ periods   )   .   std   ( )   twins _ add   =   (   pure _ fallmount   (   df _ mean   )   +   (   pure _ fallmount   (   df _ std   ) , ) ) ( )   rtwins _ add   =   df _ mean   .   rank   (   axis   =   1   )   +   df _ std   .   rank   (   axis   =   1   )   twins _ minus   =   (   pure _ fallmount   (   df _ mean   )   +   (   pure _ fallmount   (   -   df _ std   ) , ) ) ( )   rtwins _ minus   =   df _ mean   .   rank   (   axis   =   1   )   -   df _ std   .   rank   (   axis   =   1   )   return   df _ mean   ,   df _ std   ,   twins _ add   ,   rtwins _ add   ,   twins _ minus   ,   rtwins _ minus   boom _ fours   (   dfs   ,   backsee   =   20   ,   daily   =   0   ,   min _ periods   =   None   )   \u00b6   \u5bf9 \u591a\u4e2a \u56e0\u5b50 \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u90fd \u8fdb\u884c boom _ four \u7684 \u64cd\u4f5c   Parameters   \u00b6   dfs   :   List [ pd . DataFrame ]   \u591a\u4e2a \u56e0\u5b50 \u7684 dataframe \u7ec4\u6210 \u7684 list   backsee   :   Union [ int , List [ int ] ] ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u56de\u770b \u671f\u6570 ,   by   default   20   daily   :   Union [ bool , List [ bool ] ] ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u662f\u5426 \u9010\u65e5 \u8ba1\u7b97 ,   by   default   0   min _ periods   :   Union [ int , List [ int ] ] ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u8ba1\u7b97 \u7684 \u6700\u5c0f \u671f ,   by   default   None   Returns   \u00b6   List [ List [ pd . DataFrame ] ]   \u6bcf\u4e2a \u56e0\u5b50 \u8fdb\u884c boom _ four \u540e \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   880   881   882   883   884   885   886   887   888   889   890   891   892   893   894   895   896   897   898   899   900   901   902   903   904   def   boom _ fours   (   dfs   :   List   [   pd   .   DataFrame   ] ,   backsee   :   Union   [   int   ,   List   [   int   ] ]   =   20   ,   daily   :   Union   [   bool   ,   List   [   bool   ] ]   =   0   ,   min _ periods   :   Union   [   int   ,   List   [   int   ] ]   =   None   ,   )   - >   List   [   List   [   pd   .   DataFrame   ] ] :   \" \" \" \u5bf9 \u591a\u4e2a \u56e0\u5b50 \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u90fd \u8fdb\u884c boom _ four \u7684 \u64cd\u4f5c   Parameters   ----------   dfs   :   List [ pd . DataFrame ]   \u591a\u4e2a \u56e0\u5b50 \u7684 dataframe \u7ec4\u6210 \u7684 list   backsee   :   Union [ int , List [ int ] ] ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u56de\u770b \u671f\u6570 ,   by   default   20   daily   :   Union [ bool , List [ bool ] ] ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u662f\u5426 \u9010\u65e5 \u8ba1\u7b97 ,   by   default   0   min _ periods   :   Union [ int , List [ int ] ] ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u8ba1\u7b97 \u7684 \u6700\u5c0f \u671f ,   by   default   None   Returns   -------   List [ List [ pd . DataFrame ] ]   \u6bcf\u4e2a \u56e0\u5b50 \u8fdb\u884c boom _ four \u540e \u7684 \u7ed3\u679c   \" \" \"   return   boom _ four   (   df   =   dfs   ,   backsee   =   backsee   ,   daily   =   daily   ,   min _ periods   =   min _ periods   )   daily _ factor _ on300500   (   fac   ,   hs300   =   0   ,   zz500   =   0   ,   zz1000   =   0   ,   gz2000   =   0   ,   other   =   0   )   \u00b6   \u8f93\u5165 \u65e5\u9891 \u6216 \u6708 \u9891 \u56e0\u5b50 \u503c \uff0c \u5c06 \u5176 \u9650\u5b9a \u5728 \u67d0 \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u80a1\u7968 \u6c60\u5185 \uff0c   \u76ee\u524d \u4ec5 \u652f\u6301 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u3001 \u56fd\u8bc1 2000 \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4ee5\u53ca \u8fd9 \u56db\u79cd \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u7ec4\u5408 \u53e0\u52a0 \uff0c \u548c \u9664 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4ee5\u5916 \u7684 \u80a1\u7968 \u7684 \u6210\u5206 \u6210\u5206\u80a1   Parameters   \u00b6   fac   :   pd . DataFrame   \u672a \u9650\u5b9a \u80a1\u7968 \u6c60 \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   hs300   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u6caa \u6df1 300 ,   by   default   0   zz500   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u4e2d\u8bc1 500 ,   by   default   0   zz1000   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u4e2d\u8bc1 1000 ,   by   default   0   gz2000   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u56fd\u8bc1 2000 ,   by   default   0   other   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u9664 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4ee5\u5916 \u7684 \u80a1\u7968 \u7684 \u6210\u5206 \u6210\u5206\u80a1 ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u4ec5 \u5305\u542b \u6210\u5206 \u6210\u5206\u80a1 \u540e \u7684 \u56e0\u5b50 \u503c \uff0c \u975e \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u56e0\u5b50 \u503c\u4e3a \u7a7a   Raises   \u00b6   ValueError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u4efb\u4f55 \u4e00\u79cd \u6307\u6570 \u7684 \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   @ do _ on _ dfs   def   daily _ factor _ on300500   (   fac   :   pd   .   DataFrame   ,   hs300   :   bool   =   0   ,   zz500   :   bool   =   0   ,   zz1000   :   bool   =   0   ,   gz2000   :   bool   =   0   ,   other   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u8f93\u5165 \u65e5\u9891 \u6216 \u6708 \u9891 \u56e0\u5b50 \u503c \uff0c \u5c06 \u5176 \u9650\u5b9a \u5728 \u67d0 \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u80a1\u7968 \u6c60\u5185 \uff0c   \u76ee\u524d \u4ec5 \u652f\u6301 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u3001 \u56fd\u8bc1 2000 \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4ee5\u53ca \u8fd9 \u56db\u79cd \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u7ec4\u5408 \u53e0\u52a0 \uff0c \u548c \u9664 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4ee5\u5916 \u7684 \u80a1\u7968 \u7684 \u6210\u5206 \u6210\u5206\u80a1   Parameters   ----------   fac   :   pd . DataFrame   \u672a \u9650\u5b9a \u80a1\u7968 \u6c60 \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   hs300   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u6caa \u6df1 300 ,   by   default   0   zz500   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u4e2d\u8bc1 500 ,   by   default   0   zz1000   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u4e2d\u8bc1 1000 ,   by   default   0   gz2000   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u56fd\u8bc1 2000 ,   by   default   0   other   :   bool ,   optional   \u9650\u5b9a \u80a1\u7968 \u6c60\u4e3a \u9664 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4ee5\u5916 \u7684 \u80a1\u7968 \u7684 \u6210\u5206 \u6210\u5206\u80a1 ,   by   default   0   Returns   -------   ` pd . DataFrame `   \u4ec5 \u5305\u542b \u6210\u5206 \u6210\u5206\u80a1 \u540e \u7684 \u56e0\u5b50 \u503c \uff0c \u975e \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u56e0\u5b50 \u503c\u4e3a \u7a7a   Raises   ------   ` ValueError `   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u4efb\u4f55 \u4e00\u79cd \u6307\u6570 \u7684 \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u5c06 \u62a5\u9519   \" \" \"   last   =   fac   .   resample   (   \" M \"   )   .   last   ( )   homeplace   =   HomePlace   ( )   dummies   =   [ ]   if   fac   .   shape   [   0   ]   /   last   .   shape   [   0   ]   >   2   :   if   hs300   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u6caa \u6df1 300 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   .   fillna   (   0   )   dummies   .   append   (   df   )   if   zz500   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 500 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   .   fillna   (   0   )   dummies   .   append   (   df   )   if   zz1000   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 1000 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   .   fillna   (   0   )   dummies   .   append   (   df   )   if   gz2000   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u56fd\u8bc1 2000 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   .   fillna   (   0   )   dummies   .   append   (   df   )   if   other   :   tr   =   read _ daily   (   tr   =   1   )   .   fillna   (   0   )   .   replace   (   0   ,   1   )   tr   =   np   .   sign   (   tr   )   df1   =   (   tr   *   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u6caa \u6df1 300 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   )   .   fillna   (   0   )   df2   =   (   tr   *   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 500 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   )   .   fillna   (   0   )   df3   =   (   tr   *   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 1000 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   )   .   fillna   (   0   )   df   =   (   1   -   df1   )   *   (   1   -   df2   )   *   (   1   -   df3   )   *   tr   df   =   df   .   replace   (   0   ,   np   .   nan   )   *   fac   df   =   df   .   dropna   (   how   =   \" all \"   )   if   (   hs300   +   zz500   +   zz1000   +   gz2000   +   other   )   = =   0   :   raise   ValueError   (   \" \u603b\u5f97 \u6307\u5b9a \u4e00\u4e0b \u662f \u54ea\u4e2a \u6210\u5206 \u6210\u5206\u80a1 \u5427 \ud83e\udd12 \"   )   else   :   if   hs300   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u6caa \u6df1 300 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   .   fillna   (   0   )   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   dummies   .   append   (   df   )   if   zz500   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 500 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   .   fillna   (   0   )   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   dummies   .   append   (   df   )   if   zz1000   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 1000 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   .   fillna   (   0   )   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   dummies   .   append   (   df   )   if   gz2000   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u56fd\u8bc1 2000 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   .   fillna   (   0   )   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   dummies   .   append   (   df   )   if   other   :   tr   =   read _ daily   (   tr   =   1   )   .   fillna   (   0   )   .   replace   (   0   ,   1   )   .   resample   (   \" M \"   )   .   last   ( )   tr   =   np   .   sign   (   tr   )   df1   =   (   tr   *   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u6caa \u6df1 300 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   )   .   fillna   (   0   )   df1   =   df1   .   resample   (   \" M \"   )   .   last   ( )   df2   =   (   tr   *   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 500 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   )   .   fillna   (   0   )   df2   =   df2   .   resample   (   \" M \"   )   .   last   ( )   df3   =   (   tr   *   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 1000 \u65e5 \u6210\u5206 \u6210\u5206\u80a1 . parquet \"   )   )   .   fillna   (   0   )   df3   =   df3   .   resample   (   \" M \"   )   .   last   ( )   df   =   (   1   -   df1   )   *   (   1   -   df2   )   *   (   1   -   df3   )   df   =   df   .   replace   (   0   ,   np   .   nan   )   *   fac   df   =   df   .   dropna   (   how   =   \" all \"   )   if   (   hs300   +   zz500   +   zz1000   +   gz2000   +   other   )   = =   0   :   raise   ValueError   (   \" \u603b\u5f97 \u6307\u5b9a \u4e00\u4e0b \u662f \u54ea\u4e2a \u6210\u5206 \u6210\u5206\u80a1 \u5427 \ud83e\udd12 \"   )   if   len   (   dummies   )   >   0   :   dummies   =   sum   (   dummies   )   .   replace   (   0   ,   np   .   nan   )   df   =   (   dummies   *   fac   )   .   dropna   (   how   =   \" all \"   )   return   df   daily _ factor _ on _ industry   (   df   ,   swindustry   =   0   ,   zxindustry   =   0   )   \u00b6   \u5c06 \u4e00\u4e2a \u56e0\u5b50 \u53d8\u4e3a \u4ec5 \u5728 \u67d0\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u7684 \u80a1\u7968   Parameters   \u00b6   df   :   pd . DataFrame   \u5168 \u5e02\u573a \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   swindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   \u00b6   dict   key \u4e3a \u884c\u4e1a \u4ee3\u7801 \uff0c value \u4e3a \u5bf9\u5e94 \u7684 \u884c\u4e1a \u4e0a \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239   240   241   242   243   244   245   246   @ do _ on _ dfs   def   daily _ factor _ on _ industry   (   df   :   pd   .   DataFrame   ,   swindustry   :   bool   =   0   ,   zxindustry   :   bool   =   0   )   - >   dict   :   \" \" \" \u5c06 \u4e00\u4e2a \u56e0\u5b50 \u53d8\u4e3a \u4ec5 \u5728 \u67d0\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u7684 \u80a1\u7968   Parameters   ----------   df   :   pd . DataFrame   \u5168 \u5e02\u573a \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   swindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   -------   dict   key \u4e3a \u884c\u4e1a \u4ee3\u7801 \uff0c value \u4e3a \u5bf9\u5e94 \u7684 \u884c\u4e1a \u4e0a \u7684 \u56e0\u5b50 \u503c   \" \" \"   df1   =   df   .   resample   (   \" M \"   )   .   last   ( )   if   df1   .   shape   [   0   ]   *   2   >   df   .   shape   [   0   ] :   daily   =   0   monthly   =   1   else   :   daily   =   1   monthly   =   0   start   =   int   (   datetime   .   datetime   .   strftime   (   df   .   index   .   min   ( ) ,   \" % Y% m   % d   \"   ) )   ress   =   get _ industry _ dummies   (   daily   =   daily   ,   monthly   =   monthly   ,   start   =   start   ,   swindustry   =   swindustry   ,   zxindustry   =   zxindustry   ,   )   ress   =   {   k   :   v   *   df   for   k   ,   v   in   ress   .   items   ( ) }   return   ress   de _ cross   (   y   ,   xs   )   \u00b6   \u4f7f\u7528 \u82e5\u5e72 \u56e0\u5b50 \u5bf9 \u67d0\u4e2a \u56e0\u5b50 \u8fdb\u884c \u6b63\u4ea4 \u5316 \u5904\u7406   Parameters   \u00b6   y   :   pd . DataFrame   \u7814\u7a76 \u7684 \u76ee\u6807 \uff0c \u56de\u5f52 \u4e2d \u7684 y   xs   :   Union [ List [ pd . DataFrame ] , pd . DataFrame ]   \u7528\u4e8e \u6b63\u4ea4 \u5316 \u7684 \u82e5\u5e72 \u56e0\u5b50 \uff0c \u56de\u5f52 \u4e2d \u7684 x   Returns   \u00b6   pd . DataFrame   \u6b63\u4ea4 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1212   1213   1214   1215   1216   1217   1218   1219   1220   1221   1222   1223   1224   1225   1226   1227   1228   1229   1230   1231   1232   1233   def   de _ cross   (   y   :   pd   .   DataFrame   ,   xs   :   Union   [   List   [   pd   .   DataFrame   ] ,   pd   .   DataFrame   ]   )   - >   pd   .   DataFrame   :   \" \" \" \u4f7f\u7528 \u82e5\u5e72 \u56e0\u5b50 \u5bf9 \u67d0\u4e2a \u56e0\u5b50 \u8fdb\u884c \u6b63\u4ea4 \u5316 \u5904\u7406   Parameters   ----------   y   :   pd . DataFrame   \u7814\u7a76 \u7684 \u76ee\u6807 \uff0c \u56de\u5f52 \u4e2d \u7684 y   xs   :   Union [ List [ pd . DataFrame ] , pd . DataFrame ]   \u7528\u4e8e \u6b63\u4ea4 \u5316 \u7684 \u82e5\u5e72 \u56e0\u5b50 \uff0c \u56de\u5f52 \u4e2d \u7684 x   Returns   -------   pd . DataFrame   \u6b63\u4ea4 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   \" \" \"   if   not   isinstance   (   xs   ,   list   ) :   xs   =   [   xs   ]   y   =   pure _ fallmount   (   y   )   xs   =   [   pure _ fallmount   (   i   )   for   i   in   xs   ]   return   (   y   -   xs   ) ( )   deboth   (   df   )   \u00b6   \u901a\u8fc7 \u56de\u6d4b \u7684 \u65b9\u5f0f \uff0c \u5bf9 \u6708 \u9891 \u56e0\u5b50 \u505a \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Parameters   \u00b6   df   :   pd . DataFrame   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u7684 \u56e0\u5b50   Returns   \u00b6   pd . DataFrame   \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   804   805   806   807   808   809   810   811   812   813   814   815   816   817   818   819   @ do _ on _ dfs   def   deboth   (   df   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u901a\u8fc7 \u56de\u6d4b \u7684 \u65b9\u5f0f \uff0c \u5bf9 \u6708 \u9891 \u56e0\u5b50 \u505a \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Parameters   ----------   df   :   pd . DataFrame   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   \" \" \"   shen   =   pure _ moonnight   (   df   ,   boxcox   =   1   ,   plt _ plot   =   0   ,   print _ comments   =   0   )   return   shen   ( )   decap   (   df   ,   daily   =   0   ,   monthly   =   0   )   \u00b6   \u5bf9 \u56e0\u5b50 \u505a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Parameters   \u00b6   df   :   pd . DataFrame   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u7684 \u56e0\u5b50 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   daily   :   bool ,   optional   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u56e0\u5b50 \u662f \u65e5\u9891 \u7684 \u5219 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 ,   by   default   0   monthly   :   bool ,   optional   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u56e0\u5b50 \u662f \u6708 \u9891 \u7684 \u5219 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   Raises   \u00b6   NotImplementedError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u65e5\u9891 \u6216 \u6708 \u9891 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   @ do _ on _ dfs   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u505a \u5b8c \u5566 \uff5e \ud83d\udec1 \"   )   def   decap   (   df   :   pd   .   DataFrame   ,   daily   :   bool   =   0   ,   monthly   :   bool   =   0   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56e0\u5b50 \u505a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Parameters   ----------   df   :   pd . DataFrame   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u7684 \u56e0\u5b50 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   daily   :   bool ,   optional   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u56e0\u5b50 \u662f \u65e5\u9891 \u7684 \u5219 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 ,   by   default   0   monthly   :   bool ,   optional   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u56e0\u5b50 \u662f \u6708 \u9891 \u7684 \u5219 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 ,   by   default   0   Returns   -------   ` pd . DataFrame `   \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   Raises   ------   ` NotImplementedError `   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u65e5\u9891 \u6216 \u6708 \u9891 \uff0c \u5c06 \u62a5\u9519   \" \" \"   tqdm   .   auto   .   tqdm   .   pandas   ( )   share   =   read _ daily   (   sharenum   =   1   )   undi _ close   =   read _ daily   (   close   =   1   ,   unadjust   =   1   )   cap   =   (   share   *   undi _ close   )   .   stack   ( )   .   reset _ index   ( )   cap   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap \"   ]   cap   .   cap   =   ss   .   boxcox   (   cap   .   cap   ) [   0   ]   def   single   (   x   ) :   x   .   cap   =   ss   .   boxcox   (   x   .   cap   ) [   0   ]   return   x   cap   =   cap   .   groupby   ( [   \" date \"   ] )   .   apply   (   single   )   cap   =   cap   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   cap   .   columns   =   [   i   [   1   ]   for   i   in   list   (   cap   .   columns   ) ]   cap _ monthly   =   cap   .   resample   (   \" M \"   )   .   last   ( )   last   =   df   .   resample   (   \" M \"   )   .   last   ( )   if   df   .   shape   [   0   ]   /   last   .   shape   [   0   ]   <   2   :   monthly   =   True   else   :   daily   =   True   if   daily   :   df   =   (   pure _ fallmount   (   df   )   -   (   pure _ fallmount   (   cap   ) , ) ) ( )   elif   monthly   :   df   =   (   pure _ fallmount   (   df   )   -   (   pure _ fallmount   (   cap _ monthly   ) , ) ) ( )   else   :   raise   NotImplementedError   (   \" \u5fc5\u987b \u6307\u5b9a \u9891\u7387 \"   )   return   df   decap _ industry   (   df   ,   daily   =   0   ,   monthly   =   0   ,   swindustry   =   0   ,   zxindustry   =   0   )   \u00b6   \u5bf9 \u56e0\u5b50 \u505a \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Parameters   \u00b6   df   :   pd . DataFrame   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u7684 \u56e0\u5b50 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   daily   :   bool ,   optional   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u56e0\u5b50 \u662f \u65e5\u9891 \u7684 \u5219 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 ,   by   default   0   monthly   :   bool ,   optional   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u56e0\u5b50 \u662f \u6708 \u9891 \u7684 \u5219 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 ,   by   default   0   swindustry   :   bool ,   optional   \u9009\u62e9 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u9009\u62e9 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   Raises   \u00b6   NotImplementedError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u65e5\u9891 \u6216 \u6708 \u9891 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   693   694   695   696   697   698   699   700   701   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   719   720   721   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   740   741   742   743   744   745   746   747   748   749   750   751   752   753   754   755   756   757   758   759   760   761   762   763   764   765   766   767   768   769   770   771   772   773   774   775   776   777   778   779   780   781   782   783   784   785   786   787   788   789   790   791   792   793   794   795   796   797   798   799   800   801   @ do _ on _ dfs   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u505a \u5b8c \u5566 \uff5e \ud83d\udec1 \"   )   def   decap _ industry   (   df   :   pd   .   DataFrame   ,   daily   :   bool   =   0   ,   monthly   :   bool   =   0   ,   swindustry   :   bool   =   0   ,   zxindustry   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56e0\u5b50 \u505a \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Parameters   ----------   df   :   pd . DataFrame   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u7684 \u56e0\u5b50 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   daily   :   bool ,   optional   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u56e0\u5b50 \u662f \u65e5\u9891 \u7684 \u5219 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 ,   by   default   0   monthly   :   bool ,   optional   \u672a \u4e2d\u6027 \u4e2d\u6027\u5316 \u56e0\u5b50 \u662f \u6708 \u9891 \u7684 \u5219 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 ,   by   default   0   swindustry   :   bool ,   optional   \u9009\u62e9 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u9009\u62e9 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   -------   ` pd . DataFrame `   \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   Raises   ------   ` NotImplementedError `   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u65e5\u9891 \u6216 \u6708 \u9891 \uff0c \u5c06 \u62a5\u9519   \" \" \"   start _ date   =   int   (   datetime   .   datetime   .   strftime   (   df   .   index   .   min   ( ) ,   \" % Y% m   % d   \"   ) )   last   =   df   .   resample   (   \" M \"   )   .   last   ( )   homeplace   =   HomePlace   ( )   if   daily   = =   0   and   monthly   = =   0   :   if   df   .   shape   [   0   ]   /   last   .   shape   [   0   ]   <   2   :   monthly   =   True   else   :   daily   =   True   if   monthly   :   cap   =   read _ daily   (   flow _ cap   =   1   ,   start   =   start _ date   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   cap   =   read _ daily   (   flow _ cap   =   1   ,   start   =   start _ date   )   cap   =   cap   .   stack   ( )   .   reset _ index   ( )   cap   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap \"   ]   cap   .   cap   =   ss   .   boxcox   (   cap   .   cap   ) [   0   ]   def   single   (   x   ) :   x   .   cap   =   ss   .   boxcox   (   x   .   cap   ) [   0   ]   return   x   cap   =   cap   .   groupby   ( [   \" date \"   ] )   .   apply   (   single   )   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   df   =   pd   .   merge   (   df   ,   cap   ,   on   =   [   \" date \"   ,   \" code \"   ] )   def   neutralize _ factors   (   df   ) :   \" \" \" \u7ec4\u5185 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   industry _ codes   =   list   (   df   .   columns   )   industry _ codes   =   [   i   for   i   in   industry _ codes   if   i   .   startswith   (   \" w \"   ) ]   industry _ codes _ str   =   \" + \"   .   join   (   industry _ codes   )   ols _ result   =   smf   .   ols   (   \" fac ~ cap + \"   +   industry _ codes _ str   ,   data   =   df   )   .   fit   ( )   ols _ w   =   ols _ result   .   params   [   \" cap \"   ]   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   ols _ bs   =   { }   for   ind   in   industry _ codes   :   ols _ bs   [   ind   ]   =   ols _ result   .   params   [   ind   ]   df   .   fac   =   df   .   fac   -   ols _ w   *   df   .   cap   -   ols _ b   for   k   ,   v   in   ols _ bs   .   items   ( ) :   df   .   fac   =   df   .   fac   -   v   *   df   [   k   ]   df   =   df   [ [   \" fac \"   ] ]   return   df   if   swindustry   :   file _ name   =   \" \u7533\u4e07 \u884c\u4e1a 2021 \u7248\u54d1 \u53d8\u91cf . parquet \"   else   :   file _ name   =   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u4ee3\u7801 \u7248 . parquet \"   if   monthly   :   industry _ dummy   =   (   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   file _ name   )   .   fillna   (   0   )   .   set _ index   (   \" date \"   )   .   groupby   (   \" code \"   )   .   resample   (   \" M \"   )   .   last   ( )   )   industry _ dummy   =   industry _ dummy   .   fillna   (   0   )   .   drop   (   columns   =   [   \" code \"   ] )   .   reset _ index   ( )   industry _ ws   =   [   f   \" w   {   i   }   \"   for   i   in   range   (   1   ,   industry _ dummy   .   shape   [   1   ]   -   1   ) ]   col   =   [   \" code \"   ,   \" date \"   ]   +   industry _ ws   elif   daily   :   industry _ dummy   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   file _ name   )   .   fillna   (   0   )   industry _ ws   =   [   f   \" w   {   i   }   \"   for   i   in   range   (   1   ,   industry _ dummy   .   shape   [   1   ]   -   1   ) ]   col   =   [   \" date \"   ,   \" code \"   ]   +   industry _ ws   else   :   raise   NotImplementedError   (   \" \u5fc5\u987b \u6307\u5b9a \u9891\u7387 \"   )   industry _ dummy   .   columns   =   col   df   =   pd   .   merge   (   df   ,   industry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ] )   df   =   df   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   tqdm   .   auto   .   tqdm   .   pandas   ( )   df   =   df   .   groupby   ( [   \" date \"   ] )   .   progress _ apply   (   neutralize _ factors   )   df   =   df   .   unstack   ( )   df   .   columns   =   [   i   [   1   ]   for   i   in   list   (   df   .   columns   ) ]   return   df   follow _ tests   (   fac   ,   trade _ cost _ double _ side _ list   =   [   0.001   ,   0.002   ,   0.003   ,   0.004   ,   0.005   ] ,   groups _ num   =   10   ,   index _ member _ value _ weighted   =   0   ,   comments _ writer   =   None   ,   net _ values _ writer   =   None   ,   pos   =   0   ,   neg   =   0   ,   swindustry   =   0   ,   zxindustry   =   0   ,   nums   =   [   3   ] ,   opens _ average _ first _ day   =   0   ,   total _ cap   =   0   ,   without _ industry   =   1   )   \u00b6   \u56e0\u5b50 \u5b8c\u6210 \u5168 A \u6d4b\u8bd5 \u540e \uff0c \u8fdb\u884c \u7684 \u4e00\u4e9b \u5fc5\u8981 \u7684 \u540e\u7eed \u6d4b\u8bd5 \uff0c \u5305\u62ec \u5404\u4e2a \u5206\u7ec4 \u8868\u73b0 \u3001 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u4e0e \u7eaf\u51c0 \u5316 \u3001 3510 \u7684 \u591a\u7a7a \u548c \u591a\u5934 \u3001 \u5404\u4e2a \u884c\u4e1a Rank   IC \u3001 \u5404\u4e2a \u884c\u4e1a \u4e70 3 \u53ea \u8d85\u989d \u8868\u73b0   Parameters   \u00b6   fac   :   pd . DataFrame   \u8981 \u8fdb\u884c \u540e\u7eed \u6d4b\u8bd5 \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u56e0\u5b50 \u503c   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   groups _ num   :   int ,   optional   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   index _ member _ value _ weighted   :   bool ,   optional   \u6210\u5206 \u6210\u5206\u80a1 \u591a\u5934 \u91c7\u53d6 \u6d41\u901a \u5e02\u503c \u52a0\u6743   comments _ writer   :   pd . ExcelWriter ,   optional   \u5199\u5165 \u8bc4\u4ef7 \u6307\u6807 \u7684 excel ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u5199\u5165 \u51c0\u503c \u5e8f\u5217 \u7684 excel ,   by   default   None   pos   :   bool ,   optional   \u56e0\u5b50 \u7684 \u65b9\u5411 \u4e3a \u6b63 ,   by   default   0   neg   :   bool ,   optional   \u56e0\u5b50 \u7684 \u65b9\u5411 \u4e3a \u8d1f ,   by   default   0   swindustry   :   bool ,   optional   \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   nums   :   List [ int ] ,   optional   \u5404\u4e2a \u884c\u4e1a \u4e70 \u51e0\u53ea \u80a1\u7968 ,   by   default   [ 3 ]   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   without _ industry   :   bool ,   optional   \u662f\u5426 \u4e0d \u5bf9 \u884c\u4e1a \u505a \u6d4b\u8bd5 ,   by   default   1   Raises   \u00b6   IOError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u56e0\u5b50 \u6b63\u8d1f \u65b9\u5411 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4079   4080   4081   4082   4083   4084   4085   4086   4087   4088   4089   4090   4091   4092   4093   4094   4095   4096   4097   4098   4099   4100   4101   4102   4103   4104   4105   4106   4107   4108   4109   4110   4111   4112   4113   4114   4115   4116   4117   4118   4119   4120   4121   4122   4123   4124   4125   4126   4127   4128   4129   4130   4131   4132   4133   4134   4135   4136   4137   4138   4139   4140   4141   4142   4143   4144   4145   4146   4147   4148   4149   4150   4151   4152   4153   4154   4155   4156   4157   4158   4159   4160   4161   4162   4163   4164   4165   4166   4167   4168   4169   4170   4171   4172   4173   4174   4175   4176   4177   4178   4179   4180   4181   4182   4183   4184   4185   4186   4187   4188   4189   4190   4191   4192   4193   4194   4195   4196   4197   4198   4199   4200   4201   4202   4203   4204   4205   4206   4207   4208   4209   4210   4211   4212   4213   4214   4215   4216   4217   4218   4219   4220   4221   4222   4223   4224   4225   4226   4227   4228   4229   4230   4231   4232   4233   4234   4235   4236   4237   4238   4239   4240   4241   4242   4243   4244   4245   4246   4247   4248   4249   4250   4251   4252   4253   4254   4255   4256   4257   4258   4259   4260   4261   4262   4263   4264   4265   4266   4267   4268   4269   4270   4271   4272   4273   4274   4275   4276   4277   4278   4279   4280   4281   4282   4283   4284   4285   4286   4287   4288   4289   4290   4291   4292   4293   4294   4295   4296   4297   4298   4299   4300   4301   4302   4303   4304   4305   4306   4307   4308   4309   4310   4311   4312   4313   4314   4315   4316   4317   4318   4319   4320   4321   4322   4323   4324   4325   4326   4327   4328   4329   4330   4331   4332   4333   4334   4335   4336   4337   4338   4339   4340   4341   4342   4343   4344   4345   4346   4347   4348   4349   4350   4351   4352   4353   4354   4355   4356   4357   4358   4359   4360   4361   4362   4363   4364   4365   4366   4367   4368   4369   4370   @ do _ on _ dfs   def   follow _ tests   (   fac   :   pd   .   DataFrame   ,   trade _ cost _ double _ side _ list   :   float   =   [   0.001   ,   0.002   ,   0.003   ,   0.004   ,   0.005   ] ,   groups _ num   :   int   =   10   ,   index _ member _ value _ weighted   :   bool   =   0   ,   comments _ writer   :   pd   .   ExcelWriter   =   None   ,   net _ values _ writer   :   pd   .   ExcelWriter   =   None   ,   pos   :   bool   =   0   ,   neg   :   bool   =   0   ,   swindustry   :   bool   =   0   ,   zxindustry   :   bool   =   0   ,   nums   :   List   [   int   ]   =   [   3   ] ,   opens _ average _ first _ day   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   without _ industry   :   bool   =   1   ,   ) :   \" \" \" \u56e0\u5b50 \u5b8c\u6210 \u5168 A \u6d4b\u8bd5 \u540e \uff0c \u8fdb\u884c \u7684 \u4e00\u4e9b \u5fc5\u8981 \u7684 \u540e\u7eed \u6d4b\u8bd5 \uff0c \u5305\u62ec \u5404\u4e2a \u5206\u7ec4 \u8868\u73b0 \u3001 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u4e0e \u7eaf\u51c0 \u5316 \u3001 3510 \u7684 \u591a\u7a7a \u548c \u591a\u5934 \u3001 \u5404\u4e2a \u884c\u4e1a Rank   IC \u3001 \u5404\u4e2a \u884c\u4e1a \u4e70 3 \u53ea \u8d85\u989d \u8868\u73b0   Parameters   ----------   fac   :   pd . DataFrame   \u8981 \u8fdb\u884c \u540e\u7eed \u6d4b\u8bd5 \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u56e0\u5b50 \u503c   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   groups _ num   :   int ,   optional   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   index _ member _ value _ weighted   :   bool ,   optional   \u6210\u5206 \u6210\u5206\u80a1 \u591a\u5934 \u91c7\u53d6 \u6d41\u901a \u5e02\u503c \u52a0\u6743   comments _ writer   :   pd . ExcelWriter ,   optional   \u5199\u5165 \u8bc4\u4ef7 \u6307\u6807 \u7684 excel ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u5199\u5165 \u51c0\u503c \u5e8f\u5217 \u7684 excel ,   by   default   None   pos   :   bool ,   optional   \u56e0\u5b50 \u7684 \u65b9\u5411 \u4e3a \u6b63 ,   by   default   0   neg   :   bool ,   optional   \u56e0\u5b50 \u7684 \u65b9\u5411 \u4e3a \u8d1f ,   by   default   0   swindustry   :   bool ,   optional   \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   nums   :   List [ int ] ,   optional   \u5404\u4e2a \u884c\u4e1a \u4e70 \u51e0\u53ea \u80a1\u7968 ,   by   default   [ 3 ]   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   without _ industry   :   bool ,   optional   \u662f\u5426 \u4e0d \u5bf9 \u884c\u4e1a \u505a \u6d4b\u8bd5 ,   by   default   1   Raises   ------   IOError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u56e0\u5b50 \u6b63\u8d1f \u65b9\u5411 \uff0c \u5c06 \u62a5\u9519   \" \" \"   if   comments _ writer   is   None   :   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   comments _ writer   =   COMMENTS _ WRITER   if   net _ values _ writer   is   None   :   from   pure _ ocean _ breeze . state . states   import   NET _ VALUES _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   shen   =   pure _ moonnight   (   fac   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   trade _ cost _ double _ side   =   0.003   ,   )   if   (   shen   .   shen   .   group _ net _ values   .   group1   .   iloc   [   -   1   ]   >   shen   .   shen   .   group _ net _ values   .   group10   .   iloc   [   -   1   ]   ) :   neg   =   1   else   :   pos   =   1   if   comments _ writer   is   not   None   :   shen   .   comments _ ten   ( )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u5341\u5206 \u7ec4 \"   )   print   (   shen   .   comments _ ten   ( ) )   \" \" \" \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u4e0e \u7eaf\u51c0 \u5316 \" \" \"   pure _ fac   =   pure _ snowtrain   (   fac   )   if   comments _ writer   is   not   None   :   pure _ fac   .   corr   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   )   print   (   pure _ fac   .   corr   )   shen   =   pure _ moonnight   (   pure _ fac   ( ) ,   comments _ writer   =   comments _ writer   ,   net _ values _ writer   =   net _ values _ writer   ,   sheetname   =   \" \u7eaf\u51c0 \"   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   \" \" \" 3510 \u591a\u7a7a \u548c \u591a\u5934 \" \" \"   #   300   fi300   =   daily _ factor _ on300500   (   fac   ,   hs300   =   1   )   shen   =   pure _ moonnight   (   fi300   ,   groups _ num   =   groups _ num   ,   value _ weighted   =   index _ member _ value _ weighted   ,   comments _ writer   =   comments _ writer   ,   net _ values _ writer   =   net _ values _ writer   ,   sheetname   =   \" 300 \u591a\u7a7a \"   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   trade _ cost _ double _ side   =   0.003   ,   )   if   pos   :   if   comments _ writer   is   not   None   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   hs300   =   1   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" 300 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ]   -   shen   .   shen   .   factor _ turnover _ rates   [   f   ' group   {   groups _ num   }   '   ]   *   i   ,   hs300   =   1   ,   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   f   \" 300 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   hs300   =   1   )   if   net _ values _ writer   is   not   None   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   hs300   =   1   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" 300 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ]   -   shen   .   shen   .   factor _ turnover _ rates   [   f   ' group   {   groups _ num   }   '   ]   *   i   ,   hs300   =   1   ,   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   f   \" 300 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   hs300   =   1   )   elif   neg   :   if   comments _ writer   is   not   None   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   hs300   =   1   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" 300 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   -   shen   .   shen   .   factor _ turnover _ rates   .   group1   *   i   ,   hs300   =   1   ,   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   f   \" 300 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   hs300   =   1   )   if   net _ values _ writer   is   not   None   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   ,   hs300   =   1   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" 300 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   -   shen   .   shen   .   factor _ turnover _ rates   .   group1   *   i   ,   hs300   =   1   ,   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   f   \" 300 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   ,   hs300   =   1   )   else   :   raise   IOError   (   \" \u8bf7 \u6307\u5b9a \u56e0\u5b50 \u7684 \u65b9\u5411 \u662f \u6b63\u662f \u8d1f \ud83e\udd12 \"   )   #   500   fi500   =   daily _ factor _ on300500   (   fac   ,   zz500   =   1   )   shen   =   pure _ moonnight   (   fi500   ,   groups _ num   =   groups _ num   ,   value _ weighted   =   index _ member _ value _ weighted   ,   comments _ writer   =   comments _ writer   ,   net _ values _ writer   =   net _ values _ writer   ,   sheetname   =   \" 500 \u591a\u7a7a \"   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   trade _ cost _ double _ side   =   0.003   ,   )   if   pos   :   if   comments _ writer   is   not   None   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   zz500   =   1   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" 500 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ]   -   shen   .   shen   .   factor _ turnover _ rates   [   f   ' group   {   groups _ num   }   '   ]   *   i   ,   zz500   =   1   ,   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   f   \" 500 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   zz500   =   1   )   if   net _ values _ writer   is   not   None   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   zz500   =   1   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" 500 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ]   -   shen   .   shen   .   factor _ turnover _ rates   [   f   ' group   {   groups _ num   }   '   ]   *   i   ,   zz500   =   1   ,   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   f   \" 500 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   zz500   =   1   )   else   :   if   comments _ writer   is   not   None   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   zz500   =   1   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" 500 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   -   shen   .   shen   .   factor _ turnover _ rates   .   group1   *   i   ,   zz500   =   1   ,   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   f   \" 500 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   zz500   =   1   )   if   net _ values _ writer   is   not   None   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   ,   zz500   =   1   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" 500 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   -   shen   .   shen   .   factor _ turnover _ rates   .   group1   *   i   ,   zz500   =   1   ,   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   f   \" 500 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   ,   zz500   =   1   )   #   1000   fi1000   =   daily _ factor _ on300500   (   fac   ,   zz1000   =   1   )   shen   =   pure _ moonnight   (   fi1000   ,   groups _ num   =   groups _ num   ,   value _ weighted   =   index _ member _ value _ weighted   ,   comments _ writer   =   comments _ writer   ,   net _ values _ writer   =   net _ values _ writer   ,   sheetname   =   \" 1000 \u591a\u7a7a \"   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   trade _ cost _ double _ side   =   0.003   ,   )   if   pos   :   if   comments _ writer   is   not   None   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   zz1000   =   1   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" 1000 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ]   -   shen   .   shen   .   factor _ turnover _ rates   [   f   ' group   {   groups _ num   }   '   ]   *   i   ,   zz1000   =   1   ,   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   f   \" 1000 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   zz1000   =   1   )   if   net _ values _ writer   is   not   None   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   zz1000   =   1   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" 1000 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ]   -   shen   .   shen   .   factor _ turnover _ rates   [   f   ' group   {   groups _ num   }   '   ]   *   i   ,   zz1000   =   1   ,   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   f   \" 1000 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   ' group   {   groups _ num   }   '   ] ,   zz1000   =   1   )   else   :   if   comments _ writer   is   not   None   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   zz1000   =   1   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" 1000 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   -   shen   .   shen   .   factor _ turnover _ rates   .   group1   *   i   ,   zz1000   =   1   ,   )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   f   \" 1000 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   zz1000   =   1   )   if   net _ values _ writer   is   not   None   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   ,   zz1000   =   1   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" 1000 \u8d85\u989d \"   )   for   i   in   trade _ cost _ double _ side _ list   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   -   shen   .   shen   .   factor _ turnover _ rates   .   group1   *   i   ,   zz1000   =   1   ,   )   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   f   \" 1000 \u8d85\u989d \u53cc\u8fb9 \u8d39\u7387   {   i   }   \"   )   else   :   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   ,   zz1000   =   1   )   if   not   without _ industry   :   #   \u5404 \u884c\u4e1a Rank   IC   rankics   =   rankic _ test _ on _ industry   (   fac   ,   comments _ writer   )   #   \u4e70 3 \u53ea \u8d85\u989d \u8868\u73b0   rets   =   long _ test _ on _ industry   (   fac   ,   nums   ,   pos   =   pos   ,   neg   =   neg   ,   swindustry   =   swindustry   ,   zxindustry   =   zxindustry   )   logger   .   success   (   \" \u56e0\u5b50 \u540e\u7eed \u7684 \u5fc5\u8981 \u6d4b\u8bd5 \u5168\u90e8 \u5b8c\u6210 \"   )   get _ group   (   df   ,   group _ num   =   10   )   \u00b6   \u4f7f\u7528 groupby \u7684 \u65b9\u6cd5 \uff0c \u5c06 \u4e00\u7ec4 \u56e0\u5b50 \u503c \u6539\u4e3a \u622a\u9762 \u4e0a \u7684 \u5206\u7ec4 \u503c \uff0c \u6b64 \u65b9\u6cd5 \u76f8\u6bd4 qcut \u7684 \u65b9\u6cd5 \u66f4\u52a0 \u7a33\u5065 \uff0c \u4f46 \u901f\u5ea6 \u66f4\u6162 \u4e00\u4e9b   Parameters   \u00b6   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   group _ num   :   int ,   optional   \u5206\u7ec4 \u7684 \u6570\u91cf ,   by   default   10   Returns   \u00b6   pd . DataFrame   \u8f6c\u5316 \u4e3a \u5206\u7ec4 \u503c\u540e \u7684 df \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5206\u7ec4 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5534   5535   5536   5537   5538   5539   5540   5541   5542   5543   5544   5545   5546   5547   5548   5549   5550   5551   5552   5553   5554   @ do _ on _ dfs   def   get _ group   (   df   :   pd   .   DataFrame   ,   group _ num   :   int   =   10   )   - >   pd   .   DataFrame   :   \" \" \" \u4f7f\u7528 groupby \u7684 \u65b9\u6cd5 \uff0c \u5c06 \u4e00\u7ec4 \u56e0\u5b50 \u503c \u6539\u4e3a \u622a\u9762 \u4e0a \u7684 \u5206\u7ec4 \u503c \uff0c \u6b64 \u65b9\u6cd5 \u76f8\u6bd4 qcut \u7684 \u65b9\u6cd5 \u66f4\u52a0 \u7a33\u5065 \uff0c \u4f46 \u901f\u5ea6 \u66f4\u6162 \u4e00\u4e9b   Parameters   ----------   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   group _ num   :   int ,   optional   \u5206\u7ec4 \u7684 \u6570\u91cf ,   by   default   10   Returns   -------   pd . DataFrame   \u8f6c\u5316 \u4e3a \u5206\u7ec4 \u503c\u540e \u7684 df \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5206\u7ec4 \u503c   \" \" \"   a   =   pure _ moon   (   no _ read _ indu   =   1   )   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   df   =   a   .   get _ groups   (   df   ,   group _ num   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" group \"   )   return   df   group _ test _ on _ industry   (   df   ,   group _ num   =   10   ,   trade _ cost _ double _ side   =   0   ,   net _ values _ writer   =   None   ,   swindustry   =   0   ,   zxindustry   =   0   )   \u00b6   \u5728 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u6d4b\u8bd5 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u5206\u7ec4 \u56de\u6d4b   Parameters   \u00b6   df   :   pd . DataFrame   \u5168 \u5e02\u573a \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   group _ num   :   int ,   optional   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u5b58\u50a8 \u5404\u4e2a \u884c\u4e1a \u5206\u7ec4 \u53ca\u591a\u7a7a \u5bf9\u51b2 \u51c0\u503c \u5e8f\u5217 \u7684 excel \u6587\u4ef6 ,   by   default   None   swindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u5404\u4e2a \u884c\u4e1a \u7684 \u7ee9\u6548 \u8bc4\u4ef7 \u7ee9\u6548\u8bc4\u4ef7 \u6c47\u603b   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   249   250   251   252   253   254   255   256   257   258   259   260   261   262   263   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   @ do _ on _ dfs   def   group _ test _ on _ industry   (   df   :   pd   .   DataFrame   ,   group _ num   :   int   =   10   ,   trade _ cost _ double _ side   :   float   =   0   ,   net _ values _ writer   :   pd   .   ExcelWriter   =   None   ,   swindustry   :   bool   =   0   ,   zxindustry   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u5728 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u6d4b\u8bd5 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u5206\u7ec4 \u56de\u6d4b   Parameters   ----------   df   :   pd . DataFrame   \u5168 \u5e02\u573a \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   group _ num   :   int ,   optional   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u5b58\u50a8 \u5404\u4e2a \u884c\u4e1a \u5206\u7ec4 \u53ca\u591a\u7a7a \u5bf9\u51b2 \u51c0\u503c \u5e8f\u5217 \u7684 excel \u6587\u4ef6 ,   by   default   None   swindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   -------   pd . DataFrame   \u5404\u4e2a \u884c\u4e1a \u7684 \u7ee9\u6548 \u8bc4\u4ef7 \u7ee9\u6548\u8bc4\u4ef7 \u6c47\u603b   \" \" \"   dfs   =   daily _ factor _ on _ industry   (   df   ,   swindustry   =   swindustry   ,   zxindustry   =   zxindustry   )   ks   =   [ ]   vs   =   [ ]   if   swindustry   :   for   k   ,   v   in   dfs   .   items   ( ) :   shen   =   pure _ moonnight   (   v   ,   groups _ num   =   group _ num   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   net _ values _ writer   =   net _ values _ writer   ,   sheetname   =   INDUS _ DICT   [   k   ] ,   plt _ plot   =   0   ,   )   ks   .   append   (   k   )   vs   .   append   (   shen   .   shen   .   total _ comments   .   T   )   vs   =   pd   .   concat   (   vs   )   vs   .   index   =   [   INDUS _ DICT   [   i   ]   for   i   in   ks   ]   else   :   for   k   ,   v   in   dfs   .   items   ( ) :   shen   =   pure _ moonnight   (   v   ,   groups _ num   =   group _ num   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   net _ values _ writer   =   net _ values _ writer   ,   sheetname   =   k   ,   plt _ plot   =   0   ,   )   ks   .   append   (   k   )   vs   .   append   (   shen   .   shen   .   total _ comments   .   T   )   vs   =   pd   .   concat   (   vs   )   vs   .   index   =   ks   return   vs   icir _ weight   (   facs   ,   backsee   =   6   ,   boxcox   =   0   ,   rank _ corr   =   0   ,   only _ ic   =   0   )   \u00b6   \u4f7f\u7528 icir \u6eda\u52a8 \u52a0\u6743 \u7684 \u65b9\u5f0f \uff0c \u52a0\u6743 \u5408\u6210 \u51e0\u4e2a \u56e0\u5b50   Parameters   \u00b6   facs   :   list [ pd . DataFrame ]   \u8981 \u5408\u6210 \u7684 \u82e5\u5e72 \u56e0\u5b50 \uff0c \u6bcf\u4e2a df \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 df   backsee   :   int ,   optional   \u7528\u6765 \u8ba1\u7b97 icir \u7684 \u8fc7\u53bb \u671f\u6570 ,   by   default   6   boxcox   :   bool ,   optional   \u662f\u5426 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   rank _ corr   :   bool ,   optional   \u662f\u5426 \u8ba1\u7b97 rankicir ,   by   default   0   only _ ic   :   bool ,   optional   \u662f\u5426 \u53ea \u8ba1\u7b97 IC \u6216 Rank   IC ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u5408\u6210 \u540e \u7684 \u56e0\u5b50   Raises   \u00b6   ValueError   \u56e0\u5b50 \u671f\u6570 \u5c11\u4e8e \u56de\u770b \u671f\u6570 \u65f6 \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5876   5877   5878   5879   5880   5881   5882   5883   5884   5885   5886   5887   5888   5889   5890   5891   5892   5893   5894   5895   5896   5897   5898   5899   5900   5901   5902   5903   5904   5905   5906   5907   5908   5909   5910   5911   5912   5913   5914   5915   5916   5917   5918   5919   5920   5921   5922   5923   5924   5925   5926   5927   5928   5929   5930   5931   5932   5933   5934   5935   5936   5937   5938   5939   5940   5941   5942   5943   5944   5945   5946   5947   5948   5949   5950   5951   5952   5953   5954   5955   def   icir _ weight   (   facs   :   list   [   pd   .   DataFrame   ] ,   backsee   :   int   =   6   ,   boxcox   :   bool   =   0   ,   rank _ corr   :   bool   =   0   ,   only _ ic   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4f7f\u7528 icir \u6eda\u52a8 \u52a0\u6743 \u7684 \u65b9\u5f0f \uff0c \u52a0\u6743 \u5408\u6210 \u51e0\u4e2a \u56e0\u5b50   Parameters   ----------   facs   :   list [ pd . DataFrame ]   \u8981 \u5408\u6210 \u7684 \u82e5\u5e72 \u56e0\u5b50 \uff0c \u6bcf\u4e2a df \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 df   backsee   :   int ,   optional   \u7528\u6765 \u8ba1\u7b97 icir \u7684 \u8fc7\u53bb \u671f\u6570 ,   by   default   6   boxcox   :   bool ,   optional   \u662f\u5426 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   rank _ corr   :   bool ,   optional   \u662f\u5426 \u8ba1\u7b97 rankicir ,   by   default   0   only _ ic   :   bool ,   optional   \u662f\u5426 \u53ea \u8ba1\u7b97 IC \u6216 Rank   IC ,   by   default   0   Returns   -------   pd . DataFrame   \u5408\u6210 \u540e \u7684 \u56e0\u5b50   Raises   ------   ValueError   \u56e0\u5b50 \u671f\u6570 \u5c11\u4e8e \u56de\u770b \u671f\u6570 \u65f6 \u5c06 \u62a5\u9519   \" \" \"   date _ first _ max   =   max   ( [   i   .   index   [   0   ]   for   i   in   facs   ] )   facs   =   [   i   [   i   .   index   > =   date _ first _ max   ]   for   i   in   facs   ]   date _ last _ min   =   min   ( [   i   .   index   [   -   1   ]   for   i   in   facs   ] )   facs   =   [   i   [   i   .   index   < =   date _ last _ min   ]   for   i   in   facs   ]   facs   =   [   i   .   shift   (   1   )   for   i   in   facs   ]   ret   =   read _ daily   (   close   =   1   ,   start   =   datetime   .   datetime   .   strftime   (   date _ first _ max   ,   \" % Y% m   % d   \"   )   )   ret   =   ret   /   ret   .   shift   (   20   )   -   1   if   boxcox   :   facs   =   [   decap _ industry   (   i   )   for   i   in   facs   ]   facs   =   [ ( (   i   .   T   -   i   .   T   .   mean   ( ) )   /   i   .   T   .   std   ( ) )   .   T   for   i   in   facs   ]   dates   =   list   (   facs   [   0   ]   .   index   )   fis   =   [ ]   for   num   ,   date   in   tqdm   .   auto   .   tqdm   (   list   (   enumerate   (   dates   ) ) ) :   if   num   <   backsee   :   ...   else   :   nears   =   [   i   .   iloc   [   num   -   backsee   :   num   ,   : ]   for   i   in   facs   ]   targets   =   [   i   [   i   .   index   = =   date   ]   for   i   in   facs   ]   if   rank _ corr   :   weights   =   [   show _ corr   (   i   ,   ret   [   ret   .   index   .   isin   (   i   .   index   ) ] ,   plt _ plot   =   0   ,   show _ series   =   1   )   for   i   in   nears   ]   else   :   weights   =   [   show _ corr   (   i   ,   ret   [   ret   .   index   .   isin   (   i   .   index   ) ] ,   plt _ plot   =   0   ,   show _ series   =   1   ,   method   =   \" pearson \"   ,   )   for   i   in   nears   ]   if   only _ ic   :   weights   =   [   i   .   mean   ( )   for   i   in   weights   ]   else   :   weights   =   [   i   .   mean   ( )   /   i   .   std   ( )   for   i   in   weights   ]   fi   =   sum   ( [   i   *   j   for   i   ,   j   in   zip   (   weights   ,   targets   ) ] )   fis   .   append   (   fi   )   if   len   (   fis   )   >   0   :   return   pd   .   concat   (   fis   )   .   shift   (   -   1   )   else   :   raise   ValueError   (   \" \u8f93\u5165 \u7684 \u56e0\u5b50 \u503c \u957f\u5ea6 \u4e0d\u592a\u591f \u5427 \uff1f \"   )   long _ test _ on _ industry   (   df   ,   nums   ,   pos   =   0   ,   neg   =   0   ,   save _ stock _ list   =   0   ,   swindustry   =   0   ,   zxindustry   =   0   )   \u00b6   \u5bf9 \u6bcf\u4e2a \u7533\u4e07 / \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Parameters   \u00b6   df   :   pd . DataFrame   \u4f7f\u7528 \u7684 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   nums   :   list   \u591a\u5934 \u60f3 \u9009\u53d6 \u7684 \u80a1\u7968 \u7684 \u6570\u91cf \uff0c \u4f8b\u5982 [ 3 , 4 , 5 ]   pos   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u6b63 \uff0c \u5373 Rank   IC \u4e3a \u6b63 \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a True ,   by   default   0   neg   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f \uff0c \u5373 Rank   IC \u4e3a \u8d1f \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a False ,   by   default   0   save _ stock _ list   :   bool ,   optional   \u662f\u5426 \u4fdd\u5b58 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355 \uff0c \u4f1a \u964d\u4f4e \u8fd0\u884c \u901f\u5ea6 ,   by   default   0   swindustry   :   bool ,   optional   \u5728 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u6d4b\u8bd5 ,   by   default   0   zxindusrty   :   bool ,   optional   \u5728 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u6d4b\u8bd5 ,   by   default   0   Returns   List [ dict ]   \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Raises   \u00b6   IOError   pos \u548c neg \u5fc5\u987b \u6709 \u4e00\u4e2a \u4e3a 1 \uff0c \u5426\u5219 \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   @ do _ on _ dfs   def   long _ test _ on _ industry   (   df   :   pd   .   DataFrame   ,   nums   :   list   ,   pos   :   bool   =   0   ,   neg   :   bool   =   0   ,   save _ stock _ list   :   bool   =   0   ,   swindustry   :   bool   =   0   ,   zxindustry   :   bool   =   0   ,   )   - >   List   [   dict   ] :   \" \" \" \u5bf9 \u6bcf\u4e2a \u7533\u4e07 / \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Parameters   ----------   df   :   pd . DataFrame   \u4f7f\u7528 \u7684 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   nums   :   list   \u591a\u5934 \u60f3 \u9009\u53d6 \u7684 \u80a1\u7968 \u7684 \u6570\u91cf \uff0c \u4f8b\u5982 [ 3 , 4 , 5 ]   pos   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u6b63 \uff0c \u5373 Rank   IC \u4e3a \u6b63 \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a True ,   by   default   0   neg   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f \uff0c \u5373 Rank   IC \u4e3a \u8d1f \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a False ,   by   default   0   save _ stock _ list   :   bool ,   optional   \u662f\u5426 \u4fdd\u5b58 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355 \uff0c \u4f1a \u964d\u4f4e \u8fd0\u884c \u901f\u5ea6 ,   by   default   0   swindustry   :   bool ,   optional   \u5728 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u6d4b\u8bd5 ,   by   default   0   zxindusrty   :   bool ,   optional   \u5728 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u6d4b\u8bd5 ,   by   default   0   Returns   -------   List [ dict ]   \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Raises   ------   IOError   pos \u548c neg \u5fc5\u987b \u6709 \u4e00\u4e2a \u4e3a 1 \uff0c \u5426\u5219 \u5c06 \u62a5\u9519   \" \" \"   fac   =   decap _ industry   (   df   ,   monthly   =   True   )   if   swindustry   :   industry _ dummy   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u7533\u4e07 \u884c\u4e1a 2021 \u7248\u54d1 \u53d8\u91cf . parquet \"   )   .   fillna   (   0   )   indus   =   read _ swindustry _ prices   ( )   else   :   industry _ dummy   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u540d\u79f0 \u7248 . parquet \"   )   .   fillna   (   0   )   indus   =   read _ zxindustry _ prices   ( )   inds   =   list   (   industry _ dummy   .   columns   )   ret _ next   =   (   read _ daily   (   close   =   1   )   .   resample   (   \" M \"   )   .   last   ( )   /   read _ daily   (   open   =   1   )   .   resample   (   \" M \"   )   .   first   ( )   -   1   )   ages   =   read _ daily   (   age   =   1   )   .   resample   (   \" M \"   )   .   last   ( )   ages   =   (   ages   > =   60   )   +   0   ages   =   ages   .   replace   (   0   ,   np   .   nan   )   ret _ next   =   ret _ next   *   ages   ret _ next _ dummy   =   1   -   ret _ next   .   isna   ( )   def   save _ ind   (   code   ,   num   ) :   ind   =   industry _ dummy   [ [   \" date \"   ,   \" code \"   ,   code   ] ]   ind   =   ind   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   code   )   ind   =   ind   .   resample   (   \" M \"   )   .   last   ( )   ind   =   ind   .   replace   (   0   ,   np   .   nan   )   fi   =   ind   *   fac   fi   =   fi   .   dropna   (   how   =   \" all \"   )   fi   =   fi   .   shift   (   1   )   fi   =   fi   *   ret _ next _ dummy   fi   =   fi   .   dropna   (   how   =   \" all \"   )   def   sing   (   x   ) :   if   neg   :   thr   =   x   .   nsmallest   (   num   )   .   iloc   [   -   1   ]   elif   pos   :   thr   =   x   .   nlargest   (   num   )   .   iloc   [   -   1   ]   else   :   raise   IOError   (   \" \u60a8 \u9700\u8981 \u6307\u5b9a \u4e00\u4e0b \u56e0\u5b50 \u65b9\u5411 \ud83e\udd12 \"   )   x   =   (   x   < =   thr   )   +   0   return   x   fi   =   fi   .   T   .   apply   (   sing   )   .   T   fi   =   fi   .   replace   (   0   ,   np   .   nan   )   fi   =   fi   *   ret _ next   ret _ long   =   fi   .   mean   (   axis   =   1   )   return   ret _ long   ret _ longs   =   {   k   :   [ ]   for   k   in   nums   }   for   num   in   tqdm   .   auto   .   tqdm   (   nums   ) :   for   code   in   inds   [   2   : ] :   df   =   save _ ind   (   code   ,   num   )   .   to _ frame   (   code   )   ret _ longs   [   num   ]   =   ret _ longs   [   num   ]   +   [   df   ]   indus   =   indus   .   resample   (   \" M \"   )   .   last   ( )   .   pct _ change   ( )   if   swindustry   :   coms   =   {   k   :   indus _ name   (   pd   .   concat   (   v   ,   axis   =   1   )   .   dropna   (   how   =   \" all \"   )   .   T   )   .   T   for   k   ,   v   in   ret _ longs   .   items   ( )   }   rets   =   {   k   :   (   v   -   indus _ name   (   indus   .   T   )   .   T   )   .   dropna   (   how   =   \" all \"   )   for   k   ,   v   in   coms   .   items   ( )   }   else   :   coms   =   {   k   :   pd   .   concat   (   v   ,   axis   =   1   )   .   dropna   (   how   =   \" all \"   )   for   k   ,   v   in   ret _ longs   .   items   ( ) }   rets   =   {   k   :   (   v   -   indus   )   .   dropna   (   how   =   \" all \"   )   for   k   ,   v   in   coms   .   items   ( ) }   nets   =   {   k   :   (   v   +   1   )   .   cumprod   ( )   for   k   ,   v   in   rets   .   items   ( ) }   nets   =   {   k   :   v   .   apply   (   lambda   x   :   x   .   dropna   ( )   /   x   .   dropna   ( )   .   iloc   [   0   ] )   for   k   ,   v   in   nets   .   items   ( )   }   def   comments _ on _ twins   (   nets   :   pd   .   Series   ,   rets   :   pd   .   Series   )   - >   pd   .   Series   :   series   =   nets   .   copy   ( )   series1   =   rets   .   copy   ( )   ret   =   (   series   .   iloc   [   -   1   ]   -   series   .   iloc   [   0   ] )   /   series   .   iloc   [   0   ]   duration   =   (   series   .   index   [   -   1   ]   -   series   .   index   [   0   ] )   .   days   year   =   duration   /   365   ret _ yearly   =   (   series   .   iloc   [   -   1   ]   /   series   .   iloc   [   0   ] )   * *   (   1   /   year   )   -   1   max _ draw   =   -   (   series   /   series   .   expanding   (   1   )   .   max   ( )   -   1   )   .   min   ( )   vol   =   np   .   std   (   series1   )   *   (   12   * *   0.5   )   sharpe   =   ret _ yearly   /   vol   wins   =   series1   [   series1   >   0   ]   win _ rate   =   len   (   wins   )   /   len   (   series1   )   return   pd   .   Series   (   [   ret   ,   ret _ yearly   ,   vol   ,   sharpe   ,   win _ rate   ,   max _ draw   ] ,   index   =   [   \" \u603b \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u4fe1\u606f \u6bd4\u7387 \"   ,   \" \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ] ,   )   if   swindustry   :   name   =   \" \u7533\u4e07 \"   else   :   name   =   \" \u4e2d\u4fe1 \"   w   =   pd   .   ExcelWriter   (   f   \" \u5404\u4e2a   {   name   }   \u4e00\u7ea7 \u884c\u4e1a \u591a\u5934 \u8d85\u989d \u7ee9\u6548 . xlsx \"   )   def   com _ all   (   df1   ,   df2   ,   num   ) :   cs   =   [ ]   for   ind   in   list   (   df1   .   columns   ) :   c   =   comments _ on _ twins   (   df2   [   ind   ]   .   dropna   ( ) ,   df1   [   ind   ]   .   dropna   ( ) )   .   to _ frame   (   ind   )   cs   .   append   (   c   )   res   =   pd   .   concat   (   cs   ,   axis   =   1   )   .   T   res   .   to _ excel   (   w   ,   sheet _ name   =   str   (   num   ) )   return   res   coms _ finals   =   {   k   :   com _ all   (   rets   [   k   ] ,   nets   [   k   ] ,   k   )   for   k   in   rets   .   keys   ( ) }   w   .   save   ( )   w   .   close   ( )   rets _ save   =   {   k   :   v   .   dropna   ( )   for   k   ,   v   in   rets   .   items   ( )   if   k   in   nums   }   u   =   pd   .   ExcelWriter   (   f   \" \u5404\u4e2a   {   name   }   \u4e00\u7ea7 \u884c\u4e1a \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u6536\u76ca\u7387 . xlsx \"   )   for   k   ,   v   in   rets _ save   .   items   ( ) :   v   .   to _ excel   (   u   ,   sheet _ name   =   str   (   k   ) )   u   .   save   ( )   u   .   close   ( )   if   save _ stock _ list   :   def   save _ ind _ stocks   (   code   ,   num   ) :   ind   =   industry _ dummy   [ [   \" date \"   ,   \" code \"   ,   code   ] ]   ind   =   ind   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   code   )   ind   =   ind   .   replace   (   0   ,   np   .   nan   )   fi   =   ind   *   fac   fi   =   fi   .   dropna   (   how   =   \" all \"   )   fi   =   fi   .   shift   (   1   )   fi   =   fi   *   ret _ next _ dummy   fi   =   fi   .   dropna   (   how   =   \" all \"   )   def   sing   (   x   ) :   if   neg   :   thr   =   x   .   nsmallest   (   num   )   elif   pos   :   thr   =   x   .   nlargest   (   num   )   else   :   raise   IOError   (   \" \u60a8 \u9700\u8981 \u6307\u5b9a \u4e00\u4e0b \u56e0\u5b50 \u65b9\u5411 \ud83e\udd12 \"   )   return   tuple   (   thr   .   index   )   fi   =   fi   .   T   .   apply   (   sing   )   return   fi   stocks _ longs   =   {   k   :   { }   for   k   in   nums   }   for   num   in   tqdm   .   auto   .   tqdm   (   nums   ) :   for   code   in   inds   [   2   : ] :   stocks _ longs   [   num   ] [   code   ]   =   save _ ind _ stocks   (   code   ,   num   )   for   num   in   nums   :   w1   =   pd   .   ExcelWriter   (   f   \" \u5404\u4e2a   {   name   }   \u4e00\u7ea7 \u884c\u4e1a \u4e70   {   num   }   \u53ea \u7684 \u80a1\u7968 \u540d\u5355 . xlsx \"   )   for   k   ,   v   in   stocks _ longs   [   num   ]   .   items   ( ) :   v   =   v   .   T   v   .   index   =   v   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   v   .   to _ excel   (   w1   ,   sheet _ name   =   INDUS _ DICT   [   k   ] )   w1   .   save   ( )   w1   .   close   ( )   return   [   coms _ finals   ,   rets _ save   ,   stocks _ longs   ]   else   :   return   [   coms _ finals   ,   rets _ save   ]   long _ test _ on _ swindustry   (   df   ,   nums   ,   pos   =   0   ,   neg   =   0   ,   save _ stock _ list   =   0   )   \u00b6   \u5bf9 \u6bcf\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Parameters   \u00b6   df   :   pd . DataFrame   \u4f7f\u7528 \u7684 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   nums   :   list   \u591a\u5934 \u60f3 \u9009\u53d6 \u7684 \u80a1\u7968 \u7684 \u6570\u91cf \uff0c \u4f8b\u5982 [ 3 , 4 , 5 ]   pos   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u6b63 \uff0c \u5373 Rank   IC \u4e3a \u6b63 \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a True ,   by   default   0   neg   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f \uff0c \u5373 Rank   IC \u4e3a \u8d1f \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a False ,   by   default   0   save _ stock _ list   :   bool ,   optional   \u662f\u5426 \u4fdd\u5b58 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355 \uff0c \u4f1a \u964d\u4f4e \u8fd0\u884c \u901f\u5ea6 ,   by   default   0   Returns   List [ dict ]   \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Raises   \u00b6   IOError   pos \u548c neg \u5fc5\u987b \u6709 \u4e00\u4e2a \u4e3a 1 \uff0c \u5426\u5219 \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   @ do _ on _ dfs   def   long _ test _ on _ swindustry   (   df   :   pd   .   DataFrame   ,   nums   :   list   ,   pos   :   bool   =   0   ,   neg   :   bool   =   0   ,   save _ stock _ list   :   bool   =   0   ,   )   - >   List   [   dict   ] :   \" \" \" \u5bf9 \u6bcf\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Parameters   ----------   df   :   pd . DataFrame   \u4f7f\u7528 \u7684 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   nums   :   list   \u591a\u5934 \u60f3 \u9009\u53d6 \u7684 \u80a1\u7968 \u7684 \u6570\u91cf \uff0c \u4f8b\u5982 [ 3 , 4 , 5 ]   pos   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u6b63 \uff0c \u5373 Rank   IC \u4e3a \u6b63 \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a True ,   by   default   0   neg   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f \uff0c \u5373 Rank   IC \u4e3a \u8d1f \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a False ,   by   default   0   save _ stock _ list   :   bool ,   optional   \u662f\u5426 \u4fdd\u5b58 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355 \uff0c \u4f1a \u964d\u4f4e \u8fd0\u884c \u901f\u5ea6 ,   by   default   0   Returns   -------   List [ dict ]   \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Raises   ------   IOError   pos \u548c neg \u5fc5\u987b \u6709 \u4e00\u4e2a \u4e3a 1 \uff0c \u5426\u5219 \u5c06 \u62a5\u9519   \" \" \"   res   =   long _ test _ on _ industry   (   df   =   df   ,   nums   =   nums   ,   pos   =   pos   ,   neg   =   neg   ,   save _ stock _ list   =   save _ stock _ list   ,   swindustry   =   1   ,   )   return   res   long _ test _ on _ zxindustry   (   df   ,   nums   ,   pos   =   0   ,   neg   =   0   ,   save _ stock _ list   =   0   )   \u00b6   \u5bf9 \u6bcf\u4e2a \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Parameters   \u00b6   df   :   pd . DataFrame   \u4f7f\u7528 \u7684 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   nums   :   list   \u591a\u5934 \u60f3 \u9009\u53d6 \u7684 \u80a1\u7968 \u7684 \u6570\u91cf \uff0c \u4f8b\u5982 [ 3 , 4 , 5 ]   pos   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u6b63 \uff0c \u5373 Rank   IC \u4e3a \u6b63 \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a True ,   by   default   0   neg   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f \uff0c \u5373 Rank   IC \u4e3a \u8d1f \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a False ,   by   default   0   save _ stock _ list   :   bool ,   optional   \u662f\u5426 \u4fdd\u5b58 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355 \uff0c \u4f1a \u964d\u4f4e \u8fd0\u884c \u901f\u5ea6 ,   by   default   0   Returns   List [ dict ]   \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Raises   \u00b6   IOError   pos \u548c neg \u5fc5\u987b \u6709 \u4e00\u4e2a \u4e3a 1 \uff0c \u5426\u5219 \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   @ do _ on _ dfs   def   long _ test _ on _ zxindustry   (   df   :   pd   .   DataFrame   ,   nums   :   list   ,   pos   :   bool   =   0   ,   neg   :   bool   =   0   ,   save _ stock _ list   :   bool   =   0   ,   )   - >   List   [   dict   ] :   \" \" \" \u5bf9 \u6bcf\u4e2a \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Parameters   ----------   df   :   pd . DataFrame   \u4f7f\u7528 \u7684 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   nums   :   list   \u591a\u5934 \u60f3 \u9009\u53d6 \u7684 \u80a1\u7968 \u7684 \u6570\u91cf \uff0c \u4f8b\u5982 [ 3 , 4 , 5 ]   pos   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u6b63 \uff0c \u5373 Rank   IC \u4e3a \u6b63 \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a True ,   by   default   0   neg   :   bool ,   optional   \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f \uff0c \u5373 Rank   IC \u4e3a \u8d1f \uff0c \u5219 \u6307\u5b9a \u6b64\u5904 \u4e3a False ,   by   default   0   save _ stock _ list   :   bool ,   optional   \u662f\u5426 \u4fdd\u5b58 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355 \uff0c \u4f1a \u964d\u4f4e \u8fd0\u884c \u901f\u5ea6 ,   by   default   0   Returns   -------   List [ dict ]   \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355   Raises   ------   IOError   pos \u548c neg \u5fc5\u987b \u6709 \u4e00\u4e2a \u4e3a 1 \uff0c \u5426\u5219 \u5c06 \u62a5\u9519   \" \" \"   res   =   long _ test _ on _ industry   (   df   =   df   ,   nums   =   nums   ,   pos   =   pos   ,   neg   =   neg   ,   save _ stock _ list   =   save _ stock _ list   ,   zxindustry   =   1   ,   )   return   res   market _ kind   (   df   ,   zhuban   =   0   ,   chuangye   =   0   ,   kechuang   =   0   ,   beijing   =   0   )   \u00b6   \u4e0e \u5bbd\u57fa \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u51fd\u6570 \u7c7b\u4f3c \uff0c \u9650\u5b9a \u80a1\u7968 \u5728 \u67d0\u4e2a \u5177\u4f53 \u677f\u5757 \u4e0a   Parameters   \u00b6   df   :   pd . DataFrame   \u539f\u59cb \u5168\u90e8 \u80a1\u7968 \u7684 \u56e0\u5b50 \u503c   zhuban   :   bool ,   optional   \u9650\u5b9a \u5728 \u4e3b\u677f \u8303\u56f4 \u5185 ,   by   default   0   chuangye   :   bool ,   optional   \u9650\u5b9a \u5728 \u521b\u4e1a \u521b\u4e1a\u677f \u8303\u56f4 \u5185 ,   by   default   0   kechuang   :   bool ,   optional   \u9650\u5b9a \u5728 \u79d1 \u521b\u677f \u8303\u56f4 \u5185 ,   by   default   0   beijing   :   bool ,   optional   \u9650\u5b9a \u5728 \u5317\u4ea4\u6240 \u8303\u56f4 \u5185 ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u9650\u5236 \u8303\u56f4 \u540e \u7684 \u56e0\u5b50 \u503c \uff0c \u5176\u4f59 \u4e3a\u7a7a   Raises   \u00b6   ValueError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u4efb\u4f55 \u80a1\u7968 \u6c60 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   950   951   952   953   954   955   956   957   958   959   960   961   962   963   964   965   966   967   968   969   970   971   972   973   974   975   976   977   978   979   980   981   982   983   984   985   986   987   988   989   990   991   992   993   994   995   996   997   998   999   1000   1001   1002   @ do _ on _ dfs   def   market _ kind   (   df   :   pd   .   DataFrame   ,   zhuban   :   bool   =   0   ,   chuangye   :   bool   =   0   ,   kechuang   :   bool   =   0   ,   beijing   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4e0e \u5bbd\u57fa \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u51fd\u6570 \u7c7b\u4f3c \uff0c \u9650\u5b9a \u80a1\u7968 \u5728 \u67d0\u4e2a \u5177\u4f53 \u677f\u5757 \u4e0a   Parameters   ----------   df   :   pd . DataFrame   \u539f\u59cb \u5168\u90e8 \u80a1\u7968 \u7684 \u56e0\u5b50 \u503c   zhuban   :   bool ,   optional   \u9650\u5b9a \u5728 \u4e3b\u677f \u8303\u56f4 \u5185 ,   by   default   0   chuangye   :   bool ,   optional   \u9650\u5b9a \u5728 \u521b\u4e1a \u521b\u4e1a\u677f \u8303\u56f4 \u5185 ,   by   default   0   kechuang   :   bool ,   optional   \u9650\u5b9a \u5728 \u79d1 \u521b\u677f \u8303\u56f4 \u5185 ,   by   default   0   beijing   :   bool ,   optional   \u9650\u5b9a \u5728 \u5317\u4ea4\u6240 \u8303\u56f4 \u5185 ,   by   default   0   Returns   -------   ` pd . DataFrame `   \u9650\u5236 \u8303\u56f4 \u540e \u7684 \u56e0\u5b50 \u503c \uff0c \u5176\u4f59 \u4e3a\u7a7a   Raises   ------   ` ValueError `   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u4efb\u4f55 \u80a1\u7968 \u6c60 \uff0c \u5c06 \u62a5\u9519   \" \" \"   trs   =   read _ daily   (   tr   =   1   )   codes   =   list   (   trs   .   columns   )   dates   =   list   (   trs   .   index   )   if   chuangye   and   kechuang   :   dummys   =   [   1   if   code   [ :   2   ]   in   [   \" 30 \"   ,   \" 68 \"   ]   else   np   .   nan   for   code   in   codes   ]   else   :   if   zhuban   :   dummys   =   [   1   if   code   [ :   2   ]   in   [   \" 00 \"   ,   \" 60 \"   ]   else   np   .   nan   for   code   in   codes   ]   elif   chuangye   :   dummys   =   [   1   if   code   .   startswith   (   \" 3 \"   )   else   np   .   nan   for   code   in   codes   ]   elif   kechuang   :   dummys   =   [   1   if   code   .   startswith   (   \" 68 \"   )   else   np   .   nan   for   code   in   codes   ]   elif   beijing   :   dummys   =   [   1   if   code   .   startswith   (   \" 8 \"   )   else   np   .   nan   for   code   in   codes   ]   else   :   raise   ValueError   (   \" \u4f60 \u603b\u5f97 \u9009 \u4e00\u4e2a \u80a1\u7968 \u6c60 \u5427 \uff1f \ud83e\udd12 \"   )   dummy _ dict   =   {   k   :   v   for   k   ,   v   in   zip   (   codes   ,   dummys   ) }   dummy _ df   =   pd   .   DataFrame   (   dummy _ dict   ,   index   =   dates   )   df   =   df   *   dummy _ df   return   df   rankic _ test _ on _ industry   (   df   ,   excel _ name   =   ' \u884c\u4e1a rankic . xlsx '   ,   png _ name   =   ' \u884c\u4e1a rankic \u56fe . png '   ,   swindustry   =   0   ,   zxindustry   =   0   )   \u00b6   \u4e13\u95e8 \u8ba1\u7b97 \u56e0\u5b50 \u503c \u5728 \u5404\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u7684 Rank   IC \u503c \uff0c \u5e76 \u7ed8\u5236 \u67f1\u72b6 \u67f1\u72b6\u56fe   Parameters   \u00b6   df   :   pd . DataFrame   \u5168 \u5e02\u573a \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   excel _ name   :   str ,   optional   \u7528\u4e8e \u4fdd\u5b58 \u5404\u4e2a \u884c\u4e1a Rank   IC \u503c \u7684 excel \u6587\u4ef6 \u7684 \u540d\u5b57 ,   by   default   ' \u884c\u4e1a rankic . xlsx '   png _ name   :   str ,   optional   \u7528\u4e8e \u4fdd\u5b58 \u5404\u4e2a \u884c\u4e1a Rank   IC \u503c \u7684 \u67f1\u72b6 \u67f1\u72b6\u56fe \u7684 \u540d\u5b57 ,   by   default   ' \u884c\u4e1a rankic \u56fe . png '   swindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u884c\u4e1a \u540d\u79f0 \u4e0e \u5bf9\u5e94 \u7684 Rank   IC   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   @ do _ on _ dfs   def   rankic _ test _ on _ industry   (   df   :   pd   .   DataFrame   ,   excel _ name   :   str   =   \" \u884c\u4e1a rankic . xlsx \"   ,   png _ name   :   str   =   \" \u884c\u4e1a rankic \u56fe . png \"   ,   swindustry   :   bool   =   0   ,   zxindustry   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4e13\u95e8 \u8ba1\u7b97 \u56e0\u5b50 \u503c \u5728 \u5404\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u7684 Rank   IC \u503c \uff0c \u5e76 \u7ed8\u5236 \u67f1\u72b6 \u67f1\u72b6\u56fe   Parameters   ----------   df   :   pd . DataFrame   \u5168 \u5e02\u573a \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   excel _ name   :   str ,   optional   \u7528\u4e8e \u4fdd\u5b58 \u5404\u4e2a \u884c\u4e1a Rank   IC \u503c \u7684 excel \u6587\u4ef6 \u7684 \u540d\u5b57 ,   by   default   ' \u884c\u4e1a rankic . xlsx '   png _ name   :   str ,   optional   \u7528\u4e8e \u4fdd\u5b58 \u5404\u4e2a \u884c\u4e1a Rank   IC \u503c \u7684 \u67f1\u72b6 \u67f1\u72b6\u56fe \u7684 \u540d\u5b57 ,   by   default   ' \u884c\u4e1a rankic \u56fe . png '   swindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u9009\u62e9 \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   -------   pd . DataFrame   \u884c\u4e1a \u540d\u79f0 \u4e0e \u5bf9\u5e94 \u7684 Rank   IC   \" \" \"   vs   =   group _ test _ on _ industry   (   df   ,   swindustry   =   swindustry   ,   zxindustry   =   zxindustry   )   rankics   =   vs   [ [   \" RankIC \"   ] ]   .   T   if   excel _ name   is   not   None   :   rankics   .   to _ excel   (   excel _ name   )   rankics   .   plot   (   kind   =   \" bar \"   )   plt   .   show   ( )   plt   .   savefig   (   png _ name   )   return   rankics   remove _ unavailable   (   df   )   \u00b6   \u5bf9 \u65e5\u9891 \u6216 \u6708 \u9891 \u56e0\u5b50 \u503c \uff0c \u5254\u9664 st \u80a1 \u3001 \u4e0d \u6b63\u5e38 \u4ea4\u6613 \u7684 \u80a1\u7968 \u548c \u4e0a\u5e02 \u4e0d\u8db3 60 \u5929 \u7684 \u80a1\u7968   Parameters   \u00b6   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u56e0\u5b50 \u503c   Returns   \u00b6   pd . DataFrame   \u5254\u9664 \u540e \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1368   1369   1370   1371   1372   1373   1374   1375   1376   1377   1378   1379   1380   1381   1382   1383   1384   1385   1386   1387   1388   1389   1390   1391   1392   1393   1394   1395   1396   1397   1398   1399   @ do _ on _ dfs   def   remove _ unavailable   (   df   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u65e5\u9891 \u6216 \u6708 \u9891 \u56e0\u5b50 \u503c \uff0c \u5254\u9664 st \u80a1 \u3001 \u4e0d \u6b63\u5e38 \u4ea4\u6613 \u7684 \u80a1\u7968 \u548c \u4e0a\u5e02 \u4e0d\u8db3 60 \u5929 \u7684 \u80a1\u7968   Parameters   ----------   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u56e0\u5b50 \u503c   Returns   -------   pd . DataFrame   \u5254\u9664 \u540e \u7684 \u56e0\u5b50 \u503c   \" \" \"   df0   =   df   .   resample   (   \" M \"   )   .   last   ( )   if   df   .   shape   [   0   ]   /   df0   .   shape   [   0   ]   >   2   :   daily   =   1   else   :   daily   =   0   if   daily   :   state   =   read _ daily   (   state   =   1   )   .   replace   (   0   ,   np   .   nan   )   st   =   read _ daily   (   st   =   1   )   age   =   read _ daily   (   age   =   1   )   st   =   (   1   -   st   )   .   replace   (   0   ,   np   .   nan   )   age   =   ( (   age   > =   60   )   +   0   )   .   replace   (   0   ,   np   .   nan   )   df   =   df   *   age   *   st   *   state   else   :   moon   =   pure _ moon   (   no _ read _ indu   =   1   )   moon   .   set _ basic _ data   ( )   moon   .   judge _ month   ( )   df   =   moon   .   tris _ monthly   *   df   return   df   scipy _ weight   (   facs   ,   backsee   =   6   ,   boxcox   =   0   ,   rank _ corr   =   0   ,   only _ ic   =   0   ,   upper _ bound   =   None   ,   lower _ bound   =   0   )   \u00b6   \u4f7f\u7528 scipy \u7684 minimize \u4f18\u5316 \u6c42\u89e3 \u7684 \u65b9\u5f0f \uff0c \u5bfb\u627e \u6700\u4f18 \u7684 \u56e0\u5b50 \u5408\u6210 \u6743\u91cd \uff0c \u9ed8\u8ba4 \u4f18\u5316 \u6761\u4ef6 \u4e3a \u6700\u5927 ICIR   Parameters   \u00b6   facs   :   list [ pd . DataFrame ]   \u8981 \u5408\u6210 \u7684 \u56e0\u5b50 \uff0c \u6bcf\u4e2a df \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 df   backsee   :   int ,   optional   \u7528\u6765 \u8ba1\u7b97 icir \u7684 \u8fc7\u53bb \u671f\u6570 ,   by   default   6   boxcox   :   bool ,   optional   \u662f\u5426 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   rank _ corr   :   bool ,   optional   \u662f\u5426 \u8ba1\u7b97 rankicir ,   by   default   0   only _ ic   :   bool ,   optional   \u662f\u5426 \u53ea \u8ba1\u7b97 IC \u6216 Rank   IC ,   by   default   0   upper _ bound   :   float ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u7684 \u6743\u91cd \u4e0a\u9650 \uff0c \u5982\u679c \u4e0d \u6307\u5b9a \uff0c \u5219 \u4e3a \u6bcf\u4e2a \u56e0\u5b50 \u5e73\u5747 \u6743\u91cd \u7684 2 \u500d \uff0c \u5373 2 \u9664\u4ee5 \u56e0\u5b50 \u6570\u91cf ,   by   default   None   lower _ bound   :   float ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u7684 \u6743\u91cd \u4e0b\u9650 ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u5408\u6210 \u540e \u7684 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5958   5959   5960   5961   5962   5963   5964   5965   5966   5967   5968   5969   5970   5971   5972   5973   5974   5975   5976   5977   5978   5979   5980   5981   5982   5983   5984   5985   5986   5987   5988   5989   5990   5991   5992   5993   5994   5995   5996   5997   5998   5999   6000   6001   6002   6003   6004   6005   6006   6007   6008   6009   6010   6011   6012   6013   6014   6015   6016   6017   6018   6019   6020   6021   6022   6023   6024   6025   6026   6027   6028   6029   6030   6031   6032   6033   6034   6035   6036   6037   6038   6039   6040   6041   6042   6043   6044   6045   6046   6047   6048   6049   6050   6051   6052   def   scipy _ weight   (   facs   :   list   [   pd   .   DataFrame   ] ,   backsee   :   int   =   6   ,   boxcox   :   bool   =   0   ,   rank _ corr   :   bool   =   0   ,   only _ ic   :   bool   =   0   ,   upper _ bound   :   float   =   None   ,   lower _ bound   :   float   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4f7f\u7528 scipy \u7684 minimize \u4f18\u5316 \u6c42\u89e3 \u7684 \u65b9\u5f0f \uff0c \u5bfb\u627e \u6700\u4f18 \u7684 \u56e0\u5b50 \u5408\u6210 \u6743\u91cd \uff0c \u9ed8\u8ba4 \u4f18\u5316 \u6761\u4ef6 \u4e3a \u6700\u5927 ICIR   Parameters   ----------   facs   :   list [ pd . DataFrame ]   \u8981 \u5408\u6210 \u7684 \u56e0\u5b50 \uff0c \u6bcf\u4e2a df \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 df   backsee   :   int ,   optional   \u7528\u6765 \u8ba1\u7b97 icir \u7684 \u8fc7\u53bb \u671f\u6570 ,   by   default   6   boxcox   :   bool ,   optional   \u662f\u5426 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   rank _ corr   :   bool ,   optional   \u662f\u5426 \u8ba1\u7b97 rankicir ,   by   default   0   only _ ic   :   bool ,   optional   \u662f\u5426 \u53ea \u8ba1\u7b97 IC \u6216 Rank   IC ,   by   default   0   upper _ bound   :   float ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u7684 \u6743\u91cd \u4e0a\u9650 \uff0c \u5982\u679c \u4e0d \u6307\u5b9a \uff0c \u5219 \u4e3a \u6bcf\u4e2a \u56e0\u5b50 \u5e73\u5747 \u6743\u91cd \u7684 2 \u500d \uff0c \u5373 2 \u9664\u4ee5 \u56e0\u5b50 \u6570\u91cf ,   by   default   None   lower _ bound   :   float ,   optional   \u6bcf\u4e2a \u56e0\u5b50 \u7684 \u6743\u91cd \u4e0b\u9650 ,   by   default   0   Returns   -------   pd . DataFrame   \u5408\u6210 \u540e \u7684 \u56e0\u5b50   \" \" \"   date _ first _ max   =   max   ( [   i   .   index   [   0   ]   for   i   in   facs   ] )   facs   =   [   i   [   i   .   index   > =   date _ first _ max   ]   for   i   in   facs   ]   date _ last _ min   =   min   ( [   i   .   index   [   -   1   ]   for   i   in   facs   ] )   facs   =   [   i   [   i   .   index   < =   date _ last _ min   ]   for   i   in   facs   ]   facs   =   [   i   .   shift   (   1   )   for   i   in   facs   ]   ret   =   read _ daily   (   close   =   1   ,   start   =   datetime   .   datetime   .   strftime   (   date _ first _ max   ,   \" % Y% m   % d   \"   )   )   ret   =   ret   /   ret   .   shift   (   20   )   -   1   if   boxcox   :   facs   =   [   decap _ industry   (   i   )   for   i   in   facs   ]   facs   =   [ ( (   i   .   T   -   i   .   T   .   mean   ( ) )   /   i   .   T   .   std   ( ) )   .   T   for   i   in   facs   ]   if   upper _ bound   is   None   :   upper _ bound   =   2   /   len   (   facs   )   dates   =   list   (   facs   [   0   ]   .   index   )   fis   =   [ ]   for   num   ,   date   in   tqdm   .   auto   .   tqdm   (   list   (   enumerate   (   dates   ) ) ) :   if   num   < =   backsee   :   ...   else   :   nears   =   [   i   .   iloc   [   num   -   backsee   :   num   ,   : ]   for   i   in   facs   ]   targets   =   [   i   [   i   .   index   = =   date   ]   for   i   in   facs   ]   if   rank _ corr   :   weights   =   [   show _ corr   (   i   ,   ret   [   ret   .   index   .   isin   (   i   .   index   ) ] ,   plt _ plot   =   0   ,   show _ series   =   1   )   for   i   in   nears   ]   else   :   weights   =   [   show _ corr   (   i   ,   ret   [   ret   .   index   .   isin   (   i   .   index   ) ] ,   plt _ plot   =   0   ,   show _ series   =   1   ,   method   =   \" pearson \"   ,   )   for   i   in   nears   ]   if   only _ ic   :   weights   =   [   i   .   mean   ( )   for   i   in   weights   ]   else   :   weights   =   [   i   .   mean   ( )   /   i   .   std   ( )   for   i   in   weights   ]   weights   =   pd   .   concat   (   weights   ,   axis   =   1   )   def   func   (   x   ) :   w   =   np   .   array   (   x   )   .   reshape   ( (   -   1   ,   1   ) )   y   =   weights   @   w   return   np   .   mean   (   y   )   /   np   .   std   (   y   )   cons   =   {   \" type \"   :   \" eq \"   ,   \" fun \"   :   lambda   x   :   np   .   sum   (   x   )   -   1   }   res   =   minimize   (   func   ,   np   .   random   .   rand   (   weights   .   shape   [   1   ] ,   1   ) ,   constraints   =   cons   ,   bounds   =   [ (   lower _ bound   ,   upper _ bound   ) ]   *   weights   .   shape   [   1   ] ,   )   xs   =   res   .   x   .   tolist   ( )   fac   =   sum   ( [   i   *   j   for   i   ,   j   in   zip   (   xs   ,   targets   ) ] )   fis   .   append   (   fac   )   return   pd   .   concat   (   fis   )   .   shift   (   -   1   )   show _ corr   (   fac1   ,   fac2   ,   method   =   ' pearson '   ,   plt _ plot   =   1   ,   show _ series   =   0   ,   old _ way   =   0   )   \u00b6   \u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027   Parameters   \u00b6   fac1   :   pd . DataFrame   \u56e0\u5b50 1   fac2   :   pd . DataFrame   \u56e0\u5b50 2   method   :   str ,   optional   \u8ba1\u7b97 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65b9\u6cd5 ,   by   default   \" pearson \"   plt _ plot   :   bool ,   optional   \u662f\u5426 \u753b\u51fa \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65f6\u5e8f \u53d8\u5316 \u56fe ,   by   default   1   show _ series   :   bool ,   optional   \u8fd4\u56de \u76f8\u5173 \u76f8\u5173\u6027 \u7684 \u5e8f\u5217 \uff0c \u800c \u975e \u5747\u503c   old _ way   :   bool ,   optional   \u4f7f\u7528 3 . x \u7248\u672c \u7684 \u65b9\u5f0f \u6c42 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   \u00b6   float   \u5e73\u5747 \u622a\u9762 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1005   1006   1007   1008   1009   1010   1011   1012   1013   1014   1015   1016   1017   1018   1019   1020   1021   1022   1023   1024   1025   1026   1027   1028   1029   1030   1031   1032   1033   1034   1035   1036   1037   1038   1039   1040   1041   1042   1043   1044   1045   1046   1047   1048   1049   1050   def   show _ corr   (   fac1   :   pd   .   DataFrame   ,   fac2   :   pd   .   DataFrame   ,   method   :   str   =   \" pearson \"   ,   plt _ plot   :   bool   =   1   ,   show _ series   :   bool   =   0   ,   old _ way   :   bool   =   0   ,   )   - >   float   :   \" \" \" \u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027   Parameters   ----------   fac1   :   pd . DataFrame   \u56e0\u5b50 1   fac2   :   pd . DataFrame   \u56e0\u5b50 2   method   :   str ,   optional   \u8ba1\u7b97 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65b9\u6cd5 ,   by   default   \" pearson \"   plt _ plot   :   bool ,   optional   \u662f\u5426 \u753b\u51fa \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65f6\u5e8f \u53d8\u5316 \u56fe ,   by   default   1   show _ series   :   bool ,   optional   \u8fd4\u56de \u76f8\u5173 \u76f8\u5173\u6027 \u7684 \u5e8f\u5217 \uff0c \u800c \u975e \u5747\u503c   old _ way   :   bool ,   optional   \u4f7f\u7528 3 . x \u7248\u672c \u7684 \u65b9\u5f0f \u6c42 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   -------   ` float `   \u5e73\u5747 \u622a\u9762 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   \" \" \"   if   old _ way   :   if   method   = =   \" spearman \"   :   corr   =   show _ x _ with _ func   (   fac1   ,   fac2   ,   lambda   x   :   x   .   rank   ( )   .   corr   ( )   .   iloc   [   0   ,   1   ] )   else   :   corr   =   show _ x _ with _ func   (   fac1   ,   fac2   ,   lambda   x   :   x   .   corr   (   method   =   method   )   .   iloc   [   0   ,   1   ]   )   else   :   corr   =   fac1   .   corrwith   (   fac2   ,   axis   =   1   ,   method   =   method   )   if   show _ series   :   return   corr   else   :   if   plt _ plot   :   corr   .   plot   (   rot   =   60   )   plt   .   show   ( )   return   corr   .   mean   ( )   show _ corrs   (   factors   ,   factor _ names   =   None   ,   print _ bool   =   True   ,   show _ percent   =   True   ,   method   =   ' pearson '   )   \u00b6   \u5c55\u793a \u5f88\u591a \u56e0\u5b50 \u4e24 \u4e24 \u4e4b\u95f4 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027   Parameters   \u00b6   factors   :   List [ pd . DataFrame ]   \u6240\u6709 \u56e0\u5b50 \u6784\u6210 \u7684 \u5217\u8868 ,   by   default   None   factor _ names   :   List [ str ] ,   optional   \u4e0a\u8ff0 \u56e0\u5b50 \u4f9d\u6b21 \u7684 \u540d\u5b57 ,   by   default   None   print _ bool   :   bool ,   optional   \u662f\u5426 \u6253\u5370 \u51fa \u4e24 \u4e24 \u4e4b\u95f4 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u8868\u683c ,   by   default   True   show _ percent   :   bool ,   optional   \u662f\u5426 \u4ee5 \u767e\u5206 \u5206\u6570 \u767e\u5206\u6570 \u7684 \u5f62\u5f0f \u5c55\u793a ,   by   default   True   method   :   str ,   optional   \u8ba1\u7b97 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65b9\u6cd5 ,   by   default   \" pearson \"   Returns   \u00b6   pd . DataFrame   \u4e24 \u4e24 \u4e4b\u95f4 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1053   1054   1055   1056   1057   1058   1059   1060   1061   1062   1063   1064   1065   1066   1067   1068   1069   1070   1071   1072   1073   1074   1075   1076   1077   1078   1079   1080   1081   1082   1083   1084   1085   1086   1087   1088   1089   1090   1091   1092   1093   1094   1095   1096   1097   1098   def   show _ corrs   (   factors   :   List   [   pd   .   DataFrame   ] ,   factor _ names   :   List   [   str   ]   =   None   ,   print _ bool   :   bool   =   True   ,   show _ percent   :   bool   =   True   ,   method   :   str   =   \" pearson \"   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u5c55\u793a \u5f88\u591a \u56e0\u5b50 \u4e24 \u4e24 \u4e4b\u95f4 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027   Parameters   ----------   factors   :   List [ pd . DataFrame ]   \u6240\u6709 \u56e0\u5b50 \u6784\u6210 \u7684 \u5217\u8868 ,   by   default   None   factor _ names   :   List [ str ] ,   optional   \u4e0a\u8ff0 \u56e0\u5b50 \u4f9d\u6b21 \u7684 \u540d\u5b57 ,   by   default   None   print _ bool   :   bool ,   optional   \u662f\u5426 \u6253\u5370 \u51fa \u4e24 \u4e24 \u4e4b\u95f4 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u8868\u683c ,   by   default   True   show _ percent   :   bool ,   optional   \u662f\u5426 \u4ee5 \u767e\u5206 \u5206\u6570 \u767e\u5206\u6570 \u7684 \u5f62\u5f0f \u5c55\u793a ,   by   default   True   method   :   str ,   optional   \u8ba1\u7b97 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65b9\u6cd5 ,   by   default   \" pearson \"   Returns   -------   ` pd . DataFrame `   \u4e24 \u4e24 \u4e4b\u95f4 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u8868\u683c   \" \" \"   corrs   =   [ ]   for   i   in   range   (   len   (   factors   ) ) :   main _ i   =   factors   [   i   ]   follows   =   factors   [   i   +   1   : ]   corr   =   [   show _ corr   (   main _ i   ,   i   ,   plt _ plot   =   False   ,   method   =   method   )   for   i   in   follows   ]   corr   =   [   np   .   nan   ]   *   (   i   +   1   )   +   corr   corrs   .   append   (   corr   )   if   factor _ names   is   None   :   factor _ names   =   [   f   \" fac   {   i   }   \"   for   i   in   list   (   range   (   1   ,   len   (   factors   )   +   1   ) ) ]   corrs   =   pd   .   DataFrame   (   corrs   ,   columns   =   factor _ names   ,   index   =   factor _ names   )   np   .   fill _ diagonal   (   corrs   .   to _ numpy   ( ) ,   1   )   if   show _ percent   :   pcorrs   =   corrs   .   applymap   (   to _ percent   )   else   :   pcorrs   =   corrs   .   copy   ( )   if   print _ bool   :   return   pcorrs   else   :   return   corrs   show _ corrs _ with _ old   (   df   =   None   ,   method   =   ' pearson '   ,   only _ new   =   1   ,   with _ son _ factors   =   1   ,   freq   =   ' M '   ,   old _ database   =   0   )   \u00b6   \u8ba1\u7b97 \u65b0 \u56e0\u5b50 \u548c \u5df2\u6709 \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Parameters   \u00b6   df   :   pd . DataFrame ,   optional   \u65b0 \u56e0\u5b50 ,   by   default   None   method   :   str ,   optional   \u6c42 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65b9\u6cd5 ,   by   default   ' pearson '   only _ new   :   bool ,   optional   \u4ec5 \u8ba1\u7b97 \u65b0 \u56e0\u5b50 \u4e0e \u65e7 \u56e0\u5b50 \u4e4b\u95f4 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 ,   by   default   1   with _ son _ factors   :   bool ,   optional   \u8ba1\u7b97 \u65b0 \u56e0\u5b50 \u4e0e \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u5404\u4e2a \u7ec6\u5206 \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 ,   by   default   1   freq   :   str ,   optional   \u8bfb\u53d6 \u56e0\u5b50 \u6570\u636e \u7684 \u9891\u7387 ,   by   default   ' M '   old _ database   :   bool ,   optional   \u4f7f\u7528 3 . x \u7248\u672c \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u77e9\u9635   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1236   1237   1238   1239   1240   1241   1242   1243   1244   1245   1246   1247   1248   1249   1250   1251   1252   1253   1254   1255   1256   1257   1258   1259   1260   1261   1262   1263   1264   1265   1266   1267   1268   1269   1270   1271   1272   1273   1274   1275   1276   1277   1278   1279   1280   1281   1282   1283   1284   1285   1286   1287   1288   1289   1290   1291   1292   1293   1294   1295   1296   1297   1298   1299   1300   1301   1302   1303   1304   1305   1306   1307   1308   1309   1310   1311   1312   1313   1314   1315   1316   1317   1318   1319   1320   1321   1322   1323   1324   1325   1326   1327   1328   1329   1330   1331   1332   1333   1334   1335   1336   1337   1338   1339   1340   1341   1342   1343   1344   1345   1346   1347   1348   1349   1350   1351   1352   1353   1354   1355   1356   1357   1358   1359   1360   1361   1362   1363   1364   1365   @ do _ on _ dfs   def   show _ corrs _ with _ old   (   df   :   pd   .   DataFrame   =   None   ,   method   :   str   =   \" pearson \"   ,   only _ new   :   bool   =   1   ,   with _ son _ factors   :   bool   =   1   ,   freq   :   str   =   \" M \"   ,   old _ database   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u8ba1\u7b97 \u65b0 \u56e0\u5b50 \u548c \u5df2\u6709 \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Parameters   ----------   df   :   pd . DataFrame ,   optional   \u65b0 \u56e0\u5b50 ,   by   default   None   method   :   str ,   optional   \u6c42 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65b9\u6cd5 ,   by   default   ' pearson '   only _ new   :   bool ,   optional   \u4ec5 \u8ba1\u7b97 \u65b0 \u56e0\u5b50 \u4e0e \u65e7 \u56e0\u5b50 \u4e4b\u95f4 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 ,   by   default   1   with _ son _ factors   :   bool ,   optional   \u8ba1\u7b97 \u65b0 \u56e0\u5b50 \u4e0e \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u5404\u4e2a \u7ec6\u5206 \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 ,   by   default   1   freq   :   str ,   optional   \u8bfb\u53d6 \u56e0\u5b50 \u6570\u636e \u7684 \u9891\u7387 ,   by   default   ' M '   old _ database   :   bool ,   optional   \u4f7f\u7528 3 . x \u7248\u672c \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   0   Returns   -------   pd . DataFrame   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u77e9\u9635   \" \" \"   if   df   is   not   None   :   df0   =   df   .   resample   (   freq   )   .   last   ( )   if   df   .   shape   [   0   ]   /   df0   .   shape   [   0   ]   >   2   :   daily   =   1   else   :   daily   =   0   if   old _ database   :   nums   =   os   .   listdir   (   homeplace   .   final _ factor _ file   )   nums   =   sorted   (   set   (   [   int   (   i   .   split   (   \" \u56e0\u5b50 \u591a\u56e0\u5b50 \"   ) [   1   ]   .   split   (   \" _ \u6708 \"   ) [   0   ] )   for   i   in   nums   if   i   .   endswith   (   \" \u6708 . parquet \"   )   ]   )   )   olds   =   [ ]   for   i   in   nums   :   try   :   if   daily   :   old   =   database _ read _ final _ factors   (   order   =   i   ) [   0   ]   else   :   old   =   database _ read _ final _ factors   (   order   =   i   ) [   0   ]   .   resample   (   \" M \"   )   .   last   ( )   olds   .   append   (   old   )   except   Exception   :   break   if   df   is   not   None   :   if   only _ new   :   corrs   =   [   to _ percent   (   show _ corr   (   df   ,   i   ,   plt _ plot   =   0   ,   method   =   method   ) )   for   i   in   olds   ]   corrs   =   pd   .   Series   (   corrs   ,   index   =   [   f   \" old   {   i   }   \"   for   i   in   nums   ] )   corrs   =   corrs   .   to _ frame   (   f   \"   {   method   }   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   )   .   T   else   :   olds   =   [   df   ]   +   olds   corrs   =   show _ corrs   (   olds   ,   [   \" new \"   ]   +   [   f   \" old   {   i   }   \"   for   i   in   nums   ] ,   method   =   method   )   else   :   corrs   =   show _ corrs   (   olds   ,   [   f   \" old   {   i   }   \"   for   i   in   nums   ] ,   method   =   method   )   else   :   qdb   =   Questdb   ( )   if   freq   = =   \" M \"   :   factor _ infos   =   qdb   .   get _ data   (   \" select   *   from   factor _ infos   where   freq = ' \u6708 ' \"   )   else   :   factor _ infos   =   qdb   .   get _ data   (   \" select   *   from   factor _ infos   where   freq = ' \u5468 ' \"   )   if   not   with _ son _ factors   :   old _ orders   =   list   (   set   (   factor _ infos   .   order   ) )   if   daily   :   olds   =   [   FactorDone   (   order   =   i   ) ( )   for   i   in   old _ orders   ]   else   :   olds   =   [   FactorDone   (   order   =   i   ) ( )   .   resample   (   freq   )   .   last   ( )   for   i   in   old _ orders   ]   else   :   old _ orders   =   [   i   .   order   +   i   .   son _ name   .   replace   (   \" \u56e0\u5b50 \"   ,   \" \"   )   for   i   in   factor _ infos   .   dropna   ( )   .   itertuples   ( )   ]   if   daily   :   olds   =   [   FactorDone   (   order   =   i   .   order   ) (   i   .   son _ name   )   for   i   in   factor _ infos   .   dropna   ( )   .   itertuples   ( )   ]   else   :   olds   =   [   FactorDone   (   order   =   i   .   order   ) (   i   .   son _ name   )   .   resample   (   freq   )   .   last   ( )   for   i   in   factor _ infos   .   dropna   ( )   .   itertuples   ( )   ]   if   df   is   not   None   :   if   only _ new   :   corrs   =   [   to _ percent   (   show _ corr   (   df   ,   i   ,   plt _ plot   =   0   ,   method   =   method   ) )   for   i   in   olds   ]   corrs   =   pd   .   Series   (   corrs   ,   index   =   old _ orders   )   corrs   =   corrs   .   to _ frame   (   f   \"   {   method   }   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   )   if   corrs   .   shape   [   0   ]   < =   30   :   ...   elif   corrs   .   shape   [   0   ]   < =   60   :   corrs   =   corrs   .   reset _ index   ( )   corrs   .   columns   =   [   \" \u56e0\u5b50 \u540d\u79f0 \"   ,   \" \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   ]   corrs1   =   corrs   .   iloc   [ :   30   ,   : ]   corrs2   =   corrs   .   iloc   [   30   : ,   : ]   .   reset _ index   (   drop   =   True   )   corrs   =   pd   .   concat   ( [   corrs1   ,   corrs2   ] ,   axis   =   1   )   .   fillna   (   \" \"   )   elif   corrs   .   shape   [   0   ]   < =   90   :   corrs   =   corrs   .   reset _ index   ( )   corrs   .   columns   =   [   \" \u56e0\u5b50 \u540d\u79f0 \"   ,   \" \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   ]   corrs1   =   corrs   .   iloc   [ :   30   ,   : ]   corrs2   =   corrs   .   iloc   [   30   :   60   ,   : ]   .   reset _ index   (   drop   =   True   )   corrs3   =   corrs   .   iloc   [   60   :   90   ,   : ]   .   reset _ index   (   drop   =   True   )   corrs   =   pd   .   concat   ( [   corrs1   ,   corrs2   ,   corrs3   ] ,   axis   =   1   )   .   fillna   (   \" \"   )   else   :   olds   =   [   df   ]   +   olds   corrs   =   show _ corrs   (   olds   ,   old _ orders   ,   method   =   method   )   else   :   corrs   =   show _ corrs   (   olds   ,   old _ orders   ,   method   =   method   )   return   corrs   .   sort _ index   ( )   show _ cov   (   fac1   ,   fac2   ,   plt _ plot   =   1   ,   show _ series   =   0   )   \u00b6   \u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027   Parameters   \u00b6   fac1   :   pd . DataFrame   \u56e0\u5b50 1   fac2   :   pd . DataFrame   \u56e0\u5b50 2   method   :   str ,   optional   \u8ba1\u7b97 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65b9\u6cd5 ,   by   default   \" spearman \"   plt _ plot   :   bool ,   optional   \u662f\u5426 \u753b\u51fa \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65f6\u5e8f \u53d8\u5316 \u56fe ,   by   default   1   show _ series   :   bool ,   optional   \u8fd4\u56de \u76f8\u5173 \u76f8\u5173\u6027 \u7684 \u5e8f\u5217 \uff0c \u800c \u975e \u5747\u503c   Returns   \u00b6   float   \u5e73\u5747 \u622a\u9762 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1101   1102   1103   1104   1105   1106   1107   1108   1109   1110   1111   1112   1113   1114   1115   1116   1117   1118   1119   1120   1121   1122   1123   1124   1125   1126   1127   1128   1129   1130   1131   1132   1133   1134   def   show _ cov   (   fac1   :   pd   .   DataFrame   ,   fac2   :   pd   .   DataFrame   ,   plt _ plot   :   bool   =   1   ,   show _ series   :   bool   =   0   ,   )   - >   float   :   \" \" \" \u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027   Parameters   ----------   fac1   :   pd . DataFrame   \u56e0\u5b50 1   fac2   :   pd . DataFrame   \u56e0\u5b50 2   method   :   str ,   optional   \u8ba1\u7b97 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65b9\u6cd5 ,   by   default   \" spearman \"   plt _ plot   :   bool ,   optional   \u662f\u5426 \u753b\u51fa \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u65f6\u5e8f \u53d8\u5316 \u56fe ,   by   default   1   show _ series   :   bool ,   optional   \u8fd4\u56de \u76f8\u5173 \u76f8\u5173\u6027 \u7684 \u5e8f\u5217 \uff0c \u800c \u975e \u5747\u503c   Returns   -------   ` float `   \u5e73\u5747 \u622a\u9762 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   \" \" \"   cov   =   show _ x _ with _ func   (   fac1   ,   fac2   ,   lambda   x   :   x   .   cov   ( )   .   iloc   [   0   ,   1   ] )   if   show _ series   :   return   cov   else   :   if   plt _ plot   :   cov   .   plot   (   rot   =   60   )   plt   .   show   ( )   return   cov   .   mean   ( )   show _ covs   (   factors   ,   factor _ names   =   None   ,   print _ bool   =   True   ,   show _ percent   =   True   )   \u00b6   \u5c55\u793a \u5f88\u591a \u56e0\u5b50 \u4e24 \u4e24 \u4e4b\u95f4 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027   Parameters   \u00b6   factors   :   List [ pd . DataFrame ]   \u6240\u6709 \u56e0\u5b50 \u6784\u6210 \u7684 \u5217\u8868 ,   by   default   None   factor _ names   :   List [ str ] ,   optional   \u4e0a\u8ff0 \u56e0\u5b50 \u4f9d\u6b21 \u7684 \u540d\u5b57 ,   by   default   None   print _ bool   :   bool ,   optional   \u662f\u5426 \u6253\u5370 \u51fa \u4e24 \u4e24 \u4e4b\u95f4 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u8868\u683c ,   by   default   True   show _ percent   :   bool ,   optional   \u662f\u5426 \u4ee5 \u767e\u5206 \u5206\u6570 \u767e\u5206\u6570 \u7684 \u5f62\u5f0f \u5c55\u793a ,   by   default   True   Returns   \u00b6   pd . DataFrame   \u4e24 \u4e24 \u4e4b\u95f4 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1168   1169   1170   1171   1172   1173   1174   1175   1176   1177   1178   1179   1180   1181   1182   1183   1184   1185   1186   1187   1188   1189   1190   1191   1192   1193   1194   1195   1196   1197   1198   1199   1200   1201   1202   1203   1204   1205   1206   1207   1208   1209   def   show _ covs   (   factors   :   List   [   pd   .   DataFrame   ] ,   factor _ names   :   List   [   str   ]   =   None   ,   print _ bool   :   bool   =   True   ,   show _ percent   :   bool   =   True   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u5c55\u793a \u5f88\u591a \u56e0\u5b50 \u4e24 \u4e24 \u4e4b\u95f4 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027   Parameters   ----------   factors   :   List [ pd . DataFrame ]   \u6240\u6709 \u56e0\u5b50 \u6784\u6210 \u7684 \u5217\u8868 ,   by   default   None   factor _ names   :   List [ str ] ,   optional   \u4e0a\u8ff0 \u56e0\u5b50 \u4f9d\u6b21 \u7684 \u540d\u5b57 ,   by   default   None   print _ bool   :   bool ,   optional   \u662f\u5426 \u6253\u5370 \u51fa \u4e24 \u4e24 \u4e4b\u95f4 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u8868\u683c ,   by   default   True   show _ percent   :   bool ,   optional   \u662f\u5426 \u4ee5 \u767e\u5206 \u5206\u6570 \u767e\u5206\u6570 \u7684 \u5f62\u5f0f \u5c55\u793a ,   by   default   True   Returns   -------   ` pd . DataFrame `   \u4e24 \u4e24 \u4e4b\u95f4 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u7684 \u8868\u683c   \" \" \"   corrs   =   [ ]   for   i   in   range   (   len   (   factors   ) ) :   main _ i   =   factors   [   i   ]   follows   =   factors   [   i   +   1   : ]   corr   =   [   show _ cov   (   main _ i   ,   i   ,   plt _ plot   =   False   )   for   i   in   follows   ]   corr   =   [   np   .   nan   ]   *   (   i   +   1   )   +   corr   corrs   .   append   (   corr   )   if   factor _ names   is   None   :   factor _ names   =   [   f   \" fac   {   i   }   \"   for   i   in   list   (   range   (   1   ,   len   (   factors   )   +   1   ) ) ]   corrs   =   pd   .   DataFrame   (   corrs   ,   columns   =   factor _ names   ,   index   =   factor _ names   )   np   .   fill _ diagonal   (   corrs   .   to _ numpy   ( ) ,   1   )   if   show _ percent   :   pcorrs   =   corrs   .   applymap   (   to _ percent   )   else   :   pcorrs   =   corrs   .   copy   ( )   if   print _ bool   :   print   (   pcorrs   )   return   corrs   show _ x _ with _ func   (   fac1   ,   fac2   ,   func   )   \u00b6   \u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u67d0\u79cd \u622a\u9762 \u5173\u7cfb   Parameters   \u00b6   fac1   :   pd . DataFrame   \u56e0\u5b50 1   fac2   :   pd . DataFrame   \u56e0\u5b50 2   func   :   Callable   \u8981 \u5bf9 \u4e24\u4e2a \u56e0\u5b50 \u5728 \u622a\u9762 \u4e0a \u7684 \u8fdb\u884c \u7684 \u64cd\u4f5c   Returns   \u00b6   pd . Series   \u622a\u9762 \u5173\u7cfb   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1137   1138   1139   1140   1141   1142   1143   1144   1145   1146   1147   1148   1149   1150   1151   1152   1153   1154   1155   1156   1157   1158   1159   1160   1161   1162   1163   1164   1165   def   show _ x _ with _ func   (   fac1   :   pd   .   DataFrame   ,   fac2   :   pd   .   DataFrame   ,   func   :   Callable   ,   )   - >   pd   .   Series   :   \" \" \" \u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u67d0\u79cd \u622a\u9762 \u5173\u7cfb   Parameters   ----------   fac1   :   pd . DataFrame   \u56e0\u5b50 1   fac2   :   pd . DataFrame   \u56e0\u5b50 2   func   :   Callable   \u8981 \u5bf9 \u4e24\u4e2a \u56e0\u5b50 \u5728 \u622a\u9762 \u4e0a \u7684 \u8fdb\u884c \u7684 \u64cd\u4f5c   Returns   -------   ` pd . Series `   \u622a\u9762 \u5173\u7cfb   \" \" \"   the _ func   =   partial   (   func   )   both1   =   fac1   .   stack   ( )   .   reset _ index   ( )   befo1   =   fac2   .   stack   ( )   .   reset _ index   ( )   both1   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" both \"   ]   befo1   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" befo \"   ]   twins   =   pd   .   merge   (   both1   ,   befo1   ,   on   =   [   \" date \"   ,   \" code \"   ] )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   corr   =   twins   .   groupby   (   \" date \"   )   .   apply   (   the _ func   )   return   corr   symmetrically _ orthogonalize   (   dfs   )   \u00b6   \u5bf9 \u591a\u4e2a \u56e0\u5b50 \u505a \u5bf9\u79f0 \u6b63\u4ea4 \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u5f97\u5230 \u6b63\u4ea4 \u5176\u4ed6 \u56e0\u5b50 \u540e \u7684 \u7ed3\u679c   Parameters   \u00b6   dfs   :   list [ pd . DataFrame ]   \u591a\u4e2a \u8981 \u505a \u6b63\u4ea4 \u7684 \u56e0\u5b50 \uff0c \u6bcf\u4e2a df \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 df   Returns   \u00b6   list [ pd . DataFrame ]   \u5bf9\u79f0 \u6b63\u4ea4 \u540e \u7684 \u5404\u4e2a \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5822   5823   5824   5825   5826   5827   5828   5829   5830   5831   5832   5833   5834   5835   5836   5837   5838   5839   5840   5841   5842   5843   5844   5845   5846   5847   5848   5849   5850   5851   5852   5853   5854   5855   5856   5857   5858   5859   5860   5861   5862   5863   5864   5865   5866   5867   5868   5869   5870   5871   5872   5873   def   symmetrically _ orthogonalize   (   dfs   :   list   [   pd   .   DataFrame   ] )   - >   list   [   pd   .   DataFrame   ] :   \" \" \" \u5bf9 \u591a\u4e2a \u56e0\u5b50 \u505a \u5bf9\u79f0 \u6b63\u4ea4 \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u5f97\u5230 \u6b63\u4ea4 \u5176\u4ed6 \u56e0\u5b50 \u540e \u7684 \u7ed3\u679c   Parameters   ----------   dfs   :   list [ pd . DataFrame ]   \u591a\u4e2a \u8981 \u505a \u6b63\u4ea4 \u7684 \u56e0\u5b50 \uff0c \u6bcf\u4e2a df \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 df   Returns   -------   list [ pd . DataFrame ]   \u5bf9\u79f0 \u6b63\u4ea4 \u540e \u7684 \u5404\u4e2a \u56e0\u5b50   \" \" \"   def   sing   (   dfs   :   list   [   pd   .   DataFrame   ] ,   date   :   pd   .   Timestamp   ) :   dds   =   [ ]   for   num   ,   i   in   enumerate   (   dfs   ) :   i   =   i   [   i   .   index   = =   date   ]   i   .   index   =   [   f   \" fac   {   num   }   \"   ]   i   =   i   .   T   dds   .   append   (   i   )   dds   =   pd   .   concat   (   dds   ,   axis   =   1   )   cov   =   dds   .   cov   ( )   d   ,   u   =   np   .   linalg   .   eig   (   cov   )   d   =   np   .   diag   (   d   * *   (   -   0.5   ) )   new _ facs   =   pd   .   DataFrame   (   np   .   dot   (   dds   ,   np   .   dot   (   np   .   dot   (   u   ,   d   ) ,   u   .   T   ) ) ,   columns   =   dds   .   columns   ,   index   =   dds   .   index   )   new _ facs   =   new _ facs   .   stack   ( )   .   reset _ index   ( )   new _ facs   .   columns   =   [   \" code \"   ,   \" fac _ number \"   ,   \" fac \"   ]   new _ facs   =   new _ facs   .   assign   (   date   =   date   )   dds   =   [ ]   for   num   ,   i   in   enumerate   (   dfs   ) :   i   =   new _ facs   [   new _ facs   .   fac _ number   = =   f   \" fac   {   num   }   \"   ]   i   =   i   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   dds   .   append   (   i   )   return   dds   dfs   =   [   standardlize   (   i   )   for   i   in   dfs   ]   date _ first   =   max   ( [   i   .   index   .   min   ( )   for   i   in   dfs   ] )   date _ last   =   min   ( [   i   .   index   .   max   ( )   for   i   in   dfs   ] )   dfs   =   [   i   [ (   i   .   index   > =   date _ first   )   &   (   i   .   index   < =   date _ last   ) ]   for   i   in   dfs   ]   fac _ num   =   len   (   dfs   )   ddss   =   [ [ ]   for   i   in   range   (   fac _ num   ) ]   for   date   in   tqdm   .   auto   .   tqdm   (   dfs   [   0   ]   .   index   ) :   dds   =   sing   (   dfs   ,   date   )   for   num   ,   i   in   enumerate   (   dds   ) :   ddss   [   num   ]   .   append   (   i   )   ds   =   [ ]   for   i   in   tqdm   .   auto   .   tqdm   (   ddss   ) :   ds   .   append   (   pd   .   concat   (   i   ) )   return   ds   test _ on _ 300500   (   df   ,   trade _ cost _ double _ side   =   0   ,   group _ num   =   10   ,   value _ weighted   =   1   ,   boxcox   =   0   ,   hs300   =   0   ,   zz500   =   0   ,   zz1000   =   0   ,   gz2000   =   0   ,   iplot   =   1   ,   opens _ average _ first _ day   =   0   ,   total _ cap   =   0   )   \u00b6   \u5bf9 \u56e0\u5b50 \u5728 \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u8fdb\u884c \u591a\u7a7a \u548c \u591a\u5934 \u6d4b\u8bd5   Parameters   \u00b6   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   group _ num   :   int   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   value _ weighted   :   bool   \u662f\u5426 \u8fdb\u884c \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   0   hs300   :   bool ,   optional   \u5728 \u6caa \u6df1 300 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u6d4b\u8bd5 ,   by   default   0   zz500   :   bool ,   optional   \u5728 \u4e2d\u8bc1 500 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u6d4b\u8bd5 ,   by   default   0   zz1000   :   bool ,   optional   \u5728 \u4e2d\u8bc1 1000 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u6d4b\u8bd5 ,   by   default   0   gz1000   :   bool ,   optional   \u5728 \u56fd\u8bc1 2000 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u6d4b\u8bd5 ,   by   default   0   iplot   :   bo0l , optional   \u591a\u7a7a \u56de\u6d4b \u7684 \u65f6\u5019 \uff0c \u662f\u5426 \u4f7f\u7528 cufflinks \u7ed8\u753b   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   Returns   \u00b6   pd . Series   \u591a\u5934 \u7ec4\u5728 \u8be5 \u6307\u6570 \u4e0a \u7684 \u8d85\u989d \u6536\u76ca \u5e8f\u5217   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5011   5012   5013   5014   5015   5016   5017   5018   5019   5020   5021   5022   5023   5024   5025   5026   5027   5028   5029   5030   5031   5032   5033   5034   5035   5036   5037   5038   5039   5040   5041   5042   5043   5044   5045   5046   5047   5048   5049   5050   5051   5052   5053   5054   5055   5056   5057   5058   5059   5060   5061   5062   5063   5064   5065   5066   5067   5068   5069   5070   5071   5072   5073   5074   5075   5076   5077   5078   5079   5080   5081   5082   5083   5084   5085   5086   5087   5088   5089   5090   5091   5092   5093   5094   5095   5096   5097   5098   5099   5100   5101   5102   5103   5104   5105   5106   5107   5108   5109   @ do _ on _ dfs   def   test _ on _ 300500   (   df   :   pd   .   DataFrame   ,   trade _ cost _ double _ side   :   float   =   0   ,   group _ num   :   int   =   10   ,   value _ weighted   :   bool   =   1   ,   boxcox   :   bool   =   0   ,   hs300   :   bool   =   0   ,   zz500   :   bool   =   0   ,   zz1000   :   bool   =   0   ,   gz2000   :   bool   =   0   ,   iplot   :   bool   =   1   ,   opens _ average _ first _ day   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   )   - >   pd   .   Series   :   \" \" \" \u5bf9 \u56e0\u5b50 \u5728 \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u8fdb\u884c \u591a\u7a7a \u548c \u591a\u5934 \u6d4b\u8bd5   Parameters   ----------   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   group _ num   :   int   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   value _ weighted   :   bool   \u662f\u5426 \u8fdb\u884c \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   0   hs300   :   bool ,   optional   \u5728 \u6caa \u6df1 300 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u6d4b\u8bd5 ,   by   default   0   zz500   :   bool ,   optional   \u5728 \u4e2d\u8bc1 500 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u6d4b\u8bd5 ,   by   default   0   zz1000   :   bool ,   optional   \u5728 \u4e2d\u8bc1 1000 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u6d4b\u8bd5 ,   by   default   0   gz1000   :   bool ,   optional   \u5728 \u56fd\u8bc1 2000 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u6d4b\u8bd5 ,   by   default   0   iplot   :   bo0l , optional   \u591a\u7a7a \u56de\u6d4b \u7684 \u65f6\u5019 \uff0c \u662f\u5426 \u4f7f\u7528 cufflinks \u7ed8\u753b   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   Returns   -------   pd . Series   \u591a\u5934 \u7ec4\u5728 \u8be5 \u6307\u6570 \u4e0a \u7684 \u8d85\u989d \u6536\u76ca \u5e8f\u5217   \" \" \"   fi300   =   daily _ factor _ on300500   (   df   ,   hs300   =   hs300   ,   zz500   =   zz500   ,   zz1000   =   zz1000   ,   gz2000   =   gz2000   )   shen   =   pure _ moonnight   (   fi300   ,   value _ weighted   =   value _ weighted   ,   groups _ num   =   group _ num   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   boxcox   =   boxcox   ,   iplot   =   iplot   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   if   (   shen   .   shen   .   group _ net _ values   .   group1   .   iloc   [   -   1   ]   >   shen   .   shen   .   group _ net _ values   [   f   \" group   {   group _ num   }   \"   ]   .   iloc   [   -   1   ]   ) :   print   (   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   hs300   =   hs300   ,   zz500   =   zz500   ,   zz1000   =   zz1000   ,   gz2000   =   gz2000   ,   )   )   abrets   =   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   .   group1   ,   hs300   =   hs300   ,   zz500   =   zz500   ,   zz1000   =   zz1000   ,   gz2000   =   gz2000   ,   )   return   abrets   else   :   print   (   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   \" group   {   group _ num   }   \"   ] ,   hs300   =   hs300   ,   zz500   =   zz500   ,   zz1000   =   zz1000   ,   gz2000   =   gz2000   ,   )   )   abrets   =   make _ relative _ comments _ plot   (   shen   .   shen   .   group _ rets   [   f   \" group   {   group _ num   }   \"   ] ,   hs300   =   hs300   ,   zz500   =   zz500   ,   zz1000   =   zz1000   ,   gz2000   =   gz2000   ,   )   return   abrets   test _ on _ index _ four   (   df   ,   value _ weighted   =   1   ,   group _ num   =   10   ,   trade _ cost _ double _ side   =   0   ,   iplot   =   1   ,   gz2000   =   0   ,   boxcox   =   1   ,   opens _ average _ first _ day   =   0   ,   total _ cap   =   0   )   \u00b6   \u5bf9 \u56e0\u5b50 \u540c\u65f6 \u5728 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u3001 \u56fd\u8bc1 2000 \u8fd9 4 \u4e2a \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u8fdb\u884c \u591a\u7a7a \u548c \u591a\u5934 \u8d85\u989d \u6d4b\u8bd5   Parameters   \u00b6   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   value _ weighted   :   bool   \u662f\u5426 \u8fdb\u884c \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   0   group _ num   :   int   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   iplot   :   bol , optional   \u591a\u7a7a \u56de\u6d4b \u7684 \u65f6\u5019 \uff0c \u662f\u5426 \u4f7f\u7528 cufflinks \u7ed8\u753b   gz2000   :   bool ,   optional   \u662f\u5426 \u8fdb\u884c \u56fd\u8bc1 2000 \u4e0a \u7684 \u6d4b\u8bd5 ,   by   default   0   boxcox   :   bool ,   optional   \u662f\u5426 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u5904\u7406 ,   by   default   1   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u591a\u5934 \u7ec4\u5728 \u5404\u4e2a \u6307\u6570 \u4e0a \u7684 \u8d85\u989d \u6536\u76ca \u5e8f\u5217   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5112   5113   5114   5115   5116   5117   5118   5119   5120   5121   5122   5123   5124   5125   5126   5127   5128   5129   5130   5131   5132   5133   5134   5135   5136   5137   5138   5139   5140   5141   5142   5143   5144   5145   5146   5147   5148   5149   5150   5151   5152   5153   5154   5155   5156   5157   5158   5159   5160   5161   5162   5163   5164   5165   5166   5167   5168   5169   5170   5171   5172   5173   5174   5175   5176   5177   5178   5179   5180   5181   5182   5183   5184   5185   5186   5187   5188   5189   5190   5191   5192   5193   5194   5195   5196   5197   5198   5199   5200   5201   5202   5203   5204   5205   5206   5207   5208   5209   5210   5211   5212   5213   5214   5215   5216   5217   5218   5219   5220   5221   5222   5223   5224   5225   5226   5227   5228   5229   5230   5231   5232   5233   5234   5235   5236   5237   5238   5239   5240   5241   5242   5243   5244   5245   5246   5247   5248   5249   5250   5251   5252   5253   5254   5255   5256   5257   5258   5259   5260   5261   5262   5263   5264   5265   5266   5267   5268   5269   5270   5271   5272   5273   5274   5275   5276   5277   5278   5279   5280   5281   5282   5283   5284   5285   5286   5287   5288   5289   5290   5291   5292   5293   5294   5295   5296   5297   5298   5299   5300   5301   5302   5303   5304   5305   5306   5307   5308   5309   5310   5311   5312   5313   5314   5315   5316   5317   5318   5319   5320   5321   5322   5323   5324   5325   5326   5327   5328   5329   5330   5331   5332   5333   5334   5335   5336   5337   5338   5339   5340   5341   5342   5343   5344   5345   5346   5347   5348   5349   5350   5351   5352   5353   5354   5355   5356   5357   5358   5359   5360   5361   5362   5363   5364   5365   5366   5367   5368   5369   5370   @ do _ on _ dfs   def   test _ on _ index _ four   (   df   :   pd   .   DataFrame   ,   value _ weighted   :   bool   =   1   ,   group _ num   :   int   =   10   ,   trade _ cost _ double _ side   :   float   =   0   ,   iplot   :   bool   =   1   ,   gz2000   :   bool   =   0   ,   boxcox   :   bool   =   1   ,   opens _ average _ first _ day   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56e0\u5b50 \u540c\u65f6 \u5728 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u3001 \u56fd\u8bc1 2000 \u8fd9 4 \u4e2a \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u8fdb\u884c \u591a\u7a7a \u548c \u591a\u5934 \u8d85\u989d \u6d4b\u8bd5   Parameters   ----------   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   value _ weighted   :   bool   \u662f\u5426 \u8fdb\u884c \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   0   group _ num   :   int   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   iplot   :   bol , optional   \u591a\u7a7a \u56de\u6d4b \u7684 \u65f6\u5019 \uff0c \u662f\u5426 \u4f7f\u7528 cufflinks \u7ed8\u753b   gz2000   :   bool ,   optional   \u662f\u5426 \u8fdb\u884c \u56fd\u8bc1 2000 \u4e0a \u7684 \u6d4b\u8bd5 ,   by   default   0   boxcox   :   bool ,   optional   \u662f\u5426 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u5904\u7406 ,   by   default   1   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   Returns   -------   pd . DataFrame   \u591a\u5934 \u7ec4\u5728 \u5404\u4e2a \u6307\u6570 \u4e0a \u7684 \u8d85\u989d \u6536\u76ca \u5e8f\u5217   \" \" \"   fi300   =   daily _ factor _ on300500   (   df   ,   hs300   =   1   )   shen   =   pure _ moonnight   (   fi300   ,   groups _ num   =   group _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   iplot   =   iplot   ,   boxcox   =   boxcox   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   if   (   shen   .   shen   .   group _ net _ values   .   group1   .   iloc   [   -   1   ]   >   shen   .   shen   .   group _ net _ values   [   f   \" group   {   group _ num   }   \"   ]   .   iloc   [   -   1   ]   ) :   com300   ,   net300   =   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   hs300   =   1   ,   show _ nets   =   1   )   fi500   =   daily _ factor _ on300500   (   df   ,   zz500   =   1   )   shen   =   pure _ moonnight   (   fi500   ,   groups _ num   =   group _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   iplot   =   iplot   ,   boxcox   =   boxcox   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   com500   ,   net500   =   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   zz500   =   1   ,   show _ nets   =   1   )   fi1000   =   daily _ factor _ on300500   (   df   ,   zz1000   =   1   )   shen   =   pure _ moonnight   (   fi1000   ,   groups _ num   =   group _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   iplot   =   iplot   ,   boxcox   =   boxcox   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   com1000   ,   net1000   =   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   zz1000   =   1   ,   show _ nets   =   1   )   if   gz2000   :   fi2000   =   daily _ factor _ on300500   (   df   ,   gz2000   =   1   )   shen   =   pure _ moonnight   (   fi2000   ,   groups _ num   =   group _ num   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   iplot   =   iplot   ,   boxcox   =   boxcox   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   com2000   ,   net2000   =   make _ relative _ comments   (   shen   .   shen   .   group _ rets   .   group1   ,   gz2000   =   1   ,   show _ nets   =   1   )   else   :   com300   ,   net300   =   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   \" group   {   group _ num   }   \"   ] ,   hs300   =   1   ,   show _ nets   =   1   )   fi500   =   daily _ factor _ on300500   (   df   ,   zz500   =   1   )   shen   =   pure _ moonnight   (   fi500   ,   groups _ num   =   group _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   iplot   =   iplot   ,   boxcox   =   boxcox   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   com500   ,   net500   =   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   \" group   {   group _ num   }   \"   ] ,   zz500   =   1   ,   show _ nets   =   1   )   fi1000   =   daily _ factor _ on300500   (   df   ,   zz1000   =   1   )   shen   =   pure _ moonnight   (   fi1000   ,   groups _ num   =   group _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   iplot   =   iplot   ,   boxcox   =   boxcox   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   com1000   ,   net1000   =   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   \" group   {   group _ num   }   \"   ] ,   zz1000   =   1   ,   show _ nets   =   1   )   if   gz2000   :   fi2000   =   daily _ factor _ on300500   (   df   ,   gz2000   =   1   )   shen   =   pure _ moonnight   (   fi2000   ,   groups _ num   =   group _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   iplot   =   iplot   ,   boxcox   =   boxcox   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   com2000   ,   net2000   =   make _ relative _ comments   (   shen   .   shen   .   group _ rets   [   f   \" group   {   group _ num   }   \"   ] ,   gz2000   =   1   ,   show _ nets   =   1   )   com300   =   com300   .   to _ frame   (   \" 300 \u8d85\u989d \"   )   com500   =   com500   .   to _ frame   (   \" 500 \u8d85\u989d \"   )   com1000   =   com1000   .   to _ frame   (   \" 1000 \u8d85\u989d \"   )   if   gz2000   :   com2000   =   com2000   .   to _ frame   (   \" 2000 \u8d85\u989d \"   )   coms   =   pd   .   concat   ( [   com300   ,   com500   ,   com1000   ,   com2000   ] ,   axis   =   1   )   else   :   coms   =   pd   .   concat   ( [   com300   ,   com500   ,   com1000   ] ,   axis   =   1   )   coms   =   np   .   around   (   coms   ,   3   )   if   gz2000   :   nets   =   pd   .   concat   ( [   net300   ,   net500   ,   net1000   ,   net2000   ] ,   axis   =   1   )   nets   .   columns   =   [   \" 300 \u8d85\u989d \"   ,   \" 500 \u8d85\u989d \"   ,   \" 1000 \u8d85\u989d \"   ,   \" 2000 \u8d85\u989d \"   ]   else   :   nets   =   pd   .   concat   ( [   net300   ,   net500   ,   net1000   ] ,   axis   =   1   )   nets   .   columns   =   [   \" 300 \u8d85\u989d \"   ,   \" 500 \u8d85\u989d \"   ,   \" 1000 \u8d85\u989d \"   ]   coms   =   coms   .   reset _ index   ( )   if   iplot   :   figs   =   cf   .   figures   (   nets   ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   nets   .   columns   ) ) ] ,   asList   =   True   ,   )   coms   =   coms   .   rename   (   columns   =   {   list   (   coms   ) [   0   ] :   \" \u7ee9\u6548 \u6307\u6807 \"   } )   table   =   FF   .   create _ table   (   coms   .   iloc   [ : :   -   1   ] )   table   .   update _ yaxes   (   matches   =   None   )   figs   .   append   (   table   )   figs   =   [   figs   [   -   1   ] ]   +   figs   [ :   -   1   ]   figs   [   1   ]   .   update _ layout   (   legend   =   dict   (   yanchor   =   \" top \"   ,   y   =   0.99   ,   xanchor   =   \" left \"   ,   x   =   0.01   )   )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   if   gz2000   :   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   2   ,   10   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   specs   =   [   [   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   3   } ,   None   ,   None   ,   None   ,   None   ,   ] ,   [   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   ] ,   ] ,   )   else   :   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   2   ,   10   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   specs   =   [   [   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   3   } ,   None   ,   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   3   } ,   None   ,   None   ,   None   ,   None   ,   None   ,   ] ,   [   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   ] ,   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   True   )   cf   .   iplot   (   sp   )   else   :   nets   .   plot   ( )   plt   .   show   ( )   tb   =   Texttable   ( )   tb   .   set _ cols _ width   ( [   8   ]   +   [   7   ]   +   [   8   ]   *   2   +   [   7   ]   *   2   +   [   8   ] )   tb   .   set _ cols _ dtype   ( [   \" f \"   ]   *   7   )   tb   .   header   (   list   (   coms   .   T   .   reset _ index   ( )   .   columns   ) )   tb   .   add _ rows   (   coms   .   T   .   reset _ index   ( )   .   to _ numpy   ( ) ,   header   =   True   )   print   (   tb   .   draw   ( ) )   to _ tradeends   (   df   )   \u00b6   \u5c06 \u6700\u540e \u4e00\u4e2a \u81ea\u7136 \u65e5 \u6539\u53d8 \u4e3a \u6700\u540e \u4e00\u4e2a \u4ea4\u6613 \u4ea4\u6613\u65e5   Parameters   \u00b6   df   :   pd . DataFrame   index \u4e3a \u65f6\u95f4 \uff0c \u4e3a \u6bcf\u4e2a \u6708 \u7684 \u6700\u540e \u4e00\u5929   Returns   \u00b6   pd . DataFrame   \u4fee\u6539 \u4e3a \u4ea4\u6613 \u4ea4\u6613\u65e5 \u6807\u6ce8 \u540e \u7684 pd . DataFrame   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   923   924   925   926   927   928   929   930   931   932   933   934   935   936   937   938   939   940   941   942   943   944   945   946   947   @ do _ on _ dfs   def   to _ tradeends   (   df   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u5c06 \u6700\u540e \u4e00\u4e2a \u81ea\u7136 \u65e5 \u6539\u53d8 \u4e3a \u6700\u540e \u4e00\u4e2a \u4ea4\u6613 \u4ea4\u6613\u65e5   Parameters   ----------   df   :   pd . DataFrame   index \u4e3a \u65f6\u95f4 \uff0c \u4e3a \u6bcf\u4e2a \u6708 \u7684 \u6700\u540e \u4e00\u5929   Returns   -------   ` pd . DataFrame `   \u4fee\u6539 \u4e3a \u4ea4\u6613 \u4ea4\u6613\u65e5 \u6807\u6ce8 \u540e \u7684 pd . DataFrame   \" \" \"   \" \" \" \" \" \"   start   =   df   .   index   .   min   ( )   start   =   start   -   pd   .   tseries   .   offsets   .   MonthBegin   ( )   start   =   datetime   .   datetime   .   strftime   (   start   ,   \" % Y% m   % d   \"   )   trs   =   read _ daily   (   tr   =   1   ,   start   =   start   )   trs   =   trs   .   assign   (   tradeends   =   list   (   trs   .   index   ) )   trs   =   trs   [ [   \" tradeends \"   ] ]   trs   =   trs   .   resample   (   \" M \"   )   .   last   ( )   df   =   pd   .   concat   ( [   trs   ,   df   ] ,   axis   =   1   )   df   =   df   .   set _ index   ( [   \" tradeends \"   ] )   return   df","title":"process"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.frequency_controller","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1402   1403   1404   1405   1406   1407   1408   1409   1410   1411   1412   1413   1414   1415   1416   1417   1418   1419   1420   1421   1422   1423   1424   1425   1426   1427   1428   1429   1430   1431   1432   1433   class   frequency _ controller   (   object   ) :   def   __ init __   (   self   ,   freq   :   str   ) :   self   .   homeplace   =   HomePlace   ( )   self   .   freq   =   freq   if   freq   = =   \" M \"   :   self   .   counts _ one _ year   =   12   self   .   time _ shift   =   pd   .   DateOffset   (   months   =   1   )   self   .   states _ files   =   (   self   .   homeplace   .   daily _ data _ file   +   \" states _ monthly . parquet \"   )   self   .   sts _ files   =   self   .   homeplace   .   daily _ data _ file   +   \" sts _ monthly . parquet \"   self   .   comment _ name   =   \" \u6708 \"   self   .   days _ in   =   20   elif   freq   = =   \" W \"   :   self   .   counts _ one _ year   =   52   self   .   time _ shift   =   pd   .   DateOffset   (   weeks   =   1   )   self   .   states _ files   =   self   .   homeplace   .   daily _ data _ file   +   \" states _ weekly . parquet \"   self   .   sts _ files   =   self   .   homeplace   .   daily _ data _ file   +   \" sts _ weekly . parquet \"   self   .   comment _ name   =   \" \u5468 \"   self   .   days _ in   =   5   else   :   raise   ValueError   (   \" ' \u6682\u65f6 \u4e0d \u652f\u6301 \u6b64 \u9891\u7387 \u54c8 \ud83e\udd12 \uff0c \u76ee\u524d \u4ec5 \u652f\u6301 \u6708\u9891 ' M ' \uff0c \u548c \u5468\u9891 ' W ' \"   )   def   next _ end   (   self   ,   x   ) :   \" \" \" \u627e\u5230 \u4e0b\u4e2a \u5468\u671f \u7684 \u6700\u540e \u4e00\u5929 \" \" \"   if   self   .   freq   = =   \" M \"   :   return   x   +   pd   .   DateOffset   (   months   =   1   )   +   pd   .   tseries   .   offsets   .   MonthEnd   ( )   elif   self   .   freq   = =   \" W \"   :   return   x   +   pd   .   DateOffset   (   weeks   =   1   )   else   :   raise   ValueError   (   \" ' \u6682\u65f6 \u4e0d \u652f\u6301 \u6b64 \u9891\u7387 \u54c8 \ud83e\udd12 \uff0c \u76ee\u524d \u4ec5 \u652f\u6301 \u6708\u9891 ' M ' \uff0c \u548c \u5468\u9891 ' W ' \"   )","title":"frequency _ controller"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.frequency_controller.next_end","text":"\u627e\u5230 \u4e0b\u4e2a \u5468\u671f \u7684 \u6700\u540e \u4e00\u5929   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1426   1427   1428   1429   1430   1431   1432   1433   def   next _ end   (   self   ,   x   ) :   \" \" \" \u627e\u5230 \u4e0b\u4e2a \u5468\u671f \u7684 \u6700\u540e \u4e00\u5929 \" \" \"   if   self   .   freq   = =   \" M \"   :   return   x   +   pd   .   DateOffset   (   months   =   1   )   +   pd   .   tseries   .   offsets   .   MonthEnd   ( )   elif   self   .   freq   = =   \" W \"   :   return   x   +   pd   .   DateOffset   (   weeks   =   1   )   else   :   raise   ValueError   (   \" ' \u6682\u65f6 \u4e0d \u652f\u6301 \u6b64 \u9891\u7387 \u54c8 \ud83e\udd12 \uff0c \u76ee\u524d \u4ec5 \u652f\u6301 \u6708\u9891 ' M ' \uff0c \u548c \u5468\u9891 ' W ' \"   )","title":"next _ end ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_coldwinter","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3750   3751   3752   3753   3754   3755   3756   3757   3758   3759   3760   3761   3762   3763   3764   3765   3766   3767   3768   3769   3770   3771   3772   3773   3774   3775   3776   3777   3778   3779   3780   3781   3782   3783   3784   3785   3786   3787   3788   3789   3790   3791   3792   3793   3794   3795   3796   3797   3798   3799   3800   3801   3802   3803   3804   3805   3806   3807   3808   3809   3810   3811   3812   3813   3814   3815   3816   3817   3818   3819   3820   3821   3822   3823   3824   3825   3826   3827   3828   3829   3830   3831   3832   3833   3834   3835   3836   3837   3838   3839   3840   3841   3842   3843   3844   3845   3846   3847   3848   3849   3850   3851   3852   3853   3854   3855   3856   3857   3858   3859   3860   3861   3862   3863   3864   3865   3866   3867   3868   3869   3870   3871   3872   3873   3874   3875   3876   3877   3878   3879   3880   3881   3882   3883   3884   3885   3886   3887   3888   3889   3890   3891   3892   3893   3894   3895   3896   3897   3898   3899   3900   3901   3902   3903   3904   3905   3906   3907   3908   3909   3910   3911   3912   3913   3914   3915   3916   3917   3918   3919   3920   3921   3922   3923   3924   3925   3926   3927   3928   3929   3930   class   pure _ coldwinter   (   object   ) :   #   DONE :   \u53ef\u4ee5 \u81ea\u7531 \u6dfb\u52a0 \u5176\u4ed6 \u8981 \u5254\u9664 \u7684 \u56e0\u5b50 \uff0c \u6216\u8005 \u66ff\u6362 \u67d0\u4e9b \u8981 \u5254\u9664 \u7684 \u56e0\u5b50   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   __ init __   (   cls   ,   momentum   :   bool   =   1   ,   earningsyield   :   bool   =   1   ,   growth   :   bool   =   1   ,   liquidity   :   bool   =   1   ,   size   :   bool   =   1   ,   leverage   :   bool   =   1   ,   beta   :   bool   =   1   ,   nonlinearsize   :   bool   =   1   ,   residualvolatility   :   bool   =   1   ,   booktoprice   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u8bfb\u5165 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \uff0c \u5e76 \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50   Parameters   ----------   facs _ dict   :   Dict ,   optional   \u989d\u5916 \u52a0\u5165 \u7684 \u56e0\u5b50 \uff0c \u540d\u5b57 \u4e3a key \uff0c \u56e0\u5b50 \u77e9\u9635 \u4e3a value \uff0c \u5f62 \u5982 ` { ' \u53cd\u8f6c ' :   ret20 ,   ' \u6362\u624b ' :   tr20 } ` ,   by   default   None   momentum   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u52a8\u91cf \u56e0\u5b50 ,   by   default   1   earningsyield   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u76c8\u5229 \u56e0\u5b50 ,   by   default   1   growth   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6210\u957f \u56e0\u5b50 ,   by   default   1   liquidity   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6d41\u52a8 \u6d41\u52a8\u6027 \u56e0\u5b50 ,   by   default   1   size   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u89c4\u6a21 \u56e0\u5b50 ,   by   default   1   leverage   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6760\u6746 \u56e0\u5b50 ,   by   default   1   beta   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d1d\u5854 \u56e0\u5b50 ,   by   default   1   nonlinearsize   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \u56e0\u5b50 ,   by   default   1   residualvolatility   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6b8b\u5dee \u6ce2\u52a8 \u7387 \u56e0\u5b50 ,   by   default   1   booktoprice   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d26\u9762 \u5e02\u503c \u6bd4 \u56e0\u5b50 ,   by   default   1   \" \" \"   cls   .   homeplace   =   HomePlace   ( )   #   barra \u56e0\u5b50 \u6570\u636e   styles   =   os   .   listdir   (   cls   .   homeplace   .   barra _ data _ file   )   styles   =   [   i   for   i   in   styles   if   (   i   .   endswith   (   \" . parquet \"   ) )   and   (   i   [   0   ]   ! =   \" . \"   ) ]   barras   =   { }   for   s   in   styles   :   k   =   s   .   split   (   \" . \"   ) [   0   ]   v   =   pd   .   read _ parquet   (   cls   .   homeplace   .   barra _ data _ file   +   s   )   .   resample   (   \" M \"   )   .   last   ( )   barras   [   k   ]   =   v   rename _ dict   =   {   \" size \"   :   \" \u5e02\u503c \"   ,   \" nonlinearsize \"   :   \" \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \"   ,   \" booktoprice \"   :   \" \u4f30\u503c \"   ,   \" earningsyield \"   :   \" \u76c8\u5229 \"   ,   \" growth \"   :   \" \u6210\u957f \"   ,   \" leverage \"   :   \" \u6760\u6746 \"   ,   \" liquidity \"   :   \" \u6d41\u52a8 \u6d41\u52a8\u6027 \"   ,   \" momentum \"   :   \" \u52a8\u91cf \"   ,   \" residualvolatility \"   :   \" \u6ce2\u52a8 \u7387 \"   ,   \" beta \"   :   \" \u8d1d\u5854 \"   ,   }   if   momentum   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" momentum \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" momentum \"   }   if   earningsyield   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" earningsyield \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" earningsyield \"   }   if   growth   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" growth \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" growth \"   }   if   liquidity   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" liquidity \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" liquidity \"   }   if   size   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" size \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" size \"   }   if   leverage   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" leverage \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" leverage \"   }   if   beta   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" beta \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" beta \"   }   if   nonlinearsize   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" nonlinearsize \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" nonlinearsize \"   }   if   residualvolatility   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" residualvolatility \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" residualvolatility \"   }   if   booktoprice   = =   0   :   barras   =   {   k   :   v   for   k   ,   v   in   barras   .   items   ( )   if   k   ! =   \" booktoprice \"   }   rename _ dict   =   {   k   :   v   for   k   ,   v   in   rename _ dict   .   items   ( )   if   k   ! =   \" booktoprice \"   }   facs _ dict   =   {   \" \u53cd\u8f6c _ 20 \u5929 \u6536\u76ca \u6536\u76ca\u7387 \u5747\u503c \"   :   boom _ one   (   read _ daily   (   ret   =   1   ) ) ,   \" \u6ce2\u52a8 _ 20 \u5929 \u6536\u76ca \u6536\u76ca\u7387 \u6807\u51c6 \u6807\u51c6\u5dee \"   :   read _ daily   (   ret   =   1   )   .   rolling   (   20   ,   min _ periods   =   10   )   .   std   ( )   .   resample   (   \" M \"   )   .   last   ( ) ,   \" \u6362\u624b _ 20 \u5929 \u6362\u624b \u6362\u624b\u7387 \u5747\u503c \"   :   boom _ one   (   read _ daily   (   tr   =   1   ) ) ,   }   barras   .   update   (   facs _ dict   )   rename _ dict   .   update   ( {   k   :   k   for   k   in   facs _ dict   .   keys   ( ) } )   cls   .   barras   =   barras   cls   .   rename _ dict   =   rename _ dict   sort _ names   =   list   (   rename _ dict   .   values   ( ) )   cls   .   sort _ names   =   sort _ names   cls   .   barras _ together   =   merge _ many   (   list   (   barras   .   values   ( ) ) ,   list   (   barras   .   keys   ( ) ) ,   how   =   \" inner \"   )   def   __ call __   (   self   ) :   \" \" \" \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50 \u503c \" \" \"   return   self   .   snow _ fac   def   set _ factors _ df _ wide   (   self   ,   df   :   pd   .   DataFrame   ,   other _ factors   :   dict   =   None   ) :   \" \" \" \u4f20\u5165 \u56e0\u5b50 \u6570\u636e \uff0c \u65f6\u95f4 \u4e3a \u7d22\u5f15 \uff0c \u4ee3\u7801 \u4e3a \u5217\u540d \" \" \"   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   self   .   __ corr   =   [   df   .   corrwith   (   i   ,   axis   =   1   )   .   mean   ( )   for   i   in   list   (   self   .   barras   .   values   ( ) )   ]   self   .   __ corr   =   (   pd   .   Series   (   self   .   __ corr   ,   index   =   [   self   .   rename _ dict   [   i   ]   for   i   in   self   .   barras   .   keys   ( ) ]   )   .   to _ frame   (   \" \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   )   .   T   )   self   .   __ corr   =   self   .   __ corr   [   self   .   sort _ names   ]   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factors   =   df   self   .   corr _ pri   =   pd   .   merge   (   df   ,   self   .   barras _ together   ,   on   =   [   \" date \"   ,   \" code \"   ] )   .   dropna   ( )   if   other _ factors   is   not   None   :   other _ factors   =   merge _ many   (   list   (   other _ factors   .   values   ( ) ) ,   list   (   other _ factors   .   keys   ( ) ) ,   how   =   \" inner \"   )   self   .   corr _ pri   =   pd   .   merge   (   self   .   corr _ pri   ,   other _ factors   ,   on   =   [   \" date \"   ,   \" code \"   ] )   @ property   def   corr   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u56e0\u5b50 \u548c 10 \u4e2a \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   -------   pd . DataFrame   \u56e0\u5b50 \u548c 10 \u4e2a \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   \" \" \"   return   self   .   __ corr   .   copy   ( )   def   ols _ in _ group   (   self   ,   df   ) :   \" \" \" \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u8fdb\u884c \u56de\u5f52 \uff0c \u5e76 \u8ba1\u7b97 \u6b8b\u5dee \" \" \"   xs   =   list   (   df   .   columns   )   xs   =   [   i   for   i   in   xs   if   i   ! =   \" fac \"   ]   xs _ join   =   \" + \"   .   join   (   xs   )   ols _ formula   =   \" fac ~ \"   +   xs _ join   ols _ result   =   smf   .   ols   (   ols _ formula   ,   data   =   df   )   .   fit   ( )   ols _ ws   =   {   i   :   ols _ result   .   params   [   i   ]   for   i   in   xs   }   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   to _ minus   =   [   ols _ ws   [   i   ]   *   df   [   i   ]   for   i   in   xs   ]   to _ minus   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   to _ minus   )   df   =   df   .   assign   (   snow _ fac   =   df   .   fac   -   to _ minus   -   ols _ b   )   df   =   df   [ [   \" snow _ fac \"   ] ]   df   =   df   .   rename   (   columns   =   {   \" snow _ fac \"   :   \" fac \"   } )   return   df   def   get _ snow _ fac   (   self   ) :   \" \" \" \u83b7\u5f97 \u7eaf\u51c0 \u56e0\u5b50 \" \" \"   self   .   snow _ fac   =   (   self   .   corr _ pri   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   groupby   ( [   \" date \"   ] )   .   apply   (   self   .   ols _ in _ group   )   )   self   .   snow _ fac   =   self   .   snow _ fac   .   unstack   ( )   self   .   snow _ fac   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   self   .   snow _ fac   .   columns   ) ) )","title":"pure _ coldwinter"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_coldwinter.corr","text":"\u56e0\u5b50 \u548c 10 \u4e2a \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570","title":"corr"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_coldwinter.__call__","text":"\u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3867   3868   3869   def   __ call __   (   self   ) :   \" \" \" \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50 \u503c \" \" \"   return   self   .   snow _ fac","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_coldwinter.__init__","text":"\u8bfb\u5165 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \uff0c \u5e76 \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_coldwinter.get_snow_fac","text":"\u83b7\u5f97 \u7eaf\u51c0 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3922   3923   3924   3925   3926   3927   3928   3929   3930   def   get _ snow _ fac   (   self   ) :   \" \" \" \u83b7\u5f97 \u7eaf\u51c0 \u56e0\u5b50 \" \" \"   self   .   snow _ fac   =   (   self   .   corr _ pri   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   groupby   ( [   \" date \"   ] )   .   apply   (   self   .   ols _ in _ group   )   )   self   .   snow _ fac   =   self   .   snow _ fac   .   unstack   ( )   self   .   snow _ fac   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   self   .   snow _ fac   .   columns   ) ) )","title":"get _ snow _ fac ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_coldwinter.ols_in_group","text":"\u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u8fdb\u884c \u56de\u5f52 \uff0c \u5e76 \u8ba1\u7b97 \u6b8b\u5dee   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3906   3907   3908   3909   3910   3911   3912   3913   3914   3915   3916   3917   3918   3919   3920   def   ols _ in _ group   (   self   ,   df   ) :   \" \" \" \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u8fdb\u884c \u56de\u5f52 \uff0c \u5e76 \u8ba1\u7b97 \u6b8b\u5dee \" \" \"   xs   =   list   (   df   .   columns   )   xs   =   [   i   for   i   in   xs   if   i   ! =   \" fac \"   ]   xs _ join   =   \" + \"   .   join   (   xs   )   ols _ formula   =   \" fac ~ \"   +   xs _ join   ols _ result   =   smf   .   ols   (   ols _ formula   ,   data   =   df   )   .   fit   ( )   ols _ ws   =   {   i   :   ols _ result   .   params   [   i   ]   for   i   in   xs   }   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   to _ minus   =   [   ols _ ws   [   i   ]   *   df   [   i   ]   for   i   in   xs   ]   to _ minus   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   to _ minus   )   df   =   df   .   assign   (   snow _ fac   =   df   .   fac   -   to _ minus   -   ols _ b   )   df   =   df   [ [   \" snow _ fac \"   ] ]   df   =   df   .   rename   (   columns   =   {   \" snow _ fac \"   :   \" fac \"   } )   return   df","title":"ols _ in _ group ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_coldwinter.set_factors_df_wide","text":"\u4f20\u5165 \u56e0\u5b50 \u6570\u636e \uff0c \u65f6\u95f4 \u4e3a \u7d22\u5f15 \uff0c \u4ee3\u7801 \u4e3a \u5217\u540d   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3871   3872   3873   3874   3875   3876   3877   3878   3879   3880   3881   3882   3883   3884   3885   3886   3887   3888   3889   3890   3891   3892   3893   def   set _ factors _ df _ wide   (   self   ,   df   :   pd   .   DataFrame   ,   other _ factors   :   dict   =   None   ) :   \" \" \" \u4f20\u5165 \u56e0\u5b50 \u6570\u636e \uff0c \u65f6\u95f4 \u4e3a \u7d22\u5f15 \uff0c \u4ee3\u7801 \u4e3a \u5217\u540d \" \" \"   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   self   .   __ corr   =   [   df   .   corrwith   (   i   ,   axis   =   1   )   .   mean   ( )   for   i   in   list   (   self   .   barras   .   values   ( ) )   ]   self   .   __ corr   =   (   pd   .   Series   (   self   .   __ corr   ,   index   =   [   self   .   rename _ dict   [   i   ]   for   i   in   self   .   barras   .   keys   ( ) ]   )   .   to _ frame   (   \" \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \"   )   .   T   )   self   .   __ corr   =   self   .   __ corr   [   self   .   sort _ names   ]   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factors   =   df   self   .   corr _ pri   =   pd   .   merge   (   df   ,   self   .   barras _ together   ,   on   =   [   \" date \"   ,   \" code \"   ] )   .   dropna   ( )   if   other _ factors   is   not   None   :   other _ factors   =   merge _ many   (   list   (   other _ factors   .   values   ( ) ) ,   list   (   other _ factors   .   keys   ( ) ) ,   how   =   \" inner \"   )   self   .   corr _ pri   =   pd   .   merge   (   self   .   corr _ pri   ,   other _ factors   ,   on   =   [   \" date \"   ,   \" code \"   ] )","title":"set _ factors _ df _ wide ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2963   2964   2965   2966   2967   2968   2969   2970   2971   2972   2973   2974   2975   2976   2977   2978   2979   2980   2981   2982   2983   2984   2985   2986   2987   2988   2989   2990   2991   2992   2993   2994   2995   2996   2997   2998   2999   3000   3001   3002   3003   3004   3005   3006   3007   3008   3009   3010   3011   3012   3013   3014   class   pure _ fall   (   object   ) :   #   DONE \uff1a \u4fee\u6539 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u53ef\u4ee5 \u5e26 \u201c \u65e5\u9891 _ \u201c \uff0c \u4e5f \u53ef\u4ee5 \u4e0d\u5e26 \u201c \u65e5\u9891 _ \u201c   def   __ init __   (   self   ,   daily _ path   :   str   )   - >   None   :   \" \" \" \u4e00\u4e2a \u4f7f\u7528 mysql \u4e2d \u7684 \u5206\u949f \u6570\u636e \uff0c \u6765 \u66f4\u65b0 \u56e0\u5b50 \u503c \u7684 \u6846\u67b6   Parameters   ----------   daily _ path   :   str   \u65e5\u9891 \u56e0\u5b50 \u503c \u5b58\u50a8 \u6587\u4ef6 \u7684 \u540d\u5b57 \uff0c \u8bf7\u4ee5 ' . parquet ' \u7ed3\u5c3e   \" \" \"   self   .   homeplace   =   HomePlace   ( )   #   \u5c06 \u5206\u949f \u6570\u636e \u62fc\u6210 \u4e00\u5f20 \u65e5\u9891 \u56e0\u5b50 \u8868   self   .   daily _ factors   =   None   self   .   daily _ factors _ path   =   self   .   homeplace   .   factor _ data _ file   +   \" \u65e5\u9891 _ \"   +   daily _ path   def   __ call __   (   self   ,   monthly   =   False   ) :   \" \" \" \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868 \" \" \"   if   monthly   :   return   self   .   monthly _ factors   .   copy   ( )   else   :   try   :   return   self   .   daily _ factors   .   copy   ( )   except   Exception   :   return   self   .   monthly _ factors   .   copy   ( )   def   wide _ to _ long   (   self   ,   df   ,   i   ) :   \" \" \" \u5c06 \u5bbd \u6570\u636e \u8f6c\u5316 \u4e3a\u957f \u6570\u636e \uff0c \u7528\u4e8e \u56e0\u5b50 \u8868 \u8f6c\u5316 \u548c \u62fc\u63a5 \" \" \"   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   i   ]   df   =   df   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   return   df   def   de _ in _ group   (   self   ,   df   ,   help _ names   ) :   \" \" \" \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \uff0c \u5206\u522b \u505a \u56de\u5f52 \uff0c \u5254\u9664 \u76f8\u5173 \u56e0\u5b50 \" \" \"   ols _ order   =   \" fac ~ \"   +   \" + \"   .   join   (   help _ names   )   ols _ result   =   smf   .   ols   (   ols _ order   ,   data   =   df   )   .   fit   ( )   params   =   {   i   :   ols _ result   .   params   [   i   ]   for   i   in   help _ names   }   predict   =   [   params   [   i   ]   *   df   [   i   ]   for   i   in   help _ names   ]   predict   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   predict   )   df   .   fac   =   df   .   fac   -   predict   -   ols _ result   .   params   [   \" Intercept \"   ]   df   =   df   [ [   \" fac \"   ] ]   return   df   def   standardlize _ in _ cross _ section   (   self   ,   df   ) :   \" \" \"   \u5728 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u505a \u6807\u51c6 \u6807\u51c6\u5316   \u8f93\u5165 \u7684 df \u5e94\u4e3a \uff0c \u5217\u540d \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u662f \u65f6\u95f4   \" \" \"   df   =   df   .   T   df   =   (   df   -   df   .   mean   ( ) )   /   df   .   std   ( )   df   =   df   .   T   return   df","title":"pure _ fall"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall.__call__","text":"\u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2978   2979   2980   2981   2982   2983   2984   2985   2986   def   __ call __   (   self   ,   monthly   =   False   ) :   \" \" \" \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868 \" \" \"   if   monthly   :   return   self   .   monthly _ factors   .   copy   ( )   else   :   try   :   return   self   .   daily _ factors   .   copy   ( )   except   Exception   :   return   self   .   monthly _ factors   .   copy   ( )","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall.__init__","text":"\u4e00\u4e2a \u4f7f\u7528 mysql \u4e2d \u7684 \u5206\u949f \u6570\u636e \uff0c \u6765 \u66f4\u65b0 \u56e0\u5b50 \u503c \u7684 \u6846\u67b6","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall.de_in_group","text":"\u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \uff0c \u5206\u522b \u505a \u56de\u5f52 \uff0c \u5254\u9664 \u76f8\u5173 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2995   2996   2997   2998   2999   3000   3001   3002   3003   3004   def   de _ in _ group   (   self   ,   df   ,   help _ names   ) :   \" \" \" \u5bf9 \u6bcf\u4e2a \u65f6\u95f4 \uff0c \u5206\u522b \u505a \u56de\u5f52 \uff0c \u5254\u9664 \u76f8\u5173 \u56e0\u5b50 \" \" \"   ols _ order   =   \" fac ~ \"   +   \" + \"   .   join   (   help _ names   )   ols _ result   =   smf   .   ols   (   ols _ order   ,   data   =   df   )   .   fit   ( )   params   =   {   i   :   ols _ result   .   params   [   i   ]   for   i   in   help _ names   }   predict   =   [   params   [   i   ]   *   df   [   i   ]   for   i   in   help _ names   ]   predict   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   predict   )   df   .   fac   =   df   .   fac   -   predict   -   ols _ result   .   params   [   \" Intercept \"   ]   df   =   df   [ [   \" fac \"   ] ]   return   df","title":"de _ in _ group ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall.standardlize_in_cross_section","text":"\u5728 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u505a \u6807\u51c6 \u6807\u51c6\u5316   \u8f93\u5165 \u7684 df \u5e94\u4e3a \uff0c \u5217\u540d \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u662f \u65f6\u95f4   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3006   3007   3008   3009   3010   3011   3012   3013   3014   def   standardlize _ in _ cross _ section   (   self   ,   df   ) :   \" \" \"   \u5728 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u505a \u6807\u51c6 \u6807\u51c6\u5316   \u8f93\u5165 \u7684 df \u5e94\u4e3a \uff0c \u5217\u540d \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u662f \u65f6\u95f4   \" \" \"   df   =   df   .   T   df   =   (   df   -   df   .   mean   ( ) )   /   df   .   std   ( )   df   =   df   .   T   return   df","title":"standardlize _ in _ cross _ section ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall.wide_to_long","text":"\u5c06 \u5bbd \u6570\u636e \u8f6c\u5316 \u4e3a\u957f \u6570\u636e \uff0c \u7528\u4e8e \u56e0\u5b50 \u8868 \u8f6c\u5316 \u548c \u62fc\u63a5   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2988   2989   2990   2991   2992   2993   def   wide _ to _ long   (   self   ,   df   ,   i   ) :   \" \" \" \u5c06 \u5bbd \u6570\u636e \u8f6c\u5316 \u4e3a\u957f \u6570\u636e \uff0c \u7528\u4e8e \u56e0\u5b50 \u8868 \u8f6c\u5316 \u548c \u62fc\u63a5 \" \" \"   df   =   df   .   stack   ( )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   i   ]   df   =   df   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   return   df","title":"wide _ to _ long ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_frequent","text":"Bases :   object   \u5bf9\u5355 \u53ea \u80a1\u7968 \u5355\u65e5 \u8fdb\u884c \u64cd\u4f5c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3154   3155   3156   3157   3158   3159   3160   3161   3162   3163   3164   3165   3166   3167   3168   3169   3170   3171   3172   3173   3174   3175   3176   3177   3178   3179   3180   3181   3182   3183   3184   3185   3186   3187   3188   3189   3190   3191   3192   3193   3194   3195   3196   3197   3198   3199   3200   3201   3202   3203   3204   3205   3206   3207   3208   3209   3210   3211   3212   3213   3214   3215   3216   3217   3218   3219   3220   3221   3222   3223   3224   3225   3226   3227   3228   3229   3230   3231   3232   3233   3234   3235   3236   3237   3238   3239   3240   3241   3242   3243   3244   3245   3246   3247   3248   3249   3250   3251   3252   3253   3254   3255   3256   3257   3258   3259   3260   3261   3262   3263   3264   3265   3266   3267   3268   3269   3270   3271   3272   3273   3274   3275   3276   3277   3278   3279   3280   3281   3282   3283   3284   3285   3286   3287   3288   3289   3290   3291   3292   3293   3294   3295   3296   3297   3298   3299   3300   3301   3302   3303   3304   3305   3306   3307   3308   3309   3310   3311   3312   3313   3314   3315   3316   3317   3318   3319   3320   3321   3322   3323   3324   3325   3326   3327   3328   3329   3330   3331   3332   3333   3334   3335   3336   3337   3338   3339   3340   3341   3342   3343   3344   3345   3346   3347   3348   3349   3350   3351   3352   3353   3354   3355   3356   3357   3358   3359   3360   3361   3362   3363   3364   3365   3366   3367   3368   3369   3370   3371   3372   3373   3374   3375   3376   3377   3378   3379   3380   3381   3382   3383   3384   3385   3386   3387   3388   3389   3390   3391   3392   3393   3394   3395   3396   3397   3398   3399   3400   3401   3402   3403   3404   3405   3406   3407   3408   3409   3410   3411   3412   3413   3414   3415   3416   3417   3418   3419   3420   3421   3422   3423   3424   3425   3426   3427   3428   3429   3430   3431   3432   3433   3434   3435   3436   3437   3438   3439   3440   3441   3442   3443   3444   3445   3446   3447   3448   3449   3450   3451   3452   3453   3454   3455   3456   3457   3458   3459   3460   3461   3462   3463   3464   3465   3466   3467   3468   3469   3470   3471   3472   3473   3474   3475   3476   3477   3478   3479   3480   3481   3482   3483   3484   3485   3486   3487   3488   3489   3490   3491   3492   3493   3494   3495   3496   3497   3498   3499   3500   3501   3502   3503   3504   3505   3506   3507   3508   3509   3510   3511   3512   3513   3514   3515   3516   3517   3518   3519   3520   3521   3522   3523   3524   3525   3526   3527   3528   3529   3530   3531   3532   3533   3534   3535   3536   3537   3538   3539   3540   3541   3542   3543   3544   3545   3546   3547   3548   3549   3550   3551   3552   3553   3554   3555   3556   3557   3558   3559   3560   3561   3562   3563   3564   3565   3566   3567   3568   3569   3570   3571   3572   3573   3574   3575   3576   3577   3578   3579   3580   3581   3582   3583   3584   3585   3586   3587   3588   3589   3590   3591   3592   3593   3594   3595   3596   3597   3598   3599   3600   3601   3602   3603   3604   3605   3606   3607   3608   3609   3610   3611   3612   3613   3614   3615   3616   3617   3618   3619   3620   3621   3622   3623   3624   3625   3626   3627   3628   3629   3630   3631   3632   3633   3634   3635   3636   3637   3638   3639   3640   3641   3642   3643   3644   3645   3646   3647   3648   3649   3650   3651   3652   3653   3654   3655   3656   3657   3658   3659   3660   3661   3662   3663   3664   3665   3666   3667   3668   3669   3670   3671   3672   3673   3674   3675   3676   3677   3678   3679   3680   3681   3682   3683   3684   3685   3686   3687   3688   3689   3690   3691   3692   3693   3694   3695   3696   3697   3698   3699   3700   3701   3702   3703   3704   3705   3706   3707   3708   3709   3710   3711   3712   3713   3714   3715   3716   3717   3718   3719   3720   3721   3722   3723   3724   3725   3726   3727   3728   3729   3730   3731   3732   3733   3734   3735   3736   3737   3738   3739   3740   3741   3742   3743   3744   3745   3746   3747   class   pure _ fall _ frequent   (   object   ) :   \" \" \" \u5bf9\u5355 \u53ea \u80a1\u7968 \u5355\u65e5 \u8fdb\u884c \u64cd\u4f5c \" \" \"   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   kind   :   str   =   \" stock \"   ,   clickhouse   :   bool   =   0   ,   questdb   :   bool   =   0   ,   questdb _ web _ port   :   str   =   \" 9001 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ target   :   list   =   [   \" date \"   ,   \" code \"   ] ,   )   - >   None   :   \" \" \" \u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   kind   :   str ,   optional   \u7c7b\u578b \u4e3a \u80a1\u7968 \u8fd8\u662f \u6307\u6570 \uff0c \u6307\u6570 \u4e3a ' index ' ,   by   default   \" stock \"   clickhouse   :   bool ,   optional   \u4f7f\u7528 clickhouse \u4f5c\u4e3a \u6570\u636e \u6570\u636e\u6e90 \uff0c \u5982\u679c postgresql \u4e0e \u672c \u53c2\u6570 \u90fd \u4e3a 0 \uff0c \u5c06 \u4f9d\u7136 \u4ece clickhouse \u4e2d \u8bfb\u53d6 ,   by   default   0   questdb   :   bool ,   optional   \u4f7f\u7528 questdb \u4f5c\u4e3a \u6570\u636e \u6570\u636e\u6e90 ,   by   default   0   questdb _ web _ port   :   str ,   optional   questdb \u7684 web _ port ,   by   default   ' 9001 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e \uff0c \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \u65f6 \uff0c \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u51fd\u6570 \u7684 \u90e8\u5206 \uff0c \u5982\u679c \u6307\u5b9a \u6309\u7167 [ ' date ' ] \u5206\u7ec4 groupby \u8ba1\u7b97 \uff0c   \u5219 \u8fd4\u56de \u65f6 \uff0c \u5e94\u5f53 \u8fd4\u56de \u4e00\u4e2a \u4e24\u5217 \u7684 dataframe \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7b2c\u4e8c \u5217\u4e3a \u4e3a \u56e0\u5b50 \u503c ,   by   default   [ ' date ' , ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   kind   =   kind   self   .   groupby _ target   =   groupby _ target   if   clickhouse   = =   0   and   questdb   = =   0   :   clickhouse   =   1   self   .   clickhouse   =   clickhouse   self   .   questdb   =   questdb   self   .   questdb _ web _ port   =   questdb _ web _ port   if   clickhouse   = =   1   :   #   \u8fde\u63a5 clickhouse   self   .   chc   =   ClickHouseClient   (   \" minute _ data \"   )   elif   questdb   = =   1   :   self   .   chc   =   Questdb   (   host   =   questdb _ host   ,   web _ port   =   questdb _ web _ port   )   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   ,   web _ port   =   questdb _ web _ port   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   self   .   chc   .   show _ all _ dates   (   f   \" minute _ data _   {   kind   }   \"   )   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   def   forward _ dates   (   self   ,   dates   ,   many _ days   ) :   dates _ index   =   [   self   .   dates _ all   .   index   (   i   )   for   i   in   dates   ]   def   value   (   x   ,   a   ) :   if   x   > =   0   :   return   a   [   x   ]   else   :   return   None   return   [   value   (   i   -   many _ days   ,   self   .   dates _ all   )   for   i   in   dates _ index   ]   def   select _ one _ calculate   (   self   ,   date   :   pd   .   Timestamp   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   show _ time   :   bool   =   0   ,   )   - >   None   :   the _ func   =   partial   (   func   )   if   not   isinstance   (   date   ,   int   ) :   date   =   int   (   datetime   .   datetime   .   strftime   (   date   ,   \" % Y% m   % d   \"   ) )   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date =   {   date   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   (   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   date = '   {   date   }   ' \"   )   if   show _ time   :   df   =   self   .   chc   .   get _ data _ show _ time   (   sql _ order   )   else   :   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   df   =   df   .   groupby   (   self   .   groupby _ target   )   .   apply   (   the _ func   )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ] :   df   =   df   .   to _ frame   (   \" fac \"   )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   df   =   df   .   reset _ index   ( )   if   (   df   is   not   None   )   and   (   df   .   shape   [   0   ]   >   0   ) :   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   def   select _ many _ calculate   (   self   ,   dates   :   List   [   pd   .   Timestamp   ] ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   use _ mpire   :   bool   =   0   ,   )   - >   None   :   the _ func   =   partial   (   func   )   factor _ new   =   [ ]   dates   =   [   int   (   datetime   .   datetime   .   strftime   (   i   ,   \" % Y% m   % d   \"   ) )   for   i   in   dates   ]   if   many _ days   = =   1   :   #   \u5c06 \u9700\u8981 \u66f4\u65b0 \u7684 \u65e5\u5b50 \u5206\u5757 \uff0c \u6bcf 200 \u5929 \u4e00\u7ec4 \uff0c \u4e00\u8d77 \u8fd0\u7b97   dates _ new _ len   =   len   (   dates   )   cut _ points   =   list   (   range   (   0   ,   dates _ new _ len   ,   chunksize   ) )   +   [   dates _ new _ len   -   1   ]   if   cut _ points   [   -   1   ]   = =   cut _ points   [   -   2   ] :   cut _ points   =   cut _ points   [ :   -   1   ]   cuts   =   tuple   (   zip   (   cut _ points   [ :   -   many _ days   ] ,   cut _ points   [   many _ days   : ] ) )   df _ first   =   self   .   select _ one _ calculate   (   date   =   dates   [   0   ] ,   func   =   func   ,   fields   =   fields   ,   show _ time   =   show _ time   ,   )   factor _ new   .   append   (   df _ first   )   def   cal _ one   (   date1   ,   date2   ) :   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date >   {   dates   [   date1   ]   *   100   }   and   date < =   {   dates   [   date2   ]   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   cast ( date   as   int ) >   {   dates   [   date1   ]   }   and   cast ( date   as   int ) < =   {   dates   [   date2   ]   }   order   by   code , date , num \"   if   show _ time   :   df   =   self   .   chc   .   get _ data _ show _ time   (   sql _ order   )   else   :   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   df   =   df   .   groupby   (   self   .   groupby _ target   )   .   apply   (   the _ func   )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ] :   df   =   df   .   to _ frame   (   \" fac \"   )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   df   =   df   .   reset _ index   ( )   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   if   n _ jobs   >   1   :   if   use _ mpire   :   with   WorkerPool   (   n _ jobs   =   n _ jobs   )   as   pool   :   factor _ new _ more   =   pool   .   map   (   cal _ one   ,   cut _ points   [ :   -   many _ days   ] ,   cut _ points   [   many _ days   : ] ,   progress _ bar   =   True   ,   )   else   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   factor _ new _ more   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   cal _ one   ,   cut _ points   [ :   -   many _ days   ] ,   cut _ points   [   many _ days   : ] ,   ) ,   total   =   len   (   cut _ points   [   many _ days   : ] ) ,   )   )   factor _ new   =   factor _ new   +   factor _ new _ more   else   :   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   for   date1   ,   date2   in   tqdm   .   auto   .   tqdm   (   cuts   ,   desc   =   \" \u4e0d\u77e5 \u4e58\u6708 \u51e0\u4eba \u5f52 \uff0c \u843d\u6708 \u6447\u60c5 \u6ee1\u6c5f \u6811 \u3002 \"   ) :   df   =   cal _ one   (   date1   ,   date2   )   factor _ new   .   append   (   df   )   else   :   def   cal _ two   (   date1   ,   date2   ) :   if   date1   is   not   None   :   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date >   {   date1   *   100   }   and   date < =   {   date2   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   cast ( date   as   int ) >   {   date1   }   and   cast ( date   as   int ) < =   {   date2   }   order   by   code , date , num \"   if   show _ time   :   df   =   self   .   chc   .   get _ data _ show _ time   (   sql _ order   )   else   :   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ,   ]   or   self   .   groupby _ target   = =   [   \" code \"   ] :   df   =   df   .   groupby   ( [   \" code \"   ] )   .   apply   (   the _ func   )   .   reset _ index   ( )   else   :   df   =   the _ func   (   df   )   df   =   df   .   assign   (   date   =   date2   )   df   .   columns   =   [   \" code \"   ,   \" fac \"   ,   \" date \"   ]   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   pairs   =   self   .   forward _ dates   (   dates   ,   many _ days   =   many _ days   )   cuts2   =   tuple   (   zip   (   pairs   ,   dates   ) )   if   n _ jobs   >   1   :   if   use _ mpire   :   with   WorkerPool   (   n _ jobs   =   n _ jobs   )   as   pool   :   factor _ new _ more   =   pool   .   map   (   cal _ two   ,   pairs   ,   dates   ,   progress _ bar   =   True   )   else   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   factor _ new _ more   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   cal _ two   ,   pairs   ,   dates   ) ,   total   =   len   (   pairs   ) ,   )   )   factor _ new   =   factor _ new   +   factor _ new _ more   else   :   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   for   date1   ,   date2   in   tqdm   .   auto   .   tqdm   (   cuts2   ,   desc   =   \" \u77e5 \u4e0d\u53ef \u4e4e \u9aa4\u5f97 \uff0c \u6258 \u9057\u54cd \u4e8e \u60b2\u98ce \u3002 \"   ) :   df   =   cal _ two   (   date1   ,   date2   )   factor _ new   .   append   (   df   )   if   len   (   factor _ new   )   >   0   :   factor _ new   =   pd   .   concat   (   factor _ new   )   return   factor _ new   else   :   return   None   def   select _ any _ calculate   (   self   ,   dates   :   List   [   pd   .   Timestamp   ] ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   use _ mpire   :   bool   =   0   ,   )   - >   None   :   if   len   (   dates   )   = =   1   and   many _ days   = =   1   :   res   =   self   .   select _ one _ calculate   (   dates   [   0   ] ,   func   =   func   ,   fields   =   fields   ,   show _ time   =   show _ time   ,   )   else   :   res   =   self   .   select _ many _ calculate   (   dates   =   dates   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   use _ mpire   =   use _ mpire   ,   )   if   res   is   not   None   :   self   .   factor _ new   .   append   (   res   )   return   res   @ staticmethod   def   for _ cross _ via _ str   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   ` ` ` python   return   [ [ 0.11 , 0.24 , 0.55 ] , [ 2.59 , 1.99 , 0.43 ] , [ 1.32 , 8.88 , 7.77 ] \u2026 \u2026 ]   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   codes   =   sorted   (   list   (   set   (   df   .   code   ) ) )   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   [   0   ] ,   list   ) :   kind   =   1   res   =   [   \" , \"   .   join   (   i   )   for   i   in   res   ]   else   :   kind   =   0   df   =   pd   .   DataFrame   ( {   \" code \"   :   codes   ,   \" fac \"   :   res   } )   if   kind   :   df   .   fac   =   df   .   fac   .   apply   (   lambda   x   :   [   float   (   i   )   for   i   in   x   .   split   (   \" , \"   ) ] )   return   df   return   full _ run   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   res   =   res   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   isinstance   (   res   ,   pd   .   DataFrame   ) :   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   res   is   None   :   ...   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   return   full _ run   def   get _ daily _ factors _ one   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   use _ mpire   :   bool   =   0   ,   ) :   if   len   (   self   .   dates _ new   )   >   0   :   for   interval   in   self   .   dates _ new _ intervals   :   df   =   self   .   select _ any _ calculate   (   dates   =   interval   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   use _ mpire   =   use _ mpire   ,   )   if   len   (   self   .   factor _ new   )   >   0   :   self   .   factor _ new   =   pd   .   concat   (   self   .   factor _ new   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   self   .   factor   =   pd   .   concat   ( [   self   .   factor _ old   ,   self   .   factor _ new   ] )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   logger   .   info   (   f   \" \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5b8c \u4e86 \"   )   #   \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u7684 \u4e2d\u9014 \u5907\u4efd \u6570\u636e   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   info   (   \" \u5907\u4efd \u5728 questdb \u7684 \u8868\u683c \u5df2 \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   \" \u5220\u9664 questdb \u4e2d \u8868\u683c \u65f6 \uff0c \u5b58\u5728 \u67d0\u4e2a \u672a\u77e5 \u9519\u8bef \uff0c \u8bf7 \u5f53\u5fc3 \"   )   else   :   logger   .   warning   (   \" \u7531\u4e8e \u67d0\u79cd \u539f\u56e0 \u67d0\u79cd\u539f\u56e0 \uff0c \u66f4\u65b0 \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5931\u8d25 \uff0c \u5efa\u8bae \u68c0\u67e5 \ud83e\udd12 \"   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   self   .   factor   =   pd   .   concat   ( [   self   .   factor _ old   ] )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   else   :   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor _ old   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5f53\u524d \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u5206\u949f \u6570\u636e \u5904\u7406 \u6570\u636e\u5904\u7406 \u5b8c \u5566 \uff5e \ud83c\udf88 \"   )   def   get _ daily _ factors _ two   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   ) :   self   .   get _ daily _ factors _ one   (   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   fields   :   str ,   optional   \u80a1\u7968 \u6570\u636e \u6d89\u53ca \u5230 \u54ea\u4e9b \u5b57 \u6bb5 \uff0c \u6392\u9664 \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u5b57 \u6bb5 \uff0c \u53ef\u4ee5 \u8282\u7ea6 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u7684 \u65f6\u95f4 \uff0c \u5f62 \u5982 ' date , code , num , close , amount , open '   \u63d0\u53d6 \u51fa \u7684 \u6570\u636e \uff0c \u81ea\u52a8 \u6309\u7167 code , date , num \u6392\u5e8f \uff0c \u56e0\u6b64 code , date , num \u662f \u4e0d\u53ef \u5fc5\u4e0d\u53ef\u5c11 \u7684 \u5b57 \u6bb5 ,   by   default   \" * \"   chunksize   :   int ,   optional   \u6bcf\u6b21 \u8bfb\u53d6 \u7684 \u622a\u9762 \u4e0a \u7684 \u5929\u6570 ,   by   default   10   show _ time   :   bool ,   optional   \u5c55\u793a \u6bcf\u6b21 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6240 \u9700\u8981 \u7684 \u65f6\u95f4 ,   by   default   0   many _ days   :   int ,   optional   \u8ba1\u7b97 \u67d0\u5929 \u7684 \u56e0\u5b50 \u503c\u65f6 \uff0c \u9700\u8981 \u4f7f\u7528 \u4e4b\u524d \u591a\u5c11 \u5929 \u7684 \u6570\u636e   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   \" \" \"   try   :   self   .   get _ daily _ factors _ two   (   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   except   Exception   :   self   .   get _ daily _ factors _ one   (   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )","title":"pure _ fall _ frequent"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_frequent.__call__","text":"\u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_frequent.__init__","text":"\u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_frequent.drop_table","text":"\u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3741   3742   3743   3744   3745   3746   3747   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )","title":"drop _ table ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_frequent.for_cross_via_str","text":"\u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   Python   1   return   [ [   0.11   ,   0.24   ,   0.55   ] , [   2.59   ,   1.99   ,   0.43   ] , [   1.32   ,   8.88   ,   7.77   ]   \u2026 \u2026   ]   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3560   3561   3562   3563   3564   3565   3566   3567   3568   3569   3570   3571   3572   3573   3574   3575   3576   3577   3578   3579   3580   3581   3582   @ staticmethod   def   for _ cross _ via _ str   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   ` ` ` python   return   [ [ 0.11 , 0.24 , 0.55 ] , [ 2.59 , 1.99 , 0.43 ] , [ 1.32 , 8.88 , 7.77 ] \u2026 \u2026 ]   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   codes   =   sorted   (   list   (   set   (   df   .   code   ) ) )   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   [   0   ] ,   list   ) :   kind   =   1   res   =   [   \" , \"   .   join   (   i   )   for   i   in   res   ]   else   :   kind   =   0   df   =   pd   .   DataFrame   ( {   \" code \"   :   codes   ,   \" fac \"   :   res   } )   if   kind   :   df   .   fac   =   df   .   fac   .   apply   (   lambda   x   :   [   float   (   i   )   for   i   in   x   .   split   (   \" , \"   ) ] )   return   df   return   full _ run","title":"for _ cross _ via _ str ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_frequent.for_cross_via_zip","text":"\u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   Python   1   2   3   4   return   (   pd   .   Series   ( [   1.54   ,   8.77   ,   9.99   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   pd   .   Series   ( [   3.54   ,   6.98   ,   9.01   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   )   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3584   3585   3586   3587   3588   3589   3590   3591   3592   3593   3594   3595   3596   3597   3598   3599   3600   3601   3602   3603   3604   3605   3606   3607   3608   3609   3610   3611   3612   3613   3614   3615   3616   3617   3618   3619   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   res   =   res   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   isinstance   (   res   ,   pd   .   DataFrame   ) :   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   res   is   None   :   ...   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   return   full _ run","title":"for _ cross _ via _ zip ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_frequent.get_daily_factors","text":"\u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c","title":"get _ daily _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_nature","text":"Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6525   6526   6527   6528   6529   6530   6531   6532   6533   6534   6535   6536   6537   6538   6539   6540   6541   6542   6543   6544   6545   6546   6547   6548   6549   6550   6551   6552   6553   6554   6555   6556   6557   6558   6559   6560   6561   6562   6563   6564   6565   6566   6567   6568   6569   6570   6571   6572   6573   6574   6575   6576   6577   6578   6579   6580   6581   6582   6583   6584   6585   6586   6587   6588   6589   6590   6591   6592   6593   6594   6595   6596   6597   6598   6599   6600   6601   6602   6603   6604   6605   6606   6607   6608   6609   6610   6611   6612   6613   6614   6615   6616   6617   6618   6619   6620   6621   6622   6623   6624   6625   6626   6627   6628   6629   6630   6631   6632   6633   6634   6635   6636   6637   6638   6639   6640   6641   6642   6643   6644   6645   6646   6647   6648   6649   6650   6651   6652   6653   6654   6655   6656   6657   6658   6659   6660   6661   6662   6663   6664   6665   6666   6667   6668   6669   6670   6671   6672   6673   6674   6675   6676   6677   6678   6679   6680   6681   6682   6683   6684   6685   6686   6687   6688   6689   6690   6691   6692   6693   6694   6695   6696   6697   6698   6699   6700   6701   6702   6703   6704   6705   6706   6707   6708   6709   6710   6711   6712   6713   6714   6715   6716   6717   6718   6719   6720   6721   6722   6723   6724   6725   6726   6727   6728   6729   6730   6731   6732   6733   6734   6735   6736   6737   6738   6739   6740   6741   6742   6743   6744   6745   6746   6747   6748   6749   6750   6751   6752   6753   6754   6755   6756   6757   6758   6759   6760   6761   6762   6763   6764   6765   6766   6767   6768   6769   6770   6771   6772   6773   6774   6775   6776   6777   6778   6779   6780   6781   6782   6783   6784   6785   6786   6787   6788   6789   6790   6791   6792   6793   6794   6795   6796   6797   6798   6799   6800   6801   6802   6803   6804   6805   6806   6807   6808   6809   6810   6811   6812   6813   6814   6815   6816   6817   6818   6819   6820   6821   6822   6823   6824   6825   6826   6827   6828   6829   6830   6831   6832   6833   6834   6835   6836   6837   6838   6839   6840   6841   6842   6843   6844   6845   6846   6847   6848   6849   6850   6851   6852   6853   6854   6855   6856   6857   6858   6859   6860   6861   6862   6863   6864   6865   6866   6867   6868   6869   6870   6871   6872   6873   6874   6875   6876   6877   6878   6879   6880   6881   6882   6883   6884   6885   6886   6887   6888   6889   6890   6891   6892   6893   6894   6895   6896   6897   6898   6899   6900   6901   6902   6903   6904   6905   6906   6907   6908   6909   6910   6911   6912   6913   6914   6915   6916   6917   6918   6919   6920   6921   6922   6923   6924   6925   6926   6927   6928   6929   6930   6931   6932   6933   6934   6935   6936   6937   6938   6939   6940   6941   6942   6943   6944   6945   6946   6947   6948   6949   class   pure _ fall _ nature   :   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ code   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u57fa\u4e8e \u80a1\u7968 \u9010\u7b14 \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e ,   by   default   [ ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   groupby _ code   =   groupby _ code   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   os   .   listdir   (   homeplace   .   tick _ by _ tick _ data   )   dates _ all   =   [   i   .   split   (   \" . \"   ) [   0   ]   for   i   in   dates _ all   if   i   .   endswith   (   \" . parquet \"   ) ]   dates _ all   =   [   i   .   replace   (   \" - \"   ,   \" \"   )   for   i   in   dates _ all   ]   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   if   \" 20 \"   if   i   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   self   .   age   =   read _ daily   (   age   =   1   )   self   .   state   =   read _ daily   (   state   =   1   )   self   .   closes _ unadj   =   read _ daily   (   close   =   1   ,   unadjust   =   1   )   .   shift   (   1   )   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   def   select _ one _ calculate   (   self   ,   date   :   pd   .   Timestamp   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   resample _ frequency   :   str   =   None   ,   opens _ in   :   bool   =   0   ,   highs _ in   :   bool   =   0   ,   lows _ in   :   bool   =   0   ,   amounts _ in   :   bool   =   0   ,   merge _ them   :   bool   =   0   ,   )   - >   None   :   the _ func   =   partial   (   func   )   if   not   isinstance   (   date   ,   int   ) :   date   =   int   (   datetime   .   datetime   .   strftime   (   date   ,   \" % Y% m   % d   \"   ) )   parquet _ name   =   (   homeplace   .   tick _ by _ tick _ data   +   str   (   date   ) [ :   4   ]   +   \" - \"   +   str   (   date   ) [   4   :   6   ]   +   \" - \"   +   str   (   date   ) [   6   : ]   +   \" . parquet \"   )   if   resample _ frequency   is   not   None   :   fields   =   \" date , code , price , amount \"   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   cursor   =   duckdb   .   connect   ( )   df   =   (   cursor   .   execute   (   f   \" select   {   fields   }   from   '   {   parquet _ name   }   ' ; \"   )   .   arrow   ( )   .   to _ pandas   ( )   )   date   =   df   .   date   .   iloc   [   0   ]   date0   =   pd   .   Timestamp   (   year   =   date   .   year   ,   month   =   date   .   month   ,   day   =   date   .   day   )   age _ here   =   self   .   age   .   loc   [   pd   .   Timestamp   (   pd   .   Timestamp   (   df   .   date   .   iloc   [   0   ] )   .   date   ( ) ) ]   age _ here   =   age _ here   .   where   (   age _ here   >   180   ,   np   .   nan   )   .   dropna   ( )   state _ here   =   self   .   state   .   loc   [   pd   .   Timestamp   (   pd   .   Timestamp   (   df   .   date   .   iloc   [   0   ] )   .   date   ( ) ) ]   state _ here   =   state _ here   .   where   (   state _ here   >   0   ,   np   .   nan   )   .   dropna   ( )   df   =   df   [   df   .   code   .   isin   (   age _ here   .   index   ) ]   df   =   df   [   df   .   code   .   isin   (   state _ here   .   index   ) ]   if   resample _ frequency   is   not   None   :   date   =   df   .   date   .   iloc   [   0   ]   date0   =   pd   .   Timestamp   (   year   =   date   .   year   ,   month   =   date   .   month   ,   day   =   date   .   day   )   head   =   self   .   closes _ unadj   .   loc   [   date0   ]   .   to _ frame   (   \" head _ temp \"   )   .   T   df   =   df   [   df   .   code   .   isin   (   head   .   columns   ) ]   price   =   df   .   drop _ duplicates   (   subset   =   [   \" code \"   ,   \" date \"   ] ,   keep   =   \" last \"   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" price \"   )   closes   =   price   .   resample   (   resample _ frequency   )   .   last   ( )   head   =   head   [ [   i   for   i   in   head   .   columns   if   i   in   closes   .   columns   ] ]   price   =   pd   .   concat   ( [   head   ,   closes   ] )   closes   =   closes   .   ffill   ( )   .   iloc   [   1   : ,   : ]   self   .   closes   =   closes   names   =   [ ]   if   opens _ in   :   price   =   df   .   drop _ duplicates   (   subset   =   [   \" code \"   ,   \" date \"   ] ,   keep   =   \" first \"   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" price \"   )   opens   =   price   .   resample   (   resample _ frequency   )   .   first   ( )   opens   =   np   .   isnan   (   opens   )   .   replace   (   True   ,   1   )   .   replace   (   False   ,   0   )   *   closes   .   shift   (   1   )   +   opens   .   fillna   (   0   )   self   .   opens   =   opens   names   .   append   (   \" open \"   )   else   :   self   .   opens   =   None   if   highs _ in   :   price   =   (   df   .   sort _ values   ( [   \" code \"   ,   \" date \"   ,   \" price \"   ] )   .   drop _ duplicates   (   subset   =   [   \" code \"   ,   \" date \"   ] ,   keep   =   \" last \"   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" price \"   )   )   highs   =   price   .   resample   (   resample _ frequency   )   .   max   ( )   highs   =   np   .   isnan   (   highs   )   .   replace   (   True   ,   1   )   .   replace   (   False   ,   0   )   *   closes   .   shift   (   1   )   +   highs   .   fillna   (   0   )   self   .   highs   =   highs   names   .   append   (   \" high \"   )   else   :   self   .   highs   =   None   if   lows _ in   :   price   =   (   df   .   sort _ values   ( [   \" code \"   ,   \" date \"   ,   \" price \"   ] )   .   drop _ duplicates   (   subset   =   [   \" code \"   ,   \" date \"   ] ,   keep   =   \" first \"   )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" price \"   )   )   lows   =   price   .   resample   (   resample _ frequency   )   .   min   ( )   lows   =   np   .   isnan   (   lows   )   .   replace   (   True   ,   1   )   .   replace   (   False   ,   0   )   *   closes   .   shift   (   1   )   +   lows   .   fillna   (   0   )   self   .   lows   =   lows   names   .   append   (   \" low \"   )   else   :   self   .   low   =   None   names   .   append   (   \" close \"   )   if   amounts _ in   :   amounts   =   df   .   groupby   ( [   \" code \"   ,   \" date \"   ] )   .   amount   .   sum   ( )   .   reset _ index   ( )   amounts   =   amounts   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" amount \"   )   amounts   =   amounts   .   resample   (   resample _ frequency   )   .   sum   ( )   .   fillna   (   0   )   self   .   amounts   =   amounts   names   .   append   (   \" amount \"   )   else   :   self   .   amounts   =   None   if   merge _ them   :   self   .   data   =   merge _ many   (   [   i   for   i   in   [   self   .   opens   ,   self   .   highs   ,   self   .   lows   ,   self   .   closes   ,   self   .   amounts   ,   ]   if   i   is   not   None   ] ,   names   ,   )   if   self   .   groupby _ code   :   df   =   df   .   groupby   ( [   \" code \"   ] )   .   apply   (   the _ func   )   else   :   df   =   the _ func   (   df   )   if   isinstance   (   df   ,   pd   .   DataFrame   ) :   df   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   df   .   columns   ) ) ]   df   =   df   .   assign   (   fac   =   list   (   zip   (   *   [   df   [   i   ]   for   i   in   list   (   df   .   columns   ) ] ) ) )   df   =   df   [ [   \" fac \"   ] ]   elif   isinstance   (   df   ,   list   )   or   isinstance   (   df   ,   tuple   ) :   df   =   pd   .   concat   (   list   (   df   ) ,   axis   =   1   )   df   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   df   .   columns   ) ) ]   df   =   df   .   assign   (   fac   =   list   (   zip   (   *   [   df   [   i   ]   for   i   in   list   (   df   .   columns   ) ] ) ) )   df   =   df   [ [   \" fac \"   ] ]   df   =   df   .   reset _ index   ( )   df   .   columns   =   [   \" code \"   ,   \" fac \"   ]   df   .   insert   (   0   ,   \" date \"   ,   pd   .   Timestamp   (   year   =   date   .   year   ,   month   =   date   .   month   ,   day   =   date   .   day   )   )   if   (   df   is   not   None   )   and   (   df   .   shape   [   0   ]   >   0   ) :   df1   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   self   .   factor _ steps   .   write _ via _ df   (   df   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df1   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   n _ jobs   :   int   =   1   ,   fields   :   str   =   \" * \"   ,   resample _ frequency   :   str   =   None   ,   opens _ in   :   bool   =   0   ,   highs _ in   :   bool   =   0   ,   lows _ in   :   bool   =   0   ,   amounts _ in   :   bool   =   0   ,   merge _ them   :   bool   =   0   ,   use _ mpire   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   fields   :   str ,   optional   \u8981 \u8bfb\u53d6 \u7684 \u5b57 \u6bb5 \uff0c \u53ef \u9009 \u5305\u542b ` date , code , price , amount , saleamount , buyamount , action , saleid , saleprice , buyid , buyprice ` \uff0c \u5176\u4e2d date , code \u5fc5\u987b \u5305\u542b ,   by   default   ` ' * ' `   resample _ frequency   :   str ,   optional   \u5c06 \u9010\u7b14 \u6570\u636e \u8f6c\u5316 \u4e3a \u79d2 \u7ea7 \u6216 \u5206\u949f \u9891 \u6570\u636e \uff0c \u53ef\u4ee5 \u586b\u5199 \u8981 \u8f6c\u5316 \u7684 \u9891\u7387 \uff0c \u5982 ' 3s ' \uff08 3 \u79d2 \u6570\u636e \uff09 \uff0c ' 1m ' \uff08 1 \u5206\u949f \u6570\u636e \uff09 \uff0c   \u6307\u5b9a \u53c2\u6570 \u6b64\u53c2\u6570 \u540e \uff0c \u5c06 \u81ea\u52a8 \u751f\u6210 \u4e00\u4e2a self . closes \u7684 \u6536\u76d8 \u6536\u76d8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6536\u76d8 \u6536\u76d8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . closes ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c ,   by   default   None   opens _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u5f00\u76d8 \u5f00\u76d8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . opens ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   highs _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . highs ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   lows _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . lows ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   amounts _ in   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u63d0\u524d \u8ba1\u7b97 \u597d \u6210\u4ea4 \u6210\u4ea4\u989d \u77e9\u9635 ( index \u4e3a \u65f6\u95f4 , columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 , values \u4e3a \u6210\u4ea4 \u6210\u4ea4\u91cf ) \uff0c   \u53ef \u5728 \u5faa\u73af \u8ba1\u7b97 \u7684 \u51fd\u6570 \u4e2d \u4f7f\u7528 ` self . amounts ` \u6765 \u8c03\u7528 \u8ba1\u7b97 \u597d \u7684 \u503c \uff0c by   default   0   merge _ them   :   bool ,   optional   \u5728 resample _ frequency \u4e0d\u4e3a None \u7684 \u60c5\u51b5 \u4e0b \uff0c \u53ef\u4ee5 \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \uff0c \u5c06 \u8ba1\u7b97 \u597d \u7684 \u56e0\u5b50 \u503c \u5408\u5e76 \u5230 \u4e00\u8d77 \uff0c \u751f\u6210 \u7c7b\u4f3c \u4e8e \u5206\u949f \u6570\u636e \u7684 sql \u5f62\u5f0f \uff0c by   default   0   use _ mpire   :   bool ,   optional   \u5e76\u884c \u662f\u5426 \u4f7f\u7528 mpire \uff0c \u9ed8\u8ba4 \u4f7f\u7528 concurrent \uff0c by   default   0   \" \" \"   if   len   (   self   .   dates _ new   )   >   0   :   if   n _ jobs   >   1   :   if   use _ mpire   :   with   WorkerPool   (   n _ jobs   =   n _ jobs   )   as   pool   :   self   .   factor _ new   =   pool   .   map   (   lambda   x   :   self   .   select _ one _ calculate   (   date   =   x   ,   func   =   func   ,   fields   =   fields   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   ) ,   self   .   dates _ new   ,   progress _ bar   =   True   ,   )   else   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   self   .   factor _ new   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   lambda   x   :   self   .   select _ one _ calculate   (   date   =   x   ,   func   =   func   ,   fields   =   fields   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   ) ,   self   .   dates _ new   ,   ) ,   total   =   len   (   self   .   dates _ new   ) ,   )   )   else   :   for   date   in   tqdm   .   auto   .   tqdm   (   self   .   dates _ new   ,   \" \u60a8 \u73b0\u5728 \u5904\u4e8e \u5355\u6838 \u8fd0\u7b97 \u72b6\u6001 \uff0c \u5efa\u8bae \u4ec5 \u5728 \u8c03\u8bd5 \u65f6 \u4f7f\u7528 \u5355\u6838 \"   ) :   df   =   self   .   select _ one _ calculate   (   date   =   date   ,   func   =   func   ,   resample _ frequency   =   resample _ frequency   ,   opens _ in   =   opens _ in   ,   highs _ in   =   highs _ in   ,   lows _ in   =   lows _ in   ,   amounts _ in   =   amounts _ in   ,   merge _ them   =   merge _ them   ,   )   self   .   factor _ new   .   append   (   df   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   if   self   .   factor _ old   is   not   None   :   self   .   factor   =   pd   .   concat   (   [   self   .   factor _ old   ]   +   self   .   factor _ new   )   .   sort _ index   ( )   else   :   self   .   factor   =   pd   .   concat   (   self   .   factor _ new   )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   logger   .   info   (   f   \" \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5b8c \u4e86 \"   )   #   \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u7684 \u4e2d\u9014 \u5907\u4efd \u6570\u636e   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   info   (   \" \u5907\u4efd \u5728 questdb \u7684 \u8868\u683c \u5df2 \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   \" \u5220\u9664 questdb \u4e2d \u8868\u683c \u65f6 \uff0c \u5b58\u5728 \u67d0\u4e2a \u672a\u77e5 \u9519\u8bef \uff0c \u8bf7 \u5f53\u5fc3 \"   )   else   :   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor _ old   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5f53\u524d \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )","title":"pure _ fall _ nature"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_nature.__call__","text":"\u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_nature.__init__","text":"\u57fa\u4e8e \u80a1\u7968 \u9010\u7b14 \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_nature.drop_table","text":"\u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6943   6944   6945   6946   6947   6948   6949   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )","title":"drop _ table ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_nature.get_daily_factors","text":"\u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c","title":"get _ daily _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_second","text":"Bases :   object   \u5bf9\u5355 \u53ea \u80a1\u7968 \u5355\u65e5 \u8fdb\u884c \u64cd\u4f5c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6056   6057   6058   6059   6060   6061   6062   6063   6064   6065   6066   6067   6068   6069   6070   6071   6072   6073   6074   6075   6076   6077   6078   6079   6080   6081   6082   6083   6084   6085   6086   6087   6088   6089   6090   6091   6092   6093   6094   6095   6096   6097   6098   6099   6100   6101   6102   6103   6104   6105   6106   6107   6108   6109   6110   6111   6112   6113   6114   6115   6116   6117   6118   6119   6120   6121   6122   6123   6124   6125   6126   6127   6128   6129   6130   6131   6132   6133   6134   6135   6136   6137   6138   6139   6140   6141   6142   6143   6144   6145   6146   6147   6148   6149   6150   6151   6152   6153   6154   6155   6156   6157   6158   6159   6160   6161   6162   6163   6164   6165   6166   6167   6168   6169   6170   6171   6172   6173   6174   6175   6176   6177   6178   6179   6180   6181   6182   6183   6184   6185   6186   6187   6188   6189   6190   6191   6192   6193   6194   6195   6196   6197   6198   6199   6200   6201   6202   6203   6204   6205   6206   6207   6208   6209   6210   6211   6212   6213   6214   6215   6216   6217   6218   6219   6220   6221   6222   6223   6224   6225   6226   6227   6228   6229   6230   6231   6232   6233   6234   6235   6236   6237   6238   6239   6240   6241   6242   6243   6244   6245   6246   6247   6248   6249   6250   6251   6252   6253   6254   6255   6256   6257   6258   6259   6260   6261   6262   6263   6264   6265   6266   6267   6268   6269   6270   6271   6272   6273   6274   6275   6276   6277   6278   6279   6280   6281   6282   6283   6284   6285   6286   6287   6288   6289   6290   6291   6292   6293   6294   6295   6296   6297   6298   6299   6300   6301   6302   6303   6304   6305   6306   6307   6308   6309   6310   6311   6312   6313   6314   6315   6316   6317   6318   6319   6320   6321   6322   6323   6324   6325   6326   6327   6328   6329   6330   6331   6332   6333   6334   6335   6336   6337   6338   6339   6340   6341   6342   6343   6344   6345   6346   6347   6348   6349   6350   6351   6352   6353   6354   6355   6356   6357   6358   6359   6360   6361   6362   6363   6364   6365   6366   6367   6368   6369   6370   6371   6372   6373   6374   6375   6376   6377   6378   6379   6380   6381   6382   6383   6384   6385   6386   6387   6388   6389   6390   6391   6392   6393   6394   6395   6396   6397   6398   6399   6400   6401   6402   6403   6404   6405   6406   6407   6408   6409   6410   6411   6412   6413   6414   6415   6416   6417   6418   6419   6420   6421   6422   6423   6424   6425   6426   6427   6428   6429   6430   6431   6432   6433   6434   6435   6436   6437   6438   6439   6440   6441   6442   6443   6444   6445   6446   6447   6448   6449   6450   6451   6452   6453   6454   6455   6456   6457   6458   6459   6460   6461   6462   6463   6464   6465   6466   6467   6468   6469   6470   6471   6472   6473   6474   6475   6476   6477   6478   6479   6480   6481   6482   6483   6484   6485   6486   6487   6488   6489   6490   6491   6492   6493   6494   6495   6496   6497   6498   6499   6500   6501   6502   6503   6504   6505   6506   6507   6508   6509   6510   6511   6512   6513   6514   6515   6516   6517   6518   6519   6520   6521   6522   class   pure _ fall _ second   (   object   ) :   \" \" \" \u5bf9\u5355 \u53ea \u80a1\u7968 \u5355\u65e5 \u8fdb\u884c \u64cd\u4f5c \" \" \"   def   __ init __   (   self   ,   factor _ file   :   str   ,   project   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ignore _ history _ in _ questdb   :   bool   =   0   ,   groupby _ target   :   list   =   [   \" date \"   ,   \" code \"   ] ,   )   - >   None   :   \" \" \" \u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e   Parameters   ----------   factor _ file   :   str   \u7528\u4e8e \u4fdd\u5b58 \u56e0\u5b50 \u503c \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d \uff0c \u9700\u4e3a parquet \u6587\u4ef6 \uff0c \u4ee5 ' . parquet ' \u7ed3\u5c3e   project   :   str ,   optional   \u8be5 \u56e0\u5b50 \u6240\u5c5e \u9879\u76ee \uff0c \u5373\u5b50 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u540d\u79f0 ,   by   default   None   startdate   :   int ,   optional   \u8d77\u59cb \u65f6\u95f4 \uff0c \u5f62\u5982 20121231 \uff0c \u4e3a \u533a\u95f4 \u5f00\u533a\u95f4 ,   by   default   None   enddate   :   int ,   optional   \u622a\u6b62 \u65f6\u95f4 \uff0c \u5f62\u5982 20220814 \uff0c \u4e3a\u95ed \u533a\u95f4 \uff0c \u4e3a \u7a7a\u5219 \u8ba1\u7b97 \u5230 \u6700\u8fd1 \u6570\u636e ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   ignore _ history _ in _ questdb   :   bool ,   optional   \u6253\u65ad \u540e \u91cd\u65b0 \u4ece\u5934 \u8ba1\u7b97 \uff0c \u6e05\u9664 \u5728 questdb \u4e2d \u7684 \u8bb0\u5f55   groupby _ target :   list ,   optional   groupby \u8ba1\u7b97 \u65f6 \uff0c \u5206\u7ec4 \u7684 \u4f9d\u636e \uff0c \u4f7f\u7528 \u53c2\u6570 \u6b64\u53c2\u6570 \u65f6 \uff0c \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u51fd\u6570 \u7684 \u90e8\u5206 \uff0c \u5982\u679c \u6307\u5b9a \u6309\u7167 [ ' date ' ] \u5206\u7ec4 groupby \u8ba1\u7b97 \uff0c   \u5219 \u8fd4\u56de \u65f6 \uff0c \u5e94\u5f53 \u8fd4\u56de \u4e00\u4e2a \u4e24\u5217 \u7684 dataframe \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7b2c\u4e8c \u5217\u4e3a \u4e3a \u56e0\u5b50 \u503c ,   by   default   [ ' date ' , ' code ' ]   \" \" \"   homeplace   =   HomePlace   ( )   self   .   groupby _ target   =   groupby _ target   self   .   chc   =   ClickHouseClient   (   \" second _ data \"   )   #   \u5c06 \u8ba1\u7b97 \u5230 \u4e00\u534a \u7684 \u56e0\u5b50 \uff0c \u5b58\u5165 questdb \u4e2d \uff0c \u907f\u514d \u4e2d\u9014 \u88ab \u6253\u65ad \u540e \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u8868\u540d \u5373 \u4e3a \u56e0\u5b50 \u6587\u4ef6 \u6587\u4ef6\u540d \u7684 \u6c49\u8bed \u62fc\u97f3 \u6c49\u8bed\u62fc\u97f3   pinyin   =   Pinyin   ( )   self   .   factor _ file _ pinyin   =   pinyin   .   get _ pinyin   (   factor _ file   .   replace   (   \" . parquet \"   ,   \" \"   ) ,   \" \"   )   self   .   factor _ steps   =   Questdb   (   host   =   questdb _ host   )   if   project   is   not   None   :   if   not   os   .   path   .   exists   (   homeplace   .   factor _ data _ file   +   project   ) :   os   .   makedirs   (   homeplace   .   factor _ data _ file   +   project   )   else   :   logger   .   info   (   f   \" \u5f53\u524d \u6b63\u5728   {   project   }   \u9879\u76ee \u4e2d \u2026 \u2026 \"   )   else   :   logger   .   warning   (   \" \u5f53\u524d \u56e0\u5b50 \u4e0d \u5c5e\u4e8e \u4efb\u4f55 \u9879\u76ee \uff0c \u8fd9 \u5c06 \u9020\u6210 \u56e0\u5b50 \u6570\u636e \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u7684 \u6df7\u4e71 \uff0c \u4e0d \u4fbf\u4e8e \u7ba1\u7406 \u4fbf\u4e8e\u7ba1\u7406 \uff0c \u5efa\u8bae \u6307\u5b9a \u4e00\u4e2a \u9879\u76ee \u540d\u79f0 \u9879\u76ee\u540d\u79f0 \"   )   #   \u5b8c\u6574 \u7684 \u56e0\u5b50 \u6587\u4ef6 \u8def\u5f84   if   project   is   not   None   :   factor _ file   =   homeplace   .   factor _ data _ file   +   project   +   \" / \"   +   factor _ file   else   :   factor _ file   =   homeplace   .   factor _ data _ file   +   factor _ file   self   .   factor _ file   =   factor _ file   #   \u8bfb\u5165 \u4e4b\u524d \u7684 \u56e0\u5b50   if   os   .   path   .   exists   (   factor _ file   ) :   factor _ old   =   drop _ duplicates _ index   (   pd   .   read _ parquet   (   self   .   factor _ file   ) )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   (   not   ignore _ history _ in _ questdb   )   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u73b0\u5728 \u5c06 \u8bfb\u53d6 \u4e0a\u6b21 \u7684 \u6570\u636e \uff0c \u7ee7\u7eed \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   get _ data _ with _ tuple   (   f   \" select   *   from   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   factor _ old   =   factor _ old   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   factor _ old   =   factor _ old   .   sort _ index   ( )   self   .   factor _ old   =   factor _ old   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u65e5\u5b50   dates _ old   =   sorted   (   list   (   factor _ old   .   index   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   ) ) )   self   .   dates _ old   =   dates _ old   elif   ignore _ history _ in _ questdb   and   self   .   factor _ file _ pinyin   in   list   (   self   .   factor _ steps   .   get _ data   (   \" show   tables \"   )   .   table   ) :   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u9014\u4e2d \u88ab \u6253\u65ad \uff0c \u5df2\u7ecf \u5c06 \u6570\u636e \u5907\u4efd \u6570\u636e\u5907\u4efd \u5728 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u8868   {   self   .   factor _ file _ pinyin   }   \u4e2d \uff0c \u4f46 \u60a8 \u9009\u62e9 \u91cd\u65b0 \u8ba1\u7b97 \uff0c \u6240\u4ee5 \u6b63\u5728 \u5220\u9664 \u539f\u6765 \u7684 \u6570\u636e \uff0c \u4ece\u5934 \u8ba1\u7b97 \"   )   factor _ old   =   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u5220\u9664 \u5b8c\u6bd5 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   else   :   self   .   factor _ old   =   None   self   .   dates _ old   =   [ ]   logger   .   info   (   \" \u8fd9\u4e2a \u56e0\u5b50 \u4ee5\u524d \u6ca1\u6709 \uff0c \u6b63\u5728 \u91cd\u65b0 \u8ba1\u7b97 \"   )   #   \u8bfb\u53d6 \u5f53\u524d \u6240\u6709 \u7684 \u65e5\u5b50   dates _ all   =   self   .   chc   .   show _ all _ dates   (   f   \" second _ data _ stock _ 10s \"   )   dates _ all   =   [   int   (   i   )   for   i   in   dates _ all   ]   if   startdate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   > =   startdate   ]   if   enddate   is   None   :   ...   else   :   dates _ all   =   [   i   for   i   in   dates _ all   if   i   < =   enddate   ]   self   .   dates _ all   =   dates _ all   #   \u9700\u8981 \u65b0 \u8865\u5145 \u7684 \u65e5\u5b50   self   .   dates _ new   =   sorted   ( [   i   for   i   in   dates _ all   if   i   not   in   self   .   dates _ old   ] )   if   len   (   self   .   dates _ new   )   = =   0   :   ...   elif   len   (   self   .   dates _ new   )   = =   1   :   self   .   dates _ new _ intervals   =   [ [   pd   .   Timestamp   (   str   (   self   .   dates _ new   [   0   ] ) ) ] ]   print   (   f   \" \u53ea\u7f3a \u4e00\u5929   {   self   .   dates _ new   [   0   ]   }   \"   )   else   :   dates   =   [   pd   .   Timestamp   (   str   (   i   ) )   for   i   in   self   .   dates _ new   ]   intervals   =   [ [ ] ]   *   len   (   dates   )   interbee   =   0   intervals   [   0   ]   =   intervals   [   0   ]   +   [   dates   [   0   ] ]   for   i   in   range   (   len   (   dates   )   -   1   ) :   val1   =   dates   [   i   ]   val2   =   dates   [   i   +   1   ]   if   val2   -   val1   <   pd   .   Timedelta   (   days   =   30   ) :   ...   else   :   interbee   =   interbee   +   1   intervals   [   interbee   ]   =   intervals   [   interbee   ]   +   [   val2   ]   intervals   =   [   i   for   i   in   intervals   if   len   (   i   )   >   0   ]   print   (   f   \" \u5171   {   len   (   intervals   )   }   \u4e2a \u65f6\u95f4 \u533a\u95f4 \uff0c \u5206\u522b \u662f \"   )   for   date   in   intervals   :   print   (   f   \" \u4ece   {   date   [   0   ]   }   \u5230   {   date   [   -   1   ]   }   \"   )   self   .   dates _ new _ intervals   =   intervals   self   .   factor _ new   =   [ ]   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50   Returns   -------   ` pd . DataFrame `   \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   factor   .   copy   ( )   def   forward _ dates   (   self   ,   dates   ,   many _ days   ) :   dates _ index   =   [   self   .   dates _ all   .   index   (   i   )   for   i   in   dates   ]   def   value   (   x   ,   a   ) :   if   x   > =   0   :   return   a   [   x   ]   else   :   return   None   return   [   value   (   i   -   many _ days   ,   self   .   dates _ all   )   for   i   in   dates _ index   ]   def   select _ one _ calculate   (   self   ,   date   :   pd   .   Timestamp   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   )   - >   None   :   the _ func   =   partial   (   func   )   if   not   isinstance   (   date   ,   int   ) :   date   =   int   (   datetime   .   datetime   .   strftime   (   date   ,   \" % Y% m   % d   \"   ) )   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   sql _ order   =   f   \" select   {   fields   }   from   second _ data . second _ data _ stock _ 10s   where   toYYYYMMDD ( date ) = date   order   by   code , date \"   df   =   self   .   chc   .   get _ data   (   sql _ order   )   df   =   ( (   df   .   set _ index   ( [   \" code \"   ,   \" date \"   ] ) )   /   100   )   .   reset _ index   ( )   df   =   df   .   groupby   (   self   .   groupby _ target   )   .   apply   (   the _ func   )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ] :   df   =   df   .   to _ frame   (   \" fac \"   )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   df   =   df   .   reset _ index   ( )   if   (   df   is   not   None   )   and   (   df   .   shape   [   0   ]   >   0   ) :   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   def   select _ many _ calculate   (   self   ,   dates   :   List   [   pd   .   Timestamp   ] ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   the _ func   =   partial   (   func   )   factor _ new   =   [ ]   dates   =   [   int   (   datetime   .   datetime   .   strftime   (   i   ,   \" % Y% m   % d   \"   ) )   for   i   in   dates   ]   if   many _ days   = =   1   :   #   \u5c06 \u9700\u8981 \u66f4\u65b0 \u7684 \u65e5\u5b50 \u5206\u5757 \uff0c \u6bcf 200 \u5929 \u4e00\u7ec4 \uff0c \u4e00\u8d77 \u8fd0\u7b97   dates _ new _ len   =   len   (   dates   )   cut _ points   =   list   (   range   (   0   ,   dates _ new _ len   ,   chunksize   ) )   +   [   dates _ new _ len   -   1   ]   if   cut _ points   [   -   1   ]   = =   cut _ points   [   -   2   ] :   cut _ points   =   cut _ points   [ :   -   1   ]   cuts   =   tuple   (   zip   (   cut _ points   [ :   -   many _ days   ] ,   cut _ points   [   many _ days   : ] ) )   df _ first   =   self   .   select _ one _ calculate   (   date   =   dates   [   0   ] ,   func   =   func   ,   fields   =   fields   ,   )   factor _ new   .   append   (   df _ first   )   def   cal _ one   (   date1   ,   date2   ) :   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date >   {   dates   [   date1   ]   *   100   }   and   date < =   {   dates   [   date2   ]   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   cast ( date   as   int ) >   {   dates   [   date1   ]   }   and   cast ( date   as   int ) < =   {   dates   [   date2   ]   }   order   by   code , date , num \"   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   df   =   df   .   groupby   (   self   .   groupby _ target   )   .   apply   (   the _ func   )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ] :   df   =   df   .   to _ frame   (   \" fac \"   )   .   reset _ index   ( )   df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   df   =   df   .   reset _ index   ( )   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   if   n _ jobs   >   1   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   factor _ new _ more   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   cal _ one   ,   cuts   ) ,   total   =   len   (   cuts   ) )   )   factor _ new   =   factor _ new   +   factor _ new _ more   else   :   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   for   date1   ,   date2   in   tqdm   .   auto   .   tqdm   (   cuts   ,   desc   =   \" \u4e0d\u77e5 \u4e58\u6708 \u51e0\u4eba \u5f52 \uff0c \u843d\u6708 \u6447\u60c5 \u6ee1\u6c5f \u6811 \u3002 \"   ) :   df   =   cal _ one   (   date1   ,   date2   )   factor _ new   .   append   (   df   )   else   :   def   cal _ two   (   date1   ,   date2   ) :   if   date1   is   not   None   :   if   self   .   clickhouse   = =   1   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data . minute _ data _   {   self   .   kind   }   where   date >   {   date1   *   100   }   and   date < =   {   date2   *   100   }   order   by   code , date , num \"   else   :   sql _ order   =   f   \" select   {   fields   }   from   minute _ data _   {   self   .   kind   }   where   cast ( date   as   int ) >   {   date1   }   and   cast ( date   as   int ) < =   {   date2   }   order   by   code , date , num \"   df   =   self   .   chc   .   get _ data   (   sql _ order   )   if   self   .   clickhouse   = =   1   :   df   =   ( (   df   .   set _ index   (   \" code \"   ) )   /   100   )   .   reset _ index   ( )   else   :   df   .   num   =   df   .   num   .   astype   (   int   )   df   .   date   =   df   .   date   .   astype   (   int   )   df   =   df   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   if   self   .   groupby _ target   = =   [   \" date \"   ,   \" code \"   ,   ]   or   self   .   groupby _ target   = =   [   \" code \"   ] :   df   =   df   .   groupby   ( [   \" code \"   ] )   .   apply   (   the _ func   )   .   reset _ index   ( )   else   :   df   =   the _ func   (   df   )   df   =   df   .   assign   (   date   =   date2   )   df   .   columns   =   [   \" code \"   ,   \" fac \"   ,   \" date \"   ]   df   =   df   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" fac \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   to _ save   =   df   .   stack   ( )   .   reset _ index   ( )   to _ save   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factor _ steps   .   write _ via _ df   (   to _ save   ,   self   .   factor _ file _ pinyin   ,   tuple _ col   =   \" fac \"   )   return   df   pairs   =   self   .   forward _ dates   (   dates   ,   many _ days   =   many _ days   )   cuts2   =   tuple   (   zip   (   pairs   ,   dates   ) )   if   n _ jobs   >   1   :   with   concurrent   .   futures   .   ThreadPoolExecutor   (   max _ workers   =   n _ jobs   )   as   executor   :   factor _ new _ more   =   list   (   tqdm   .   auto   .   tqdm   (   executor   .   map   (   cal _ two   ,   cuts2   ) ,   total   =   len   (   cuts2   ) )   )   factor _ new   =   factor _ new   +   factor _ new _ more   else   :   #   \u5f00\u59cb \u8ba1\u7b97 \u56e0\u5b50 \u503c   for   date1   ,   date2   in   tqdm   .   auto   .   tqdm   (   cuts2   ,   desc   =   \" \u77e5 \u4e0d\u53ef \u4e4e \u9aa4\u5f97 \uff0c \u6258 \u9057\u54cd \u4e8e \u60b2\u98ce \u3002 \"   ) :   df   =   cal _ two   (   date1   ,   date2   )   factor _ new   .   append   (   df   )   if   len   (   factor _ new   )   >   0   :   factor _ new   =   pd   .   concat   (   factor _ new   )   return   factor _ new   else   :   return   None   def   select _ any _ calculate   (   self   ,   dates   :   List   [   pd   .   Timestamp   ] ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   if   len   (   dates   )   = =   1   and   many _ days   = =   1   :   res   =   self   .   select _ one _ calculate   (   dates   [   0   ] ,   func   =   func   ,   fields   =   fields   ,   show _ time   =   show _ time   ,   )   else   :   res   =   self   .   select _ many _ calculate   (   dates   =   dates   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   if   res   is   not   None   :   self   .   factor _ new   .   append   (   res   )   return   res   @ staticmethod   def   for _ cross _ via _ str   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   ` ` ` python   return   [ [ 0.11 , 0.24 , 0.55 ] , [ 2.59 , 1.99 , 0.43 ] , [ 1.32 , 8.88 , 7.77 ] \u2026 \u2026 ]   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   codes   =   sorted   (   list   (   set   (   df   .   code   ) ) )   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   [   0   ] ,   list   ) :   kind   =   1   res   =   [   \" , \"   .   join   (   i   )   for   i   in   res   ]   else   :   kind   =   0   df   =   pd   .   DataFrame   ( {   \" code \"   :   codes   ,   \" fac \"   :   res   } )   if   kind   :   df   .   fac   =   df   .   fac   .   apply   (   lambda   x   :   [   float   (   i   )   for   i   in   x   .   split   (   \" , \"   ) ] )   return   df   return   full _ run   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   res   =   res   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   isinstance   (   res   ,   pd   .   DataFrame   ) :   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   res   is   None   :   ...   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   return   full _ run   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u5206\u949f \u6570\u636e \u5904\u7406 \u6570\u636e\u5904\u7406 \u5b8c \u5566 \uff5e \ud83c\udf88 \"   )   def   get _ daily _ factors   (   self   ,   func   :   Callable   ,   fields   :   str   =   \" * \"   ,   chunksize   :   int   =   10   ,   show _ time   :   bool   =   0   ,   many _ days   :   int   =   1   ,   n _ jobs   :   int   =   1   ,   )   - >   None   :   \" \" \" \u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u7528\u4e8e \u8ba1\u7b97 \u56e0\u5b50 \u503c \u7684 \u51fd\u6570   fields   :   str ,   optional   \u80a1\u7968 \u6570\u636e \u6d89\u53ca \u5230 \u54ea\u4e9b \u5b57 \u6bb5 \uff0c \u6392\u9664 \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u5b57 \u6bb5 \uff0c \u53ef\u4ee5 \u8282\u7ea6 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u7684 \u65f6\u95f4 \uff0c \u5f62 \u5982 ' date , code , num , close , amount , open '   \u63d0\u53d6 \u51fa \u7684 \u6570\u636e \uff0c \u81ea\u52a8 \u6309\u7167 code , date , num \u6392\u5e8f \uff0c \u56e0\u6b64 code , date , num \u662f \u4e0d\u53ef \u5fc5\u4e0d\u53ef\u5c11 \u7684 \u5b57 \u6bb5 ,   by   default   \" * \"   chunksize   :   int ,   optional   \u6bcf\u6b21 \u8bfb\u53d6 \u7684 \u622a\u9762 \u4e0a \u7684 \u5929\u6570 ,   by   default   10   show _ time   :   bool ,   optional   \u5c55\u793a \u6bcf\u6b21 \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6240 \u9700\u8981 \u7684 \u65f6\u95f4 ,   by   default   0   many _ days   :   int ,   optional   \u8ba1\u7b97 \u67d0\u5929 \u7684 \u56e0\u5b50 \u503c\u65f6 \uff0c \u9700\u8981 \u4f7f\u7528 \u4e4b\u524d \u591a\u5c11 \u5929 \u7684 \u6570\u636e   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf \uff0c \u4e0d \u5efa\u8bae \u8bbe\u7f6e \u4e3a \u5927\u4e8e 2 \u7684 \u6570 \uff0c \u6b64\u5916 \u5f53 \u53c2\u6570 \u6b64\u53c2\u6570 \u5927\u4e8e 1 \u65f6 \uff0c \u8bf7 \u4f7f\u7528 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u6765 \u8bfb\u53d6 \u5206\u949f \u6570\u636e ,   by   default   1   \" \" \"   if   len   (   self   .   dates _ new   )   >   0   :   for   interval   in   self   .   dates _ new _ intervals   :   df   =   self   .   select _ any _ calculate   (   dates   =   interval   ,   func   =   func   ,   fields   =   fields   ,   chunksize   =   chunksize   ,   show _ time   =   show _ time   ,   many _ days   =   many _ days   ,   n _ jobs   =   n _ jobs   ,   )   self   .   factor _ new   =   pd   .   concat   (   self   .   factor _ new   )   #   \u62fc\u63a5 \u65b0 \u7684 \u548c \u65e7 \u7684   self   .   factor   =   pd   .   concat   ( [   self   .   factor _ old   ,   self   .   factor _ new   ] )   .   sort _ index   ( )   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor   .   dropna   (   how   =   \" all \"   ) )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   logger   .   info   (   f   \" \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u8ba1\u7b97 \u5b8c \u4e86 \"   )   #   \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u7684 \u4e2d\u9014 \u5907\u4efd \u6570\u636e   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   info   (   \" \u5907\u4efd \u5728 questdb \u7684 \u8868\u683c \u5df2 \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   \" \u5220\u9664 questdb \u4e2d \u8868\u683c \u65f6 \uff0c \u5b58\u5728 \u67d0\u4e2a \u672a\u77e5 \u9519\u8bef \uff0c \u8bf7 \u5f53\u5fc3 \"   )   else   :   self   .   factor   =   drop _ duplicates _ index   (   self   .   factor _ old   )   #   \u5b58\u5165 \u672c\u5730   self   .   factor   .   to _ parquet   (   self   .   factor _ file   )   new _ end _ date   =   datetime   .   datetime   .   strftime   (   self   .   factor   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5f53\u524d \u622a\u6b62 \u5230   {   new _ end _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )","title":"pure _ fall _ second"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_second.__call__","text":"\u83b7\u5f97 \u7ecf \u8fd0\u7b97 \u4ea7\u751f \u7684 \u56e0\u5b50","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_second.__init__","text":"\u57fa\u4e8e clickhouse \u7684 \u5206\u949f \u6570\u636e \uff0c \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6bcf\u5929 \u7684 \u56e0\u5b50 \u503c \u53ea\u7528 \u5230 \u5f53\u65e5 \u7684 \u6570\u636e","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_second.drop_table","text":"\u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6516   6517   6518   6519   6520   6521   6522   def   drop _ table   (   self   ) :   \" \" \" \u76f4\u63a5 \u5220\u9664 \u5b58\u50a8 \u5728 questdb \u4e2d \u7684 \u6682\u5b58 \u6570\u636e \" \" \"   try   :   self   .   factor _ steps   .   do _ order   (   f   \" drop   table   '   {   self   .   factor _ file _ pinyin   }   ' \"   )   logger   .   success   (   f   \" \u6682 \u5b58\u5728 questdb \u4e2d \u7684 \u6570\u636e \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u5220\u9664 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u60a8 \u8981 \u5220\u9664 \u7684 \u8868\u683c '   {   self   .   factor _ file _ pinyin   }   ' \u5df2\u7ecf \u4e0d \u5b58\u5728 \u4e86 \uff0c \u8bf7 \u68c0\u67e5 \"   )","title":"drop _ table ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_second.for_cross_via_str","text":"\u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   Python   1   return   [ [   0.11   ,   0.24   ,   0.55   ] , [   2.59   ,   1.99   ,   0.43   ] , [   1.32   ,   8.88   ,   7.77   ]   \u2026 \u2026   ]   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6393   6394   6395   6396   6397   6398   6399   6400   6401   6402   6403   6404   6405   6406   6407   6408   6409   6410   6411   6412   6413   6414   6415   @ staticmethod   def   for _ cross _ via _ str   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u4e24\u5c42 \u7684 list \uff0c \u6bcf \u4e00\u4e2a \u91cc\u5c42 \u7684 \u5c0f list \u4e3a \u5355\u4e2a \u80a1\u7968 \u5728 \u8fd9 \u4e00\u5929 \u7684 \u8fd4\u56de \u8fd4\u56de\u503c   \u4f8b\u5982   ` ` ` python   return   [ [ 0.11 , 0.24 , 0.55 ] , [ 2.59 , 1.99 , 0.43 ] , [ 1.32 , 8.88 , 7.77 ] \u2026 \u2026 ]   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e09\u4e2a \u56e0\u5b50 \u503c \uff0c \u91cc\u5c42 \u7684 list \u6309\u7167 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u987a\u5e8f \u6392\u5217 \u987a\u5e8f\u6392\u5217 \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   codes   =   sorted   (   list   (   set   (   df   .   code   ) ) )   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   [   0   ] ,   list   ) :   kind   =   1   res   =   [   \" , \"   .   join   (   i   )   for   i   in   res   ]   else   :   kind   =   0   df   =   pd   .   DataFrame   ( {   \" code \"   :   codes   ,   \" fac \"   :   res   } )   if   kind   :   df   .   fac   =   df   .   fac   .   apply   (   lambda   x   :   [   float   (   i   )   for   i   in   x   .   split   (   \" , \"   ) ] )   return   df   return   full _ run","title":"for _ cross _ via _ str ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_second.for_cross_via_zip","text":"\u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   Python   1   2   3   4   return   (   pd   .   Series   ( [   1.54   ,   8.77   ,   9.99   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   pd   .   Series   ( [   3.54   ,   6.98   ,   9.01   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   )   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   6417   6418   6419   6420   6421   6422   6423   6424   6425   6426   6427   6428   6429   6430   6431   6432   6433   6434   6435   6436   6437   6438   6439   6440   6441   6442   6443   6444   6445   6446   6447   6448   6449   6450   6451   6452   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   res   =   res   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   isinstance   (   res   ,   pd   .   DataFrame   ) :   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   elif   res   is   None   :   ...   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   res   =   res   [ [   \" fac \"   ] ]   .   reset _ index   ( )   res   .   columns   =   [   \" code \"   ,   \" fac \"   ]   return   res   return   full _ run","title":"for _ cross _ via _ zip ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fall_second.get_daily_factors","text":"\u6bcf\u6b21 \u62bd\u53d6 chunksize \u5929 \u7684 \u622a\u9762 \u4e0a \u5168\u90e8 \u80a1\u7968 \u7684 \u5206\u949f \u6570\u636e   \u5bf9 \u6bcf\u5929 \u7684 \u80a1\u7968 \u7684 \u6570\u636e \u8ba1\u7b97 \u56e0\u5b50 \u503c","title":"get _ daily _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fallmount","text":"Bases :   pure _ fall   \u7ee7\u627f \u81ea\u7236 \u7c7b \uff0c \u4e13\u4e3a \u505a \u56e0\u5b50 \u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u76f8\u52a0 \u548c \u56e0\u5b50 \u5254\u9664 \u5176\u4ed6 \u8f85\u52a9 \u56e0\u5b50 \u8f85\u52a9\u56e0\u5b50 \u7684 \u4f5c\u7528   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3017   3018   3019   3020   3021   3022   3023   3024   3025   3026   3027   3028   3029   3030   3031   3032   3033   3034   3035   3036   3037   3038   3039   3040   3041   3042   3043   3044   3045   3046   3047   3048   3049   3050   3051   3052   3053   3054   3055   3056   3057   3058   3059   3060   3061   3062   3063   3064   3065   3066   3067   3068   3069   3070   3071   3072   3073   3074   3075   3076   3077   3078   3079   3080   3081   3082   3083   3084   3085   3086   3087   3088   3089   3090   3091   3092   3093   3094   3095   3096   3097   3098   3099   3100   3101   3102   3103   3104   3105   3106   3107   3108   3109   3110   3111   3112   3113   3114   3115   3116   3117   3118   3119   3120   3121   3122   3123   3124   3125   3126   3127   3128   3129   3130   3131   3132   3133   3134   3135   3136   3137   3138   3139   3140   3141   3142   3143   3144   3145   3146   3147   3148   3149   3150   3151   class   pure _ fallmount   (   pure _ fall   ) :   \" \" \" \u7ee7\u627f \u81ea\u7236 \u7c7b \uff0c \u4e13\u4e3a \u505a \u56e0\u5b50 \u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u76f8\u52a0 \u548c \u56e0\u5b50 \u5254\u9664 \u5176\u4ed6 \u8f85\u52a9 \u56e0\u5b50 \u8f85\u52a9\u56e0\u5b50 \u7684 \u4f5c\u7528 \" \" \"   def   __ init __   (   self   ,   monthly _ factors   ) :   \" \" \" \u8f93\u5165 \u6708\u5ea6 \u56e0\u5b50 \u503c \uff0c \u4ee5 \u8bbe\u5b9a \u65b0 \u7684 \u5bf9\u8c61 \" \" \"   super   (   pure _ fall   ,   self   )   .   __ init __   ( )   self   .   monthly _ factors   =   monthly _ factors   def   __ call __   (   self   ,   monthly   =   False   ) :   \" \" \" \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868 \" \" \"   if   monthly   :   return   self   .   monthly _ factors   .   copy   ( )   else   :   try   :   return   self   .   daily _ factors   .   copy   ( )   except   Exception   :   return   self   .   monthly _ factors   .   copy   ( )   def   __ add __   (   self   ,   selfas   ) :   \" \" \" \u8fd4\u56de \u4e00\u4e2a \u5bf9\u8c61 \uff0c \u800c \u975e \u4e00\u4e2a \u8868\u683c \uff0c \u5982\u9700 \u8868\u683c \u8bf7 \u8c03\u7528 \u5bf9\u8c61 \" \" \"   fac1   =   self   .   standardlize _ in _ cross _ section   (   self   .   monthly _ factors   )   fac2s   =   [ ]   if   not   isinstance   (   selfas   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfas   }   is   changed   into   Iterable \"   )   selfas   =   (   selfas   , )   for   selfa   in   selfas   :   fac2   =   self   .   standardlize _ in _ cross _ section   (   selfa   .   monthly _ factors   )   fac2s   .   append   (   fac2   )   for   i   in   fac2s   :   fac1   =   fac1   +   i   new _ pure   =   pure _ fallmount   (   fac1   )   return   new _ pure   def   __ mul __   (   self   ,   selfas   ) :   \" \" \" \u5c06 \u51e0\u4e2a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \uff0c \u4f7f \u5176 \u90fd \u4e3a \u6b63\u6570 \uff0c \u7136\u540e \u56e0\u5b50 \u503c \u76f8\u4e58 \" \" \"   fac1   =   self   .   standardlize _ in _ cross _ section   (   self   .   monthly _ factors   )   fac1   =   fac1   -   fac1   .   min   ( )   fac2s   =   [ ]   if   not   isinstance   (   selfas   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfas   }   is   changed   into   Iterable \"   )   selfas   =   (   selfas   , )   for   selfa   in   selfas   :   fac2   =   self   .   standardlize _ in _ cross _ section   (   selfa   .   monthly _ factors   )   fac2   =   fac2   -   fac2   .   min   ( )   fac2s   .   append   (   fac2   )   for   i   in   fac2s   :   fac1   =   fac1   *   i   new _ pure   =   pure _ fall   ( )   new _ pure   .   monthly _ factors   =   fac1   return   new _ pure   def   __ sub __   (   self   ,   selfa   ) :   \" \" \" \u8fd4\u56de \u5bf9\u8c61 \uff0c \u5982\u9700 \u8868\u683c \uff0c \u8bf7 \u8c03\u7528 \u5bf9\u8c61 \" \" \"   tqdm   .   auto   .   tqdm   .   pandas   ( )   if   not   isinstance   (   selfa   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfa   }   is   changed   into   Iterable \"   )   selfa   =   (   selfa   , )   fac _ main   =   self   .   wide _ to _ long   (   self   .   monthly _ factors   ,   \" fac \"   )   fac _ helps   =   [   i   .   monthly _ factors   for   i   in   selfa   ]   help _ names   =   [   \" help \"   +   str   (   i   )   for   i   in   range   (   1   ,   (   len   (   fac _ helps   )   +   1   ) ) ]   fac _ helps   =   list   (   map   (   self   .   wide _ to _ long   ,   fac _ helps   ,   help _ names   ) )   fac _ helps   =   pd   .   concat   (   fac _ helps   ,   axis   =   1   )   facs   =   pd   .   concat   ( [   fac _ main   ,   fac _ helps   ] ,   axis   =   1   )   .   dropna   ( )   facs   =   facs   .   groupby   (   \" date \"   )   .   progress _ apply   (   lambda   x   :   self   .   de _ in _ group   (   x   ,   help _ names   )   )   facs   =   facs   .   unstack   ( )   facs   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   facs   .   columns   ) ) )   new _ pure   =   pure _ fallmount   (   facs   )   return   new _ pure   def   __ gt __   (   self   ,   selfa   ) :   \" \" \" \u7528\u4e8e \u8f93\u51fa 25 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50 \" \" \"   x   =   self   .   monthly _ factors   .   copy   ( )   y   =   selfa   .   monthly _ factors   .   copy   ( )   x   =   x   .   stack   ( )   .   reset _ index   ( )   y   =   y   .   stack   ( )   .   reset _ index   ( )   x   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   shen   =   pure _ moon   ( )   x   =   x   .   groupby   (   \" date \"   )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   5   ) )   x   =   (   x   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupx \"   } )   )   xy   =   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] )   xy   =   xy   .   groupby   ( [   \" date \"   ,   \" groupx \"   ] )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   5   ) )   xy   =   (   xy   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupy \"   } )   )   xy   =   xy   .   assign   (   fac   =   xy   .   groupx   *   5   +   xy   .   groupy   )   xy   =   xy   [ [   \" date \"   ,   \" code \"   ,   \" fac \"   ] ]   xy   =   xy   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   xy   .   columns   =   [   i   [   1   ]   for   i   in   list   (   xy   .   columns   ) ]   new _ pure   =   pure _ fallmount   (   xy   )   return   new _ pure   def   __ rshift __   (   self   ,   selfa   ) :   \" \" \" \u7528\u4e8e \u8f93\u51fa 100 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50 \" \" \"   x   =   self   .   monthly _ factors   .   copy   ( )   y   =   selfa   .   monthly _ factors   .   copy   ( )   x   =   x   .   stack   ( )   .   reset _ index   ( )   y   =   y   .   stack   ( )   .   reset _ index   ( )   x   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   shen   =   pure _ moon   ( )   x   =   x   .   groupby   (   \" date \"   )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   10   ) )   x   =   (   x   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupx \"   } )   )   xy   =   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] )   xy   =   xy   .   groupby   ( [   \" date \"   ,   \" groupx \"   ] )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   10   ) )   xy   =   (   xy   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupy \"   } )   )   xy   =   xy   .   assign   (   fac   =   xy   .   groupx   *   10   +   xy   .   groupy   )   xy   =   xy   [ [   \" date \"   ,   \" code \"   ,   \" fac \"   ] ]   xy   =   xy   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   xy   .   columns   =   [   i   [   1   ]   for   i   in   list   (   xy   .   columns   ) ]   new _ pure   =   pure _ fallmount   (   xy   )   return   new _ pure","title":"pure _ fallmount"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fallmount.__add__","text":"\u8fd4\u56de \u4e00\u4e2a \u5bf9\u8c61 \uff0c \u800c \u975e \u4e00\u4e2a \u8868\u683c \uff0c \u5982\u9700 \u8868\u683c \u8bf7 \u8c03\u7528 \u5bf9\u8c61   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3035   3036   3037   3038   3039   3040   3041   3042   3043   3044   3045   3046   3047   3048   3049   def   __ add __   (   self   ,   selfas   ) :   \" \" \" \u8fd4\u56de \u4e00\u4e2a \u5bf9\u8c61 \uff0c \u800c \u975e \u4e00\u4e2a \u8868\u683c \uff0c \u5982\u9700 \u8868\u683c \u8bf7 \u8c03\u7528 \u5bf9\u8c61 \" \" \"   fac1   =   self   .   standardlize _ in _ cross _ section   (   self   .   monthly _ factors   )   fac2s   =   [ ]   if   not   isinstance   (   selfas   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfas   }   is   changed   into   Iterable \"   )   selfas   =   (   selfas   , )   for   selfa   in   selfas   :   fac2   =   self   .   standardlize _ in _ cross _ section   (   selfa   .   monthly _ factors   )   fac2s   .   append   (   fac2   )   for   i   in   fac2s   :   fac1   =   fac1   +   i   new _ pure   =   pure _ fallmount   (   fac1   )   return   new _ pure","title":"__ add __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fallmount.__call__","text":"\u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3025   3026   3027   3028   3029   3030   3031   3032   3033   def   __ call __   (   self   ,   monthly   =   False   ) :   \" \" \" \u4e3a\u4e86 \u9632\u6b62 \u5c5e\u6027 \u592a\u591a \u540d\u592a\u591a \uff0c \u5fd8\u8bb0 \u4e86 \u8981 \u8c03\u7528 \u54ea\u4e2a \u624d \u662f \u7ed3\u679c \uff0c \u56e0\u6b64 \u53ef\u4ee5 \u76f4\u63a5 \u8f93\u51fa \u6708\u5ea6 \u6570\u636e \u6570\u636e\u8868 \" \" \"   if   monthly   :   return   self   .   monthly _ factors   .   copy   ( )   else   :   try   :   return   self   .   daily _ factors   .   copy   ( )   except   Exception   :   return   self   .   monthly _ factors   .   copy   ( )","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fallmount.__gt__","text":"\u7528\u4e8e \u8f93\u51fa 25 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3091   3092   3093   3094   3095   3096   3097   3098   3099   3100   3101   3102   3103   3104   3105   3106   3107   3108   3109   3110   3111   3112   3113   3114   3115   3116   3117   3118   3119   3120   def   __ gt __   (   self   ,   selfa   ) :   \" \" \" \u7528\u4e8e \u8f93\u51fa 25 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50 \" \" \"   x   =   self   .   monthly _ factors   .   copy   ( )   y   =   selfa   .   monthly _ factors   .   copy   ( )   x   =   x   .   stack   ( )   .   reset _ index   ( )   y   =   y   .   stack   ( )   .   reset _ index   ( )   x   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   shen   =   pure _ moon   ( )   x   =   x   .   groupby   (   \" date \"   )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   5   ) )   x   =   (   x   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupx \"   } )   )   xy   =   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] )   xy   =   xy   .   groupby   ( [   \" date \"   ,   \" groupx \"   ] )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   5   ) )   xy   =   (   xy   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupy \"   } )   )   xy   =   xy   .   assign   (   fac   =   xy   .   groupx   *   5   +   xy   .   groupy   )   xy   =   xy   [ [   \" date \"   ,   \" code \"   ,   \" fac \"   ] ]   xy   =   xy   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   xy   .   columns   =   [   i   [   1   ]   for   i   in   list   (   xy   .   columns   ) ]   new _ pure   =   pure _ fallmount   (   xy   )   return   new _ pure","title":"__ gt __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fallmount.__init__","text":"\u8f93\u5165 \u6708\u5ea6 \u56e0\u5b50 \u503c \uff0c \u4ee5 \u8bbe\u5b9a \u65b0 \u7684 \u5bf9\u8c61   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3020   3021   3022   3023   def   __ init __   (   self   ,   monthly _ factors   ) :   \" \" \" \u8f93\u5165 \u6708\u5ea6 \u56e0\u5b50 \u503c \uff0c \u4ee5 \u8bbe\u5b9a \u65b0 \u7684 \u5bf9\u8c61 \" \" \"   super   (   pure _ fall   ,   self   )   .   __ init __   ( )   self   .   monthly _ factors   =   monthly _ factors","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fallmount.__mul__","text":"\u5c06 \u51e0\u4e2a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \uff0c \u4f7f \u5176 \u90fd \u4e3a \u6b63\u6570 \uff0c \u7136\u540e \u56e0\u5b50 \u503c \u76f8\u4e58   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3051   3052   3053   3054   3055   3056   3057   3058   3059   3060   3061   3062   3063   3064   3065   3066   3067   3068   def   __ mul __   (   self   ,   selfas   ) :   \" \" \" \u5c06 \u51e0\u4e2a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \uff0c \u4f7f \u5176 \u90fd \u4e3a \u6b63\u6570 \uff0c \u7136\u540e \u56e0\u5b50 \u503c \u76f8\u4e58 \" \" \"   fac1   =   self   .   standardlize _ in _ cross _ section   (   self   .   monthly _ factors   )   fac1   =   fac1   -   fac1   .   min   ( )   fac2s   =   [ ]   if   not   isinstance   (   selfas   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfas   }   is   changed   into   Iterable \"   )   selfas   =   (   selfas   , )   for   selfa   in   selfas   :   fac2   =   self   .   standardlize _ in _ cross _ section   (   selfa   .   monthly _ factors   )   fac2   =   fac2   -   fac2   .   min   ( )   fac2s   .   append   (   fac2   )   for   i   in   fac2s   :   fac1   =   fac1   *   i   new _ pure   =   pure _ fall   ( )   new _ pure   .   monthly _ factors   =   fac1   return   new _ pure","title":"__ mul __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fallmount.__rshift__","text":"\u7528\u4e8e \u8f93\u51fa 100 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3122   3123   3124   3125   3126   3127   3128   3129   3130   3131   3132   3133   3134   3135   3136   3137   3138   3139   3140   3141   3142   3143   3144   3145   3146   3147   3148   3149   3150   3151   def   __ rshift __   (   self   ,   selfa   ) :   \" \" \" \u7528\u4e8e \u8f93\u51fa 100 \u5206\u7ec4 \u8868\u683c \uff0c \u4f7f\u7528 \u65f6 \uff0c \u4ee5 x > > y \u7684 \u5f62\u5f0f \u4f7f\u7528 \uff0c \u5176\u4e2d x , y \u5747 \u4e3a pure _ fall \u5bf9\u8c61   \u8ba1\u7b97 \u65f6 \u4f7f\u7528 \u7684 \u662f \u4ed6\u4eec \u7684 \u6708\u5ea6 \u56e0\u5b50 \u8868 \uff0c \u5373 self . monthly _ factors \u5c5e\u6027 \uff0c \u4e3a \u5bbd \u6570\u636e \u5f62\u5f0f \u7684 dataframe   x \u5e94\u4e3a \u9996\u5148 \u7528\u6765 \u7684 \u5206\u7ec4 \u7684 \u4e3b \u56e0\u5b50 \uff0c y \u4e3a \u5728 x \u5206\u7ec4 \u540e \u7684 \u7ec4\u5185 \u7ee7\u7eed \u5206\u7ec4 \u7684 \u6b21 \u56e0\u5b50 \" \" \"   x   =   self   .   monthly _ factors   .   copy   ( )   y   =   selfa   .   monthly _ factors   .   copy   ( )   x   =   x   .   stack   ( )   .   reset _ index   ( )   y   =   y   .   stack   ( )   .   reset _ index   ( )   x   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   shen   =   pure _ moon   ( )   x   =   x   .   groupby   (   \" date \"   )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   10   ) )   x   =   (   x   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupx \"   } )   )   xy   =   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] )   xy   =   xy   .   groupby   ( [   \" date \"   ,   \" groupx \"   ] )   .   apply   (   lambda   df   :   shen   .   get _ groups   (   df   ,   10   ) )   xy   =   (   xy   .   reset _ index   (   drop   =   True   )   .   drop   (   columns   =   [   \" fac \"   ] )   .   rename   (   columns   =   {   \" group \"   :   \" groupy \"   } )   )   xy   =   xy   .   assign   (   fac   =   xy   .   groupx   *   10   +   xy   .   groupy   )   xy   =   xy   [ [   \" date \"   ,   \" code \"   ,   \" fac \"   ] ]   xy   =   xy   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   xy   .   columns   =   [   i   [   1   ]   for   i   in   list   (   xy   .   columns   ) ]   new _ pure   =   pure _ fallmount   (   xy   )   return   new _ pure","title":"__ rshift __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fallmount.__sub__","text":"\u8fd4\u56de \u5bf9\u8c61 \uff0c \u5982\u9700 \u8868\u683c \uff0c \u8bf7 \u8c03\u7528 \u5bf9\u8c61   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3070   3071   3072   3073   3074   3075   3076   3077   3078   3079   3080   3081   3082   3083   3084   3085   3086   3087   3088   3089   def   __ sub __   (   self   ,   selfa   ) :   \" \" \" \u8fd4\u56de \u5bf9\u8c61 \uff0c \u5982\u9700 \u8868\u683c \uff0c \u8bf7 \u8c03\u7528 \u5bf9\u8c61 \" \" \"   tqdm   .   auto   .   tqdm   .   pandas   ( )   if   not   isinstance   (   selfa   ,   Iterable   ) :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   warning   (   f   \"   {   selfa   }   is   changed   into   Iterable \"   )   selfa   =   (   selfa   , )   fac _ main   =   self   .   wide _ to _ long   (   self   .   monthly _ factors   ,   \" fac \"   )   fac _ helps   =   [   i   .   monthly _ factors   for   i   in   selfa   ]   help _ names   =   [   \" help \"   +   str   (   i   )   for   i   in   range   (   1   ,   (   len   (   fac _ helps   )   +   1   ) ) ]   fac _ helps   =   list   (   map   (   self   .   wide _ to _ long   ,   fac _ helps   ,   help _ names   ) )   fac _ helps   =   pd   .   concat   (   fac _ helps   ,   axis   =   1   )   facs   =   pd   .   concat   ( [   fac _ main   ,   fac _ helps   ] ,   axis   =   1   )   .   dropna   ( )   facs   =   facs   .   groupby   (   \" date \"   )   .   progress _ apply   (   lambda   x   :   self   .   de _ in _ group   (   x   ,   help _ names   )   )   facs   =   facs   .   unstack   ( )   facs   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   facs   .   columns   ) ) )   new _ pure   =   pure _ fallmount   (   facs   )   return   new _ pure","title":"__ sub __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fama","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4667   4668   4669   4670   4671   4672   4673   4674   4675   4676   4677   4678   4679   4680   4681   4682   4683   4684   4685   4686   4687   4688   4689   4690   4691   4692   4693   4694   4695   4696   4697   4698   4699   4700   4701   4702   4703   4704   4705   4706   4707   4708   4709   4710   4711   4712   4713   4714   4715   4716   4717   4718   4719   4720   4721   4722   4723   4724   4725   4726   4727   4728   4729   4730   4731   4732   4733   4734   4735   4736   4737   4738   4739   4740   4741   4742   4743   4744   4745   4746   4747   4748   4749   4750   4751   4752   4753   4754   4755   4756   4757   4758   4759   4760   4761   4762   4763   4764   4765   4766   4767   4768   4769   4770   4771   4772   4773   4774   4775   4776   4777   4778   4779   4780   4781   4782   4783   4784   4785   4786   4787   4788   4789   4790   4791   4792   4793   4794   4795   4796   4797   4798   4799   4800   4801   4802   4803   4804   4805   4806   4807   4808   4809   4810   4811   4812   4813   4814   4815   4816   4817   4818   4819   4820   4821   4822   4823   4824   4825   4826   4827   4828   4829   4830   4831   4832   4833   4834   4835   4836   4837   4838   4839   4840   4841   4842   4843   4844   4845   4846   4847   4848   4849   4850   4851   4852   4853   4854   4855   4856   4857   4858   4859   4860   4861   4862   4863   4864   4865   4866   4867   4868   4869   4870   4871   4872   4873   4874   4875   4876   4877   4878   4879   4880   4881   4882   4883   4884   4885   4886   4887   4888   4889   4890   class   pure _ fama   (   object   ) :   #   @ lru _ cache ( maxsize = None )   def   __ init __   (   self   ,   factors   :   List   [   pd   .   DataFrame   ] ,   minus _ group   :   Union   [   list   ,   float   ]   =   3   ,   backsee   :   int   =   20   ,   rets   :   pd   .   DataFrame   =   None   ,   value _ weighted   :   bool   =   1   ,   add _ market   :   bool   =   1   ,   add _ market _ series   :   pd   .   Series   =   None   ,   factors _ names   :   list   =   None   ,   betas _ rets   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 fama \u4e09 \u56e0\u5b50 \u7684 \u65b9\u6cd5 \uff0c \u5c06 \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u62c6\u5206 \u51fa \u5404\u4e2a \u56e0\u5b50 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u4ee5\u53ca \u7279\u8d28 \u7684 \u6536\u76ca \u6536\u76ca\u7387   \u5206\u522b \u8ba1\u7b97 \u6bcf \u4e00\u671f \uff0c \u5404\u4e2a \u56e0\u5b50 \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u503c \uff0c \u8d85\u989d \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u56e0\u5b50 \u7684 \u66b4\u9732 \uff0c \u4ee5\u53ca \u7279\u8d28 \u6536\u76ca \u6536\u76ca\u7387   Parameters   ----------   factors   :   List [ pd . DataFrame ]   \u7528\u4e8e \u89e3\u91ca \u6536\u76ca \u7684 \u5404\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf \u4e00\u4e2a \u90fd \u662f index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c \u7684 dataframe   minus _ group   :   Union [ list ,   float ] ,   optional   \u6bcf \u4e00\u4e2a \u56e0\u5b50 \u5c06 \u622a\u9762 \u4e0a \u7684 \u80a1\u7968 \u5206\u4e3a \u51e0\u7ec4 ,   by   default   3   backsee   :   int ,   optional   \u505a \u65f6\u5e8f \u56de\u5f52 \u65f6 \uff0c \u56de\u770b \u7684 \u5929\u6570 ,   by   default   20   rets   :   pd . DataFrame ,   optional   \u6bcf \u53ea \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u5f53\u65e5 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   None   value _ weighted   :   bool ,   optional   \u662f\u5426 \u4f7f\u7528 \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   1   add _ market   :   bool ,   optional   \u662f\u5426 \u52a0\u5165 \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u56e0\u5b50 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307 \u7684 \u6bcf\u65e5 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   1   add _ market _ series   :   bool ,   optional   \u52a0\u5165 \u7684 \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u6570\u636e \uff0c \u5982\u679c \u6ca1 \u6307\u5b9a \uff0c \u5219 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307 \u7684 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   None   factors _ names   :   list ,   optional   \u5404\u4e2a \u56e0\u5b50 \u7684 \u540d\u5b57 \uff0c \u9ed8\u8ba4 \u4e3a fac0 ( \u5e02\u573a \u6536\u76ca \u6536\u76ca\u7387 \u56e0\u5b50 \uff0c \u5982\u679c \u6ca1\u6709 \uff0c \u5219 \u4ece fac1 \u5f00\u59cb ) , fac1 , fac2 , fac3 ,   by   default   None   betas _ rets   :   bool ,   optional   \u662f\u5426 \u8ba1\u7b97 \u6bcf \u53ea \u4e2a\u80a1 \u7684 \u7531\u4e8e \u66b4\u9732 \u5728 \u6bcf\u4e2a \u56e0\u5b50 \u4e0a \u6240 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   \" \" \"   start   =   max   (   [   int   (   datetime   .   datetime   .   strftime   (   i   .   index   .   min   ( ) ,   \" % Y% m   % d   \"   ) )   for   i   in   factors   ]   )   self   .   backsee   =   backsee   self   .   factors   =   factors   self   .   factors _ names   =   factors _ names   if   isinstance   (   minus _ group   ,   int   ) :   minus _ group   =   [   minus _ group   ]   *   len   (   factors   )   self   .   minus _ group   =   minus _ group   if   rets   is   None   :   closes   =   read _ daily   (   close   =   1   ,   start   =   start   )   rets   =   closes   /   closes   .   shift   (   1   )   -   1   self   .   rets   =   rets   self   .   factors _ group   =   [   to _ group   (   i   ,   group   =   j   )   for   i   ,   j   in   zip   (   self   .   factors   ,   self   .   minus _ group   )   ]   self   .   factors _ group _ long   =   [ (   i   = =   0   )   +   0   for   i   in   self   .   factors _ group   ]   self   .   factors _ group _ short   =   [   (   i   = =   (   j   -   1   ) )   +   0   for   i   ,   j   in   zip   (   self   .   factors _ group   ,   self   .   minus _ group   )   ]   self   .   value _ weighted   =   value _ weighted   if   value _ weighted   :   if   total _ cap   :   self   .   cap   =   read _ daily   (   total _ cap   =   1   ,   start   =   start   )   self   .   cap   =   read _ daily   (   flow _ cap   =   1   ,   start   =   start   )   self   .   factors _ group _ long   =   [   self   .   cap   *   i   for   i   in   self   .   factors _ group _ long   ]   self   .   factors _ group _ short   =   [   self   .   cap   *   i   for   i   in   self   .   factors _ group _ short   ]   self   .   factors _ group _ long   =   [   (   i   .   T   /   i   .   T   .   sum   ( ) )   .   T   for   i   in   self   .   factors _ group _ long   ]   self   .   factors _ group _ short   =   [   (   i   .   T   /   i   .   T   .   sum   ( ) )   .   T   for   i   in   self   .   factors _ group _ short   ]   self   .   factors _ rets _ long   =   [   (   self   .   rets   *   i   )   .   sum   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ long   )   ]   self   .   factors _ rets _ short   =   [   (   self   .   rets   *   i   )   .   sum   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ short   )   ]   else   :   self   .   factors _ rets _ long   =   [   (   self   .   rets   *   i   )   .   mean   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ long   )   ]   self   .   factors _ rets _ short   =   [   (   self   .   rets   *   i   )   .   mean   (   axis   =   1   )   .   to _ frame   (   f   \" fac   {   num   +   1   }   \"   )   for   num   ,   i   in   enumerate   (   self   .   factors _ group _ short   )   ]   self   .   rets _ long   =   pd   .   concat   (   self   .   factors _ rets _ long   ,   axis   =   1   )   self   .   rets _ short   =   pd   .   concat   (   self   .   factors _ rets _ short   ,   axis   =   1   )   self   .   __ factors _ rets   =   self   .   rets _ long   -   self   .   rets _ short   if   add _ market _ series   is   not   None   :   add _ market   =   1   self   .   add _ market   =   add _ market   if   add _ market   :   if   add _ market _ series   is   None   :   closes   =   read _ market   (   close   =   1   ,   every _ stock   =   0   ,   start   =   start   )   .   to _ frame   (   \" fac0 \"   )   else   :   closes   =   add _ market _ series   .   to _ frame   (   \" fac0 \"   )   rets   =   closes   /   closes   .   shift   (   1   )   -   1   self   .   __ factors _ rets   =   pd   .   concat   ( [   rets   ,   self   .   __ factors _ rets   ] ,   axis   =   1   )   if   factors _ names   is   not   None   :   factors _ names   =   [   \" \u5e02\u573a \"   ]   +   factors _ names   self   .   __ data   =   self   .   make _ df   (   self   .   rets   ,   self   .   __ factors _ rets   )   tqdm   .   auto   .   tqdm   .   pandas   ( )   self   .   __ coefficients   =   (   self   .   __ data   .   groupby   (   \" code \"   )   .   progress _ apply   (   self   .   ols _ in   )   .   reset _ index   ( )   )   self   .   __ coefficients   =   self   .   __ coefficients   .   rename   (   columns   =   {   i   :   \" co \"   +   i   for   i   in   list   (   self   .   __ coefficients   .   columns   )   if   \" fac \"   in   i   }   )   self   .   __ data   =   pd   .   merge   (   self   .   __ data   .   reset _ index   ( ) ,   self   .   __ coefficients   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   betas   =   [   self   .   __ data   [   i   ]   *   self   .   __ data   [   \" co \"   +   i   ]   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   )   ]   betas   =   sum   (   betas   )   self   .   __ data   =   self   .   __ data   .   assign   (   idiosyncratic   =   self   .   __ data   .   ret   -   self   .   __ data   .   intercept   -   betas   )   self   .   __ idiosyncratic   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" idiosyncratic \"   )   self   .   __ alphas   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" intercept \"   )   if   factors _ names   is   None   :   self   .   __ betas   =   {   i   :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   )   }   else   :   facs   =   [   i   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" fac \"   ) ]   self   .   __ betas   =   {   factors _ names   [   num   ] :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   num   ,   i   in   enumerate   (   facs   )   }   if   betas _ rets   :   if   add _ market   :   if   add _ market _ series   is   None   :   factors   =   [   read _ market   (   close   =   1   ,   start   =   start   ) ]   +   factors   else   :   factors   =   [   pd   .   DataFrame   (   {   k   :   add _ market _ series   for   k   in   list   (   factors   [   0   ]   .   columns   ) } ,   index   =   factors   [   0   ]   .   index   ,   )   ]   +   factors   self   .   __ betas _ rets   =   {   d1   [   0   ] :   d1   [   1   ]   *   d2   for   d1   ,   d2   in   zip   (   self   .   __ betas   ,   factors   )   }   else   :   self   .   __ betas _ rets   =   \" \u60a8 \u5982\u679c \u60f3 \u8ba1\u7b97 \u5404\u4e2a \u80a1\u7968 \u5728 \u5404\u4e2a \u56e0\u5b50 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u8bf7 \u5148 \u6307\u5b9a betas _ rets \u53c2\u6570 \u4e3a True \"   @ property   def   idiosyncratic   (   self   ) :   return   self   .   __ idiosyncratic   @ property   def   data   (   self   ) :   return   self   .   __ data   @ property   def   alphas   (   self   ) :   return   self   .   __ alphas   @ property   def   betas   (   self   ) :   return   self   .   __ betas   @ property   def   betas _ rets   (   self   ) :   return   self   .   __ betas _ rets   @ property   def   factors _ rets   (   self   ) :   return   self   .   __ factors _ rets   @ property   def   coefficients   (   self   ) :   return   self   .   __ coefficients   def   __ call __   (   self   ) :   return   self   .   idiosyncratic   def   make _ df   (   self   ,   rets   ,   facs   ) :   rets   =   rets   .   stack   ( )   .   reset _ index   ( )   rets   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" ret \"   ]   facs   =   facs   .   reset _ index   ( )   facs   .   columns   =   [   \" date \"   ]   +   list   (   facs   .   columns   ) [   1   : ]   df   =   pd   .   merge   (   rets   ,   facs   ,   on   =   [   \" date \"   ] )   df   =   df   .   set _ index   (   \" date \"   )   return   df   def   ols _ in   (   self   ,   df   ) :   try   :   if   self   .   add _ market   :   x   =   df   [ [   \" fac0 \"   ]   +   [   f   \" fac   {   i   +   1   }   \"   for   i   in   range   (   len   (   self   .   factors   ) ) ] ]   else   :   x   =   df   [ [   f   \" fac   {   i   +   1   }   \"   for   i   in   range   (   len   (   self   .   factors   ) ) ] ]   ols   =   po   .   PandasRollingOLS   (   y   =   df   [ [   \" ret \"   ] ] ,   x   =   x   ,   window   =   self   .   backsee   ,   )   betas   =   ols   .   beta   alpha   =   ols   .   alpha   return   pd   .   concat   ( [   alpha   ,   betas   ] ,   axis   =   1   )   except   Exception   :   #   \u6709\u4e9b \u6570\u636e \u603b\u5171 \u4e0d\u8db3 \uff0c \u90a3 \u5c31 \u8df3 \u8fc7   ...","title":"pure _ fama"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_fama.__init__","text":"\u4f7f\u7528 fama \u4e09 \u56e0\u5b50 \u7684 \u65b9\u6cd5 \uff0c \u5c06 \u4e2a\u80a1 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u62c6\u5206 \u51fa \u5404\u4e2a \u56e0\u5b50 \u5e26\u6765 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \u4ee5\u53ca \u7279\u8d28 \u7684 \u6536\u76ca \u6536\u76ca\u7387   \u5206\u522b \u8ba1\u7b97 \u6bcf \u4e00\u671f \uff0c \u5404\u4e2a \u56e0\u5b50 \u6536\u76ca \u6536\u76ca\u7387 \u7684 \u503c \uff0c \u8d85\u989d \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u56e0\u5b50 \u7684 \u66b4\u9732 \uff0c \u4ee5\u53ca \u7279\u8d28 \u6536\u76ca \u6536\u76ca\u7387","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_helper","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4607   4608   4609   4610   4611   4612   4613   4614   4615   4616   4617   4618   4619   4620   4621   4622   4623   4624   4625   4626   4627   4628   4629   4630   4631   4632   4633   4634   4635   4636   4637   4638   4639   4640   4641   4642   4643   4644   4645   4646   4647   4648   4649   4650   4651   4652   4653   4654   4655   4656   4657   4658   4659   4660   4661   4662   4663   4664   class   pure _ helper   (   object   ) :   def   __ init __   (   self   ,   df _ main   :   pd   .   DataFrame   ,   df _ helper   :   pd   .   DataFrame   ,   func   :   Callable   =   None   ,   group   :   int   =   10   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 \u56e0\u5b50 b \u7684 \u503c \u5927\u5c0f \uff0c \u5bf9 \u56e0\u5b50 a \u8fdb\u884c \u5206\u7ec4 \uff0c \u5e76 \u53ef\u4ee5 \u5728 \u7ec4\u5185 \u8fdb\u884c \u67d0\u79cd \u64cd\u4f5c   Parameters   ----------   df _ main   :   pd . DataFrame   \u8981 \u88ab \u5206\u7ec4 \u5e76 \u8fdb\u884c \u64cd\u4f5c \u7684 \u56e0\u5b50   df _ helper   :   pd . DataFrame   \u7528\u6765 \u505a \u5206\u7ec4 \u7684 \u4f9d\u636e   func   :   Callable ,   optional   \u5206\u7ec4 \u540e \uff0c \u7ec4\u5185 \u8981 \u8fdb\u884c \u7684 \u64cd\u4f5c ,   by   default   None   group   :   int ,   optional   \u8981\u5206 \u7684 \u7ec4\u6570 ,   by   default   10   \" \" \"   self   .   df _ main   =   df _ main   self   .   df _ helper   =   df _ helper   self   .   func   =   func   self   .   group   =   group   if   self   .   func   is   None   :   self   .   __ data   =   self   .   sort _ a _ with _ b   ( )   else   :   self   .   __ data   =   self   .   sort _ a _ with _ b _ func   ( )   @ property   def   data   (   self   ) :   return   self   .   __ data   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   return   self   .   data   def   sort _ a _ with _ b   (   self   ) :   dfb   =   to _ group   (   self   .   df _ helper   ,   group   =   self   .   group   )   dfb   =   dfb   .   stack   ( )   .   reset _ index   ( )   dfb   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" group \"   ]   dfa   =   self   .   df _ main   .   stack   ( )   .   reset _ index   ( )   dfa   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" target \"   ]   df   =   pd   .   merge   (   dfa   ,   dfb   ,   on   =   [   \" date \"   ,   \" code \"   ] )   return   df   def   sort _ a _ with _ b _ func   (   self   ) :   the _ func   =   partial   (   self   .   func   )   df   =   self   .   sort _ a _ with _ b   ( )   .   drop   (   columns   =   [   \" code \"   ] )   df   =   (   df   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   the _ func   )   .   drop   (   columns   =   [   \" group \"   ] )   .   reset _ index   ( )   )   df   =   df   .   pivot   (   index   =   \" date \"   ,   columns   =   \" group \"   ,   values   =   \" target \"   )   df   .   columns   =   [   f   \" group   {   str   (   int   (   i   +   1   ) )   }   \"   for   i   in   list   (   df   .   columns   ) ]   return   df","title":"pure _ helper"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_helper.__init__","text":"\u4f7f\u7528 \u56e0\u5b50 b \u7684 \u503c \u5927\u5c0f \uff0c \u5bf9 \u56e0\u5b50 a \u8fdb\u884c \u5206\u7ec4 \uff0c \u5e76 \u53ef\u4ee5 \u5728 \u7ec4\u5185 \u8fdb\u884c \u67d0\u79cd \u64cd\u4f5c","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_linprog","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5557   5558   5559   5560   5561   5562   5563   5564   5565   5566   5567   5568   5569   5570   5571   5572   5573   5574   5575   5576   5577   5578   5579   5580   5581   5582   5583   5584   5585   5586   5587   5588   5589   5590   5591   5592   5593   5594   5595   5596   5597   5598   5599   5600   5601   5602   5603   5604   5605   5606   5607   5608   5609   5610   5611   5612   5613   5614   5615   5616   5617   5618   5619   5620   5621   5622   5623   5624   5625   5626   5627   5628   5629   5630   5631   5632   5633   5634   5635   5636   5637   5638   5639   5640   5641   5642   5643   5644   5645   5646   5647   5648   5649   5650   5651   5652   5653   5654   5655   5656   5657   5658   5659   5660   5661   5662   5663   5664   5665   5666   5667   5668   5669   5670   5671   5672   5673   5674   5675   5676   5677   5678   5679   5680   5681   5682   5683   5684   5685   5686   5687   5688   5689   5690   5691   5692   5693   5694   5695   5696   5697   5698   5699   5700   5701   5702   5703   5704   5705   5706   5707   5708   5709   5710   5711   5712   5713   5714   5715   5716   5717   5718   5719   5720   5721   5722   5723   5724   5725   5726   5727   5728   5729   5730   5731   5732   5733   5734   5735   5736   5737   5738   5739   5740   5741   5742   5743   5744   5745   5746   5747   5748   5749   5750   5751   5752   5753   5754   5755   5756   5757   5758   5759   5760   5761   5762   5763   5764   5765   5766   5767   5768   5769   5770   5771   5772   5773   5774   5775   5776   5777   5778   5779   5780   5781   5782   5783   5784   5785   5786   5787   5788   5789   5790   5791   5792   5793   5794   5795   5796   5797   5798   5799   5800   5801   5802   5803   5804   5805   5806   5807   5808   5809   5810   5811   5812   5813   5814   5815   5816   5817   5818   5819   class   pure _ linprog   (   object   ) :   def   __ init __   (   self   ,   facs   :   pd   .   DataFrame   ,   total _ caps   :   pd   .   DataFrame   =   None   ,   indu _ dummys   :   pd   .   DataFrame   =   None   ,   index _ weights _ hs300   :   pd   .   DataFrame   =   None   ,   index _ weights _ zz500   :   pd   .   DataFrame   =   None   ,   index _ weights _ zz1000   :   pd   .   DataFrame   =   None   ,   opens   :   pd   .   DataFrame   =   None   ,   closes   :   pd   .   DataFrame   =   None   ,   hs300 _ closes   :   pd   .   DataFrame   =   None   ,   zz500 _ closes   :   pd   .   DataFrame   =   None   ,   zz1000 _ closes   :   pd   .   DataFrame   =   None   ,   )   - >   None   :   \" \" \" \u7ebf\u6027 \u89c4\u5212 \u7ebf\u6027\u89c4\u5212 \u6c42\u89e3 \uff0c \u76ee\u6807 \u4e3a \u9884\u671f \u6536\u76ca \u6536\u76ca\u7387 \u6700\u5927 \uff08 \u5373 \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f\u65f6 \uff0c \u7ec4\u5408 \u56e0\u5b50 \u503c \u6700\u5c0f \uff09   \u6761\u4ef6 \u4e3a \uff0c \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u5e02\u503c \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u603b \u5e02\u503c \u7684 \u5bf9\u6570 \uff1b \u542b\u4e49 \uff1a \u7ec4\u5408 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u4e0e \u6307\u6570 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u76f8\u7b49 \uff09   \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u884c\u4e1a \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff09 \uff0c \u4e2a\u80a1 \u504f\u79bb \u5728 1% \u4ee5\u5185 \uff0c \u6210\u5206 \u80a1\u6743 \u91cd\u4e4b \u548c \u5728 80% \u4ee5\u4e0a   \u5206\u522b \u5728 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4e0a \u4f18\u5316 \u6c42\u89e3   Parameters   ----------   facs   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   total _ caps   :   pd . DataFrame ,   optional   \u603b \u5e02\u503c \u6570\u636e \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u603b \u5e02\u503c ,   by   default   None   indu _ dummys   :   pd . DataFrame ,   optional   \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u5305\u542b \u4e24\u5217 \u540d\u4e3a date \u7684 \u65f6\u95f4 \u548c code \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u4ee5\u53ca 30 + \u5217 \u884c\u4e1a \u54d1 \u53d8\u91cf ,   by   default   None   index _ weights _ hs300   :   pd . DataFrame ,   optional   \u6caa \u6df1 300 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   index _ weights _ zz500   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 500 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   index _ weights _ zz1000   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 1000 \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c \u6708\u9891 \u6570\u636e ,   by   default   None   opens   :   pd . DataFrame ,   optional   \u6bcf\u6708 \u6708\u521d \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e ,   by   default   None   closes   :   pd . DataFrame ,   optional   \u6bcf\u6708 \u6708\u672b \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e ,   by   default   None   hs300 _ closes   :   pd . DataFrame ,   optional   \u6caa \u6df1 300 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e ,   by   default   None   zz500 _ closes   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 500 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e , ,   by   default   None   zz1000 _ closes   :   pd . DataFrame ,   optional   \u4e2d\u8bc1 1000 \u6bcf\u6708 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e , ,   by   default   None   \" \" \"   self   .   facs   =   facs   .   resample   (   \" M \"   )   .   last   ( )   if   total _ caps   is   None   :   total _ caps   =   standardlize   (   np   .   log   (   read _ daily   (   total _ cap   =   1   )   .   resample   (   \" M \"   )   .   last   ( ) )   )   if   indu _ dummys   is   None   :   indu _ dummys   =   read _ daily   (   zxindustry _ dummy _ code   =   1   )   if   index _ weights _ hs300   is   None   :   index _ weights _ hs300   =   read _ daily   (   hs300 _ member _ weight   =   1   )   if   index _ weights _ zz500   is   None   :   index _ weights _ zz500   =   read _ daily   (   zz500 _ member _ weight   =   1   )   if   index _ weights _ zz1000   is   None   :   index _ weights _ zz1000   =   read _ daily   (   zz1000 _ member _ weight   =   1   )   if   opens   is   None   :   opens   =   read _ daily   (   open   =   1   )   .   resample   (   \" M \"   )   .   first   ( )   if   closes   is   None   :   closes   =   read _ daily   (   close   =   1   )   .   resample   (   \" M \"   )   .   last   ( )   if   hs300 _ closes   is   None   :   hs300 _ closes   =   read _ index _ single   (   \" 000300 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   if   zz500 _ closes   is   None   :   zz500 _ closes   =   read _ index _ single   (   \" 000905 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   if   zz1000 _ closes   is   None   :   zz1000 _ closes   =   read _ index _ single   (   \" 000852 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( )   self   .   total _ caps   =   total _ caps   self   .   indu _ dummys   =   indu _ dummys   self   .   index _ weights _ hs300   =   index _ weights _ hs300   self   .   index _ weights _ zz500   =   index _ weights _ zz500   self   .   index _ weights _ zz1000   =   index _ weights _ zz1000   self   .   hs300 _ weights   =   [ ]   self   .   zz500 _ weights   =   [ ]   self   .   zz1000 _ weights   =   [ ]   self   .   ret _ next   =   closes   /   opens   -   1   self   .   ret _ hs300   =   hs300 _ closes   .   pct _ change   ( )   self   .   ret _ zz500   =   zz500 _ closes   .   pct _ change   ( )   self   .   ret _ zz1000   =   zz1000 _ closes   .   pct _ change   ( )   def   optimize _ one _ day   (   self   ,   fac   :   pd   .   DataFrame   ,   flow _ cap   :   pd   .   DataFrame   ,   indu _ dummy   :   pd   .   DataFrame   ,   index _ weight   :   pd   .   DataFrame   ,   name   :   str   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4f18\u5316 \u5355\u671f \u6c42\u89e3   Parameters   ----------   fac   :   pd . DataFrame   \u5355\u671f \u56e0\u5b50 \u503c \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u56e0\u5b50 \u503c   flow _ cap   :   pd . DataFrame   \u6d41\u901a \u5e02\u503c \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u622a\u9762 \u6807\u51c6 \u6807\u51c6\u5316 \u7684 \u6d41\u901a \u5e02\u503c   indu _ dummy   :   pd . DataFrame   \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c index \u4e3a code \uff0c columns \u4e3a \u884c\u4e1a \u4ee3\u7801 \uff0c values \u4e3a \u54d1 \u53d8\u91cf   index _ weight   :   pd . DataFrame   \u6307\u6570 \u6210\u5206 \u80a1\u6743 \u91cd \uff0c index \u4e3a code \uff0c columns \u4e3a date \uff0c values \u4e3a \u6743\u91cd   Returns   -------   pd . DataFrame   \u5f53\u671f \u6700\u4f73 \u6743\u91cd   \" \" \"   if   fac   .   shape   [   0   ]   >   0   and   index _ weight   .   shape   [   1   ]   >   0   :   date   =   fac   .   columns   .   tolist   ( ) [   0   ]   codes   =   list   (   set   (   fac   .   index   )   |   set   (   flow _ cap   .   index   )   |   set   (   indu _ dummy   .   index   )   |   set   (   index _ weight   .   index   )   )   fac   ,   flow _ cap   ,   indu _ dummy   ,   index _ weight   =   list   (   map   (   lambda   x   :   x   .   reindex   (   codes   )   .   fillna   (   0   )   .   to _ numpy   ( ) ,   [   fac   ,   flow _ cap   ,   indu _ dummy   ,   index _ weight   ] ,   )   )   sign _ index _ weight   =   np   .   sign   (   index _ weight   )   #   \u4e2a \u80a1\u6743 \u91cd\u5927 \u4e8e \u96f6 \u3001 \u504f\u79bb 1%   bounds   =   list   (   zip   (   select _ max   (   index _ weight   -   0.01   ,   0   )   .   flatten   ( ) ,   select _ min   (   index _ weight   +   0.01   ,   1   )   .   flatten   ( ) ,   )   )   #   \u5e02\u503c \u4e2d\u6027 + \u884c\u4e1a \u4e2d\u6027 + \u6743\u91cd \u548c \u4e3a 1   huge   =   np   .   vstack   ( [   flow _ cap   .   T   ,   indu _ dummy   .   T   ,   np   .   array   ( [   1   ]   *   len   (   codes   ) ) ] )   target   =   (   list   (   flow _ cap   .   T   @   index _ weight   .   flatten   ( ) )   +   list   ( (   indu _ dummy   .   T   @   index _ weight   )   .   flatten   ( ) )   +   [   np   .   sum   (   index _ weight   ) ]   )   #   \u5199 \u7ebf\u6027 \u6761\u4ef6   c   =   fac   .   T   .   flatten   ( )   .   tolist   ( )   a   =   sign _ index _ weight   .   reshape   ( (   1   ,   -   1   ) )   .   tolist   ( )   b   =   [   0.8   ]   #   \u4f18\u5316 \u6c42\u89e3   res   =   linprog   (   c   ,   a   ,   b   ,   huge   ,   target   ,   bounds   )   if   res   .   success   :   return   pd   .   DataFrame   ( {   date   :   res   .   x   .   tolist   ( ) } ,   index   =   codes   )   else   :   #   raise   NotImplementedError ( f \" { date } \u8fd9 \u4e00\u671f \u7684 \u4f18\u5316 \u5931\u8d25 \uff0c \u8bf7 \u68c0\u67e5 \" )   logger   .   warning   (   f   \"   {   name   }   \u5728   {   date   }   \u8fd9 \u4e00\u671f \u7684 \u4f18\u5316 \u5931\u8d25 \uff0c \u8bf7 \u68c0\u67e5 \"   )   return   None   else   :   return   None   def   optimize _ many _ days   (   self   ,   startdate   :   int   =   STATES   [   \" START \"   ] ) :   dates   =   [   i   for   i   in   self   .   facs   .   index   if   i   > =   pd   .   Timestamp   (   str   (   startdate   ) ) ]   for   date   in   tqdm   .   auto   .   tqdm   (   dates   ) :   fac   =   self   .   facs   [   self   .   facs   .   index   = =   date   ]   .   T   .   dropna   ( )   total _ cap   =   self   .   total _ caps   [   self   .   total _ caps   .   index   = =   date   ]   .   T   .   dropna   ( )   indu _ dummy   =   self   .   indu _ dummys   [   self   .   indu _ dummys   .   date   < =   date   ]   indu _ dummy   =   (   indu _ dummy   [   indu _ dummy   .   date   = =   indu _ dummy   .   date   .   max   ( ) ]   .   drop   (   columns   =   [   \" date \"   ] )   .   set _ index   (   \" code \"   )   )   index _ weight _ hs300   =   self   .   index _ weights _ hs300   [   self   .   index _ weights _ hs300   .   index   = =   date   ]   .   T   .   dropna   ( )   index _ weight _ zz500   =   self   .   index _ weights _ zz500   [   self   .   index _ weights _ zz500   .   index   = =   date   ]   .   T   .   dropna   ( )   index _ weight _ zz1000   =   self   .   index _ weights _ zz1000   [   self   .   index _ weights _ zz1000   .   index   = =   date   ]   .   T   .   dropna   ( )   weight _ hs300   =   self   .   optimize _ one _ day   (   fac   ,   total _ cap   ,   indu _ dummy   ,   index _ weight _ hs300   ,   \" hs300 \"   )   weight _ zz500   =   self   .   optimize _ one _ day   (   fac   ,   total _ cap   ,   indu _ dummy   ,   index _ weight _ zz500   ,   \" zz500 \"   )   weight _ zz1000   =   self   .   optimize _ one _ day   (   fac   ,   total _ cap   ,   indu _ dummy   ,   index _ weight _ zz1000   ,   \" zz1000 \"   )   self   .   hs300 _ weights   .   append   (   weight _ hs300   )   self   .   zz500 _ weights   .   append   (   weight _ zz500   )   self   .   zz1000 _ weights   .   append   (   weight _ zz1000   )   self   .   hs300 _ weights   =   pd   .   concat   (   self   .   hs300 _ weights   ,   axis   =   1   )   .   T   self   .   zz500 _ weights   =   pd   .   concat   (   self   .   zz500 _ weights   ,   axis   =   1   )   .   T   self   .   zz1000 _ weights   =   pd   .   concat   (   self   .   zz1000 _ weights   ,   axis   =   1   )   .   T   def   make _ contrast   (   self   ,   weight   ,   index   ,   name   )   - >   list   [   pd   .   DataFrame   ] :   ret   =   (   weight   .   shift   (   1   )   *   self   .   ret _ next   )   .   sum   (   axis   =   1   )   abret   =   ret   -   index   rets   =   pd   .   concat   ( [   ret   ,   index   ,   abret   ] ,   axis   =   1   )   .   dropna   ( )   rets   .   columns   =   [   f   \"   {   name   }   \u589e\u5f3a \u7ec4\u5408 \u51c0\u503c \"   ,   f   \"   {   name   }   \u6307\u6570 \u51c0\u503c \"   ,   f   \"   {   name   }   \u589e\u5f3a \u7ec4\u5408 \u8d85\u989d \u51c0\u503c \"   ]   rets   =   (   rets   +   1   )   .   cumprod   ( )   rets   =   rets   .   apply   (   lambda   x   :   x   /   x   .   iloc   [   0   ] )   comments   =   comments _ on _ twins   (   rets   [   f   \"   {   name   }   \u589e\u5f3a \u7ec4\u5408 \u8d85\u989d \u51c0\u503c \"   ] ,   abret   .   dropna   ( ) )   return   comments   ,   rets   def   run   (   self   ,   startdate   :   int   =   STATES   [   \" START \"   ] )   - >   pd   .   DataFrame   :   \" \" \" \u8fd0\u884c \u89c4\u5212 \u6c42\u89e3   Parameters   ----------   startdate   :   int ,   optional   \u8d77\u59cb \u65e5\u671f ,   by   default   20130101   Returns   -------   pd . DataFrame   \u8d85\u989d \u7ee9\u6548 \u6307\u6807   \" \" \"   self   .   optimize _ many _ days   (   startdate   =   startdate   )   self   .   hs300 _ comments   ,   self   .   hs300 _ nets   =   self   .   make _ contrast   (   self   .   hs300 _ weights   ,   self   .   ret _ hs300   ,   \" \u6caa \u6df1 300 \"   )   self   .   zz500 _ comments   ,   self   .   zz500 _ nets   =   self   .   make _ contrast   (   self   .   zz500 _ weights   ,   self   .   ret _ zz500   ,   \" \u4e2d\u8bc1 500 \"   )   self   .   zz1000 _ comments   ,   self   .   zz1000 _ nets   =   self   .   make _ contrast   (   self   .   zz1000 _ weights   ,   self   .   ret _ zz1000   ,   \" \u4e2d\u8bc1 1000 \"   )   figs   =   cf   .   figures   (   pd   .   concat   ( [   self   .   hs300 _ nets   ,   self   .   zz500 _ nets   ,   self   .   zz1000 _ nets   ] ) ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   hs300 _ nets   .   columns   ) ) ,   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   zz500 _ nets   .   columns   ) ) ,   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   zz1000 _ nets   .   columns   ) ) ,   ] ,   asList   =   True   ,   )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   1   ,   3   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   subplot _ titles   =   [   \" \u6caa \u6df1 300 \u589e\u5f3a \"   ,   \" \u4e2d\u8bc1 500 \u589e\u5f3a \"   ,   \" \u4e2d\u8bc1 1000 \u589e\u5f3a \"   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   True   )   cf   .   iplot   (   sp   )   self   .   comments   =   pd   .   concat   (   [   self   .   hs300 _ comments   ,   self   .   zz500 _ comments   ,   self   .   zz1000 _ comments   ] ,   axis   =   1   )   self   .   comments   .   columns   =   [   \" \u6caa \u6df1 300 \u8d85\u989d \"   ,   \" \u4e2d\u8bc1 500 \u8d85\u989d \"   ,   \" \u4e2d\u8bc1 1000 \u8d85\u989d \"   ]   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   ,   NET _ VALUES _ WRITER   comments _ writer   =   COMMENTS _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   if   comments _ writer   is   not   None   :   self   .   hs300 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u6caa \u6df1 300 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   self   .   zz500 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 500 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   self   .   zz1000 _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 1000 \u7ec4\u5408 \u4f18\u5316 \u8d85\u989d \u7ee9\u6548 \"   )   if   net _ values _ writer   is   not   None   :   self   .   hs300 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u6caa \u6df1 300 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   self   .   zz500 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 500 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   self   .   zz1000 _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   \" \u4e2d\u8bc1 1000 \u7ec4\u5408 \u4f18\u5316 \u51c0\u503c \"   )   return   self   .   comments   .   T","title":"pure _ linprog"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_linprog.__init__","text":"\u7ebf\u6027 \u89c4\u5212 \u7ebf\u6027\u89c4\u5212 \u6c42\u89e3 \uff0c \u76ee\u6807 \u4e3a \u9884\u671f \u6536\u76ca \u6536\u76ca\u7387 \u6700\u5927 \uff08 \u5373 \u56e0\u5b50 \u65b9\u5411 \u4e3a \u8d1f\u65f6 \uff0c \u7ec4\u5408 \u56e0\u5b50 \u503c \u6700\u5c0f \uff09   \u6761\u4ef6 \u4e3a \uff0c \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u5e02\u503c \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u603b \u5e02\u503c \u7684 \u5bf9\u6570 \uff1b \u542b\u4e49 \uff1a \u7ec4\u5408 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u4e0e \u6307\u6570 \u5728 \u5e02\u503c \u4e0a \u7684 \u66b4\u9732 \u76f8\u7b49 \uff09   \u4e25\u683c \u63a7\u5236 \u4e25\u683c\u63a7\u5236 \u884c\u4e1a \u4e2d\u6027 \uff08 \u6570\u636e \uff1a \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff09 \uff0c \u4e2a\u80a1 \u504f\u79bb \u5728 1% \u4ee5\u5185 \uff0c \u6210\u5206 \u80a1\u6743 \u91cd\u4e4b \u548c \u5728 80% \u4ee5\u4e0a   \u5206\u522b \u5728 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4e0a \u4f18\u5316 \u6c42\u89e3","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_linprog.optimize_one_day","text":"\u4f18\u5316 \u5355\u671f \u6c42\u89e3","title":"optimize _ one _ day ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_linprog.run","text":"\u8fd0\u884c \u89c4\u5212 \u6c42\u89e3","title":"run ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1436   1437   1438   1439   1440   1441   1442   1443   1444   1445   1446   1447   1448   1449   1450   1451   1452   1453   1454   1455   1456   1457   1458   1459   1460   1461   1462   1463   1464   1465   1466   1467   1468   1469   1470   1471   1472   1473   1474   1475   1476   1477   1478   1479   1480   1481   1482   1483   1484   1485   1486   1487   1488   1489   1490   1491   1492   1493   1494   1495   1496   1497   1498   1499   1500   1501   1502   1503   1504   1505   1506   1507   1508   1509   1510   1511   1512   1513   1514   1515   1516   1517   1518   1519   1520   1521   1522   1523   1524   1525   1526   1527   1528   1529   1530   1531   1532   1533   1534   1535   1536   1537   1538   1539   1540   1541   1542   1543   1544   1545   1546   1547   1548   1549   1550   1551   1552   1553   1554   1555   1556   1557   1558   1559   1560   1561   1562   1563   1564   1565   1566   1567   1568   1569   1570   1571   1572   1573   1574   1575   1576   1577   1578   1579   1580   1581   1582   1583   1584   1585   1586   1587   1588   1589   1590   1591   1592   1593   1594   1595   1596   1597   1598   1599   1600   1601   1602   1603   1604   1605   1606   1607   1608   1609   1610   1611   1612   1613   1614   1615   1616   1617   1618   1619   1620   1621   1622   1623   1624   1625   1626   1627   1628   1629   1630   1631   1632   1633   1634   1635   1636   1637   1638   1639   1640   1641   1642   1643   1644   1645   1646   1647   1648   1649   1650   1651   1652   1653   1654   1655   1656   1657   1658   1659   1660   1661   1662   1663   1664   1665   1666   1667   1668   1669   1670   1671   1672   1673   1674   1675   1676   1677   1678   1679   1680   1681   1682   1683   1684   1685   1686   1687   1688   1689   1690   1691   1692   1693   1694   1695   1696   1697   1698   1699   1700   1701   1702   1703   1704   1705   1706   1707   1708   1709   1710   1711   1712   1713   1714   1715   1716   1717   1718   1719   1720   1721   1722   1723   1724   1725   1726   1727   1728   1729   1730   1731   1732   1733   1734   1735   1736   1737   1738   1739   1740   1741   1742   1743   1744   1745   1746   1747   1748   1749   1750   1751   1752   1753   1754   1755   1756   1757   1758   1759   1760   1761   1762   1763   1764   1765   1766   1767   1768   1769   1770   1771   1772   1773   1774   1775   1776   1777   1778   1779   1780   1781   1782   1783   1784   1785   1786   1787   1788   1789   1790   1791   1792   1793   1794   1795   1796   1797   1798   1799   1800   1801   1802   1803   1804   1805   1806   1807   1808   1809   1810   1811   1812   1813   1814   1815   1816   1817   1818   1819   1820   1821   1822   1823   1824   1825   1826   1827   1828   1829   1830   1831   1832   1833   1834   1835   1836   1837   1838   1839   1840   1841   1842   1843   1844   1845   1846   1847   1848   1849   1850   1851   1852   1853   1854   1855   1856   1857   1858   1859   1860   1861   1862   1863   1864   1865   1866   1867   1868   1869   1870   1871   1872   1873   1874   1875   1876   1877   1878   1879   1880   1881   1882   1883   1884   1885   1886   1887   1888   1889   1890   1891   1892   1893   1894   1895   1896   1897   1898   1899   1900   1901   1902   1903   1904   1905   1906   1907   1908   1909   1910   1911   1912   1913   1914   1915   1916   1917   1918   1919   1920   1921   1922   1923   1924   1925   1926   1927   1928   1929   1930   1931   1932   1933   1934   1935   1936   1937   1938   1939   1940   1941   1942   1943   1944   1945   1946   1947   1948   1949   1950   1951   1952   1953   1954   1955   1956   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   2017   2018   2019   2020   2021   2022   2023   2024   2025   2026   2027   2028   2029   2030   2031   2032   2033   2034   2035   2036   2037   2038   2039   2040   2041   2042   2043   2044   2045   2046   2047   2048   2049   2050   2051   2052   2053   2054   2055   2056   2057   2058   2059   2060   2061   2062   2063   2064   2065   2066   2067   2068   2069   2070   2071   2072   2073   2074   2075   2076   2077   2078   2079   2080   2081   2082   2083   2084   2085   2086   2087   2088   2089   2090   2091   2092   2093   2094   2095   2096   2097   2098   2099   2100   2101   2102   2103   2104   2105   2106   2107   2108   2109   2110   2111   2112   2113   2114   2115   2116   2117   2118   2119   2120   2121   2122   2123   2124   2125   2126   2127   2128   2129   2130   2131   2132   2133   2134   2135   2136   2137   2138   2139   2140   2141   2142   2143   2144   2145   2146   2147   2148   2149   2150   2151   2152   2153   2154   2155   2156   2157   2158   2159   2160   2161   2162   2163   2164   2165   2166   2167   2168   2169   2170   2171   2172   2173   2174   2175   2176   2177   2178   2179   2180   2181   2182   2183   2184   2185   2186   2187   2188   2189   2190   2191   2192   2193   2194   2195   2196   2197   2198   2199   2200   2201   2202   2203   2204   2205   2206   2207   2208   2209   2210   2211   2212   2213   2214   2215   2216   2217   2218   2219   2220   2221   2222   2223   2224   2225   2226   2227   2228   2229   2230   2231   2232   2233   2234   2235   2236   2237   2238   2239   2240   2241   2242   2243   2244   2245   2246   2247   2248   2249   2250   2251   2252   2253   2254   2255   2256   2257   2258   2259   2260   2261   2262   2263   2264   2265   2266   2267   2268   2269   2270   2271   2272   2273   2274   2275   2276   2277   2278   2279   2280   2281   2282   2283   2284   2285   2286   2287   2288   2289   2290   2291   2292   2293   2294   2295   2296   2297   2298   2299   2300   2301   2302   2303   2304   2305   2306   2307   2308   2309   2310   2311   2312   2313   2314   2315   2316   2317   2318   2319   2320   2321   2322   2323   2324   2325   2326   2327   2328   2329   2330   2331   2332   2333   2334   2335   2336   2337   2338   2339   2340   2341   2342   2343   2344   2345   2346   2347   2348   2349   2350   2351   2352   2353   2354   2355   2356   2357   2358   2359   2360   2361   2362   2363   2364   2365   2366   2367   2368   2369   2370   2371   2372   2373   2374   2375   2376   2377   2378   2379   2380   2381   2382   2383   2384   2385   2386   2387   2388   2389   2390   2391   2392   2393   2394   2395   2396   2397   2398   2399   2400   2401   2402   2403   2404   2405   2406   2407   2408   2409   2410   2411   2412   2413   2414   2415   2416   2417   2418   2419   2420   2421   2422   2423   2424   2425   2426   2427   2428   2429   2430   2431   2432   2433   2434   2435   2436   2437   2438   2439   2440   2441   2442   2443   2444   2445   2446   2447   2448   2449   2450   2451   2452   2453   2454   2455   2456   2457   2458   2459   2460   2461   2462   2463   2464   2465   2466   2467   2468   2469   2470   2471   2472   2473   2474   2475   2476   2477   2478   2479   2480   2481   2482   2483   2484   2485   2486   2487   2488   2489   2490   2491   2492   2493   2494   2495   2496   2497   2498   2499   2500   2501   2502   2503   2504   2505   2506   2507   2508   2509   2510   2511   2512   2513   2514   2515   2516   2517   2518   2519   2520   2521   2522   2523   2524   2525   2526   2527   2528   2529   2530   2531   2532   2533   2534   2535   2536   2537   2538   2539   2540   2541   2542   2543   2544   2545   2546   2547   2548   2549   2550   2551   2552   2553   2554   2555   2556   2557   2558   2559   2560   2561   2562   2563   2564   2565   2566   2567   2568   2569   2570   2571   2572   2573   2574   2575   2576   2577   2578   2579   2580   2581   2582   2583   2584   2585   2586   2587   2588   2589   2590   2591   2592   2593   2594   2595   2596   2597   2598   2599   2600   2601   2602   2603   2604   2605   2606   2607   2608   class   pure _ moon   (   object   ) :   __ slots __   =   [   \" homeplace \"   ,   \" sts _ monthly _ file \"   ,   \" states _ monthly _ file \"   ,   \" factors \"   ,   \" codes \"   ,   \" tradedays \"   ,   \" ages \"   ,   \" amounts \"   ,   \" closes \"   ,   \" opens \"   ,   \" capital \"   ,   \" states \"   ,   \" sts \"   ,   \" turnovers \"   ,   \" sts _ monthly \"   ,   \" states _ monthly \"   ,   \" ages _ monthly \"   ,   \" tris _ monthly \"   ,   \" opens _ monthly \"   ,   \" closes _ monthly \"   ,   \" rets _ monthly \"   ,   \" opens _ monthly _ shift \"   ,   \" rets _ monthly _ begin \"   ,   \" limit _ ups \"   ,   \" limit _ downs \"   ,   \" data \"   ,   \" ic _ icir _ and _ rank \"   ,   \" rets _ monthly _ limit _ downs \"   ,   \" group _ rets \"   ,   \" long _ short _ rets \"   ,   \" long _ short _ net _ values \"   ,   \" group _ net _ values \"   ,   \" long _ short _ ret _ yearly \"   ,   \" long _ short _ vol _ yearly \"   ,   \" long _ short _ info _ ratio \"   ,   \" long _ short _ win _ times \"   ,   \" long _ short _ win _ ratio \"   ,   \" retreats \"   ,   \" max _ retreat \"   ,   \" long _ short _ comments \"   ,   \" total _ comments \"   ,   \" square _ rets \"   ,   \" cap \"   ,   \" cap _ value \"   ,   \" industry _ dummy \"   ,   \" industry _ codes \"   ,   \" industry _ codes _ str \"   ,   \" industry _ ws \"   ,   \" __ factors _ out \"   ,   \" ics \"   ,   \" rankics \"   ,   \" factor _ turnover _ rates \"   ,   \" factor _ turnover _ rate \"   ,   \" group _ rets _ std \"   ,   \" group _ rets _ stds \"   ,   \" group _ rets _ skews \"   ,   \" group _ rets _ skew \"   ,   \" wind _ out \"   ,   \" swindustry _ dummy \"   ,   \" zxindustry _ dummy \"   ,   \" closes2 _ monthly \"   ,   \" rets _ monthly _ last \"   ,   \" freq _ ctrl \"   ,   \" freq \"   ,   \" factor _ cover \"   ,   \" factor _ cross _ skew \"   ,   \" factor _ cross _ skew _ after _ neu \"   ,   \" pos _ neg _ rate \"   ,   \" corr _ itself \"   ,   \" factor _ cross _ stds \"   ,   \" corr _ itself _ shift2 \"   ,   \" rets _ all \"   ,   \" inner _ long _ ret _ yearly \"   ,   \" inner _ short _ ret _ yearly \"   ,   \" inner _ long _ net _ values \"   ,   \" inner _ short _ net _ values \"   ,   \" group _ mean _ rets _ monthly \"   ]   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   __ init __   (   cls   ,   freq   :   str   =   \" M \"   ,   no _ read _ indu   :   bool   =   0   ,   swindustry _ dummy   :   pd   .   DataFrame   =   None   ,   zxindustry _ dummy   :   pd   .   DataFrame   =   None   ,   read _ in _ swindustry _ dummy   :   bool   =   0   ,   ) :   cls   .   homeplace   =   HomePlace   ( )   cls   .   freq   =   freq   cls   .   freq _ ctrl   =   frequency _ controller   (   freq   )   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u6708\u5ea6 st \u72b6\u6001 \u6587\u4ef6   #   week _ here   cls   .   sts _ monthly _ file   =   cls   .   freq _ ctrl   .   sts _ files   #   \u5df2\u7ecf \u7b97\u597d \u7684 \u6708\u5ea6 \u4ea4\u6613 \u72b6\u6001 \u6587\u4ef6   #   week _ here   cls   .   states _ monthly _ file   =   cls   .   freq _ ctrl   .   states _ files   if   swindustry _ dummy   is   not   None   :   cls   .   swindustry _ dummy   =   swindustry _ dummy   if   zxindustry _ dummy   is   not   None   :   cls   .   zxindustry _ dummy   =   zxindustry _ dummy   def   deal _ dummy   (   industry _ dummy   ) :   industry _ dummy   =   industry _ dummy   .   drop   (   columns   =   [   \" code \"   ] )   .   reset _ index   ( )   industry _ ws   =   [   f   \" w   {   i   }   \"   for   i   in   range   (   1   ,   industry _ dummy   .   shape   [   1   ]   -   1   ) ]   col   =   [   \" code \"   ,   \" date \"   ]   +   industry _ ws   industry _ dummy   .   columns   =   col   industry _ dummy   =   industry _ dummy   [   industry _ dummy   .   date   > =   pd   .   Timestamp   (   \" 20100101 \"   )   ]   return   industry _ dummy   if   (   swindustry _ dummy   is   None   )   and   (   zxindustry _ dummy   is   None   ) :   if   not   no _ read _ indu   :   if   read _ in _ swindustry _ dummy   :   #   week _ here   cls   .   swindustry _ dummy   =   (   pd   .   read _ parquet   (   cls   .   homeplace   .   daily _ data _ file   +   \" \u7533\u4e07 \u884c\u4e1a 2021 \u7248\u54d1 \u53d8\u91cf . parquet \"   )   .   fillna   (   0   )   .   set _ index   (   \" date \"   )   .   groupby   (   \" code \"   )   .   resample   (   freq   )   .   last   ( )   )   cls   .   swindustry _ dummy   =   deal _ dummy   (   cls   .   swindustry _ dummy   )   #   week _ here   cls   .   zxindustry _ dummy   =   (   pd   .   read _ parquet   (   cls   .   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u4ee3\u7801 \u7248 . parquet \"   )   .   fillna   (   0   )   .   set _ index   (   \" date \"   )   .   groupby   (   \" code \"   )   .   resample   (   freq   )   .   last   ( )   .   fillna   (   0   )   )   cls   .   zxindustry _ dummy   =   deal _ dummy   (   cls   .   zxindustry _ dummy   )   @ property   def   factors _ out   (   self   ) :   return   self   .   __ factors _ out   def   __ call __   (   self   ) :   \" \" \" \u8c03\u7528 \u5bf9\u8c61 \u5219 \u8fd4\u56de \u56e0\u5b50 \u503c \" \" \"   return   self   .   factors _ out   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   set _ basic _ data   (   cls   ,   ages   :   pd   .   DataFrame   =   None   ,   sts   :   pd   .   DataFrame   =   None   ,   states   :   pd   .   DataFrame   =   None   ,   opens   :   pd   .   DataFrame   =   None   ,   closes   :   pd   .   DataFrame   =   None   ,   capitals   :   pd   .   DataFrame   =   None   ,   opens _ average _ first _ day   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   ) :   if   ages   is   None   :   ages   =   read _ daily   (   age   =   1   ,   start   =   20100101   )   if   sts   is   None   :   sts   =   read _ daily   (   st   =   1   ,   start   =   20100101   )   if   states   is   None   :   states   =   read _ daily   (   state   =   1   ,   start   =   20100101   )   if   opens   is   None   :   if   opens _ average _ first _ day   :   opens   =   read _ daily   (   vwap   =   1   ,   start   =   20100101   )   else   :   opens   =   read _ daily   (   open   =   1   ,   start   =   20100101   )   if   closes   is   None   :   closes   =   read _ daily   (   close   =   1   ,   start   =   20100101   )   if   capitals   is   None   :   if   total _ cap   :   capitals   =   (   read _ daily   (   total _ cap   =   1   ,   start   =   20100101   )   .   resample   (   cls   .   freq   )   .   last   ( )   )   else   :   capitals   =   (   read _ daily   (   flow _ cap   =   1   ,   start   =   20100101   )   .   resample   (   cls   .   freq   )   .   last   ( )   )   #   \u4e0a\u5e02 \u5929\u6570 \u6587\u4ef6   cls   .   ages   =   ages   #   st \u65e5\u5b50 \u6807\u5fd7 \u6587\u4ef6   cls   .   sts   =   sts   .   fillna   (   0   )   #   cls . sts   =   1   -   cls . sts . fillna ( 0 )   #   \u4ea4\u6613 \u72b6\u6001 \u6587\u4ef6   cls   .   states   =   states   #   \u590d\u6743 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e \u6587\u4ef6 \u6570\u636e\u6587\u4ef6   cls   .   opens   =   opens   #   \u590d\u6743 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e \u6587\u4ef6 \u6570\u636e\u6587\u4ef6   cls   .   closes   =   closes   #   \u6708\u5e95 \u6d41\u901a \u5e02\u503c \u6570\u636e   cls   .   capital   =   capitals   if   cls   .   opens   is   not   None   :   cls   .   opens   =   cls   .   opens   .   replace   (   0   ,   np   .   nan   )   if   cls   .   closes   is   not   None   :   cls   .   closes   =   cls   .   closes   .   replace   (   0   ,   np   .   nan   )   def   set _ factor _ df _ date _ as _ index   (   self   ,   df   :   pd   .   DataFrame   ) :   \" \" \" \u8bbe\u7f6e \u56e0\u5b50 \u6570\u636e \u7684 dataframe \uff0c \u56e0\u5b50 \u8868 \u5217\u540d \u5e94\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u5e94\u4e3a \u65f6\u95f4 \" \" \"   #   week _ here   self   .   factors   =   df   .   resample   (   self   .   freq   )   .   last   ( )   .   dropna   (   how   =   \" all \"   )   self   .   factor _ cover   =   np   .   sign   (   self   .   factors   .   abs   ( )   +   1   )   .   sum   ( )   .   sum   ( )   opens   =   self   .   opens   [   self   .   opens   .   index   > =   self   .   factors   .   index   .   min   ( ) ]   total   =   np   .   sign   (   opens   .   resample   (   self   .   freq   )   .   last   ( ) )   .   sum   ( )   .   sum   ( )   self   .   factor _ cover   =   min   (   self   .   factor _ cover   /   total   ,   1   )   self   .   factor _ cross _ skew   =   self   .   factors   .   skew   (   axis   =   1   )   .   mean   ( )   pos _ num   =   ( (   self   .   factors   >   0   )   +   0   )   .   sum   ( )   .   sum   ( )   neg _ num   =   ( (   self   .   factors   <   0   )   +   0   )   .   sum   ( )   .   sum   ( )   self   .   pos _ neg _ rate   =   pos _ num   /   (   neg _ num   +   pos _ num   )   self   .   corr _ itself   =   show _ corr   (   self   .   factors   ,   self   .   factors   .   shift   (   1   ) ,   plt _ plot   =   0   )   self   .   corr _ itself _ shift2   =   show _ corr   (   self   .   factors   ,   self   .   factors   .   shift   (   2   ) ,   plt _ plot   =   0   )   self   .   factor _ cross _ stds   =   self   .   factors   .   std   (   axis   =   1   )   @ classmethod   def   judge _ month _ st   (   cls   ,   df   ) :   \" \" \" \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 st \u7684 \u5929\u6570 \uff0c \u5982\u679c st \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5982\u679c \u6b63\u5e38 \u591a \uff0c \u5c31 \u4fdd\u7559 \u672c\u6708 \" \" \"   st _ count   =   len   (   df   [   df   = =   1   ] )   normal _ count   =   len   (   df   [   df   ! =   1   ] )   if   st _ count   > =   normal _ count   :   return   0   else   :   return   1   @ classmethod   def   judge _ month _ state   (   cls   ,   df   ) :   \" \" \" \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u7684 \u5929\u6570 \uff0c \u5982\u679c \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5426\u5219 \u4fdd\u7559 \u672c\u6708 \" \" \"   abnormal _ count   =   len   (   df   [   df   = =   0   ] )   normal _ count   =   len   (   df   [   df   = =   1   ] )   if   abnormal _ count   > =   normal _ count   :   return   0   else   :   return   1   @ classmethod   def   read _ add   (   cls   ,   pridf   ,   df   ,   func   ) :   \" \" \" \u7531\u4e8e \u6570\u636e \u66f4\u65b0 \uff0c \u8fc7\u53bb \u8ba1\u7b97 \u7684 \u6708\u5ea6 \u72b6\u6001 \u53ef\u80fd \u9700\u8981 \u8ffd\u52a0 \" \" \"   if   pridf   .   index   .   max   ( )   >   df   .   index   .   max   ( ) :   df _ add   =   pridf   [   pridf   .   index   >   df   .   index   .   max   ( ) ]   if   df _ add   .   shape   [   0   ]   >   int   (   cls   .   freq _ ctrl   .   days _ in   /   2   ) :   df _ 1   =   df _ add   .   index   .   max   ( )   year   =   df _ 1   .   year   month   =   df _ 1   .   month   last   =   tt   .   date   .   get _ close   (   year   =   year   ,   m   =   month   )   .   pd _ date   ( )   if   (   last   = =   df _ 1   ) [   0   ] :   #   week _ here   df _ add   =   df _ add   .   resample   (   cls   .   freq   )   .   apply   (   func   )   df   =   pd   .   concat   ( [   df   ,   df _ add   ] )   return   df   else   :   df _ add   =   df _ add   [   df _ add   .   index   <   pd   .   Timestamp   (   year   =   year   ,   month   =   month   ,   day   =   1   )   ]   if   df _ add   .   shape   [   0   ]   >   0   :   df _ add   =   df _ add   .   resample   (   cls   .   freq   )   .   apply   (   func   )   df   =   pd   .   concat   ( [   df   ,   df _ add   ] )   return   df   else   :   return   df   else   :   return   df   else   :   return   df   @ classmethod   def   daily _ to _ monthly   (   cls   ,   pridf   ,   path   ,   func   ) :   \" \" \" \u628a \u65e5\u5ea6 \u7684 \u4ea4\u6613 \u72b6\u6001 \u3001 st \u3001 \u4e0a\u5e02 \u5929\u6570 \uff0c \u8f6c\u5316 \u4e3a \u6708\u5ea6 \u7684 \uff0c \u5e76 \u751f\u6210 \u80fd\u5426 \u4ea4\u6613 \u7684 \u5224\u65ad   \u8bfb\u53d6 \u672c\u5730 \u5df2\u7ecf \u7b97\u597d \u7684 \u6587\u4ef6 \uff0c \u5e76 \u8ffd\u52a0 \u65b0 \u7684 \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u90e8\u5206 \uff0c \u5982\u679c \u672c\u5730 \u6ca1\u6709 \u5c31 \u76f4\u63a5 \u5168\u90e8 \u91cd\u65b0 \u7b97 \" \" \"   try   :   month _ df   =   pd   .   read _ parquet   (   path   )   month _ df   =   cls   .   read _ add   (   pridf   ,   month _ df   ,   func   )   month _ df   .   to _ parquet   (   path   )   except   Exception   as   e   :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   error   (   \" error   occurs   when   read   state   files \"   )   logger   .   error   (   e   )   print   (   \" state   file   rewriting \u2026 \u2026 \"   )   #   week _ here   df _ 1   =   pridf   .   index   .   max   ( )   year   =   df _ 1   .   year   month   =   df _ 1   .   month   last   =   tt   .   date   .   get _ close   (   year   =   year   ,   m   =   month   )   .   pd _ date   ( )   if   not   (   last   = =   df _ 1   ) [   0   ] :   pridf   =   pridf   [   pridf   .   index   <   pd   .   Timestamp   (   year   =   year   ,   month   =   month   ,   day   =   1   ) ]   month _ df   =   pridf   .   resample   (   cls   .   freq   )   .   apply   (   func   )   month _ df   .   to _ parquet   (   path   )   return   month _ df   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   judge _ month   (   cls   ) :   \" \" \" \u751f\u6210 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7efc\u5408 \u5224\u65ad \u7684 \u8868\u683c \" \" \"   if   cls   .   freq   = =   \" M \"   :   cls   .   sts _ monthly   =   cls   .   daily _ to _ monthly   (   cls   .   sts   ,   cls   .   sts _ monthly _ file   ,   cls   .   judge _ month _ st   )   cls   .   states _ monthly   =   cls   .   daily _ to _ monthly   (   cls   .   states   ,   cls   .   states _ monthly _ file   ,   cls   .   judge _ month _ state   )   #   week _ here   cls   .   ages _ monthly   =   (   cls   .   ages   .   resample   (   cls   .   freq   )   .   last   ( )   >   60   )   +   0   cls   .   tris _ monthly   =   cls   .   sts _ monthly   *   cls   .   states _ monthly   *   cls   .   ages _ monthly   cls   .   tris _ monthly   =   cls   .   tris _ monthly   .   replace   (   0   ,   np   .   nan   )   else   :   cls   .   tris _ monthly   =   (   (   1   -   cls   .   sts   )   .   resample   (   cls   .   freq   )   .   last   ( )   .   ffill   (   limit   =   2   )   *   cls   .   states   .   resample   (   cls   .   freq   )   .   last   ( )   .   ffill   (   limit   =   2   )   *   ( (   cls   .   ages   .   resample   (   cls   .   freq   )   .   last   ( )   >   60   )   +   0   )   )   .   replace   (   0   ,   np   .   nan   )   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ rets _ month   (   cls   ) :   \" \" \" \u8ba1\u7b97 \u6bcf\u6708 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u5e76 \u6839\u636e \u6bcf\u6708 \u505a\u51fa \u4ea4\u6613 \u72b6\u6001 \uff0c \u505a\u51fa \u5220\u51cf \" \" \"   #   week _ here   cls   .   opens _ monthly   =   cls   .   opens   .   resample   (   cls   .   freq   )   .   first   ( )   #   week _ here   cls   .   closes _ monthly   =   cls   .   closes   .   resample   (   cls   .   freq   )   .   last   ( )   cls   .   rets _ monthly   =   (   cls   .   closes _ monthly   -   cls   .   opens _ monthly   )   /   cls   .   opens _ monthly   cls   .   rets _ monthly   =   cls   .   rets _ monthly   *   cls   .   tris _ monthly   cls   .   rets _ monthly   =   cls   .   rets _ monthly   .   stack   ( )   .   reset _ index   ( )   cls   .   rets _ monthly   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" ret \"   ]   @ classmethod   def   neutralize _ factors   (   cls   ,   df   ) :   \" \" \" \u7ec4\u5185 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   industry _ codes   =   list   (   df   .   columns   )   industry _ codes   =   [   i   for   i   in   industry _ codes   if   i   .   startswith   (   \" w \"   ) ]   industry _ codes _ str   =   \" + \"   .   join   (   industry _ codes   )   if   len   (   industry _ codes _ str   )   >   0   :   ols _ result   =   smf   .   ols   (   \" fac ~ cap _ size + \"   +   industry _ codes _ str   ,   data   =   df   )   .   fit   ( )   else   :   ols _ result   =   smf   .   ols   (   \" fac ~ cap _ size \"   ,   data   =   df   )   .   fit   ( )   ols _ w   =   ols _ result   .   params   [   \" cap _ size \"   ]   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   ols _ bs   =   { }   for   ind   in   industry _ codes   :   ols _ bs   [   ind   ]   =   ols _ result   .   params   [   ind   ]   df   .   fac   =   df   .   fac   -   ols _ w   *   df   .   cap _ size   -   ols _ b   for   k   ,   v   in   ols _ bs   .   items   ( ) :   df   .   fac   =   df   .   fac   -   v   *   df   [   k   ]   df   =   df   [ [   \" fac \"   ] ]   return   df   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ log _ cap   (   cls   ,   boxcox   =   True   ) :   \" \" \" \u83b7\u5f97 \u5bf9\u6570 \u5e02\u503c \" \" \"   cls   .   cap   =   cls   .   capital   .   stack   ( )   .   reset _ index   ( )   cls   .   cap   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap _ size \"   ]   if   boxcox   :   def   single   (   x   ) :   x   .   cap _ size   =   ss   .   boxcox   (   x   .   cap _ size   ) [   0   ]   return   x   cls   .   cap   =   cls   .   cap   .   groupby   ( [   \" date \"   ] )   .   apply   (   single   )   else   :   cls   .   cap   [   \" cap _ size \"   ]   =   np   .   log   (   cls   .   cap   [   \" cap _ size \"   ] )   def   get _ neutral _ factors   (   self   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ) :   \" \" \" \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   #   week _ here   last _ date   =   self   .   freq _ ctrl   .   next _ end   (   self   .   tris _ monthly   .   index   .   max   ( ) )   add _ tail   =   pd   .   DataFrame   (   1   ,   index   =   [   last _ date   ] ,   columns   =   self   .   tris _ monthly   .   columns   )   tris _ monthly   =   pd   .   concat   ( [   self   .   tris _ monthly   ,   add _ tail   ] )   self   .   factors   =   self   .   factors   *   tris _ monthly   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   -   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   cap   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   if   not   only _ cap   :   if   swindustry _ dummies   :   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   swindustry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   else   :   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   zxindustry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   factors   =   self   .   factors   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   self   .   factors   =   self   .   factors   .   groupby   ( [   \" date \"   ] )   .   apply   (   self   .   neutralize _ factors   )   self   .   factors   =   self   .   factors   .   reset _ index   ( )   def   deal _ with _ factors   (   self   ) :   \" \" \" \u5220\u9664 \u4e0d \u7b26\u5408 \u4ea4\u6613 \u6761\u4ef6 \u7684 \u56e0\u5b50 \u6570\u636e \" \" \"   self   .   __ factors _ out   =   self   .   factors   .   copy   ( )   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   =   self   .   factors   *   self   .   tris _ monthly   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   def   deal _ with _ factors _ after _ neutralize   (   self   ) :   \" \" \" \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u5904\u7406 \u65b9\u6cd5 \" \" \"   self   .   factors   =   self   .   factors   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   self   .   factors   =   self   .   factors   .   unstack   ( )   self   .   __ factors _ out   =   self   .   factors   .   copy   ( )   self   .   __ factors _ out   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   __ factors _ out   .   columns   ) ]   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   self   .   factors   .   columns   ) ) )   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   @ classmethod   def   find _ limit   (   cls   ,   df   ,   up   =   1   ) :   \" \" \" \u8ba1\u7b97 \u6da8\u8dcc \u8dcc\u5e45 \u6da8\u8dcc\u5e45 \u8d85\u8fc7 9.8% \u7684 \u80a1\u7968 \uff0c \u5e76 \u5c06 \u5176 \u5b58\u50a8 \u8fdb \u4e00\u4e2a \u957f \u5217\u8868 \u91cc   \u5176\u4e2d \u65f6\u95f4 \u5217 \uff0c \u4e3a \u67d0\u6708 \u7684 \u6700\u540e \u4e00\u5929 \uff1b \u6da8\u505c \u65e5 \u867d\u7136 \u4e3a \u4e0b\u6708 \u6708\u521d \u4e0b\u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \uff0c \u4f46 \u8fd9\u91cc \u6807\u6ce8 \u7684 \u65f6\u95f4 \u7edf\u4e00 \u4e3a \u4e0a \u6708 \u6700\u540e \u4e00\u5929 \" \" \"   limit _ df   =   np   .   sign   (   df   .   applymap   (   lambda   x   :   x   -   up   *   0.098   ) )   .   replace   (   -   1   *   up   ,   np   .   nan   )   limit _ df   =   limit _ df   .   stack   ( )   .   reset _ index   ( )   limit _ df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" limit _ up _ signal \"   ]   limit _ df   =   limit _ df   [ [   \" date \"   ,   \" code \"   ] ]   return   limit _ df   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ limit _ ups _ downs   (   cls   ) :   \" \" \" \u627e \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5c31 \u6da8\u505c \" \" \"   \" \" \" \u6216\u8005 \u662f \u6708\u672b \u8dcc\u505c \u7684 \u80a1\u7968 \" \" \"   cls   .   opens _ monthly _ shift   =   cls   .   opens _ monthly   .   copy   ( )   cls   .   opens _ monthly _ shift   =   cls   .   opens _ monthly _ shift   .   shift   (   -   1   )   cls   .   rets _ monthly _ begin   =   (   cls   .   opens _ monthly _ shift   -   cls   .   closes _ monthly   )   /   cls   .   closes _ monthly   #   week _ here   cls   .   closes2 _ monthly   =   cls   .   closes   .   shift   (   1   )   .   resample   (   cls   .   freq   )   .   last   ( )   cls   .   rets _ monthly _ last   =   (   cls   .   closes _ monthly   -   cls   .   closes2 _ monthly   )   /   cls   .   closes2 _ monthly   cls   .   limit _ ups   =   cls   .   find _ limit   (   cls   .   rets _ monthly _ begin   ,   up   =   1   )   cls   .   limit _ downs   =   cls   .   find _ limit   (   cls   .   rets _ monthly _ last   ,   up   = -   1   )   def   get _ ic _ rankic   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 IC \u548c RankIC \" \" \"   df1   =   df   [ [   \" ret \"   ,   \" fac \"   ] ]   ic   =   df1   .   corr   (   method   =   \" pearson \"   )   .   iloc   [   0   ,   1   ]   rankic   =   df1   .   rank   ( )   .   corr   ( )   .   iloc   [   0   ,   1   ]   df2   =   pd   .   DataFrame   ( {   \" ic \"   :   [   ic   ] ,   \" rankic \"   :   [   rankic   ] } )   return   df2   def   get _ icir _ rankicir   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 ICIR \u548c RankICIR \" \" \"   ic   =   df   .   ic   .   mean   ( )   rankic   =   df   .   rankic   .   mean   ( )   #   week _ here   icir   =   ic   /   np   .   std   (   df   .   ic   )   *   (   cls   .   freq _ ctrl   .   counts _ one _ year   * *   (   0.5   ) )   #   week _ here   rankicir   =   rankic   /   np   .   std   (   df   .   rankic   )   *   (   cls   .   freq _ ctrl   .   counts _ one _ year   * *   (   0.5   ) )   return   pd   .   DataFrame   (   {   \" IC \"   :   [   ic   ] ,   \" ICIR \"   :   [   icir   ] ,   \" RankIC \"   :   [   rankic   ] ,   \" RankICIR \"   :   [   rankicir   ] } ,   index   =   [   \" \u8bc4\u4ef7 \u6307\u6807 \"   ] ,   )   def   get _ ic _ icir _ and _ rank   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR \" \" \"   df1   =   df   .   groupby   (   \" date \"   )   .   apply   (   cls   .   get _ ic _ rankic   )   cls   .   ics   =   df1   .   ic   cls   .   rankics   =   df1   .   rankic   cls   .   ics   =   cls   .   ics   .   reset _ index   (   drop   =   True   ,   level   =   1   )   .   to _ frame   ( )   cls   .   rankics   =   cls   .   rankics   .   reset _ index   (   drop   =   True   ,   level   =   1   )   .   to _ frame   ( )   df2   =   cls   .   get _ icir _ rankicir   (   df1   )   df2   =   df2   .   T   dura   =   (   df   .   date   .   max   ( )   -   df   .   date   .   min   ( ) )   .   days   /   365   t _ value   =   df2   .   iloc   [   3   ,   0   ]   *   (   dura   * *   (   1   /   2   ) )   df3   =   pd   .   DataFrame   ( {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   t _ value   ] } ,   index   =   [   \" RankIC . t \"   ] )   df4   =   pd   .   concat   ( [   df2   ,   df3   ] )   return   df4   @ classmethod   def   get _ groups   (   cls   ,   df   ,   groups _ num   ) :   \" \" \" \u4f9d\u636e \u56e0\u5b50 \u503c \uff0c \u5224\u65ad \u662f \u5728 \u7b2c \u51e0\u7ec4 \" \" \"   if   \" group \"   in   list   (   df   .   columns   ) :   df   =   df   .   drop   (   columns   =   [   \" group \"   ] )   df   =   df   .   sort _ values   ( [   \" fac \"   ] ,   ascending   =   True   )   each _ group   =   round   (   df   .   shape   [   0   ]   /   groups _ num   )   l   =   list   (   map   (   lambda   x   ,   y   :   [   x   ]   *   y   ,   list   (   range   (   1   ,   groups _ num   +   1   ) ) ,   [   each _ group   ]   *   groups _ num   ,   )   )   l   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   l   )   if   len   (   l   )   <   df   .   shape   [   0   ] :   l   =   l   +   [   groups _ num   ]   *   (   df   .   shape   [   0   ]   -   len   (   l   ) )   l   =   l   [ :   df   .   shape   [   0   ] ]   df   .   insert   (   0   ,   \" group \"   ,   l   )   return   df   @ classmethod   def   limit _ old _ to _ new   (   cls   ,   limit   ,   data   ) :   \" \" \" \u83b7\u53d6 \u8dcc\u505c \u80a1\u5728 \u65e7 \u6708 \u7684 \u7ec4\u53f7 \uff0c \u7136\u540e \u5c06 \u65e5\u671f \u8c03\u6574 \u5230 \u65b0\u6708 \u91cc   \u6da8\u505c \u80a1\u5219 \u83b7\u5f97 \u65b0\u6708 \u91cc \u6da8\u505c \u80a1 \u7684 \u4ee3\u7801 \u548c \u65f6\u95f4 \uff0c \u7136\u540e \u76f4\u63a5 \u5220\u53bb \" \" \"   data1   =   data   .   copy   ( )   data1   =   data1   .   reset _ index   ( )   data1   .   columns   =   [   \" data _ index \"   ]   +   list   (   data1   .   columns   ) [   1   : ]   old   =   pd   .   merge   (   limit   ,   data1   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ] )   old   =   old   .   set _ index   (   \" data _ index \"   )   old   =   old   [ [   \" group \"   ,   \" date \"   ,   \" code \"   ] ]   #   week _ here   old   .   date   =   list   (   map   (   cls   .   freq _ ctrl   .   next _ end   ,   list   (   old   .   date   ) ) )   return   old   def   get _ data   (   self   ,   groups _ num   ) :   \" \" \" \u62fc\u63a5 \u56e0\u5b50 \u6570\u636e \u548c \u6bcf\u6708 \u6536\u76ca \u6536\u76ca\u7387 \u6570\u636e \uff0c \u5e76 \u5bf9 \u6da8\u505c \u548c \u8dcc\u505c \u80a1 \u52a0\u4ee5 \u5904\u7406 \" \" \"   self   .   data   =   pd   .   merge   (   self   .   rets _ monthly   ,   self   .   factors   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   ic _ icir _ and _ rank   =   self   .   get _ ic _ icir _ and _ rank   (   self   .   data   )   self   .   data   =   self   .   data   .   groupby   (   \" date \"   )   .   apply   (   lambda   x   :   self   .   get _ groups   (   x   ,   groups _ num   )   )   self   .   wind _ out   =   self   .   data   .   copy   ( )   self   .   factor _ turnover _ rates   =   self   .   data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" group \"   )   rates   =   [ ]   for   i   in   range   (   1   ,   groups _ num   +   1   ) :   son   =   (   self   .   factor _ turnover _ rates   = =   i   )   +   0   son1   =   son   .   diff   ( )   #   self . factor _ turnover _ rates   =   self . factor _ turnover _ rates . diff ( )   change   =   ( (   np   .   abs   (   np   .   sign   (   son1   ) )   = =   1   )   +   0   )   .   sum   (   axis   =   1   )   still   =   ( ( (   son1   = =   0   )   +   0   )   *   son   )   .   sum   (   axis   =   1   )   rate   =   change   /   (   change   +   still   )   rates   .   append   (   rate   .   to _ frame   (   f   \" group   {   i   }   \"   ) )   rates   =   pd   .   concat   (   rates   ,   axis   =   1   )   .   fillna   (   0   )   self   .   factor _ turnover _ rates   =   rates   self   .   data   =   self   .   data   .   reset _ index   (   drop   =   True   )   limit _ ups _ object   =   self   .   limit _ old _ to _ new   (   self   .   limit _ ups   ,   self   .   data   )   limit _ downs _ object   =   self   .   limit _ old _ to _ new   (   self   .   limit _ downs   ,   self   .   data   )   self   .   data   =   self   .   data   .   drop   (   limit _ ups _ object   .   index   )   rets _ monthly _ limit _ downs   =   pd   .   merge   (   self   .   rets _ monthly   ,   limit _ downs _ object   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   data   =   pd   .   concat   ( [   self   .   data   ,   rets _ monthly _ limit _ downs   ] )   def   make _ start _ to _ one   (   self   ,   l   ) :   \" \" \" \u8ba9 \u51c0\u503c \u5e8f\u5217 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6570 \u53d8\u6210 1 \" \" \"   min _ date   =   self   .   factors   .   date   .   min   ( )   add _ date   =   min _ date   -   relativedelta   (   days   =   min _ date   .   day   )   add _ l   =   pd   .   Series   ( [   1   ] ,   index   =   [   add _ date   ] )   l   =   pd   .   concat   ( [   add _ l   ,   l   ] )   return   l   def   to _ group _ ret   (   self   ,   l   ) :   \" \" \" \u6bcf \u4e00\u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \" \" \"   #   week _ here   ret   =   l   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   l   ) )   -   1   return   ret   def   get _ group _ rets _ net _ values   (   self   ,   groups _ num   =   10   ,   value _ weighted   =   False   ,   trade _ cost _ double _ side   =   0   ) :   \" \" \" \u8ba1\u7b97 \u7ec4\u5185 \u6bcf \u4e00\u671f \u7684 \u5e73\u5747 \u6536\u76ca \uff0c \u751f\u6210 \u6bcf\u65e5 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \" \" \"   if   value _ weighted   :   cap _ value   =   self   .   capital   .   copy   ( )   #   week _ here   cap _ value   =   cap _ value   .   resample   (   self   .   freq   )   .   last   ( )   .   shift   (   1   )   cap _ value   =   cap _ value   *   self   .   tris _ monthly   #   cap _ value = np . log ( cap _ value )   cap _ value   =   cap _ value   .   stack   ( )   .   reset _ index   ( )   cap _ value   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap _ value \"   ]   self   .   data   =   pd   .   merge   (   self   .   data   ,   cap _ value   ,   on   =   [   \" date \"   ,   \" code \"   ] )   def   in _ g   (   df   ) :   df   .   cap _ value   =   df   .   cap _ value   /   df   .   cap _ value   .   sum   ( )   df   .   ret   =   df   .   ret   *   df   .   cap _ value   return   df   .   ret   .   sum   ( )   self   .   group _ rets   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   in _ g   )   self   .   rets _ all   =   self   .   data   .   groupby   ( [   \" date \"   ] )   .   apply   (   in _ g   )   self   .   group _ rets _ std   =   \" \u5e02\u503c \u52a0\u6743 \u6682\u672a \u8bbe\u7f6e \u8be5 \u529f\u80fd \uff0c \u656c\u8bf7 \u671f\u5f85 \u656c\u8bf7\u671f\u5f85 \ud83c\udf19 \"   else   :   self   .   group _ rets   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   lambda   x   :   x   .   ret   .   mean   ( )   )   self   .   rets _ all   =   self   .   data   .   groupby   ( [   \" date \"   ] )   .   apply   (   lambda   x   :   x   .   ret   .   mean   ( ) )   self   .   group _ rets _ stds   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   ret   .   std   ( )   self   .   group _ rets _ std   =   (   self   .   group _ rets _ stds   .   reset _ index   ( )   .   groupby   (   \" group \"   )   .   mean   ( )   )   self   .   group _ rets _ skews   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   ret   .   skew   ( )   self   .   group _ rets _ skew   =   (   self   .   group _ rets _ skews   .   reset _ index   ( )   .   groupby   (   \" group \"   )   .   mean   ( )   )   #   dropna \u56e0\u4e3a \u662f\u56e0\u4e3a \u5982\u679c \u80a1\u7968 \u884c\u60c5 \u80a1\u7968\u884c\u60c5 \u6570\u636e \u6bd4 \u56e0\u5b50 \u6570\u636e \u7684 \u622a\u6b62 \u65e5\u671f \u665a \uff0c \u800c \u6700\u540e \u4e00\u4e2a \u4e00\u4e2a\u6708 \u53d1\u751f \u6708\u521d \u8dcc\u505c \u65f6 \uff0c \u4f1a \u9020\u6210 \u6700\u540e \u67d0\u7ec4 \u591a\u51fa \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7684 \u6570\u636e   self   .   group _ rets   =   self   .   group _ rets   .   unstack   ( )   self   .   group _ rets   =   self   .   group _ rets   [   self   .   group _ rets   .   index   < =   self   .   factors   .   date   .   max   ( )   ]   self   .   group _ rets   .   columns   =   list   (   map   (   str   ,   list   (   self   .   group _ rets   .   columns   ) ) )   self   .   group _ rets   =   self   .   group _ rets   .   add _ prefix   (   \" group \"   )   self   .   group _ rets   =   (   self   .   group _ rets   -   self   .   factor _ turnover _ rates   *   trade _ cost _ double _ side   )   self   .   rets _ all   =   (   self   .   rets _ all   -   self   .   factor _ turnover _ rates   .   mean   (   axis   =   1   )   *   trade _ cost _ double _ side   )   .   dropna   ( )   self   .   long _ short _ rets   =   (   self   .   group _ rets   [   \" group1 \"   ]   -   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   )   self   .   inner _ rets _ long   =   self   .   group _ rets   .   group1   -   self   .   rets _ all   self   .   inner _ rets _ short   =   (   self   .   rets _ all   -   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   )   self   .   long _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   long _ short _ rets   +   1   )   .   cumprod   ( )   )   if   self   .   long _ short _ net _ values   [   -   1   ]   < =   self   .   long _ short _ net _ values   [   0   ] :   self   .   long _ short _ rets   =   (   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   -   self   .   group _ rets   [   \" group1 \"   ]   )   self   .   long _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   long _ short _ rets   +   1   )   .   cumprod   ( )   )   self   .   inner _ rets _ long   =   (   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   -   self   .   rets _ all   )   self   .   inner _ rets _ short   =   self   .   rets _ all   -   self   .   group _ rets   .   group1   self   .   inner _ long _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   inner _ rets _ long   +   1   )   .   cumprod   ( )   )   self   .   inner _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   inner _ rets _ short   +   1   )   .   cumprod   ( )   )   self   .   group _ rets   =   self   .   group _ rets   .   assign   (   long _ short   =   self   .   long _ short _ rets   )   self   .   group _ net _ values   =   self   .   group _ rets   .   applymap   (   lambda   x   :   x   +   1   )   self   .   group _ net _ values   =   self   .   group _ net _ values   .   cumprod   ( )   self   .   group _ net _ values   =   self   .   group _ net _ values   .   apply   (   self   .   make _ start _ to _ one   )   a   =   groups _ num   * *   (   0.5   )   #   \u5224\u65ad \u662f\u5426 \u8981 \u4e24\u4e2a \u56e0\u5b50 \u753b\u8868 \u8868\u683c \u753b\u8868\u683c   if   a   = =   int   (   a   ) :   self   .   square _ rets   =   (   self   .   group _ net _ values   .   iloc   [ : ,   :   -   1   ]   .   apply   (   self   .   to _ group _ ret   )   .   to _ numpy   ( )   )   self   .   square _ rets   =   self   .   square _ rets   .   reshape   ( (   int   (   a   ) ,   int   (   a   ) ) )   self   .   square _ rets   =   pd   .   DataFrame   (   self   .   square _ rets   ,   columns   =   list   (   range   (   1   ,   int   (   a   )   +   1   ) ) ,   index   =   list   (   range   (   1   ,   int   (   a   )   +   1   ) ) ,   )   print   (   \" \u8fd9\u662f self . square _ rets \"   ,   self   .   square _ rets   )   def   get _ long _ short _ comments   (   self   ,   on _ paper   =   False   ) :   \" \" \" \u8ba1\u7b97 \u591a\u7a7a \u5bf9\u51b2 \u7684 \u76f8\u5173 \u8bc4\u4ef7 \u6307\u6807   \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \" \" \"   #   week _ here   self   .   long _ short _ ret _ yearly   =   (   self   .   long _ short _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   long _ short _ net _ values   ) )   -   1   )   self   .   inner _ long _ ret _ yearly   =   (   self   .   inner _ long _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   inner _ long _ net _ values   ) )   -   1   )   self   .   inner _ short _ ret _ yearly   =   (   self   .   inner _ short _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   inner _ short _ net _ values   ) )   -   1   )   #   week _ here   self   .   long _ short _ vol _ yearly   =   np   .   std   (   self   .   long _ short _ rets   )   *   (   self   .   freq _ ctrl   .   counts _ one _ year   * *   0.5   )   self   .   long _ short _ info _ ratio   =   (   self   .   long _ short _ ret _ yearly   /   self   .   long _ short _ vol _ yearly   )   self   .   long _ short _ win _ times   =   len   (   self   .   long _ short _ rets   [   self   .   long _ short _ rets   >   0   ] )   self   .   long _ short _ win _ ratio   =   self   .   long _ short _ win _ times   /   len   (   self   .   long _ short _ rets   )   self   .   max _ retreat   =   -   (   self   .   long _ short _ net _ values   /   self   .   long _ short _ net _ values   .   expanding   (   1   )   .   max   ( )   -   1   )   .   min   ( )   if   on _ paper   :   self   .   long _ short _ comments   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   long _ short _ ret _ yearly   ,   self   .   long _ short _ vol _ yearly   ,   self   .   long _ short _ info _ ratio   ,   self   .   long _ short _ win _ ratio   ,   self   .   max _ retreat   ,   ]   } ,   #   week _ here   index   =   [   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u6536\u76ca \u6ce2\u52a8 \u6bd4 \"   ,   f   \"   {   self   .   freq _ ctrl   .   comment _ name   }   \u5ea6 \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ,   ] ,   )   else   :   self   .   long _ short _ comments   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   long _ short _ ret _ yearly   ,   self   .   long _ short _ vol _ yearly   ,   self   .   long _ short _ info _ ratio   ,   self   .   long _ short _ win _ ratio   ,   self   .   max _ retreat   ,   ]   } ,   #   week _ here   index   =   [   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u4fe1\u606f \u6bd4\u7387 \"   ,   f   \"   {   self   .   freq _ ctrl   .   comment _ name   }   \u5ea6 \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ,   ] ,   )   def   get _ total _ comments   (   self   ,   groups _ num   ) :   \" \" \" \u7efc\u5408 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR , \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \" \" \"   rankic   =   self   .   rankics   .   mean   ( )   rankic _ win   =   self   .   rankics   [   self   .   rankics   *   rankic   >   0   ]   rankic _ win _ ratio   =   rankic _ win   .   dropna   ( )   .   shape   [   0   ]   /   self   .   rankics   .   dropna   ( )   .   shape   [   0   ]   self   .   factor _ cross _ skew _ after _ neu   =   self   .   __ factors _ out   .   skew   (   axis   =   1   )   .   mean   ( )   if   self   .   ic _ icir _ and _ rank   .   iloc   [   2   ,   0   ]   >   0   :   self   .   factor _ turnover _ rate   =   self   .   factor _ turnover _ rates   [   f   \" group   {   groups _ num   }   \"   ]   .   mean   ( )   else   :   self   .   factor _ turnover _ rate   =   self   .   factor _ turnover _ rates   [   \" group1 \"   ]   .   mean   ( )   self   .   total _ comments   =   pd   .   concat   (   [   self   .   ic _ icir _ and _ rank   ,   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   rankic _ win _ ratio   ] } ,   index   =   [   \" RankIC \u80dc\u7387 \"   ] ,   ) ,   self   .   long _ short _ comments   ,   #   week _ here   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   factor _ turnover _ rate   ,   self   .   factor _ cover   ,   self   .   pos _ neg _ rate   ,   self   .   factor _ cross _ skew   ,   self   .   inner _ long _ ret _ yearly   ,   self   .   inner _ long _ ret _ yearly   /   (   self   .   inner _ long _ ret _ yearly   +   self   .   inner _ short _ ret _ yearly   ) ,   self   .   corr _ itself   ,   ]   } ,   index   =   [   f   \" \u591a\u5934   {   self   .   freq _ ctrl   .   comment _ name   }   \u5747 \u6362\u624b \"   ,   \" \u56e0\u5b50 \u8986\u76d6 \u8986\u76d6\u7387 \"   ,   \" \u56e0\u5b50 \u6b63\u503c \u5360 \u6bd4 \"   ,   \" \u56e0\u5b50 \u622a\u9762 \u504f\u5ea6 \"   ,   \" \u591a\u5934 \u8d85\u5747 \u6536\u76ca \"   ,   \" \u591a\u5934 \u6536\u76ca \u5360 \u6bd4 \"   ,   \" \u4e00\u9636\u81ea \u76f8\u5173 \u76f8\u5173\u6027 \"   ,   ] ,   ) ,   ]   )   self   .   group _ mean _ rets _ monthly   =   self   .   group _ rets   .   drop   (   columns   =   [   ' long _ short '   ] )   .   mean   ( )   self   .   group _ mean _ rets _ monthly   =   self   .   group _ mean _ rets _ monthly   -   self   .   group _ mean _ rets _ monthly   .   mean   ( )   def   plot _ net _ values   (   self   ,   y2   ,   filename   ,   iplot   =   1   ,   ilegend   =   1   ,   without _ breakpoint   =   0   ) :   \" \" \" \u4f7f\u7528 matplotlib \u6765 \u753b\u56fe \uff0c y2 \u4e3a \u662f\u5426 \u5bf9\u591a\u7a7a \u7ec4\u5408 \u91c7\u7528 \u53cc y \u8f74 \" \" \"   if   not   iplot   :   fig   ,   ax   =   plt   .   subplots   (   nrows   =   1   ,   ncols   =   3   ,   figsize   =   (   33   ,   8   ) )   self   .   group _ net _ values   .   plot   (   secondary _ y   =   y2   ,   rot   =   60   ,   ax   =   ax   [   0   ] )   self   .   group _ net _ values   .   plot   (   secondary _ y   =   y2   ,   ax   =   ax   [   0   ] )   b   =   self   .   rankics   .   copy   ( )   b   .   index   =   [   int   (   i   .   year   )   if   i   .   month   = =   1   else   \" \"   for   i   in   list   (   b   .   index   ) ]   b   .   plot   (   kind   =   \" bar \"   ,   rot   =   60   ,   ax   =   ax   [   1   ] )   self   .   factor _ cross _ stds   .   plot   (   rot   =   60   ,   ax   =   ax   [   2   ] )   filename _ path   =   filename   +   \" . png \"   if   not   STATES   [   \" NO _ SAVE \"   ] :   plt   .   savefig   (   filename _ path   )   else   :   tris   =   self   .   group _ net _ values   if   without _ breakpoint   :   tris   =   tris   .   dropna   ( )   figs   =   cf   .   figures   (   tris   ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   group _ net _ values   .   columns   ) ) ,   #   dict ( kind = \" bar \" ,   y = \" \u5404\u7ec4 \u6708\u5747 \u8d85\u5747 \u6536\u76ca \" ) ,   #   dict ( kind = \" bar \" ,   y = \" rankic \" ) ,   ] ,   asList   =   True   ,   )   comments   =   (   self   .   total _ comments   .   applymap   (   lambda   x   :   round   (   x   ,   4   ) )   .   rename   (   index   =   {   \" RankIC \u5747\u503c t \u503c \"   :   \" RankIC . t \"   } )   .   reset _ index   ( )   )   here   =   pd   .   concat   (   [   comments   .   iloc   [ :   6   ,   : ]   .   reset _ index   (   drop   =   True   ) ,   comments   .   iloc   [   6   :   12   ,   : ]   .   reset _ index   (   drop   =   True   ) ,   comments   .   iloc   [   12   : ,   : ]   .   reset _ index   (   drop   =   True   ) ,   ] ,   axis   =   1   ,   )   here   .   columns   =   [   \" \u4fe1\u606f \u7cfb\u6570 \"   ,   \" \u7ed3\u679c \"   ,   \" \u7ee9\u6548 \u6307\u6807 \"   ,   \" \u7ed3\u679c \"   ,   \" \u5176\u4ed6 \u6307\u6807 \"   ,   \" \u7ed3\u679c \"   ]   #   here = here . to _ numpy ( ) . tolist ( ) + [ [ ' \u4fe1\u606f \u7cfb\u6570 ' , ' \u7ed3\u679c ' , ' \u7ee9\u6548 \u6307\u6807 ' , ' \u7ed3\u679c ' ] ]   table   =   FF   .   create _ table   (   here   .   iloc   [ : :   -   1   ] )   table   .   update _ yaxes   (   matches   =   None   )   pic2   =   go   .   Figure   (   go   .   Bar   (   y   =   list   (   self   .   group _ mean _ rets _ monthly   ) ,   x   =   [   i   .   replace   (   ' roup '   ,   ' '   )   for   i   in   list   (   self   .   group _ mean _ rets _ monthly   .   index   ) ] ) )   #   table = go . Figure ( [ go . Table ( header = dict ( values = list ( here . columns ) ) , cells = dict ( values = here . to _ numpy ( ) . tolist ( ) ) ) ] )   pic3 _ data   =   go   .   Bar   (   y   =   list   (   self   .   rankics   .   rankic   ) ,   x   =   list   (   self   .   rankics   .   index   ) )   pic3   =   go   .   Figure   (   data   =   [   pic3 _ data   ] )   pic4 _ data   =   go   .   Line   (   y   =   list   (   self   .   rankics   .   rankic   .   cumsum   ( ) ) ,   x   =   list   (   self   .   rankics   .   index   ) ,   name   =   ' y2 '   ,   yaxis   =   ' y2 '   )   pic4 _ layout   =   go   .   Layout   (   yaxis2   =   dict   (   title   =   ' y2 '   ,   side   =   ' right '   ) )   pic4   =   go   .   Figure   (   data   =   [   pic4 _ data   ] ,   layout   =   pic4 _ layout   )   figs   .   append   (   table   )   figs   =   [   figs   [   -   1   ] ]   +   figs   [ :   -   1   ]   figs   .   append   (   pic2   )   figs   =   [   figs   [   0   ] ,   figs   [   1   ] ,   figs   [   -   1   ] ,   pic3   ]   figs   [   1   ]   .   update _ layout   (   legend   =   dict   (   yanchor   =   \" top \"   ,   y   =   0.99   ,   xanchor   =   \" left \"   ,   x   =   0.01   )   )   figs   [   3   ]   .   update _ layout   (   yaxis2   =   dict   (   title   =   ' y2 '   ,   side   =   ' right '   ) )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   2   ,   11   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   specs   =   [   [   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" colspan \"   :   3   } ,   None   ,   None   ,   ] ,   [   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   {   \" colspan \"   :   3   } ,   None   ,   None   ,   ] ,   ] ,   subplot _ titles   =   [   \" \u51c0\u503c \u66f2\u7ebf \"   ,   \" \u5404\u7ec4 \u6708\u5747 \u8d85\u5747 \u6536\u76ca \"   ,   \" Rank   IC \u65f6\u5e8f \u56fe \"   ,   \" \u7ee9\u6548 \u6307\u6807 \"   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   ilegend   )   #   los = sp [ ' layout ' ] [ ' annotations ' ]   #   los [ 0 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 1 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 2 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 3 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ - 1 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 2 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 3 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 4 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ 0 ] [ ' text ' ] = los [ 0 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 1 ] [ ' text ' ] = los [ 1 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 2 ] [ ' text ' ] = los [ 2 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 3 ] [ ' text ' ] = los [ 3 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ - 1 ] [ ' text ' ] = ' < b > ' + los [ - 1 ] [ ' text ' ] + ' < / b > '   #   los [ - 2 ] [ ' text ' ] = ' < b > ' + los [ - 2 ] [ ' text ' ] + ' < / b > '   #   los [ - 3 ] [ ' text ' ] = ' < b > ' + los [ - 3 ] [ ' text ' ] + ' < / b > '   #   los [ - 4 ] [ ' text ' ] = ' < b > ' + los [ - 4 ] [ ' text ' ] + ' < / b > '   #   sp [ ' layout ' ] [ ' annotations ' ] = los   #   print ( sp [ ' layout ' ] [ ' annotations ' ] )   #   sp [ ' layout ' ] [ ' annotations ' ] [ 0 ] [ ' yanchor ' ] = ' top '   cf   .   iplot   (   sp   )   #   tris = pd . concat ( [ self . group _ net _ values , self . rankics , self . factor _ turnover _ rates ] , axis = 1 ) . rename ( columns = { 0 : ' turnover _ rate ' } )   #   sp = plyoo . make _ subplots ( rows = 2 , cols = 8 , vertical _ spacing = . 15 , horizontal _ spacing = . 03 ,   #   specs = [ [ { ' rowspan ' : 2 , ' colspan ' : 2 , ' type ' : ' domain ' } , None , { ' rowspan ' : 2 , ' colspan ' : 4 , ' type ' : ' xy ' } , None , None , None , { ' colspan ' : 2 , ' type ' : ' xy ' } , None ] ,   #   [ None , None , None , None , None , None , { ' colspan ' : 2 , ' type ' : ' xy ' } , None ] ] ,   #   subplot _ titles = [ ' \u51c0\u503c \u66f2\u7ebf ' , ' Rank   IC \u65f6\u5e8f \u56fe ' , ' \u6708 \u6362\u624b \u6362\u624b\u7387 ' , ' \u7ee9\u6548 \u6307\u6807 ' ] )   #   comments = self . total _ comments . applymap ( lambda   x : round ( x , 4 ) ) . rename ( index = { ' RankIC \u5747\u503c t \u503c ' : ' RankIC . t ' } ) . reset _ index ( )   #   here = pd . concat ( [ comments . iloc [ : 5 , : ] . reset _ index ( drop = True ) , comments . iloc [ 5 : , : ] . reset _ index ( drop = True ) ] , axis = 1 )   #   here . columns = [ ' \u4fe1\u606f \u7cfb\u6570 ' , ' \u7ed3\u679c ' , ' \u7ee9\u6548 \u6307\u6807 ' , ' \u7ed3\u679c ' ]   #   table = FF . create _ table ( here )   #   sp . add _ trace ( table )   def   plotly _ net _ values   (   self   ,   filename   ) :   \" \" \" \u4f7f\u7528 plotly . express \u753b\u56fe \" \" \"   fig   =   pe   .   line   (   self   .   group _ net _ values   )   filename _ path   =   filename   +   \" . html \"   pio   .   write _ html   (   fig   ,   filename _ path   ,   auto _ open   =   True   )   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   prerpare   (   cls   ) :   \" \" \" \u901a\u7528 \u6570\u636e \u51c6\u5907 \" \" \"   cls   .   judge _ month   ( )   cls   .   get _ rets _ month   ( )   def   run   (   self   ,   groups _ num   =   10   ,   neutralize   =   False   ,   boxcox   =   False   ,   trade _ cost _ double _ side   =   0   ,   value _ weighted   =   False   ,   y2   =   False   ,   plt _ plot   =   True   ,   plotly _ plot   =   False   ,   filename   =   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   ,   print _ comments   =   True   ,   comments _ writer   =   None   ,   net _ values _ writer   =   None   ,   rets _ writer   =   None   ,   comments _ sheetname   =   None   ,   net _ values _ sheetname   =   None   ,   rets _ sheetname   =   None   ,   on _ paper   =   False   ,   sheetname   =   None   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ,   iplot   =   1   ,   ilegend   =   0   ,   without _ breakpoint   =   0   ,   beauty _ comments   =   0   ,   ) :   \" \" \" \u8fd0\u884c \u56de\u6d4b \u90e8\u5206 \" \" \"   if   comments _ writer   and   not   (   comments _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a total _ comments \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   net _ values _ writer   and   not   (   net _ values _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a group _ net _ values \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   rets _ writer   and   not   (   rets _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a group _ rets \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   neutralize   :   self   .   get _ log _ cap   ( )   self   .   get _ neutral _ factors   (   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   )   self   .   deal _ with _ factors _ after _ neutralize   ( )   elif   boxcox   :   self   .   get _ log _ cap   (   boxcox   =   True   )   self   .   get _ neutral _ factors   (   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   only _ cap   =   only _ cap   ,   )   self   .   deal _ with _ factors _ after _ neutralize   ( )   else   :   self   .   deal _ with _ factors   ( )   self   .   get _ limit _ ups _ downs   ( )   self   .   get _ data   (   groups _ num   )   self   .   get _ group _ rets _ net _ values   (   groups _ num   =   groups _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   )   self   .   get _ long _ short _ comments   (   on _ paper   =   on _ paper   )   self   .   get _ total _ comments   (   groups _ num   =   groups _ num   )   if   on _ paper   :   group1 _ ttest   =   ss   .   ttest _ 1samp   (   self   .   group _ rets   .   group1   ,   0   )   .   pvalue   group10 _ ttest   =   ss   .   ttest _ 1samp   (   self   .   group _ rets   [   f   \" group   {   groups _ num   }   \"   ] ,   0   )   .   pvalue   group _ long _ short _ ttest   =   ss   .   ttest _ 1samp   (   self   .   long _ short _ rets   ,   0   )   .   pvalue   group1 _ ret   =   self   .   group _ rets   .   group1   .   mean   ( )   group10 _ ret   =   self   .   group _ rets   [   f   \" group   {   groups _ num   }   \"   ]   .   mean   ( )   group _ long _ short _ ret   =   self   .   long _ short _ rets   .   mean   ( )   papers   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   group1 _ ttest   ,   group10 _ ttest   ,   group _ long _ short _ ttest   ,   group1 _ ret   ,   group10 _ ret   ,   group _ long _ short _ ret   ,   ]   } ,   index   =   [   \" \u5206\u7ec4 1p \u503c \"   ,   f   \" \u5206\u7ec4   {   groups _ num   }   p \u503c \"   ,   f   \" \u5206\u7ec4 1 - \u5206\u7ec4   {   groups _ num   }   p \u503c \"   ,   \" \u5206\u7ec4 1 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   f   \" \u5206\u7ec4   {   groups _ num   }   \u6536\u76ca \u6536\u76ca\u7387 \"   ,   f   \" \u5206\u7ec4 1 - \u5206\u7ec4   {   groups _ num   }   \u6536\u76ca \u6536\u76ca\u7387 \"   ,   ] ,   )   self   .   total _ comments   =   pd   .   concat   ( [   papers   ,   self   .   total _ comments   ] )   if   plt _ plot   :   if   not   STATES   [   \" NO _ PLOT \"   ] :   if   filename   :   self   .   plot _ net _ values   (   y2   =   y2   ,   filename   =   filename   ,   iplot   =   iplot   ,   ilegend   =   bool   (   ilegend   ) ,   without _ breakpoint   =   without _ breakpoint   ,   )   else   :   self   .   plot _ net _ values   (   y2   =   y2   ,   filename   =   self   .   factors _ file   .   split   (   \" . \"   ) [   -   2   ]   .   split   (   \" / \"   ) [   -   1   ]   +   str   (   groups _ num   )   +   \" \u5206\u7ec4 \"   ,   iplot   =   iplot   ,   ilegend   =   bool   (   ilegend   ) ,   without _ breakpoint   =   without _ breakpoint   ,   )   plt   .   show   ( )   if   plotly _ plot   :   if   not   STATES   [   \" NO _ PLOT \"   ] :   if   filename   :   self   .   plotly _ net _ values   (   filename   =   filename   )   else   :   self   .   plotly _ net _ values   (   filename   =   self   .   factors _ file   .   split   (   \" . \"   ) [   -   2   ]   .   split   (   \" / \"   ) [   -   1   ]   +   str   (   groups _ num   )   +   \" \u5206\u7ec4 \"   )   if   print _ comments   :   if   not   STATES   [   \" NO _ COMMENT \"   ] :   tb   =   Texttable   ( )   tb   .   set _ cols _ width   (   [   8   ]   *   5   +   [   9   ]   +   [   8   ]   *   2   +   [   7   ]   *   2   +   [   8   ]   +   [   8   ]   +   [   9   ]   +   [   10   ]   *   5   )   tb   .   set _ cols _ dtype   ( [   \" f \"   ]   *   18   )   tb   .   header   (   list   (   self   .   total _ comments   .   T   .   columns   ) )   tb   .   add _ rows   (   self   .   total _ comments   .   T   .   to _ numpy   ( ) ,   header   =   False   )   print   (   tb   .   draw   ( ) )   if   sheetname   :   if   comments _ writer   :   if   not   on _ paper   :   total _ comments   =   self   .   total _ comments   .   copy   ( )   tc   =   list   (   total _ comments   .   \u8bc4\u4ef7 \u6307\u6807   )   if   beauty _ comments   :   tc   [   0   ]   =   str   (   round   (   tc   [   0   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   1   ]   =   str   (   round   (   tc   [   1   ] ,   2   ) )   tc   [   2   ]   =   str   (   round   (   tc   [   2   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   3   ]   =   str   (   round   (   tc   [   3   ] ,   2   ) )   tc   [   4   ]   =   str   (   round   (   tc   [   4   ] ,   2   ) )   tc   [   5   ]   =   str   (   round   (   tc   [   5   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   6   ]   =   str   (   round   (   tc   [   6   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   7   ]   =   str   (   round   (   tc   [   7   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   8   ]   =   str   (   round   (   tc   [   8   ] ,   2   ) )   tc   [   9   ]   =   str   (   round   (   tc   [   9   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   10   ]   =   str   (   round   (   tc   [   10   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   11   ]   =   str   (   round   (   tc   [   11   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   12   ]   =   str   (   round   (   tc   [   12   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   13   ]   =   str   (   round   (   tc   [   13   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   14   ]   =   str   (   round   (   tc   [   14   ] ,   2   ) )   tc   [   15   ]   =   str   (   round   (   tc   [   15   ] ,   2   ) )   tc   [   16   ]   =   str   (   round   (   tc   [   16   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   17   ]   =   str   (   round   (   tc   [   17   ]   *   100   ,   2   ) )   +   \" % \"   tc   =   tc   +   list   (   self   .   group _ mean _ rets _ monthly   )   new _ total _ comments   =   pd   .   DataFrame   (   {   sheetname   :   tc   } ,   index   =   list   (   total _ comments   .   index   )   +   [   f   ' \u7b2c   {   i   }   \u7ec4 '   for   i   in   range   (   1   ,   groups _ num   +   1   ) ]   )   new _ total _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   rankic _ twins   =   pd   .   concat   ( [   self   .   rankics   .   rankic   ,   self   .   rankics   .   rankic   .   cumsum   ( ) ] ,   axis   =   1   )   rankic _ twins   .   columns   =   [   ' RankIC '   ,   ' RankIC \u7d2f\u79ef '   ]   rankic _ twins   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   +   ' RankIC '   )   else   :   self   .   total _ comments   .   rename   (   columns   =   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   sheetname   } )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   if   net _ values _ writer   :   groups _ net _ values   =   self   .   group _ net _ values   .   copy   ( )   groups _ net _ values   .   index   =   groups _ net _ values   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   groups _ net _ values   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   groups _ net _ values   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   groups _ net _ values   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   sheetname   )   if   rets _ writer   :   group _ rets   =   self   .   group _ rets   .   copy   ( )   group _ rets   .   index   =   group _ rets   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   group _ rets   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   group _ rets   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   group _ rets   .   to _ excel   (   rets _ writer   ,   sheet _ name   =   sheetname   )   else   :   if   comments _ writer   and   comments _ sheetname   :   total _ comments   =   self   .   total _ comments   .   copy   ( )   tc   =   list   (   total _ comments   .   \u8bc4\u4ef7 \u6307\u6807   )   tc   [   0   ]   =   str   (   round   (   tc   [   0   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   1   ]   =   str   (   round   (   tc   [   1   ] ,   2   ) )   tc   [   2   ]   =   str   (   round   (   tc   [   2   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   3   ]   =   str   (   round   (   tc   [   3   ] ,   2   ) )   tc   [   4   ]   =   str   (   round   (   tc   [   4   ] ,   2   ) )   tc   [   5   ]   =   str   (   round   (   tc   [   5   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   6   ]   =   str   (   round   (   tc   [   6   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   7   ]   =   str   (   round   (   tc   [   7   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   8   ]   =   str   (   round   (   tc   [   8   ] ,   2   ) )   tc   [   9   ]   =   str   (   round   (   tc   [   9   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   10   ]   =   str   (   round   (   tc   [   10   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   11   ]   =   str   (   round   (   tc   [   11   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   12   ]   =   str   (   round   (   tc   [   12   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   13   ]   =   str   (   round   (   tc   [   13   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   14   ]   =   str   (   round   (   tc   [   14   ] ,   2   ) )   tc   [   15   ]   =   str   (   round   (   tc   [   15   ] ,   2   ) )   tc   [   16   ]   =   str   (   round   (   tc   [   16   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   17   ]   =   str   (   round   (   tc   [   17   ]   *   100   ,   2   ) )   +   \" % \"   new _ total _ comments   =   pd   .   DataFrame   (   {   comments _ sheetname   :   tc   } ,   index   =   total _ comments   .   index   )   new _ total _ comments   .   T   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   comments _ sheetname   )   if   net _ values _ writer   and   net _ values _ sheetname   :   groups _ net _ values   =   self   .   group _ net _ values   .   copy   ( )   groups _ net _ values   .   index   =   groups _ net _ values   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   groups _ net _ values   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   groups _ net _ values   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   groups _ net _ values   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   net _ values _ sheetname   )   if   rets _ writer   and   rets _ sheetname   :   group _ rets   =   self   .   group _ rets   .   copy   ( )   group _ rets   .   index   =   group _ rets   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   group _ rets   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   group _ rets   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   group _ rets   .   to _ excel   (   rets _ writer   ,   sheet _ name   =   rets _ sheetname   )","title":"pure _ moon"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.__call__","text":"\u8c03\u7528 \u5bf9\u8c61 \u5219 \u8fd4\u56de \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1586   1587   1588   def   __ call __   (   self   ) :   \" \" \" \u8c03\u7528 \u5bf9\u8c61 \u5219 \u8fd4\u56de \u56e0\u5b50 \u503c \" \" \"   return   self   .   factors _ out","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.daily_to_monthly","text":"\u628a \u65e5\u5ea6 \u7684 \u4ea4\u6613 \u72b6\u6001 \u3001 st \u3001 \u4e0a\u5e02 \u5929\u6570 \uff0c \u8f6c\u5316 \u4e3a \u6708\u5ea6 \u7684 \uff0c \u5e76 \u751f\u6210 \u80fd\u5426 \u4ea4\u6613 \u7684 \u5224\u65ad   \u8bfb\u53d6 \u672c\u5730 \u5df2\u7ecf \u7b97\u597d \u7684 \u6587\u4ef6 \uff0c \u5e76 \u8ffd\u52a0 \u65b0 \u7684 \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u90e8\u5206 \uff0c \u5982\u679c \u672c\u5730 \u6ca1\u6709 \u5c31 \u76f4\u63a5 \u5168\u90e8 \u91cd\u65b0 \u7b97   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1711   1712   1713   1714   1715   1716   1717   1718   1719   1720   1721   1722   1723   1724   1725   1726   1727   1728   1729   1730   1731   1732   1733   @ classmethod   def   daily _ to _ monthly   (   cls   ,   pridf   ,   path   ,   func   ) :   \" \" \" \u628a \u65e5\u5ea6 \u7684 \u4ea4\u6613 \u72b6\u6001 \u3001 st \u3001 \u4e0a\u5e02 \u5929\u6570 \uff0c \u8f6c\u5316 \u4e3a \u6708\u5ea6 \u7684 \uff0c \u5e76 \u751f\u6210 \u80fd\u5426 \u4ea4\u6613 \u7684 \u5224\u65ad   \u8bfb\u53d6 \u672c\u5730 \u5df2\u7ecf \u7b97\u597d \u7684 \u6587\u4ef6 \uff0c \u5e76 \u8ffd\u52a0 \u65b0 \u7684 \u65f6\u95f4 \u65f6\u95f4\u6bb5 \u90e8\u5206 \uff0c \u5982\u679c \u672c\u5730 \u6ca1\u6709 \u5c31 \u76f4\u63a5 \u5168\u90e8 \u91cd\u65b0 \u7b97 \" \" \"   try   :   month _ df   =   pd   .   read _ parquet   (   path   )   month _ df   =   cls   .   read _ add   (   pridf   ,   month _ df   ,   func   )   month _ df   .   to _ parquet   (   path   )   except   Exception   as   e   :   if   not   STATES   [   \" NO _ LOG \"   ] :   logger   .   error   (   \" error   occurs   when   read   state   files \"   )   logger   .   error   (   e   )   print   (   \" state   file   rewriting \u2026 \u2026 \"   )   #   week _ here   df _ 1   =   pridf   .   index   .   max   ( )   year   =   df _ 1   .   year   month   =   df _ 1   .   month   last   =   tt   .   date   .   get _ close   (   year   =   year   ,   m   =   month   )   .   pd _ date   ( )   if   not   (   last   = =   df _ 1   ) [   0   ] :   pridf   =   pridf   [   pridf   .   index   <   pd   .   Timestamp   (   year   =   year   ,   month   =   month   ,   day   =   1   ) ]   month _ df   =   pridf   .   resample   (   cls   .   freq   )   .   apply   (   func   )   month _ df   .   to _ parquet   (   path   )   return   month _ df","title":"daily _ to _ monthly ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.deal_with_factors","text":"\u5220\u9664 \u4e0d \u7b26\u5408 \u4ea4\u6613 \u6761\u4ef6 \u7684 \u56e0\u5b50 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1842   1843   1844   1845   1846   1847   1848   1849   1850   1851   def   deal _ with _ factors   (   self   ) :   \" \" \" \u5220\u9664 \u4e0d \u7b26\u5408 \u4ea4\u6613 \u6761\u4ef6 \u7684 \u56e0\u5b50 \u6570\u636e \" \" \"   self   .   __ factors _ out   =   self   .   factors   .   copy   ( )   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   =   self   .   factors   *   self   .   tris _ monthly   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]","title":"deal _ with _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.deal_with_factors_after_neutralize","text":"\u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u5904\u7406 \u65b9\u6cd5   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1853   1854   1855   1856   1857   1858   1859   1860   1861   1862   1863   1864   1865   def   deal _ with _ factors _ after _ neutralize   (   self   ) :   \" \" \" \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u5904\u7406 \u65b9\u6cd5 \" \" \"   self   .   factors   =   self   .   factors   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   self   .   factors   =   self   .   factors   .   unstack   ( )   self   .   __ factors _ out   =   self   .   factors   .   copy   ( )   self   .   __ factors _ out   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   __ factors _ out   .   columns   ) ]   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   .   columns   =   list   (   map   (   lambda   x   :   x   [   1   ] ,   list   (   self   .   factors   .   columns   ) ) )   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]","title":"deal _ with _ factors _ after _ neutralize ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.find_limit","text":"\u8ba1\u7b97 \u6da8\u8dcc \u8dcc\u5e45 \u6da8\u8dcc\u5e45 \u8d85\u8fc7 9.8% \u7684 \u80a1\u7968 \uff0c \u5e76 \u5c06 \u5176 \u5b58\u50a8 \u8fdb \u4e00\u4e2a \u957f \u5217\u8868 \u91cc   \u5176\u4e2d \u65f6\u95f4 \u5217 \uff0c \u4e3a \u67d0\u6708 \u7684 \u6700\u540e \u4e00\u5929 \uff1b \u6da8\u505c \u65e5 \u867d\u7136 \u4e3a \u4e0b\u6708 \u6708\u521d \u4e0b\u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \uff0c \u4f46 \u8fd9\u91cc \u6807\u6ce8 \u7684 \u65f6\u95f4 \u7edf\u4e00 \u4e3a \u4e0a \u6708 \u6700\u540e \u4e00\u5929   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1867   1868   1869   1870   1871   1872   1873   1874   1875   1876   1877   @ classmethod   def   find _ limit   (   cls   ,   df   ,   up   =   1   ) :   \" \" \" \u8ba1\u7b97 \u6da8\u8dcc \u8dcc\u5e45 \u6da8\u8dcc\u5e45 \u8d85\u8fc7 9.8% \u7684 \u80a1\u7968 \uff0c \u5e76 \u5c06 \u5176 \u5b58\u50a8 \u8fdb \u4e00\u4e2a \u957f \u5217\u8868 \u91cc   \u5176\u4e2d \u65f6\u95f4 \u5217 \uff0c \u4e3a \u67d0\u6708 \u7684 \u6700\u540e \u4e00\u5929 \uff1b \u6da8\u505c \u65e5 \u867d\u7136 \u4e3a \u4e0b\u6708 \u6708\u521d \u4e0b\u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \uff0c \u4f46 \u8fd9\u91cc \u6807\u6ce8 \u7684 \u65f6\u95f4 \u7edf\u4e00 \u4e3a \u4e0a \u6708 \u6700\u540e \u4e00\u5929 \" \" \"   limit _ df   =   np   .   sign   (   df   .   applymap   (   lambda   x   :   x   -   up   *   0.098   ) )   .   replace   (   -   1   *   up   ,   np   .   nan   )   limit _ df   =   limit _ df   .   stack   ( )   .   reset _ index   ( )   limit _ df   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" limit _ up _ signal \"   ]   limit _ df   =   limit _ df   [ [   \" date \"   ,   \" code \"   ] ]   return   limit _ df","title":"find _ limit ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_data","text":"\u62fc\u63a5 \u56e0\u5b50 \u6570\u636e \u548c \u6bcf\u6708 \u6536\u76ca \u6536\u76ca\u7387 \u6570\u636e \uff0c \u5e76 \u5bf9 \u6da8\u505c \u548c \u8dcc\u505c \u80a1 \u52a0\u4ee5 \u5904\u7406   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1968   1969   1970   1971   1972   1973   1974   1975   1976   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   1997   1998   1999   def   get _ data   (   self   ,   groups _ num   ) :   \" \" \" \u62fc\u63a5 \u56e0\u5b50 \u6570\u636e \u548c \u6bcf\u6708 \u6536\u76ca \u6536\u76ca\u7387 \u6570\u636e \uff0c \u5e76 \u5bf9 \u6da8\u505c \u548c \u8dcc\u505c \u80a1 \u52a0\u4ee5 \u5904\u7406 \" \" \"   self   .   data   =   pd   .   merge   (   self   .   rets _ monthly   ,   self   .   factors   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   ic _ icir _ and _ rank   =   self   .   get _ ic _ icir _ and _ rank   (   self   .   data   )   self   .   data   =   self   .   data   .   groupby   (   \" date \"   )   .   apply   (   lambda   x   :   self   .   get _ groups   (   x   ,   groups _ num   )   )   self   .   wind _ out   =   self   .   data   .   copy   ( )   self   .   factor _ turnover _ rates   =   self   .   data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" group \"   )   rates   =   [ ]   for   i   in   range   (   1   ,   groups _ num   +   1   ) :   son   =   (   self   .   factor _ turnover _ rates   = =   i   )   +   0   son1   =   son   .   diff   ( )   #   self . factor _ turnover _ rates   =   self . factor _ turnover _ rates . diff ( )   change   =   ( (   np   .   abs   (   np   .   sign   (   son1   ) )   = =   1   )   +   0   )   .   sum   (   axis   =   1   )   still   =   ( ( (   son1   = =   0   )   +   0   )   *   son   )   .   sum   (   axis   =   1   )   rate   =   change   /   (   change   +   still   )   rates   .   append   (   rate   .   to _ frame   (   f   \" group   {   i   }   \"   ) )   rates   =   pd   .   concat   (   rates   ,   axis   =   1   )   .   fillna   (   0   )   self   .   factor _ turnover _ rates   =   rates   self   .   data   =   self   .   data   .   reset _ index   (   drop   =   True   )   limit _ ups _ object   =   self   .   limit _ old _ to _ new   (   self   .   limit _ ups   ,   self   .   data   )   limit _ downs _ object   =   self   .   limit _ old _ to _ new   (   self   .   limit _ downs   ,   self   .   data   )   self   .   data   =   self   .   data   .   drop   (   limit _ ups _ object   .   index   )   rets _ monthly _ limit _ downs   =   pd   .   merge   (   self   .   rets _ monthly   ,   limit _ downs _ object   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   data   =   pd   .   concat   ( [   self   .   data   ,   rets _ monthly _ limit _ downs   ] )","title":"get _ data ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_group_rets_net_values","text":"\u8ba1\u7b97 \u7ec4\u5185 \u6bcf \u4e00\u671f \u7684 \u5e73\u5747 \u6536\u76ca \uff0c \u751f\u6210 \u6bcf\u65e5 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2015   2016   2017   2018   2019   2020   2021   2022   2023   2024   2025   2026   2027   2028   2029   2030   2031   2032   2033   2034   2035   2036   2037   2038   2039   2040   2041   2042   2043   2044   2045   2046   2047   2048   2049   2050   2051   2052   2053   2054   2055   2056   2057   2058   2059   2060   2061   2062   2063   2064   2065   2066   2067   2068   2069   2070   2071   2072   2073   2074   2075   2076   2077   2078   2079   2080   2081   2082   2083   2084   2085   2086   2087   2088   2089   2090   2091   2092   2093   2094   2095   2096   2097   2098   2099   2100   2101   2102   2103   2104   2105   2106   2107   def   get _ group _ rets _ net _ values   (   self   ,   groups _ num   =   10   ,   value _ weighted   =   False   ,   trade _ cost _ double _ side   =   0   ) :   \" \" \" \u8ba1\u7b97 \u7ec4\u5185 \u6bcf \u4e00\u671f \u7684 \u5e73\u5747 \u6536\u76ca \uff0c \u751f\u6210 \u6bcf\u65e5 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u548c \u51c0\u503c \u5e8f\u5217 \" \" \"   if   value _ weighted   :   cap _ value   =   self   .   capital   .   copy   ( )   #   week _ here   cap _ value   =   cap _ value   .   resample   (   self   .   freq   )   .   last   ( )   .   shift   (   1   )   cap _ value   =   cap _ value   *   self   .   tris _ monthly   #   cap _ value = np . log ( cap _ value )   cap _ value   =   cap _ value   .   stack   ( )   .   reset _ index   ( )   cap _ value   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap _ value \"   ]   self   .   data   =   pd   .   merge   (   self   .   data   ,   cap _ value   ,   on   =   [   \" date \"   ,   \" code \"   ] )   def   in _ g   (   df   ) :   df   .   cap _ value   =   df   .   cap _ value   /   df   .   cap _ value   .   sum   ( )   df   .   ret   =   df   .   ret   *   df   .   cap _ value   return   df   .   ret   .   sum   ( )   self   .   group _ rets   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   in _ g   )   self   .   rets _ all   =   self   .   data   .   groupby   ( [   \" date \"   ] )   .   apply   (   in _ g   )   self   .   group _ rets _ std   =   \" \u5e02\u503c \u52a0\u6743 \u6682\u672a \u8bbe\u7f6e \u8be5 \u529f\u80fd \uff0c \u656c\u8bf7 \u671f\u5f85 \u656c\u8bf7\u671f\u5f85 \ud83c\udf19 \"   else   :   self   .   group _ rets   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   apply   (   lambda   x   :   x   .   ret   .   mean   ( )   )   self   .   rets _ all   =   self   .   data   .   groupby   ( [   \" date \"   ] )   .   apply   (   lambda   x   :   x   .   ret   .   mean   ( ) )   self   .   group _ rets _ stds   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   ret   .   std   ( )   self   .   group _ rets _ std   =   (   self   .   group _ rets _ stds   .   reset _ index   ( )   .   groupby   (   \" group \"   )   .   mean   ( )   )   self   .   group _ rets _ skews   =   self   .   data   .   groupby   ( [   \" date \"   ,   \" group \"   ] )   .   ret   .   skew   ( )   self   .   group _ rets _ skew   =   (   self   .   group _ rets _ skews   .   reset _ index   ( )   .   groupby   (   \" group \"   )   .   mean   ( )   )   #   dropna \u56e0\u4e3a \u662f\u56e0\u4e3a \u5982\u679c \u80a1\u7968 \u884c\u60c5 \u80a1\u7968\u884c\u60c5 \u6570\u636e \u6bd4 \u56e0\u5b50 \u6570\u636e \u7684 \u622a\u6b62 \u65e5\u671f \u665a \uff0c \u800c \u6700\u540e \u4e00\u4e2a \u4e00\u4e2a\u6708 \u53d1\u751f \u6708\u521d \u8dcc\u505c \u65f6 \uff0c \u4f1a \u9020\u6210 \u6700\u540e \u67d0\u7ec4 \u591a\u51fa \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7684 \u6570\u636e   self   .   group _ rets   =   self   .   group _ rets   .   unstack   ( )   self   .   group _ rets   =   self   .   group _ rets   [   self   .   group _ rets   .   index   < =   self   .   factors   .   date   .   max   ( )   ]   self   .   group _ rets   .   columns   =   list   (   map   (   str   ,   list   (   self   .   group _ rets   .   columns   ) ) )   self   .   group _ rets   =   self   .   group _ rets   .   add _ prefix   (   \" group \"   )   self   .   group _ rets   =   (   self   .   group _ rets   -   self   .   factor _ turnover _ rates   *   trade _ cost _ double _ side   )   self   .   rets _ all   =   (   self   .   rets _ all   -   self   .   factor _ turnover _ rates   .   mean   (   axis   =   1   )   *   trade _ cost _ double _ side   )   .   dropna   ( )   self   .   long _ short _ rets   =   (   self   .   group _ rets   [   \" group1 \"   ]   -   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   )   self   .   inner _ rets _ long   =   self   .   group _ rets   .   group1   -   self   .   rets _ all   self   .   inner _ rets _ short   =   (   self   .   rets _ all   -   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   )   self   .   long _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   long _ short _ rets   +   1   )   .   cumprod   ( )   )   if   self   .   long _ short _ net _ values   [   -   1   ]   < =   self   .   long _ short _ net _ values   [   0   ] :   self   .   long _ short _ rets   =   (   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   -   self   .   group _ rets   [   \" group1 \"   ]   )   self   .   long _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   long _ short _ rets   +   1   )   .   cumprod   ( )   )   self   .   inner _ rets _ long   =   (   self   .   group _ rets   [   \" group \"   +   str   (   groups _ num   ) ]   -   self   .   rets _ all   )   self   .   inner _ rets _ short   =   self   .   rets _ all   -   self   .   group _ rets   .   group1   self   .   inner _ long _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   inner _ rets _ long   +   1   )   .   cumprod   ( )   )   self   .   inner _ short _ net _ values   =   self   .   make _ start _ to _ one   (   (   self   .   inner _ rets _ short   +   1   )   .   cumprod   ( )   )   self   .   group _ rets   =   self   .   group _ rets   .   assign   (   long _ short   =   self   .   long _ short _ rets   )   self   .   group _ net _ values   =   self   .   group _ rets   .   applymap   (   lambda   x   :   x   +   1   )   self   .   group _ net _ values   =   self   .   group _ net _ values   .   cumprod   ( )   self   .   group _ net _ values   =   self   .   group _ net _ values   .   apply   (   self   .   make _ start _ to _ one   )   a   =   groups _ num   * *   (   0.5   )   #   \u5224\u65ad \u662f\u5426 \u8981 \u4e24\u4e2a \u56e0\u5b50 \u753b\u8868 \u8868\u683c \u753b\u8868\u683c   if   a   = =   int   (   a   ) :   self   .   square _ rets   =   (   self   .   group _ net _ values   .   iloc   [ : ,   :   -   1   ]   .   apply   (   self   .   to _ group _ ret   )   .   to _ numpy   ( )   )   self   .   square _ rets   =   self   .   square _ rets   .   reshape   ( (   int   (   a   ) ,   int   (   a   ) ) )   self   .   square _ rets   =   pd   .   DataFrame   (   self   .   square _ rets   ,   columns   =   list   (   range   (   1   ,   int   (   a   )   +   1   ) ) ,   index   =   list   (   range   (   1   ,   int   (   a   )   +   1   ) ) ,   )   print   (   \" \u8fd9\u662f self . square _ rets \"   ,   self   .   square _ rets   )","title":"get _ group _ rets _ net _ values ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_groups","text":"\u4f9d\u636e \u56e0\u5b50 \u503c \uff0c \u5224\u65ad \u662f \u5728 \u7b2c \u51e0\u7ec4   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1933   1934   1935   1936   1937   1938   1939   1940   1941   1942   1943   1944   1945   1946   1947   1948   1949   1950   1951   1952   @ classmethod   def   get _ groups   (   cls   ,   df   ,   groups _ num   ) :   \" \" \" \u4f9d\u636e \u56e0\u5b50 \u503c \uff0c \u5224\u65ad \u662f \u5728 \u7b2c \u51e0\u7ec4 \" \" \"   if   \" group \"   in   list   (   df   .   columns   ) :   df   =   df   .   drop   (   columns   =   [   \" group \"   ] )   df   =   df   .   sort _ values   ( [   \" fac \"   ] ,   ascending   =   True   )   each _ group   =   round   (   df   .   shape   [   0   ]   /   groups _ num   )   l   =   list   (   map   (   lambda   x   ,   y   :   [   x   ]   *   y   ,   list   (   range   (   1   ,   groups _ num   +   1   ) ) ,   [   each _ group   ]   *   groups _ num   ,   )   )   l   =   reduce   (   lambda   x   ,   y   :   x   +   y   ,   l   )   if   len   (   l   )   <   df   .   shape   [   0   ] :   l   =   l   +   [   groups _ num   ]   *   (   df   .   shape   [   0   ]   -   len   (   l   ) )   l   =   l   [ :   df   .   shape   [   0   ] ]   df   .   insert   (   0   ,   \" group \"   ,   l   )   return   df","title":"get _ groups ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_ic_icir_and_rank","text":"\u8ba1\u7b97 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1918   1919   1920   1921   1922   1923   1924   1925   1926   1927   1928   1929   1930   1931   def   get _ ic _ icir _ and _ rank   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR \" \" \"   df1   =   df   .   groupby   (   \" date \"   )   .   apply   (   cls   .   get _ ic _ rankic   )   cls   .   ics   =   df1   .   ic   cls   .   rankics   =   df1   .   rankic   cls   .   ics   =   cls   .   ics   .   reset _ index   (   drop   =   True   ,   level   =   1   )   .   to _ frame   ( )   cls   .   rankics   =   cls   .   rankics   .   reset _ index   (   drop   =   True   ,   level   =   1   )   .   to _ frame   ( )   df2   =   cls   .   get _ icir _ rankicir   (   df1   )   df2   =   df2   .   T   dura   =   (   df   .   date   .   max   ( )   -   df   .   date   .   min   ( ) )   .   days   /   365   t _ value   =   df2   .   iloc   [   3   ,   0   ]   *   (   dura   * *   (   1   /   2   ) )   df3   =   pd   .   DataFrame   ( {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   t _ value   ] } ,   index   =   [   \" RankIC . t \"   ] )   df4   =   pd   .   concat   ( [   df2   ,   df3   ] )   return   df4","title":"get _ ic _ icir _ and _ rank ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_ic_rankic","text":"\u8ba1\u7b97 IC \u548c RankIC   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1897   1898   1899   1900   1901   1902   1903   def   get _ ic _ rankic   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 IC \u548c RankIC \" \" \"   df1   =   df   [ [   \" ret \"   ,   \" fac \"   ] ]   ic   =   df1   .   corr   (   method   =   \" pearson \"   )   .   iloc   [   0   ,   1   ]   rankic   =   df1   .   rank   ( )   .   corr   ( )   .   iloc   [   0   ,   1   ]   df2   =   pd   .   DataFrame   ( {   \" ic \"   :   [   ic   ] ,   \" rankic \"   :   [   rankic   ] } )   return   df2","title":"get _ ic _ rankic ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_icir_rankicir","text":"\u8ba1\u7b97 ICIR \u548c RankICIR   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1905   1906   1907   1908   1909   1910   1911   1912   1913   1914   1915   1916   def   get _ icir _ rankicir   (   cls   ,   df   ) :   \" \" \" \u8ba1\u7b97 ICIR \u548c RankICIR \" \" \"   ic   =   df   .   ic   .   mean   ( )   rankic   =   df   .   rankic   .   mean   ( )   #   week _ here   icir   =   ic   /   np   .   std   (   df   .   ic   )   *   (   cls   .   freq _ ctrl   .   counts _ one _ year   * *   (   0.5   ) )   #   week _ here   rankicir   =   rankic   /   np   .   std   (   df   .   rankic   )   *   (   cls   .   freq _ ctrl   .   counts _ one _ year   * *   (   0.5   ) )   return   pd   .   DataFrame   (   {   \" IC \"   :   [   ic   ] ,   \" ICIR \"   :   [   icir   ] ,   \" RankIC \"   :   [   rankic   ] ,   \" RankICIR \"   :   [   rankicir   ] } ,   index   =   [   \" \u8bc4\u4ef7 \u6307\u6807 \"   ] ,   )","title":"get _ icir _ rankicir ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_limit_ups_downs","text":"\u627e \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5c31 \u6da8\u505c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1879   1880   1881   1882   1883   1884   1885   1886   1887   1888   1889   1890   1891   1892   1893   1894   1895   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ limit _ ups _ downs   (   cls   ) :   \" \" \" \u627e \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5c31 \u6da8\u505c \" \" \"   \" \" \" \u6216\u8005 \u662f \u6708\u672b \u8dcc\u505c \u7684 \u80a1\u7968 \" \" \"   cls   .   opens _ monthly _ shift   =   cls   .   opens _ monthly   .   copy   ( )   cls   .   opens _ monthly _ shift   =   cls   .   opens _ monthly _ shift   .   shift   (   -   1   )   cls   .   rets _ monthly _ begin   =   (   cls   .   opens _ monthly _ shift   -   cls   .   closes _ monthly   )   /   cls   .   closes _ monthly   #   week _ here   cls   .   closes2 _ monthly   =   cls   .   closes   .   shift   (   1   )   .   resample   (   cls   .   freq   )   .   last   ( )   cls   .   rets _ monthly _ last   =   (   cls   .   closes _ monthly   -   cls   .   closes2 _ monthly   )   /   cls   .   closes2 _ monthly   cls   .   limit _ ups   =   cls   .   find _ limit   (   cls   .   rets _ monthly _ begin   ,   up   =   1   )   cls   .   limit _ downs   =   cls   .   find _ limit   (   cls   .   rets _ monthly _ last   ,   up   = -   1   )","title":"get _ limit _ ups _ downs ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_log_cap","text":"\u83b7\u5f97 \u5bf9\u6570 \u5e02\u503c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1791   1792   1793   1794   1795   1796   1797   1798   1799   1800   1801   1802   1803   1804   1805   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ log _ cap   (   cls   ,   boxcox   =   True   ) :   \" \" \" \u83b7\u5f97 \u5bf9\u6570 \u5e02\u503c \" \" \"   cls   .   cap   =   cls   .   capital   .   stack   ( )   .   reset _ index   ( )   cls   .   cap   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" cap _ size \"   ]   if   boxcox   :   def   single   (   x   ) :   x   .   cap _ size   =   ss   .   boxcox   (   x   .   cap _ size   ) [   0   ]   return   x   cls   .   cap   =   cls   .   cap   .   groupby   ( [   \" date \"   ] )   .   apply   (   single   )   else   :   cls   .   cap   [   \" cap _ size \"   ]   =   np   .   log   (   cls   .   cap   [   \" cap _ size \"   ] )","title":"get _ log _ cap ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_long_short_comments","text":"\u8ba1\u7b97 \u591a\u7a7a \u5bf9\u51b2 \u7684 \u76f8\u5173 \u8bc4\u4ef7 \u6307\u6807   \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2109   2110   2111   2112   2113   2114   2115   2116   2117   2118   2119   2120   2121   2122   2123   2124   2125   2126   2127   2128   2129   2130   2131   2132   2133   2134   2135   2136   2137   2138   2139   2140   2141   2142   2143   2144   2145   2146   2147   2148   2149   2150   2151   2152   2153   2154   2155   2156   2157   2158   2159   2160   2161   2162   2163   2164   2165   2166   2167   2168   2169   2170   2171   2172   2173   2174   2175   2176   2177   2178   2179   2180   2181   2182   def   get _ long _ short _ comments   (   self   ,   on _ paper   =   False   ) :   \" \" \" \u8ba1\u7b97 \u591a\u7a7a \u5bf9\u51b2 \u7684 \u76f8\u5173 \u8bc4\u4ef7 \u6307\u6807   \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u6708\u5ea6 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \" \" \"   #   week _ here   self   .   long _ short _ ret _ yearly   =   (   self   .   long _ short _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   long _ short _ net _ values   ) )   -   1   )   self   .   inner _ long _ ret _ yearly   =   (   self   .   inner _ long _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   inner _ long _ net _ values   ) )   -   1   )   self   .   inner _ short _ ret _ yearly   =   (   self   .   inner _ short _ net _ values   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   self   .   inner _ short _ net _ values   ) )   -   1   )   #   week _ here   self   .   long _ short _ vol _ yearly   =   np   .   std   (   self   .   long _ short _ rets   )   *   (   self   .   freq _ ctrl   .   counts _ one _ year   * *   0.5   )   self   .   long _ short _ info _ ratio   =   (   self   .   long _ short _ ret _ yearly   /   self   .   long _ short _ vol _ yearly   )   self   .   long _ short _ win _ times   =   len   (   self   .   long _ short _ rets   [   self   .   long _ short _ rets   >   0   ] )   self   .   long _ short _ win _ ratio   =   self   .   long _ short _ win _ times   /   len   (   self   .   long _ short _ rets   )   self   .   max _ retreat   =   -   (   self   .   long _ short _ net _ values   /   self   .   long _ short _ net _ values   .   expanding   (   1   )   .   max   ( )   -   1   )   .   min   ( )   if   on _ paper   :   self   .   long _ short _ comments   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   long _ short _ ret _ yearly   ,   self   .   long _ short _ vol _ yearly   ,   self   .   long _ short _ info _ ratio   ,   self   .   long _ short _ win _ ratio   ,   self   .   max _ retreat   ,   ]   } ,   #   week _ here   index   =   [   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u6536\u76ca \u6ce2\u52a8 \u6bd4 \"   ,   f   \"   {   self   .   freq _ ctrl   .   comment _ name   }   \u5ea6 \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ,   ] ,   )   else   :   self   .   long _ short _ comments   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   long _ short _ ret _ yearly   ,   self   .   long _ short _ vol _ yearly   ,   self   .   long _ short _ info _ ratio   ,   self   .   long _ short _ win _ ratio   ,   self   .   max _ retreat   ,   ]   } ,   #   week _ here   index   =   [   \" \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   \" \u5e74\u5316 \u6ce2\u52a8 \u7387 \"   ,   \" \u4fe1\u606f \u6bd4\u7387 \"   ,   f   \"   {   self   .   freq _ ctrl   .   comment _ name   }   \u5ea6 \u80dc\u7387 \"   ,   \" \u6700\u5927 \u56de\u64a4 \u7387 \"   ,   ] ,   )","title":"get _ long _ short _ comments ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_neutral_factors","text":"\u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1807   1808   1809   1810   1811   1812   1813   1814   1815   1816   1817   1818   1819   1820   1821   1822   1823   1824   1825   1826   1827   1828   1829   1830   1831   1832   1833   1834   1835   1836   1837   1838   1839   1840   def   get _ neutral _ factors   (   self   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ) :   \" \" \" \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   +   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   #   week _ here   last _ date   =   self   .   freq _ ctrl   .   next _ end   (   self   .   tris _ monthly   .   index   .   max   ( ) )   add _ tail   =   pd   .   DataFrame   (   1   ,   index   =   [   last _ date   ] ,   columns   =   self   .   tris _ monthly   .   columns   )   tris _ monthly   =   pd   .   concat   ( [   self   .   tris _ monthly   ,   add _ tail   ] )   self   .   factors   =   self   .   factors   *   tris _ monthly   #   week _ here   self   .   factors   .   index   =   self   .   factors   .   index   -   self   .   freq _ ctrl   .   time _ shift   #   week _ here   self   .   factors   =   self   .   factors   .   resample   (   self   .   freq   )   .   last   ( )   self   .   factors   =   self   .   factors   .   stack   ( )   .   reset _ index   ( )   self   .   factors   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   cap   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   if   not   only _ cap   :   if   swindustry _ dummies   :   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   swindustry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   else   :   self   .   factors   =   pd   .   merge   (   self   .   factors   ,   self   .   zxindustry _ dummy   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   self   .   factors   =   self   .   factors   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   self   .   factors   =   self   .   factors   .   groupby   ( [   \" date \"   ] )   .   apply   (   self   .   neutralize _ factors   )   self   .   factors   =   self   .   factors   .   reset _ index   ( )","title":"get _ neutral _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_rets_month","text":"\u8ba1\u7b97 \u6bcf\u6708 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u5e76 \u6839\u636e \u6bcf\u6708 \u505a\u51fa \u4ea4\u6613 \u72b6\u6001 \uff0c \u505a\u51fa \u5220\u51cf   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1757   1758   1759   1760   1761   1762   1763   1764   1765   1766   1767   1768   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   get _ rets _ month   (   cls   ) :   \" \" \" \u8ba1\u7b97 \u6bcf\u6708 \u7684 \u6536\u76ca \u6536\u76ca\u7387 \uff0c \u5e76 \u6839\u636e \u6bcf\u6708 \u505a\u51fa \u4ea4\u6613 \u72b6\u6001 \uff0c \u505a\u51fa \u5220\u51cf \" \" \"   #   week _ here   cls   .   opens _ monthly   =   cls   .   opens   .   resample   (   cls   .   freq   )   .   first   ( )   #   week _ here   cls   .   closes _ monthly   =   cls   .   closes   .   resample   (   cls   .   freq   )   .   last   ( )   cls   .   rets _ monthly   =   (   cls   .   closes _ monthly   -   cls   .   opens _ monthly   )   /   cls   .   opens _ monthly   cls   .   rets _ monthly   =   cls   .   rets _ monthly   *   cls   .   tris _ monthly   cls   .   rets _ monthly   =   cls   .   rets _ monthly   .   stack   ( )   .   reset _ index   ( )   cls   .   rets _ monthly   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" ret \"   ]","title":"get _ rets _ month ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.get_total_comments","text":"\u7efc\u5408 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR , \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2184   2185   2186   2187   2188   2189   2190   2191   2192   2193   2194   2195   2196   2197   2198   2199   2200   2201   2202   2203   2204   2205   2206   2207   2208   2209   2210   2211   2212   2213   2214   2215   2216   2217   2218   2219   2220   2221   2222   2223   2224   2225   2226   2227   2228   2229   2230   2231   2232   2233   def   get _ total _ comments   (   self   ,   groups _ num   ) :   \" \" \" \u7efc\u5408 IC \u3001 ICIR \u3001 RankIC \u3001 RankICIR , \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u4fe1\u606f \u6bd4\u7387 \u3001 \u80dc\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \" \" \"   rankic   =   self   .   rankics   .   mean   ( )   rankic _ win   =   self   .   rankics   [   self   .   rankics   *   rankic   >   0   ]   rankic _ win _ ratio   =   rankic _ win   .   dropna   ( )   .   shape   [   0   ]   /   self   .   rankics   .   dropna   ( )   .   shape   [   0   ]   self   .   factor _ cross _ skew _ after _ neu   =   self   .   __ factors _ out   .   skew   (   axis   =   1   )   .   mean   ( )   if   self   .   ic _ icir _ and _ rank   .   iloc   [   2   ,   0   ]   >   0   :   self   .   factor _ turnover _ rate   =   self   .   factor _ turnover _ rates   [   f   \" group   {   groups _ num   }   \"   ]   .   mean   ( )   else   :   self   .   factor _ turnover _ rate   =   self   .   factor _ turnover _ rates   [   \" group1 \"   ]   .   mean   ( )   self   .   total _ comments   =   pd   .   concat   (   [   self   .   ic _ icir _ and _ rank   ,   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   rankic _ win _ ratio   ] } ,   index   =   [   \" RankIC \u80dc\u7387 \"   ] ,   ) ,   self   .   long _ short _ comments   ,   #   week _ here   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   self   .   factor _ turnover _ rate   ,   self   .   factor _ cover   ,   self   .   pos _ neg _ rate   ,   self   .   factor _ cross _ skew   ,   self   .   inner _ long _ ret _ yearly   ,   self   .   inner _ long _ ret _ yearly   /   (   self   .   inner _ long _ ret _ yearly   +   self   .   inner _ short _ ret _ yearly   ) ,   self   .   corr _ itself   ,   ]   } ,   index   =   [   f   \" \u591a\u5934   {   self   .   freq _ ctrl   .   comment _ name   }   \u5747 \u6362\u624b \"   ,   \" \u56e0\u5b50 \u8986\u76d6 \u8986\u76d6\u7387 \"   ,   \" \u56e0\u5b50 \u6b63\u503c \u5360 \u6bd4 \"   ,   \" \u56e0\u5b50 \u622a\u9762 \u504f\u5ea6 \"   ,   \" \u591a\u5934 \u8d85\u5747 \u6536\u76ca \"   ,   \" \u591a\u5934 \u6536\u76ca \u5360 \u6bd4 \"   ,   \" \u4e00\u9636\u81ea \u76f8\u5173 \u76f8\u5173\u6027 \"   ,   ] ,   ) ,   ]   )   self   .   group _ mean _ rets _ monthly   =   self   .   group _ rets   .   drop   (   columns   =   [   ' long _ short '   ] )   .   mean   ( )   self   .   group _ mean _ rets _ monthly   =   self   .   group _ mean _ rets _ monthly   -   self   .   group _ mean _ rets _ monthly   .   mean   ( )","title":"get _ total _ comments ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.judge_month","text":"\u751f\u6210 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7efc\u5408 \u5224\u65ad \u7684 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1735   1736   1737   1738   1739   1740   1741   1742   1743   1744   1745   1746   1747   1748   1749   1750   1751   1752   1753   1754   1755   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   judge _ month   (   cls   ) :   \" \" \" \u751f\u6210 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u7efc\u5408 \u5224\u65ad \u7684 \u8868\u683c \" \" \"   if   cls   .   freq   = =   \" M \"   :   cls   .   sts _ monthly   =   cls   .   daily _ to _ monthly   (   cls   .   sts   ,   cls   .   sts _ monthly _ file   ,   cls   .   judge _ month _ st   )   cls   .   states _ monthly   =   cls   .   daily _ to _ monthly   (   cls   .   states   ,   cls   .   states _ monthly _ file   ,   cls   .   judge _ month _ state   )   #   week _ here   cls   .   ages _ monthly   =   (   cls   .   ages   .   resample   (   cls   .   freq   )   .   last   ( )   >   60   )   +   0   cls   .   tris _ monthly   =   cls   .   sts _ monthly   *   cls   .   states _ monthly   *   cls   .   ages _ monthly   cls   .   tris _ monthly   =   cls   .   tris _ monthly   .   replace   (   0   ,   np   .   nan   )   else   :   cls   .   tris _ monthly   =   (   (   1   -   cls   .   sts   )   .   resample   (   cls   .   freq   )   .   last   ( )   .   ffill   (   limit   =   2   )   *   cls   .   states   .   resample   (   cls   .   freq   )   .   last   ( )   .   ffill   (   limit   =   2   )   *   ( (   cls   .   ages   .   resample   (   cls   .   freq   )   .   last   ( )   >   60   )   +   0   )   )   .   replace   (   0   ,   np   .   nan   )","title":"judge _ month ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.judge_month_st","text":"\u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 st \u7684 \u5929\u6570 \uff0c \u5982\u679c st \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5982\u679c \u6b63\u5e38 \u591a \uff0c \u5c31 \u4fdd\u7559 \u672c\u6708   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1661   1662   1663   1664   1665   1666   1667   1668   1669   @ classmethod   def   judge _ month _ st   (   cls   ,   df   ) :   \" \" \" \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 st \u7684 \u5929\u6570 \uff0c \u5982\u679c st \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5982\u679c \u6b63\u5e38 \u591a \uff0c \u5c31 \u4fdd\u7559 \u672c\u6708 \" \" \"   st _ count   =   len   (   df   [   df   = =   1   ] )   normal _ count   =   len   (   df   [   df   ! =   1   ] )   if   st _ count   > =   normal _ count   :   return   0   else   :   return   1","title":"judge _ month _ st ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.judge_month_state","text":"\u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u7684 \u5929\u6570 \uff0c \u5982\u679c \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5426\u5219 \u4fdd\u7559 \u672c\u6708   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1671   1672   1673   1674   1675   1676   1677   1678   1679   @ classmethod   def   judge _ month _ state   (   cls   ,   df   ) :   \" \" \" \u6bd4\u8f83 \u4e00\u4e2a \u4e00\u4e2a\u6708 \u5185 \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u7684 \u5929\u6570 \uff0c \u5982\u679c \u6b63\u5e38 \u975e\u6b63\u5e38 \u4ea4\u6613 \u5929\u6570 \u591a \uff0c \u5c31 \u5220\u9664 \u672c\u6708 \uff0c \u5426\u5219 \u4fdd\u7559 \u672c\u6708 \" \" \"   abnormal _ count   =   len   (   df   [   df   = =   0   ] )   normal _ count   =   len   (   df   [   df   = =   1   ] )   if   abnormal _ count   > =   normal _ count   :   return   0   else   :   return   1","title":"judge _ month _ state ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.limit_old_to_new","text":"\u83b7\u53d6 \u8dcc\u505c \u80a1\u5728 \u65e7 \u6708 \u7684 \u7ec4\u53f7 \uff0c \u7136\u540e \u5c06 \u65e5\u671f \u8c03\u6574 \u5230 \u65b0\u6708 \u91cc   \u6da8\u505c \u80a1\u5219 \u83b7\u5f97 \u65b0\u6708 \u91cc \u6da8\u505c \u80a1 \u7684 \u4ee3\u7801 \u548c \u65f6\u95f4 \uff0c \u7136\u540e \u76f4\u63a5 \u5220\u53bb   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1954   1955   1956   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   @ classmethod   def   limit _ old _ to _ new   (   cls   ,   limit   ,   data   ) :   \" \" \" \u83b7\u53d6 \u8dcc\u505c \u80a1\u5728 \u65e7 \u6708 \u7684 \u7ec4\u53f7 \uff0c \u7136\u540e \u5c06 \u65e5\u671f \u8c03\u6574 \u5230 \u65b0\u6708 \u91cc   \u6da8\u505c \u80a1\u5219 \u83b7\u5f97 \u65b0\u6708 \u91cc \u6da8\u505c \u80a1 \u7684 \u4ee3\u7801 \u548c \u65f6\u95f4 \uff0c \u7136\u540e \u76f4\u63a5 \u5220\u53bb \" \" \"   data1   =   data   .   copy   ( )   data1   =   data1   .   reset _ index   ( )   data1   .   columns   =   [   \" data _ index \"   ]   +   list   (   data1   .   columns   ) [   1   : ]   old   =   pd   .   merge   (   limit   ,   data1   ,   how   =   \" inner \"   ,   on   =   [   \" date \"   ,   \" code \"   ] )   old   =   old   .   set _ index   (   \" data _ index \"   )   old   =   old   [ [   \" group \"   ,   \" date \"   ,   \" code \"   ] ]   #   week _ here   old   .   date   =   list   (   map   (   cls   .   freq _ ctrl   .   next _ end   ,   list   (   old   .   date   ) ) )   return   old","title":"limit _ old _ to _ new ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.make_start_to_one","text":"\u8ba9 \u51c0\u503c \u5e8f\u5217 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6570 \u53d8\u6210 1   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2001   2002   2003   2004   2005   2006   2007   def   make _ start _ to _ one   (   self   ,   l   ) :   \" \" \" \u8ba9 \u51c0\u503c \u5e8f\u5217 \u7684 \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u6570 \u53d8\u6210 1 \" \" \"   min _ date   =   self   .   factors   .   date   .   min   ( )   add _ date   =   min _ date   -   relativedelta   (   days   =   min _ date   .   day   )   add _ l   =   pd   .   Series   ( [   1   ] ,   index   =   [   add _ date   ] )   l   =   pd   .   concat   ( [   add _ l   ,   l   ] )   return   l","title":"make _ start _ to _ one ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.neutralize_factors","text":"\u7ec4\u5185 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1770   1771   1772   1773   1774   1775   1776   1777   1778   1779   1780   1781   1782   1783   1784   1785   1786   1787   1788   1789   @ classmethod   def   neutralize _ factors   (   cls   ,   df   ) :   \" \" \" \u7ec4\u5185 \u5bf9 \u56e0\u5b50 \u8fdb\u884c \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \" \" \"   industry _ codes   =   list   (   df   .   columns   )   industry _ codes   =   [   i   for   i   in   industry _ codes   if   i   .   startswith   (   \" w \"   ) ]   industry _ codes _ str   =   \" + \"   .   join   (   industry _ codes   )   if   len   (   industry _ codes _ str   )   >   0   :   ols _ result   =   smf   .   ols   (   \" fac ~ cap _ size + \"   +   industry _ codes _ str   ,   data   =   df   )   .   fit   ( )   else   :   ols _ result   =   smf   .   ols   (   \" fac ~ cap _ size \"   ,   data   =   df   )   .   fit   ( )   ols _ w   =   ols _ result   .   params   [   \" cap _ size \"   ]   ols _ b   =   ols _ result   .   params   [   \" Intercept \"   ]   ols _ bs   =   { }   for   ind   in   industry _ codes   :   ols _ bs   [   ind   ]   =   ols _ result   .   params   [   ind   ]   df   .   fac   =   df   .   fac   -   ols _ w   *   df   .   cap _ size   -   ols _ b   for   k   ,   v   in   ols _ bs   .   items   ( ) :   df   .   fac   =   df   .   fac   -   v   *   df   [   k   ]   df   =   df   [ [   \" fac \"   ] ]   return   df","title":"neutralize _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.plot_net_values","text":"\u4f7f\u7528 matplotlib \u6765 \u753b\u56fe \uff0c y2 \u4e3a \u662f\u5426 \u5bf9\u591a\u7a7a \u7ec4\u5408 \u91c7\u7528 \u53cc y \u8f74   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2235   2236   2237   2238   2239   2240   2241   2242   2243   2244   2245   2246   2247   2248   2249   2250   2251   2252   2253   2254   2255   2256   2257   2258   2259   2260   2261   2262   2263   2264   2265   2266   2267   2268   2269   2270   2271   2272   2273   2274   2275   2276   2277   2278   2279   2280   2281   2282   2283   2284   2285   2286   2287   2288   2289   2290   2291   2292   2293   2294   2295   2296   2297   2298   2299   2300   2301   2302   2303   2304   2305   2306   2307   2308   2309   2310   2311   2312   2313   2314   2315   2316   2317   2318   2319   2320   2321   2322   2323   2324   2325   2326   2327   2328   2329   2330   2331   2332   2333   2334   2335   2336   2337   2338   2339   2340   2341   2342   2343   2344   2345   2346   2347   2348   2349   2350   2351   2352   2353   2354   2355   2356   2357   def   plot _ net _ values   (   self   ,   y2   ,   filename   ,   iplot   =   1   ,   ilegend   =   1   ,   without _ breakpoint   =   0   ) :   \" \" \" \u4f7f\u7528 matplotlib \u6765 \u753b\u56fe \uff0c y2 \u4e3a \u662f\u5426 \u5bf9\u591a\u7a7a \u7ec4\u5408 \u91c7\u7528 \u53cc y \u8f74 \" \" \"   if   not   iplot   :   fig   ,   ax   =   plt   .   subplots   (   nrows   =   1   ,   ncols   =   3   ,   figsize   =   (   33   ,   8   ) )   self   .   group _ net _ values   .   plot   (   secondary _ y   =   y2   ,   rot   =   60   ,   ax   =   ax   [   0   ] )   self   .   group _ net _ values   .   plot   (   secondary _ y   =   y2   ,   ax   =   ax   [   0   ] )   b   =   self   .   rankics   .   copy   ( )   b   .   index   =   [   int   (   i   .   year   )   if   i   .   month   = =   1   else   \" \"   for   i   in   list   (   b   .   index   ) ]   b   .   plot   (   kind   =   \" bar \"   ,   rot   =   60   ,   ax   =   ax   [   1   ] )   self   .   factor _ cross _ stds   .   plot   (   rot   =   60   ,   ax   =   ax   [   2   ] )   filename _ path   =   filename   +   \" . png \"   if   not   STATES   [   \" NO _ SAVE \"   ] :   plt   .   savefig   (   filename _ path   )   else   :   tris   =   self   .   group _ net _ values   if   without _ breakpoint   :   tris   =   tris   .   dropna   ( )   figs   =   cf   .   figures   (   tris   ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   group _ net _ values   .   columns   ) ) ,   #   dict ( kind = \" bar \" ,   y = \" \u5404\u7ec4 \u6708\u5747 \u8d85\u5747 \u6536\u76ca \" ) ,   #   dict ( kind = \" bar \" ,   y = \" rankic \" ) ,   ] ,   asList   =   True   ,   )   comments   =   (   self   .   total _ comments   .   applymap   (   lambda   x   :   round   (   x   ,   4   ) )   .   rename   (   index   =   {   \" RankIC \u5747\u503c t \u503c \"   :   \" RankIC . t \"   } )   .   reset _ index   ( )   )   here   =   pd   .   concat   (   [   comments   .   iloc   [ :   6   ,   : ]   .   reset _ index   (   drop   =   True   ) ,   comments   .   iloc   [   6   :   12   ,   : ]   .   reset _ index   (   drop   =   True   ) ,   comments   .   iloc   [   12   : ,   : ]   .   reset _ index   (   drop   =   True   ) ,   ] ,   axis   =   1   ,   )   here   .   columns   =   [   \" \u4fe1\u606f \u7cfb\u6570 \"   ,   \" \u7ed3\u679c \"   ,   \" \u7ee9\u6548 \u6307\u6807 \"   ,   \" \u7ed3\u679c \"   ,   \" \u5176\u4ed6 \u6307\u6807 \"   ,   \" \u7ed3\u679c \"   ]   #   here = here . to _ numpy ( ) . tolist ( ) + [ [ ' \u4fe1\u606f \u7cfb\u6570 ' , ' \u7ed3\u679c ' , ' \u7ee9\u6548 \u6307\u6807 ' , ' \u7ed3\u679c ' ] ]   table   =   FF   .   create _ table   (   here   .   iloc   [ : :   -   1   ] )   table   .   update _ yaxes   (   matches   =   None   )   pic2   =   go   .   Figure   (   go   .   Bar   (   y   =   list   (   self   .   group _ mean _ rets _ monthly   ) ,   x   =   [   i   .   replace   (   ' roup '   ,   ' '   )   for   i   in   list   (   self   .   group _ mean _ rets _ monthly   .   index   ) ] ) )   #   table = go . Figure ( [ go . Table ( header = dict ( values = list ( here . columns ) ) , cells = dict ( values = here . to _ numpy ( ) . tolist ( ) ) ) ] )   pic3 _ data   =   go   .   Bar   (   y   =   list   (   self   .   rankics   .   rankic   ) ,   x   =   list   (   self   .   rankics   .   index   ) )   pic3   =   go   .   Figure   (   data   =   [   pic3 _ data   ] )   pic4 _ data   =   go   .   Line   (   y   =   list   (   self   .   rankics   .   rankic   .   cumsum   ( ) ) ,   x   =   list   (   self   .   rankics   .   index   ) ,   name   =   ' y2 '   ,   yaxis   =   ' y2 '   )   pic4 _ layout   =   go   .   Layout   (   yaxis2   =   dict   (   title   =   ' y2 '   ,   side   =   ' right '   ) )   pic4   =   go   .   Figure   (   data   =   [   pic4 _ data   ] ,   layout   =   pic4 _ layout   )   figs   .   append   (   table   )   figs   =   [   figs   [   -   1   ] ]   +   figs   [ :   -   1   ]   figs   .   append   (   pic2   )   figs   =   [   figs   [   0   ] ,   figs   [   1   ] ,   figs   [   -   1   ] ,   pic3   ]   figs   [   1   ]   .   update _ layout   (   legend   =   dict   (   yanchor   =   \" top \"   ,   y   =   0.99   ,   xanchor   =   \" left \"   ,   x   =   0.01   )   )   figs   [   3   ]   .   update _ layout   (   yaxis2   =   dict   (   title   =   ' y2 '   ,   side   =   ' right '   ) )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   2   ,   11   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   specs   =   [   [   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   4   } ,   None   ,   None   ,   None   ,   {   \" colspan \"   :   3   } ,   None   ,   None   ,   ] ,   [   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   {   \" colspan \"   :   3   } ,   None   ,   None   ,   ] ,   ] ,   subplot _ titles   =   [   \" \u51c0\u503c \u66f2\u7ebf \"   ,   \" \u5404\u7ec4 \u6708\u5747 \u8d85\u5747 \u6536\u76ca \"   ,   \" Rank   IC \u65f6\u5e8f \u56fe \"   ,   \" \u7ee9\u6548 \u6307\u6807 \"   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   ilegend   )   #   los = sp [ ' layout ' ] [ ' annotations ' ]   #   los [ 0 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 1 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 2 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ 3 ] [ ' font ' ] [ ' color ' ] = ' # 000000 '   #   los [ - 1 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 2 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 3 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ - 4 ] [ ' font ' ] [ ' color ' ] = ' # ffffff '   #   los [ 0 ] [ ' text ' ] = los [ 0 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 1 ] [ ' text ' ] = los [ 1 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 2 ] [ ' text ' ] = los [ 2 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ 3 ] [ ' text ' ] = los [ 3 ] [ ' text ' ] [ 3 : - 4 ]   #   los [ - 1 ] [ ' text ' ] = ' < b > ' + los [ - 1 ] [ ' text ' ] + ' < / b > '   #   los [ - 2 ] [ ' text ' ] = ' < b > ' + los [ - 2 ] [ ' text ' ] + ' < / b > '   #   los [ - 3 ] [ ' text ' ] = ' < b > ' + los [ - 3 ] [ ' text ' ] + ' < / b > '   #   los [ - 4 ] [ ' text ' ] = ' < b > ' + los [ - 4 ] [ ' text ' ] + ' < / b > '   #   sp [ ' layout ' ] [ ' annotations ' ] = los   #   print ( sp [ ' layout ' ] [ ' annotations ' ] )   #   sp [ ' layout ' ] [ ' annotations ' ] [ 0 ] [ ' yanchor ' ] = ' top '   cf   .   iplot   (   sp   )","title":"plot _ net _ values ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.plotly_net_values","text":"\u4f7f\u7528 plotly . express \u753b\u56fe   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2369   2370   2371   2372   2373   def   plotly _ net _ values   (   self   ,   filename   ) :   \" \" \" \u4f7f\u7528 plotly . express \u753b\u56fe \" \" \"   fig   =   pe   .   line   (   self   .   group _ net _ values   )   filename _ path   =   filename   +   \" . html \"   pio   .   write _ html   (   fig   ,   filename _ path   ,   auto _ open   =   True   )","title":"plotly _ net _ values ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.prerpare","text":"\u901a\u7528 \u6570\u636e \u51c6\u5907   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2375   2376   2377   2378   2379   2380   @ classmethod   @ lru _ cache   (   maxsize   =   None   )   def   prerpare   (   cls   ) :   \" \" \" \u901a\u7528 \u6570\u636e \u51c6\u5907 \" \" \"   cls   .   judge _ month   ( )   cls   .   get _ rets _ month   ( )","title":"prerpare ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.read_add","text":"\u7531\u4e8e \u6570\u636e \u66f4\u65b0 \uff0c \u8fc7\u53bb \u8ba1\u7b97 \u7684 \u6708\u5ea6 \u72b6\u6001 \u53ef\u80fd \u9700\u8981 \u8ffd\u52a0   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1681   1682   1683   1684   1685   1686   1687   1688   1689   1690   1691   1692   1693   1694   1695   1696   1697   1698   1699   1700   1701   1702   1703   1704   1705   1706   1707   1708   1709   @ classmethod   def   read _ add   (   cls   ,   pridf   ,   df   ,   func   ) :   \" \" \" \u7531\u4e8e \u6570\u636e \u66f4\u65b0 \uff0c \u8fc7\u53bb \u8ba1\u7b97 \u7684 \u6708\u5ea6 \u72b6\u6001 \u53ef\u80fd \u9700\u8981 \u8ffd\u52a0 \" \" \"   if   pridf   .   index   .   max   ( )   >   df   .   index   .   max   ( ) :   df _ add   =   pridf   [   pridf   .   index   >   df   .   index   .   max   ( ) ]   if   df _ add   .   shape   [   0   ]   >   int   (   cls   .   freq _ ctrl   .   days _ in   /   2   ) :   df _ 1   =   df _ add   .   index   .   max   ( )   year   =   df _ 1   .   year   month   =   df _ 1   .   month   last   =   tt   .   date   .   get _ close   (   year   =   year   ,   m   =   month   )   .   pd _ date   ( )   if   (   last   = =   df _ 1   ) [   0   ] :   #   week _ here   df _ add   =   df _ add   .   resample   (   cls   .   freq   )   .   apply   (   func   )   df   =   pd   .   concat   ( [   df   ,   df _ add   ] )   return   df   else   :   df _ add   =   df _ add   [   df _ add   .   index   <   pd   .   Timestamp   (   year   =   year   ,   month   =   month   ,   day   =   1   )   ]   if   df _ add   .   shape   [   0   ]   >   0   :   df _ add   =   df _ add   .   resample   (   cls   .   freq   )   .   apply   (   func   )   df   =   pd   .   concat   ( [   df   ,   df _ add   ] )   return   df   else   :   return   df   else   :   return   df   else   :   return   df","title":"read _ add ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.run","text":"\u8fd0\u884c \u56de\u6d4b \u90e8\u5206   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2382   2383   2384   2385   2386   2387   2388   2389   2390   2391   2392   2393   2394   2395   2396   2397   2398   2399   2400   2401   2402   2403   2404   2405   2406   2407   2408   2409   2410   2411   2412   2413   2414   2415   2416   2417   2418   2419   2420   2421   2422   2423   2424   2425   2426   2427   2428   2429   2430   2431   2432   2433   2434   2435   2436   2437   2438   2439   2440   2441   2442   2443   2444   2445   2446   2447   2448   2449   2450   2451   2452   2453   2454   2455   2456   2457   2458   2459   2460   2461   2462   2463   2464   2465   2466   2467   2468   2469   2470   2471   2472   2473   2474   2475   2476   2477   2478   2479   2480   2481   2482   2483   2484   2485   2486   2487   2488   2489   2490   2491   2492   2493   2494   2495   2496   2497   2498   2499   2500   2501   2502   2503   2504   2505   2506   2507   2508   2509   2510   2511   2512   2513   2514   2515   2516   2517   2518   2519   2520   2521   2522   2523   2524   2525   2526   2527   2528   2529   2530   2531   2532   2533   2534   2535   2536   2537   2538   2539   2540   2541   2542   2543   2544   2545   2546   2547   2548   2549   2550   2551   2552   2553   2554   2555   2556   2557   2558   2559   2560   2561   2562   2563   2564   2565   2566   2567   2568   2569   2570   2571   2572   2573   2574   2575   2576   2577   2578   2579   2580   2581   2582   2583   2584   2585   2586   2587   2588   2589   2590   2591   2592   2593   2594   2595   2596   2597   2598   2599   2600   2601   2602   2603   2604   2605   2606   2607   2608   def   run   (   self   ,   groups _ num   =   10   ,   neutralize   =   False   ,   boxcox   =   False   ,   trade _ cost _ double _ side   =   0   ,   value _ weighted   =   False   ,   y2   =   False   ,   plt _ plot   =   True   ,   plotly _ plot   =   False   ,   filename   =   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   ,   print _ comments   =   True   ,   comments _ writer   =   None   ,   net _ values _ writer   =   None   ,   rets _ writer   =   None   ,   comments _ sheetname   =   None   ,   net _ values _ sheetname   =   None   ,   rets _ sheetname   =   None   ,   on _ paper   =   False   ,   sheetname   =   None   ,   zxindustry _ dummies   =   0   ,   swindustry _ dummies   =   0   ,   only _ cap   =   0   ,   iplot   =   1   ,   ilegend   =   0   ,   without _ breakpoint   =   0   ,   beauty _ comments   =   0   ,   ) :   \" \" \" \u8fd0\u884c \u56de\u6d4b \u90e8\u5206 \" \" \"   if   comments _ writer   and   not   (   comments _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a total _ comments \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   net _ values _ writer   and   not   (   net _ values _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a group _ net _ values \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   rets _ writer   and   not   (   rets _ sheetname   or   sheetname   ) :   raise   IOError   (   \" \u628a group _ rets \u8f93\u51fa \u5230 excel \u4e2d\u65f6 \uff0c \u5fc5\u987b \u6307\u5b9a sheetname \ud83e\udd12 \"   )   if   neutralize   :   self   .   get _ log _ cap   ( )   self   .   get _ neutral _ factors   (   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   )   self   .   deal _ with _ factors _ after _ neutralize   ( )   elif   boxcox   :   self   .   get _ log _ cap   (   boxcox   =   True   )   self   .   get _ neutral _ factors   (   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   only _ cap   =   only _ cap   ,   )   self   .   deal _ with _ factors _ after _ neutralize   ( )   else   :   self   .   deal _ with _ factors   ( )   self   .   get _ limit _ ups _ downs   ( )   self   .   get _ data   (   groups _ num   )   self   .   get _ group _ rets _ net _ values   (   groups _ num   =   groups _ num   ,   value _ weighted   =   value _ weighted   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   )   self   .   get _ long _ short _ comments   (   on _ paper   =   on _ paper   )   self   .   get _ total _ comments   (   groups _ num   =   groups _ num   )   if   on _ paper   :   group1 _ ttest   =   ss   .   ttest _ 1samp   (   self   .   group _ rets   .   group1   ,   0   )   .   pvalue   group10 _ ttest   =   ss   .   ttest _ 1samp   (   self   .   group _ rets   [   f   \" group   {   groups _ num   }   \"   ] ,   0   )   .   pvalue   group _ long _ short _ ttest   =   ss   .   ttest _ 1samp   (   self   .   long _ short _ rets   ,   0   )   .   pvalue   group1 _ ret   =   self   .   group _ rets   .   group1   .   mean   ( )   group10 _ ret   =   self   .   group _ rets   [   f   \" group   {   groups _ num   }   \"   ]   .   mean   ( )   group _ long _ short _ ret   =   self   .   long _ short _ rets   .   mean   ( )   papers   =   pd   .   DataFrame   (   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   [   group1 _ ttest   ,   group10 _ ttest   ,   group _ long _ short _ ttest   ,   group1 _ ret   ,   group10 _ ret   ,   group _ long _ short _ ret   ,   ]   } ,   index   =   [   \" \u5206\u7ec4 1p \u503c \"   ,   f   \" \u5206\u7ec4   {   groups _ num   }   p \u503c \"   ,   f   \" \u5206\u7ec4 1 - \u5206\u7ec4   {   groups _ num   }   p \u503c \"   ,   \" \u5206\u7ec4 1 \u6536\u76ca \u6536\u76ca\u7387 \"   ,   f   \" \u5206\u7ec4   {   groups _ num   }   \u6536\u76ca \u6536\u76ca\u7387 \"   ,   f   \" \u5206\u7ec4 1 - \u5206\u7ec4   {   groups _ num   }   \u6536\u76ca \u6536\u76ca\u7387 \"   ,   ] ,   )   self   .   total _ comments   =   pd   .   concat   ( [   papers   ,   self   .   total _ comments   ] )   if   plt _ plot   :   if   not   STATES   [   \" NO _ PLOT \"   ] :   if   filename   :   self   .   plot _ net _ values   (   y2   =   y2   ,   filename   =   filename   ,   iplot   =   iplot   ,   ilegend   =   bool   (   ilegend   ) ,   without _ breakpoint   =   without _ breakpoint   ,   )   else   :   self   .   plot _ net _ values   (   y2   =   y2   ,   filename   =   self   .   factors _ file   .   split   (   \" . \"   ) [   -   2   ]   .   split   (   \" / \"   ) [   -   1   ]   +   str   (   groups _ num   )   +   \" \u5206\u7ec4 \"   ,   iplot   =   iplot   ,   ilegend   =   bool   (   ilegend   ) ,   without _ breakpoint   =   without _ breakpoint   ,   )   plt   .   show   ( )   if   plotly _ plot   :   if   not   STATES   [   \" NO _ PLOT \"   ] :   if   filename   :   self   .   plotly _ net _ values   (   filename   =   filename   )   else   :   self   .   plotly _ net _ values   (   filename   =   self   .   factors _ file   .   split   (   \" . \"   ) [   -   2   ]   .   split   (   \" / \"   ) [   -   1   ]   +   str   (   groups _ num   )   +   \" \u5206\u7ec4 \"   )   if   print _ comments   :   if   not   STATES   [   \" NO _ COMMENT \"   ] :   tb   =   Texttable   ( )   tb   .   set _ cols _ width   (   [   8   ]   *   5   +   [   9   ]   +   [   8   ]   *   2   +   [   7   ]   *   2   +   [   8   ]   +   [   8   ]   +   [   9   ]   +   [   10   ]   *   5   )   tb   .   set _ cols _ dtype   ( [   \" f \"   ]   *   18   )   tb   .   header   (   list   (   self   .   total _ comments   .   T   .   columns   ) )   tb   .   add _ rows   (   self   .   total _ comments   .   T   .   to _ numpy   ( ) ,   header   =   False   )   print   (   tb   .   draw   ( ) )   if   sheetname   :   if   comments _ writer   :   if   not   on _ paper   :   total _ comments   =   self   .   total _ comments   .   copy   ( )   tc   =   list   (   total _ comments   .   \u8bc4\u4ef7 \u6307\u6807   )   if   beauty _ comments   :   tc   [   0   ]   =   str   (   round   (   tc   [   0   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   1   ]   =   str   (   round   (   tc   [   1   ] ,   2   ) )   tc   [   2   ]   =   str   (   round   (   tc   [   2   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   3   ]   =   str   (   round   (   tc   [   3   ] ,   2   ) )   tc   [   4   ]   =   str   (   round   (   tc   [   4   ] ,   2   ) )   tc   [   5   ]   =   str   (   round   (   tc   [   5   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   6   ]   =   str   (   round   (   tc   [   6   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   7   ]   =   str   (   round   (   tc   [   7   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   8   ]   =   str   (   round   (   tc   [   8   ] ,   2   ) )   tc   [   9   ]   =   str   (   round   (   tc   [   9   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   10   ]   =   str   (   round   (   tc   [   10   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   11   ]   =   str   (   round   (   tc   [   11   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   12   ]   =   str   (   round   (   tc   [   12   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   13   ]   =   str   (   round   (   tc   [   13   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   14   ]   =   str   (   round   (   tc   [   14   ] ,   2   ) )   tc   [   15   ]   =   str   (   round   (   tc   [   15   ] ,   2   ) )   tc   [   16   ]   =   str   (   round   (   tc   [   16   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   17   ]   =   str   (   round   (   tc   [   17   ]   *   100   ,   2   ) )   +   \" % \"   tc   =   tc   +   list   (   self   .   group _ mean _ rets _ monthly   )   new _ total _ comments   =   pd   .   DataFrame   (   {   sheetname   :   tc   } ,   index   =   list   (   total _ comments   .   index   )   +   [   f   ' \u7b2c   {   i   }   \u7ec4 '   for   i   in   range   (   1   ,   groups _ num   +   1   ) ]   )   new _ total _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   rankic _ twins   =   pd   .   concat   ( [   self   .   rankics   .   rankic   ,   self   .   rankics   .   rankic   .   cumsum   ( ) ] ,   axis   =   1   )   rankic _ twins   .   columns   =   [   ' RankIC '   ,   ' RankIC \u7d2f\u79ef '   ]   rankic _ twins   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   +   ' RankIC '   )   else   :   self   .   total _ comments   .   rename   (   columns   =   {   \" \u8bc4\u4ef7 \u6307\u6807 \"   :   sheetname   } )   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   if   net _ values _ writer   :   groups _ net _ values   =   self   .   group _ net _ values   .   copy   ( )   groups _ net _ values   .   index   =   groups _ net _ values   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   groups _ net _ values   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   groups _ net _ values   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   groups _ net _ values   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   sheetname   )   if   rets _ writer   :   group _ rets   =   self   .   group _ rets   .   copy   ( )   group _ rets   .   index   =   group _ rets   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   group _ rets   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   group _ rets   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   group _ rets   .   to _ excel   (   rets _ writer   ,   sheet _ name   =   sheetname   )   else   :   if   comments _ writer   and   comments _ sheetname   :   total _ comments   =   self   .   total _ comments   .   copy   ( )   tc   =   list   (   total _ comments   .   \u8bc4\u4ef7 \u6307\u6807   )   tc   [   0   ]   =   str   (   round   (   tc   [   0   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   1   ]   =   str   (   round   (   tc   [   1   ] ,   2   ) )   tc   [   2   ]   =   str   (   round   (   tc   [   2   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   3   ]   =   str   (   round   (   tc   [   3   ] ,   2   ) )   tc   [   4   ]   =   str   (   round   (   tc   [   4   ] ,   2   ) )   tc   [   5   ]   =   str   (   round   (   tc   [   5   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   6   ]   =   str   (   round   (   tc   [   6   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   7   ]   =   str   (   round   (   tc   [   7   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   8   ]   =   str   (   round   (   tc   [   8   ] ,   2   ) )   tc   [   9   ]   =   str   (   round   (   tc   [   9   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   10   ]   =   str   (   round   (   tc   [   10   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   11   ]   =   str   (   round   (   tc   [   11   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   12   ]   =   str   (   round   (   tc   [   12   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   13   ]   =   str   (   round   (   tc   [   13   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   14   ]   =   str   (   round   (   tc   [   14   ] ,   2   ) )   tc   [   15   ]   =   str   (   round   (   tc   [   15   ] ,   2   ) )   tc   [   16   ]   =   str   (   round   (   tc   [   16   ]   *   100   ,   2   ) )   +   \" % \"   tc   [   17   ]   =   str   (   round   (   tc   [   17   ]   *   100   ,   2   ) )   +   \" % \"   new _ total _ comments   =   pd   .   DataFrame   (   {   comments _ sheetname   :   tc   } ,   index   =   total _ comments   .   index   )   new _ total _ comments   .   T   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   comments _ sheetname   )   if   net _ values _ writer   and   net _ values _ sheetname   :   groups _ net _ values   =   self   .   group _ net _ values   .   copy   ( )   groups _ net _ values   .   index   =   groups _ net _ values   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   groups _ net _ values   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   groups _ net _ values   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   groups _ net _ values   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   net _ values _ sheetname   )   if   rets _ writer   and   rets _ sheetname   :   group _ rets   =   self   .   group _ rets   .   copy   ( )   group _ rets   .   index   =   group _ rets   .   index   .   strftime   (   \" % Y / % m /   % d   \"   )   group _ rets   .   columns   =   [   f   \" \u5206\u7ec4   {   i   }   \"   for   i   in   range   (   1   ,   len   (   list   (   group _ rets   .   columns   ) ) )   ]   +   [   \" \u591a\u7a7a \u5bf9\u51b2 \uff08 \u53f3\u8f74 \uff09 \"   ]   group _ rets   .   to _ excel   (   rets _ writer   ,   sheet _ name   =   rets _ sheetname   )","title":"run ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.set_factor_df_date_as_index","text":"\u8bbe\u7f6e \u56e0\u5b50 \u6570\u636e \u7684 dataframe \uff0c \u56e0\u5b50 \u8868 \u5217\u540d \u5e94\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u5e94\u4e3a \u65f6\u95f4   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   1643   1644   1645   1646   1647   1648   1649   1650   1651   1652   1653   1654   1655   1656   1657   1658   1659   def   set _ factor _ df _ date _ as _ index   (   self   ,   df   :   pd   .   DataFrame   ) :   \" \" \" \u8bbe\u7f6e \u56e0\u5b50 \u6570\u636e \u7684 dataframe \uff0c \u56e0\u5b50 \u8868 \u5217\u540d \u5e94\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u7d22\u5f15 \u5e94\u4e3a \u65f6\u95f4 \" \" \"   #   week _ here   self   .   factors   =   df   .   resample   (   self   .   freq   )   .   last   ( )   .   dropna   (   how   =   \" all \"   )   self   .   factor _ cover   =   np   .   sign   (   self   .   factors   .   abs   ( )   +   1   )   .   sum   ( )   .   sum   ( )   opens   =   self   .   opens   [   self   .   opens   .   index   > =   self   .   factors   .   index   .   min   ( ) ]   total   =   np   .   sign   (   opens   .   resample   (   self   .   freq   )   .   last   ( ) )   .   sum   ( )   .   sum   ( )   self   .   factor _ cover   =   min   (   self   .   factor _ cover   /   total   ,   1   )   self   .   factor _ cross _ skew   =   self   .   factors   .   skew   (   axis   =   1   )   .   mean   ( )   pos _ num   =   ( (   self   .   factors   >   0   )   +   0   )   .   sum   ( )   .   sum   ( )   neg _ num   =   ( (   self   .   factors   <   0   )   +   0   )   .   sum   ( )   .   sum   ( )   self   .   pos _ neg _ rate   =   pos _ num   /   (   neg _ num   +   pos _ num   )   self   .   corr _ itself   =   show _ corr   (   self   .   factors   ,   self   .   factors   .   shift   (   1   ) ,   plt _ plot   =   0   )   self   .   corr _ itself _ shift2   =   show _ corr   (   self   .   factors   ,   self   .   factors   .   shift   (   2   ) ,   plt _ plot   =   0   )   self   .   factor _ cross _ stds   =   self   .   factors   .   std   (   axis   =   1   )","title":"set _ factor _ df _ date _ as _ index ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moon.to_group_ret","text":"\u6bcf \u4e00\u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2009   2010   2011   2012   2013   def   to _ group _ ret   (   self   ,   l   ) :   \" \" \" \u6bcf \u4e00\u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \" \" \"   #   week _ here   ret   =   l   [   -   1   ]   * *   (   self   .   freq _ ctrl   .   counts _ one _ year   /   len   (   l   ) )   -   1   return   ret","title":"to _ group _ ret ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moonnight","text":"Bases :   object   \u5c01\u88c5 \u9009\u80a1 \u6846\u67b6   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   2611   2612   2613   2614   2615   2616   2617   2618   2619   2620   2621   2622   2623   2624   2625   2626   2627   2628   2629   2630   2631   2632   2633   2634   2635   2636   2637   2638   2639   2640   2641   2642   2643   2644   2645   2646   2647   2648   2649   2650   2651   2652   2653   2654   2655   2656   2657   2658   2659   2660   2661   2662   2663   2664   2665   2666   2667   2668   2669   2670   2671   2672   2673   2674   2675   2676   2677   2678   2679   2680   2681   2682   2683   2684   2685   2686   2687   2688   2689   2690   2691   2692   2693   2694   2695   2696   2697   2698   2699   2700   2701   2702   2703   2704   2705   2706   2707   2708   2709   2710   2711   2712   2713   2714   2715   2716   2717   2718   2719   2720   2721   2722   2723   2724   2725   2726   2727   2728   2729   2730   2731   2732   2733   2734   2735   2736   2737   2738   2739   2740   2741   2742   2743   2744   2745   2746   2747   2748   2749   2750   2751   2752   2753   2754   2755   2756   2757   2758   2759   2760   2761   2762   2763   2764   2765   2766   2767   2768   2769   2770   2771   2772   2773   2774   2775   2776   2777   2778   2779   2780   2781   2782   2783   2784   2785   2786   2787   2788   2789   2790   2791   2792   2793   2794   2795   2796   2797   2798   2799   2800   2801   2802   2803   2804   2805   2806   2807   2808   2809   2810   2811   2812   2813   2814   2815   2816   2817   2818   2819   2820   2821   2822   2823   2824   2825   2826   2827   2828   2829   2830   2831   2832   2833   2834   2835   2836   2837   2838   2839   2840   2841   2842   2843   2844   2845   2846   2847   2848   2849   2850   2851   2852   2853   2854   2855   2856   2857   2858   2859   2860   2861   2862   2863   2864   2865   2866   2867   2868   2869   2870   2871   2872   2873   2874   2875   2876   2877   2878   2879   2880   2881   2882   2883   2884   2885   2886   2887   2888   2889   2890   2891   2892   2893   2894   2895   2896   2897   2898   2899   2900   2901   2902   2903   2904   2905   2906   2907   2908   2909   2910   2911   2912   2913   2914   2915   2916   2917   2918   2919   2920   2921   2922   2923   2924   2925   2926   2927   2928   2929   2930   2931   2932   @ do _ on _ dfs   class   pure _ moonnight   (   object   ) :   \" \" \" \u5c01\u88c5 \u9009\u80a1 \u6846\u67b6 \" \" \"   __ slots __   =   [   \" shen \"   ]   def   __ init __   (   self   ,   factors   :   pd   .   DataFrame   ,   groups _ num   :   int   =   10   ,   freq   :   str   =   \" M \"   ,   neutralize   :   bool   =   0   ,   boxcox   :   bool   =   1   ,   trade _ cost _ double _ side   :   float   =   0   ,   value _ weighted   :   bool   =   0   ,   y2   :   bool   =   0   ,   plt _ plot   :   bool   =   1   ,   plotly _ plot   :   bool   =   0   ,   filename   :   str   =   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   ,   time _ start   :   int   =   None   ,   time _ end   :   int   =   None   ,   print _ comments   :   bool   =   1   ,   comments _ writer   :   pd   .   ExcelWriter   =   None   ,   net _ values _ writer   :   pd   .   ExcelWriter   =   None   ,   rets _ writer   :   pd   .   ExcelWriter   =   None   ,   comments _ sheetname   :   str   =   None   ,   net _ values _ sheetname   :   str   =   None   ,   rets _ sheetname   :   str   =   None   ,   on _ paper   :   bool   =   0   ,   sheetname   :   str   =   None   ,   zxindustry _ dummies   :   bool   =   0   ,   swindustry _ dummies   :   bool   =   0   ,   ages   :   pd   .   DataFrame   =   None   ,   sts   :   pd   .   DataFrame   =   None   ,   states   :   pd   .   DataFrame   =   None   ,   opens   :   pd   .   DataFrame   =   None   ,   closes   :   pd   .   DataFrame   =   None   ,   capitals   :   pd   .   DataFrame   =   None   ,   swindustry _ dummy   :   pd   .   DataFrame   =   None   ,   zxindustry _ dummy   :   pd   .   DataFrame   =   None   ,   no _ read _ indu   :   bool   =   0   ,   only _ cap   :   bool   =   0   ,   iplot   :   bool   =   1   ,   ilegend   :   bool   =   0   ,   without _ breakpoint   :   bool   =   0   ,   opens _ average _ first _ day   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   )   - >   None   :   \" \" \" \u4e00\u952e \u56de\u6d4b \u6846\u67b6 \uff0c \u6d4b\u8bd5 \u5355 \u56e0\u5b50 \u7684 \u6708 \u9891\u8c03 \u4ed3 \u7684 \u5206\u7ec4 \u8868\u73b0   \u6bcf\u6708 \u6708\u5e95 \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5f00\u76d8 \u65f6 \u4e70\u5165 \uff0c \u6708\u672b \u6536\u76d8 \u6700\u540e \u4e00\u5929 \u6536\u76d8 \u65f6 \u5356\u51fa   \u5254\u9664 \u4e0a\u5e02 \u4e0d\u8db3 60 \u5929 \u7684 \uff0c \u505c\u724c \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684 \uff0c st \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684   \u6708\u672b \u6536\u76d8 \u8dcc\u505c \u7684 \u4e0d \u5356\u51fa \uff0c \u6708\u521d \u5f00\u76d8 \u6da8\u505c \u7684 \u4e0d \u4e70\u5165   \u7531 \u6700\u597d \u7ec4\u548c \u6700\u5dee \u7ec4 \u7684 \u591a\u7a7a \u7ec4\u5408 \u6784\u6210 \u591a\u7a7a \u5bf9\u51b2 \u7ec4   Parameters   ----------   factors   :   pd . DataFrame   \u8981 \u7528\u4e8e \u68c0\u6d4b \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   groups _ num   :   int ,   optional   \u5206\u7ec4 \u6570\u91cf ,   by   default   10   freq   :   str ,   optional   \u56de\u6d4b \u9891\u7387 ,   by   default   ' M '   neutralize   :   bool ,   optional   \u5bf9 \u6d41\u901a \u5e02\u503c \u53d6 \u81ea\u7136 \u5bf9\u6570 \u81ea\u7136\u5bf9\u6570 \uff0c \u4ee5 \u5b8c\u6210 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   boxcox   :   bool ,   optional   \u5bf9 \u6d41\u901a \u5e02\u503c \u505a \u622a\u9762 boxcox \u53d8\u6362 \uff0c \u4ee5 \u5b8c\u6210 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   1   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   value _ weighted   :   bool ,   optional   \u662f\u5426 \u7528 \u6d41\u901a \u5e02\u503c \u52a0\u6743 ,   by   default   0   y2   :   bool ,   optional   \u753b\u56fe \u65f6 \u662f\u5426 \u542f\u7528 \u7b2c\u4e8c y \u8f74 ,   by   default   0   plt _ plot   :   bool ,   optional   \u5c06 \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7528 matplotlib \u753b \u51fa\u6765 ,   by   default   1   plotly _ plot   :   bool ,   optional   \u5c06 \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7528 plotly \u753b \u51fa\u6765 ,   by   default   0   filename   :   str ,   optional   \u5206\u7ec4 \u51c0\u503c \u66f2\u7ebf \u7684 \u56fe \u4fdd\u5b58 \u7684 \u540d\u79f0 ,   by   default   \" \u5206\u7ec4 \u51c0\u503c \u56fe \"   time _ start   :   int ,   optional   \u56de\u6d4b \u8d77\u59cb \u65f6\u95f4 ,   by   default   None   time _ end   :   int ,   optional   \u56de\u6d4b \u7ec8\u6b62 \u65f6\u95f4 ,   by   default   None   print _ comments   :   bool ,   optional   \u662f\u5426 \u6253\u5370 \u51fa \u8bc4\u4ef7 \u6307\u6807 ,   by   default   1   comments _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u8bc4\u4ef7 \u6307\u6807 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u51c0\u503c \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   rets _ writer   :   pd . ExcelWriter ,   optional   \u7528\u4e8e \u8bb0\u5f55 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 ,   by   default   None   comments _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u8bc4\u4ef7 \u6307\u6807 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   net _ values _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u51c0\u503c \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   rets _ sheetname   :   str ,   optional   \u5728 \u8bb0\u5f55 \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u7684 xlsx \u6587\u4ef6 \u4e2d \uff0c \u8be5 \u5de5\u4f5c \u8868 \u7684 \u540d\u79f0 ,   by   default   None   on _ paper   :   bool ,   optional   \u4f7f\u7528 \u5b66\u672f \u5b66\u672f\u5316 \u8bc4\u4ef7 \u6307\u6807 ,   by   default   0   sheetname   :   str ,   optional   \u5404\u4e2a pd . Excelwriter \u4e2d \u5de5\u4f5c \u8868 \u7684 \u7edf\u4e00 \u540d\u79f0 ,   by   default   None   zxindustry _ dummies   :   bool ,   optional   \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \uff0c \u9009\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   swindustry _ dummies   :   bool ,   optional   \u884c\u4e1a \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \uff0c \u9009\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   ages   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u4e0a\u5e02 \u5929\u6570 \u7684 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u5929\u6570 ,   by   default   None   sts   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u6bcf\u5929 \u662f\u5426 st \u7684 \u6570\u636e \uff0c \u662f st \u80a1\u5373 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f 0 \u6216 1 ,   by   default   None   states   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u6bcf\u5929 \u4ea4\u6613 \u72b6\u6001 \u7684 \u6570\u636e \uff0c \u6b63\u5e38 \u4ea4\u6613 \u4e3a 1 \uff0c \u5426\u5219 \u4e3a 0 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f 0 \u6216 1 ,   by   default   None   opens   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u590d\u6743 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u4ef7\u683c ,   by   default   None   closes   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u590d\u6743 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u4ef7\u683c ,   by   default   None   capitals   :   pd . DataFrame ,   optional   \u8f93\u5165 \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u6d41\u901a \u5e02\u503c \u6570\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u662f \u6d41\u901a \u5e02\u503c ,   by   default   None   swindustry _ dummy   :   pd . DataFrame ,   optioanl   \u719f\u4eba \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u7684 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u8868 \u5305\u542b 33 \u5217 \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u540d\u4e3a ` code ` \uff0c \u7b2c\u4e8c \u5217\u4e3a \u6708\u672b \u6700\u540e \u4e00\u5929 \u7684 \u65e5\u671f \uff0c \u540d\u4e3a ` date `   \u5176\u4f59 31 \u5217 \uff0c \u4e3a \u5404\u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \uff0c \u540d\u4e3a ` w1 ` \u3001 ` w2 ` \u3001 ` w3 ` \u2026 \u2026 ` w31 ` ,   by   default   None   zxindustry _ dummy   :   pd . DataFrame ,   optioanl   \u719f\u4eba \u80a1\u7968 \u7684 \u6bcf\u6708 \u6708\u672b \u7684 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \uff0c \u8868 \u5305\u542b 32 \u5217 \uff0c \u7b2c\u4e00 \u5217\u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u540d\u4e3a ` code ` \uff0c \u7b2c\u4e8c \u5217\u4e3a \u6708\u672b \u6700\u540e \u4e00\u5929 \u7684 \u65e5\u671f \uff0c \u540d\u4e3a ` date `   \u5176\u4f59 30 \u5217 \uff0c \u4e3a \u5404\u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \uff0c \u540d\u4e3a ` w1 ` \u3001 ` w2 ` \u3001 ` w3 ` \u2026 \u2026 ` w30 ` ,   by   default   None   no _ read _ indu   :   bool ,   optional   \u4e0d \u8bfb\u5165 \u884c\u4e1a \u6570\u636e ,   by   default   0   only _ cap   :   bool ,   optional   \u4ec5 \u505a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 ,   by   default   0   iplot   :   bool ,   optional   \u4f7f\u7528 cufflinks \u5448\u73b0 \u56de\u6d4b \u7ed3\u679c ,   by   default   1   ilegend   :   bool ,   optional   \u4f7f\u7528 cufflinks \u7ed8\u56fe \u65f6 \uff0c \u662f\u5426 \u663e\u793a \u56fe\u4f8b ,   by   default   1   without _ breakpoint   :   bool ,   optional   \u753b\u56fe \u7684 \u65f6\u5019 \u662f\u5426 \u53bb\u9664 \u95f4\u65ad \u70b9 ,   by   default   0   opens _ average _ first _ day   :   bool ,   optional   \u4e70\u5165 \u65f6 \u4f7f\u7528 \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u7684 \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c ,   by   default   0   total _ cap   :   bool ,   optional   \u52a0\u6743 \u548c \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u65f6 \u4f7f\u7528 \u603b \u5e02\u503c ,   by   default   0   \" \" \"   if   not   isinstance   (   factors   ,   pd   .   DataFrame   ) :   factors   =   factors   ( )   if   comments _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   comments _ writer   =   COMMENTS _ WRITER   if   net _ values _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   NET _ VALUES _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   if   not   on _ paper   :   from   pure _ ocean _ breeze . state . states   import   ON _ PAPER   on _ paper   =   ON _ PAPER   if   time _ start   is   None   :   from   pure _ ocean _ breeze . state . states   import   MOON _ START   if   MOON _ START   is   not   None   :   factors   =   factors   [   factors   .   index   > =   pd   .   Timestamp   (   str   (   MOON _ START   ) ) ]   else   :   factors   =   factors   [   factors   .   index   > =   pd   .   Timestamp   (   str   (   time _ start   ) ) ]   if   time _ end   is   None   :   from   pure _ ocean _ breeze . state . states   import   MOON _ END   if   MOON _ END   is   not   None   :   factors   =   factors   [   factors   .   index   < =   pd   .   Timestamp   (   str   (   MOON _ END   ) ) ]   else   :   factors   =   factors   [   factors   .   index   < =   pd   .   Timestamp   (   str   (   time _ end   ) ) ]   if   boxcox   +   neutralize   = =   0   :   no _ read _ indu   =   1   if   only _ cap   +   no _ read _ indu   >   0   :   only _ cap   =   no _ read _ indu   =   1   if   iplot   :   print _ comments   =   0   if   total _ cap   :   if   opens _ average _ first _ day   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ b   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ b   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ c   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ c   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   opens _ average _ first _ day   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   else   :   if   freq   = =   \" M \"   :   self   .   shen   =   pure _ moon _ a   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   elif   freq   = =   \" W \"   :   self   .   shen   =   pure _ week _ a   (   freq   =   freq   ,   no _ read _ indu   =   no _ read _ indu   ,   swindustry _ dummy   =   swindustry _ dummy   ,   zxindustry _ dummy   =   zxindustry _ dummy   ,   read _ in _ swindustry _ dummy   =   swindustry _ dummies   ,   )   self   .   shen   .   set _ basic _ data   (   ages   =   ages   ,   sts   =   sts   ,   states   =   states   ,   opens   =   opens   ,   closes   =   closes   ,   capitals   =   capitals   ,   opens _ average _ first _ day   =   opens _ average _ first _ day   ,   total _ cap   =   total _ cap   ,   )   self   .   shen   .   set _ factor _ df _ date _ as _ index   (   factors   )   self   .   shen   .   prerpare   ( )   self   .   shen   .   run   (   groups _ num   =   groups _ num   ,   neutralize   =   neutralize   ,   boxcox   =   boxcox   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   value _ weighted   =   value _ weighted   ,   y2   =   y2   ,   plt _ plot   =   plt _ plot   ,   plotly _ plot   =   plotly _ plot   ,   filename   =   filename   ,   print _ comments   =   print _ comments   ,   comments _ writer   =   comments _ writer   ,   net _ values _ writer   =   net _ values _ writer   ,   rets _ writer   =   rets _ writer   ,   comments _ sheetname   =   comments _ sheetname   ,   net _ values _ sheetname   =   net _ values _ sheetname   ,   rets _ sheetname   =   rets _ sheetname   ,   on _ paper   =   on _ paper   ,   sheetname   =   sheetname   ,   swindustry _ dummies   =   swindustry _ dummies   ,   zxindustry _ dummies   =   zxindustry _ dummies   ,   only _ cap   =   only _ cap   ,   iplot   =   iplot   ,   ilegend   =   ilegend   ,   without _ breakpoint   =   without _ breakpoint   ,   )   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u8fd4\u56de \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e   Returns   -------   ` pd . DataFrame `   \u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e \uff0c \u5426\u5219 \u8fd4\u56de \u539f\u56e0 \u5b50 \u6570\u636e   \" \" \"   return   self   .   shen   .   factors _ out   def   comments _ ten   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56de\u6d4b \u7684 \u5341\u5206 \u7ec4 \u7ed3\u679c \u5206\u522b \u7ed9\u51fa \u8bc4\u4ef7   Returns   -------   ` pd . DataFrame `   \u8bc4\u4ef7 \u6307\u6807 \u5305\u62ec \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u603b \u6536\u76ca \u6536\u76ca\u7387 \u3001 \u5e74\u5316 \u6ce2\u52a8 \u7387 \u3001 \u5e74\u5316 \u590f\u666e \u6bd4\u7387 \u3001 \u6700\u5927 \u56de\u64a4 \u7387 \u3001 \u80dc\u7387   \" \" \"   rets _ cols   =   list   (   self   .   shen   .   group _ rets   .   columns   )   rets _ cols   =   rets _ cols   [ :   -   1   ]   coms   =   [ ]   for   i   in   rets _ cols   :   ret   =   self   .   shen   .   group _ rets   [   i   ]   net   =   self   .   shen   .   group _ net _ values   [   i   ]   com   =   comments _ on _ twins   (   net   ,   ret   )   com   =   com   .   to _ frame   (   i   )   coms   .   append   (   com   )   df   =   pd   .   concat   (   coms   ,   axis   =   1   )   return   df   .   T   def   comment _ yearly   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56de\u6d4b \u7684 \u6bcf\u5e74 \u8868\u73b0 \u7ed9\u51fa \u8bc4\u4ef7   Returns   -------   pd . DataFrame   \u5404 \u5e74\u5ea6 \u7684 \u6536\u76ca \u6536\u76ca\u7387   \" \" \"   df   =   self   .   shen   .   group _ net _ values   .   resample   (   \" Y \"   )   .   last   ( )   .   pct _ change   ( )   df   .   index   =   df   .   index   .   year   return   df","title":"pure _ moonnight"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moonnight.__call__","text":"\u5982\u679c \u505a \u4e86 \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \uff0c \u5219 \u8fd4\u56de \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u6570\u636e","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moonnight.__init__","text":"\u4e00\u952e \u56de\u6d4b \u6846\u67b6 \uff0c \u6d4b\u8bd5 \u5355 \u56e0\u5b50 \u7684 \u6708 \u9891\u8c03 \u4ed3 \u7684 \u5206\u7ec4 \u8868\u73b0   \u6bcf\u6708 \u6708\u5e95 \u8ba1\u7b97 \u56e0\u5b50 \u503c \uff0c \u6708\u521d \u7b2c\u4e00 \u4e00\u5929 \u7b2c\u4e00\u5929 \u5f00\u76d8 \u65f6 \u4e70\u5165 \uff0c \u6708\u672b \u6536\u76d8 \u6700\u540e \u4e00\u5929 \u6536\u76d8 \u65f6 \u5356\u51fa   \u5254\u9664 \u4e0a\u5e02 \u4e0d\u8db3 60 \u5929 \u7684 \uff0c \u505c\u724c \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684 \uff0c st \u5929\u6570 \u8d85\u8fc7 \u4e00\u534a \u7684   \u6708\u672b \u6536\u76d8 \u8dcc\u505c \u7684 \u4e0d \u5356\u51fa \uff0c \u6708\u521d \u5f00\u76d8 \u6da8\u505c \u7684 \u4e0d \u4e70\u5165   \u7531 \u6700\u597d \u7ec4\u548c \u6700\u5dee \u7ec4 \u7684 \u591a\u7a7a \u7ec4\u5408 \u6784\u6210 \u591a\u7a7a \u5bf9\u51b2 \u7ec4","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moonnight.comment_yearly","text":"\u5bf9 \u56de\u6d4b \u7684 \u6bcf\u5e74 \u8868\u73b0 \u7ed9\u51fa \u8bc4\u4ef7","title":"comment _ yearly ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_moonnight.comments_ten","text":"\u5bf9 \u56de\u6d4b \u7684 \u5341\u5206 \u7ec4 \u7ed3\u679c \u5206\u522b \u7ed9\u51fa \u8bc4\u4ef7","title":"comments _ ten ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_newyear","text":"Bases :   object   \u8f6c\u4e3a \u751f\u6210 25 \u5206\u7ec4 \u548c \u767e \u5206\u7ec4 \u7684 \u6536\u76ca \u77e9\u9635 \u800c \u5c01\u88c5   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4018   4019   4020   4021   4022   4023   4024   4025   4026   4027   4028   4029   4030   4031   4032   4033   4034   4035   4036   4037   4038   4039   4040   4041   4042   4043   4044   4045   4046   4047   4048   4049   4050   4051   4052   4053   4054   4055   4056   4057   4058   4059   4060   4061   4062   4063   4064   4065   4066   4067   4068   4069   4070   4071   4072   4073   4074   4075   4076   class   pure _ newyear   (   object   ) :   \" \" \" \u8f6c\u4e3a \u751f\u6210 25 \u5206\u7ec4 \u548c \u767e \u5206\u7ec4 \u7684 \u6536\u76ca \u77e9\u9635 \u800c \u5c01\u88c5 \" \" \"   def   __ init __   (   self   ,   facx   :   pd   .   DataFrame   ,   facy   :   pd   .   DataFrame   ,   group _ num _ single   :   int   ,   trade _ cost _ double _ side   :   float   =   0   ,   namex   :   str   =   \" \u4e3b \"   ,   namey   :   str   =   \" \u6b21 \"   ,   )   - >   None   :   \" \" \" \u6761\u4ef6 \u53cc \u53d8\u91cf \u6392\u5e8f \u6cd5 \uff0c \u5148\u5bf9 \u6240\u6709 \u80a1\u7968 \uff0c \u4f9d\u7167 \u56e0\u5b50 facx \u8fdb\u884c \u6392\u5e8f   \u7136\u540e \u5728 \u6bcf\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u6700\u540e \u7edf\u8ba1 \u5404\u4e2a \u7ec4\u5185 \u7684 \u5e73\u5747 \u6536\u76ca \u6536\u76ca\u7387   Parameters   ----------   facx   :   pd . DataFrame   \u9996\u5148 \u8fdb\u884c \u6392\u5e8f \u7684 \u56e0\u5b50 \uff0c \u901a\u5e38 \u4e3a \u63a7\u5236 \u53d8\u91cf \u63a7\u5236\u53d8 \u63a7\u5236\u53d8\u91cf \uff0c \u76f8\u5f53 \u5f53\u4e8e \u76f8\u5f53\u4e8e \u6b63\u4ea4 \u5316\u4e2d \u7684 \u53d8\u91cf \u81ea\u53d8\u91cf   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   facy   :   pd . DataFrame   \u5728 facx \u7684 \u5404\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u4e3a \u4e3b\u8981 \u8981 \u7814\u7a76 \u7684 \u56e0\u5b50   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   group _ num _ single   :   int   \u5355\u4e2a \u56e0\u5b50 \u5206\u6210 \u51e0\u7ec4 \uff0c \u901a\u5e38 \u4e3a 5 \u6216 10   trade _ cost _ double _ side   :   float ,   optional   \u4ea4\u6613 \u7684 \u53cc\u8fb9 \u624b\u7eed \u7eed\u8d39 \u624b\u7eed\u8d39 \u7387 ,   by   default   0   namex   :   str ,   optional   facx \u8fd9\u4e00 \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   \" \u4e3b \"   namey   :   str ,   optional   facy \u8fd9\u4e00 \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   \" \u6b21 \"   \" \" \"   homex   =   pure _ fallmount   (   facx   )   homey   =   pure _ fallmount   (   facy   )   if   group _ num _ single   = =   5   :   homexy   =   homex   >   homey   elif   group _ num _ single   = =   10   :   homexy   =   homex   > >   homey   shen   =   pure _ moonnight   (   homexy   ( ) ,   group _ num _ single   * *   2   ,   trade _ cost _ double _ side   =   trade _ cost _ double _ side   ,   plt _ plot   =   False   ,   print _ comments   =   False   ,   )   sq   =   shen   .   shen   .   square _ rets   .   copy   ( )   sq   .   index   =   [   namex   +   str   (   i   )   for   i   in   list   (   sq   .   index   ) ]   sq   .   columns   =   [   namey   +   str   (   i   )   for   i   in   list   (   sq   .   columns   ) ]   self   .   square _ rets   =   sq   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u8c03\u7528 \u5bf9\u8c61 \u65f6 \uff0c \u8fd4\u56de \u6700\u7ec8 \u7ed3\u679c \uff0c \u6b63\u65b9 \u65b9\u5f62 \u6b63\u65b9\u5f62 \u7684 \u5206\u7ec4 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u8868   Returns   -------   ` pd . DataFrame `   \u6bcf\u4e2a \u7ec4 \u7684 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387   \" \" \"   return   self   .   square _ rets   .   copy   ( )","title":"pure _ newyear"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_newyear.__call__","text":"\u8c03\u7528 \u5bf9\u8c61 \u65f6 \uff0c \u8fd4\u56de \u6700\u7ec8 \u7ed3\u679c \uff0c \u6b63\u65b9 \u65b9\u5f62 \u6b63\u65b9\u5f62 \u7684 \u5206\u7ec4 \u5e74\u5316 \u6536\u76ca \u6536\u76ca\u7387 \u8868","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_newyear.__init__","text":"\u6761\u4ef6 \u53cc \u53d8\u91cf \u6392\u5e8f \u6cd5 \uff0c \u5148\u5bf9 \u6240\u6709 \u80a1\u7968 \uff0c \u4f9d\u7167 \u56e0\u5b50 facx \u8fdb\u884c \u6392\u5e8f   \u7136\u540e \u5728 \u6bcf\u4e2a \u7ec4\u5185 \uff0c \u4f9d\u7167 facy \u8fdb\u884c \u6392\u5e8f \uff0c \u6700\u540e \u7edf\u8ba1 \u5404\u4e2a \u7ec4\u5185 \u7684 \u5e73\u5747 \u6536\u76ca \u6536\u76ca\u7387","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_rollingols","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   4893   4894   4895   4896   4897   4898   4899   4900   4901   4902   4903   4904   4905   4906   4907   4908   4909   4910   4911   4912   4913   4914   4915   4916   4917   4918   4919   4920   4921   4922   4923   4924   4925   4926   4927   4928   4929   4930   4931   4932   4933   4934   4935   4936   4937   4938   4939   4940   4941   4942   4943   4944   4945   4946   4947   4948   4949   4950   4951   4952   4953   4954   4955   4956   4957   4958   4959   4960   4961   4962   4963   4964   4965   4966   4967   4968   4969   4970   4971   4972   4973   4974   4975   4976   4977   4978   4979   4980   4981   4982   4983   4984   4985   4986   4987   4988   4989   4990   4991   4992   4993   4994   4995   4996   4997   4998   4999   5000   5001   5002   5003   5004   5005   5006   5007   5008   class   pure _ rollingols   (   object   ) :   def   __ init __   (   self   ,   y   :   pd   .   DataFrame   ,   xs   :   Union   [   List   [   pd   .   DataFrame   ] ,   pd   .   DataFrame   ] ,   backsee   :   int   =   20   ,   factors _ names   :   List   [   str   ]   =   None   ,   )   - >   None   :   \" \" \" \u4f7f\u7528 \u82e5\u5e72 \u82e5\u5e72\u4e2a dataframe \uff0c \u5bf9\u5e94 \u7684 \u80a1\u7968 \u8fdb\u884c \u6307\u5b9a \u7a97\u53e3 \u7684 \u65f6\u5e8f \u6eda\u52a8 \u56de\u5f52   Parameters   ----------   y   :   pd . DataFrame   \u6eda\u52a8 \u56de\u5f52 \u4e2d \u7684 \u53d8\u91cf \u56e0\u53d8\u91cf y \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   xs   :   Union [ List [ pd . DataFrame ] ,   pd . DataFrame ]   \u6eda\u52a8 \u56de\u5f52 \u4e2d \u7684 \u53d8\u91cf \u81ea\u53d8\u91cf xi \uff0c \u6bcf \u4e00\u4e2a dataframe \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   backsee   :   int ,   optional   \u6eda\u52a8 \u56de\u5f52 \u7684 \u65f6\u95f4 \u7a97\u53e3 ,   by   default   20   factors _ names   :   List [ str ] ,   optional   xs \u4e2d \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   self   .   backsee   =   backsee   self   .   y   =   y   if   not   isinstance   (   xs   ,   list   ) :   xs   =   [   xs   ]   self   .   xs   =   xs   y   =   y   .   stack   ( )   .   reset _ index   ( )   xs   =   [   i   .   stack   ( )   .   reset _ index   ( )   for   i   in   xs   ]   y   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" y \"   ]   xs   =   [   i   .   rename   (   columns   =   {   list   (   i   .   columns   ) [   1   ] :   \" code \"   ,   list   (   i   .   columns   ) [   2   ] :   f   \" x   {   j   +   1   }   \"   }   )   for   j   ,   i   in   enumerate   (   xs   )   ]   xs   =   [   y   ]   +   xs   xs   =   reduce   (   lambda   x   ,   y   :   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] ) ,   xs   )   xs   =   xs   .   set _ index   (   \" date \"   )   self   .   __ data   =   xs   self   .   haha   =   xs   tqdm   .   auto   .   tqdm   .   pandas   ( )   self   .   __ coefficients   =   (   self   .   __ data   .   groupby   (   \" code \"   )   .   progress _ apply   (   self   .   ols _ in   )   .   reset _ index   ( )   )   self   .   __ coefficients   =   self   .   __ coefficients   .   rename   (   columns   =   {   i   :   \" co \"   +   i   for   i   in   list   (   self   .   __ coefficients   .   columns   )   if   \" x \"   in   i   }   )   self   .   __ data   =   pd   .   merge   (   self   .   __ data   .   reset _ index   ( ) ,   self   .   __ coefficients   ,   on   =   [   \" date \"   ,   \" code \"   ]   )   betas   =   [   self   .   __ data   [   i   ]   *   self   .   __ data   [   \" co \"   +   i   ]   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" x \"   )   ]   betas   =   sum   (   betas   )   self   .   __ data   =   self   .   __ data   .   assign   (   residual   =   self   .   __ data   .   y   -   self   .   __ data   .   intercept   -   betas   )   self   .   __ residual   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" residual \"   )   self   .   __ alphas   =   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" intercept \"   )   if   factors _ names   is   None   :   self   .   __ betas   =   {   i   :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" cox \"   )   }   else   :   facs   =   [   i   for   i   in   list   (   self   .   __ data   .   columns   )   if   i   .   startswith   (   \" cox \"   ) ]   self   .   __ betas   =   {   factors _ names   [   num   ] :   self   .   __ data   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   i   )   for   num   ,   i   in   enumerate   (   facs   )   }   if   len   (   list   (   self   .   __ betas   ) )   = =   1   :   self   .   __ betas   =   list   (   self   .   __ betas   .   values   ( ) ) [   0   ]   @ property   def   residual   (   self   ) :   return   self   .   __ residual   @ property   def   data   (   self   ) :   return   self   .   __ data   @ property   def   alphas   (   self   ) :   return   self   .   __ alphas   @ property   def   betas   (   self   ) :   return   self   .   __ betas   @ property   def   coefficients   (   self   ) :   return   self   .   __ coefficients   def   ols _ in   (   self   ,   df   ) :   try   :   ols   =   po   .   PandasRollingOLS   (   y   =   df   [ [   \" y \"   ] ] ,   x   =   df   [ [   f   \" x   {   i   +   1   }   \"   for   i   in   range   (   len   (   self   .   xs   ) ) ] ] ,   window   =   self   .   backsee   ,   )   betas   =   ols   .   beta   alpha   =   ols   .   alpha   return   pd   .   concat   ( [   alpha   ,   betas   ] ,   axis   =   1   )   except   Exception   :   #   \u6709\u4e9b \u6570\u636e \u603b\u5171 \u4e0d\u8db3 \uff0c \u90a3 \u5c31 \u8df3 \u8fc7   ...","title":"pure _ rollingols"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_rollingols.__init__","text":"\u4f7f\u7528 \u82e5\u5e72 \u82e5\u5e72\u4e2a dataframe \uff0c \u5bf9\u5e94 \u7684 \u80a1\u7968 \u8fdb\u884c \u6307\u5b9a \u7a97\u53e3 \u7684 \u65f6\u5e8f \u6eda\u52a8 \u56de\u5f52","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_snowtrain","text":"Bases :   object   \u76f4\u63a5 \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   3933   3934   3935   3936   3937   3938   3939   3940   3941   3942   3943   3944   3945   3946   3947   3948   3949   3950   3951   3952   3953   3954   3955   3956   3957   3958   3959   3960   3961   3962   3963   3964   3965   3966   3967   3968   3969   3970   3971   3972   3973   3974   3975   3976   3977   3978   3979   3980   3981   3982   3983   3984   3985   3986   3987   3988   3989   3990   3991   3992   3993   3994   3995   3996   3997   3998   3999   4000   4001   4002   4003   4004   4005   4006   4007   4008   4009   4010   4011   4012   4013   4014   4015   @ do _ on _ dfs   class   pure _ snowtrain   (   object   ) :   \" \" \" \u76f4\u63a5 \u8fd4\u56de \u7eaf\u51c0 \u56e0\u5b50 \" \" \"   def   __ init __   (   self   ,   factors   :   pd   .   DataFrame   ,   facs _ dict   :   Dict   =   None   ,   momentum   :   bool   =   1   ,   earningsyield   :   bool   =   1   ,   growth   :   bool   =   1   ,   liquidity   :   bool   =   1   ,   size   :   bool   =   1   ,   leverage   :   bool   =   1   ,   beta   :   bool   =   1   ,   nonlinearsize   :   bool   =   1   ,   residualvolatility   :   bool   =   1   ,   booktoprice   :   bool   =   1   ,   )   - >   None   :   \" \" \" \u8ba1\u7b97 \u56e0\u5b50 \u503c \u4e0e 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u4e4b\u95f4 \u7684 \u76f8\u5173 \u76f8\u5173\u6027 \uff0c \u5e76 \u8fdb\u884c \u7eaf\u51c0 \u5316 \uff0c \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50   Parameters   ----------   factors   :   pd . DataFrame   \u8981 \u8003\u5bdf \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   facs _ dict   :   Dict ,   optional   \u989d\u5916 \u52a0\u5165 \u7684 \u56e0\u5b50 \uff0c \u540d\u5b57 \u4e3a key \uff0c \u56e0\u5b50 \u77e9\u9635 \u4e3a value \uff0c \u5f62 \u5982 ` { ' \u53cd\u8f6c ' :   ret20 ,   ' \u6362\u624b ' :   tr20 } ` ,   by   default   None   momentum   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u52a8\u91cf \u56e0\u5b50 ,   by   default   1   earningsyield   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u76c8\u5229 \u56e0\u5b50 ,   by   default   1   growth   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6210\u957f \u56e0\u5b50 ,   by   default   1   liquidity   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6d41\u52a8 \u6d41\u52a8\u6027 \u56e0\u5b50 ,   by   default   1   size   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u89c4\u6a21 \u56e0\u5b50 ,   by   default   1   leverage   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6760\u6746 \u56e0\u5b50 ,   by   default   1   beta   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d1d\u5854 \u56e0\u5b50 ,   by   default   1   nonlinearsize   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u7ebf\u6027 \u975e\u7ebf\u6027 \u5e02\u503c \u56e0\u5b50 ,   by   default   1   residualvolatility   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u6b8b\u5dee \u6ce2\u52a8 \u7387 \u56e0\u5b50 ,   by   default   1   booktoprice   :   bool ,   optional   \u662f\u5426 \u5220\u53bb \u8d26\u9762 \u5e02\u503c \u6bd4 \u56e0\u5b50 ,   by   default   1   \" \" \"   self   .   winter   =   pure _ coldwinter   (   momentum   =   momentum   ,   earningsyield   =   earningsyield   ,   growth   =   growth   ,   liquidity   =   liquidity   ,   size   =   size   ,   leverage   =   leverage   ,   beta   =   beta   ,   nonlinearsize   =   nonlinearsize   ,   residualvolatility   =   residualvolatility   ,   booktoprice   =   booktoprice   ,   )   self   .   winter   .   set _ factors _ df _ wide   (   factors   ,   facs _ dict   )   self   .   winter   .   get _ snow _ fac   ( )   self   .   corr   =   self   .   winter   .   corr   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u5f97 \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   Returns   -------   pd . DataFrame   \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   winter   .   snow _ fac   .   copy   ( )   def   show _ corr   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u5c55\u793a \u56e0\u5b50 \u4e0e barra \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Returns   -------   pd . DataFrame   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u8868\u683c   \" \" \"   return   self   .   corr   .   applymap   (   lambda   x   :   to _ percent   (   x   ) )","title":"pure _ snowtrain"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_snowtrain.__call__","text":"\u83b7\u5f97 \u7eaf\u51c0 \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_snowtrain.__init__","text":"\u8ba1\u7b97 \u56e0\u5b50 \u503c \u4e0e 10 \u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u4e4b\u95f4 \u7684 \u76f8\u5173 \u76f8\u5173\u6027 \uff0c \u5e76 \u8fdb\u884c \u7eaf\u51c0 \u5316 \uff0c \u53ef\u4ee5 \u989d\u5916 \u52a0\u5165 \u5176\u4ed6 \u56e0\u5b50","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_snowtrain.show_corr","text":"\u5c55\u793a \u56e0\u5b50 \u4e0e barra \u98ce\u683c \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570","title":"show _ corr ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_star","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / labor / process . py   Python   5373   5374   5375   5376   5377   5378   5379   5380   5381   5382   5383   5384   5385   5386   5387   5388   5389   5390   5391   5392   5393   5394   5395   5396   5397   5398   5399   5400   5401   5402   5403   5404   5405   5406   5407   5408   5409   5410   5411   5412   5413   5414   5415   5416   5417   5418   5419   5420   5421   5422   5423   5424   5425   5426   5427   5428   5429   5430   5431   5432   5433   5434   5435   5436   5437   5438   5439   5440   5441   5442   5443   5444   5445   5446   5447   5448   5449   5450   5451   5452   5453   5454   5455   5456   5457   5458   5459   5460   5461   5462   5463   5464   5465   5466   5467   5468   5469   5470   5471   5472   5473   5474   5475   5476   5477   5478   5479   5480   5481   5482   5483   5484   5485   5486   5487   5488   5489   5490   5491   5492   5493   5494   5495   5496   5497   5498   5499   5500   5501   5502   5503   5504   5505   5506   5507   5508   5509   5510   5511   5512   5513   5514   5515   5516   5517   5518   5519   5520   5521   5522   5523   5524   5525   5526   5527   5528   5529   5530   5531   @ do _ on _ dfs   class   pure _ star   (   object   ) :   def   __ init __   (   self   ,   fac   :   pd   .   Series   ,   code   :   str   =   None   ,   price _ opens   :   pd   .   Series   =   None   ,   iplot   :   bool   =   1   ,   comments _ writer   :   pd   .   ExcelWriter   =   None   ,   net _ values _ writer   :   pd   .   ExcelWriter   =   None   ,   sheetname   :   str   =   None   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   ) :   \" \" \" \u62e9\u65f6 \u56de\u6d4b \u6846\u67b6 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u6216 \u4fe1\u53f7 \u503c \uff0c \u4f9d\u636e \u4fe1\u53f7 \u4e70\u5165 \u5bf9\u5e94 \u7684 \u80a1\u7968 \u6216 \u6307\u6570 \uff0c \u5e76 \u8003\u5bdf \u7edd\u5bf9 \u6536\u76ca \u3001 \u8d85\u989d \u6536\u76ca \u548c \u57fa\u51c6 \u6536\u76ca   \u56de\u6d4b \u65b9\u5f0f \u4e3a \uff0c t \u65e5 \u6536\u76d8 \u65f6 \u83b7\u5f97 \u4fe1\u53f7 \uff0c t + 1 \u65e5 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u4e70\u5165 \uff0c t + 2 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5356\u51fa   Parameters   ----------   fac   :   pd . Series   \u4ed3\u4f4d \u6bd4\u4f8b \u5e8f\u5217 \uff0c \u6216 \u4fe1\u53f7 \u5e8f\u5217 \uff0c \u8f93\u5165 \u4fe1\u53f7 \u5e8f\u5217 \u65f6\u5373 \u4e3a 0 \u548c 1 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u65f6 \uff0c \u5c06 \u6bcf \u4e00\u671f \u7684 \u6536\u76ca \u6309\u7167 \u5bf9\u5e94 \u6bd4\u4f8b \u7f29\u5c0f   code   :   str ,   optional   \u56de\u6d4b \u7684 \u8d44\u4ea7 \u4ee3\u7801 \uff0c \u53ef\u4ee5 \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u6216 \u57fa\u91d1 \u4ee3\u7801 ,   by   default   None   price _ opens   :   pd . Series ,   optional   \u8d44\u4ea7 \u7684 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5e8f\u5217 ,   by   default   None   iplot   :   bool ,   optional   \u4f7f\u7528 cufflinks \u5448\u73b0 \u56de\u6d4b \u7ee9\u6548 \u548c \u8d70\u52bf \u8d70\u52bf\u56fe ,   by   default   1   comments _ writer   :   pd . ExcelWriter ,   optional   \u7ee9\u6548 \u8bc4\u4ef7 \u7ee9\u6548\u8bc4\u4ef7 \u7684 \u5b58\u50a8 \u6587\u4ef6 ,   by   default   None   net _ values _ writer   :   pd . ExcelWriter ,   optional   \u51c0\u503c \u5e8f\u5217 \u7684 \u5b58\u50a8 \u6587\u4ef6 ,   by   default   None   sheetname   :   str ,   optional   \u5b58\u50a8 \u6587\u4ef6 \u7684 \u5de5\u4f5c \u8868 \u7684 \u540d\u5b57 ,   by   default   None   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   \" \" \"   if   code   is   not   None   :   x1   =   code   .   split   (   \" . \"   ) [   0   ]   x2   =   code   .   split   (   \" . \"   ) [   1   ]   if   (   x1   [   0   ]   = =   \" 0 \"   or   x1   [ :   2   ]   = =   \" 30 \"   )   and   x2   = =   \" SZ \"   :   kind   =   \" stock \"   elif   x1   [   0   ]   = =   \" 6 \"   and   x2   = =   \" SH \"   :   kind   =   \" stock \"   else   :   kind   =   \" index \"   self   .   kind   =   kind   if   kind   = =   \" index \"   :   qdb   =   Questdb   (   host   =   questdb _ host   )   price _ opens   =   qdb   .   get _ data   (   f   \" select   date , num , close   from   minute _ data _   {   kind   }   where   code = '   {   code   }   ' \"   )   price _ opens   =   price _ opens   [   price _ opens   .   num   = =   \" 1 \"   ]   price _ opens   =   price _ opens   .   set _ index   (   \" date \"   )   .   close   price _ opens   .   index   =   pd   .   to _ datetime   (   price _ opens   .   index   ,   format   =   \" % Y% m   % d   \"   )   else   :   price _ opens   =   read _ daily   (   open   =   1   ) [   code   ]   price _ opens   =   price _ opens   [   price _ opens   .   index   > =   fac   .   index   .   min   ( ) ]   self   .   price _ opens   =   price _ opens   self   .   price _ rets   =   price _ opens   .   pct _ change   ( )   self   .   fac   =   fac   self   .   fac _ rets   =   (   self   .   fac   .   shift   (   2   )   *   self   .   price _ rets   )   .   dropna   ( )   self   .   ab _ rets   =   (   self   .   fac _ rets   -   self   .   price _ rets   )   .   dropna   ( )   self   .   price _ rets   =   self   .   price _ rets   .   dropna   ( )   self   .   fac _ nets   =   (   1   +   self   .   fac _ rets   )   .   cumprod   ( )   self   .   ab _ nets   =   (   1   +   self   .   ab _ rets   )   .   cumprod   ( )   self   .   price _ nets   =   (   1   +   self   .   price _ rets   )   .   cumprod   ( )   self   .   fac _ nets   =   self   .   fac _ nets   /   self   .   fac _ nets   .   iloc   [   0   ]   self   .   ab _ nets   =   self   .   ab _ nets   /   self   .   ab _ nets   .   iloc   [   0   ]   self   .   price _ nets   =   self   .   price _ nets   /   self   .   price _ nets   .   iloc   [   0   ]   self   .   fac _ comments   =   comments _ on _ twins   (   self   .   fac _ nets   ,   self   .   fac _ rets   )   self   .   ab _ comments   =   comments _ on _ twins   (   self   .   ab _ nets   ,   self   .   ab _ rets   )   self   .   price _ comments   =   comments _ on _ twins   (   self   .   price _ nets   ,   self   .   price _ rets   )   self   .   total _ comments   =   pd   .   concat   (   [   self   .   fac _ comments   ,   self   .   ab _ comments   ,   self   .   price _ comments   ] ,   axis   =   1   )   self   .   total _ nets   =   pd   .   concat   (   [   self   .   fac _ nets   ,   self   .   ab _ nets   ,   self   .   price _ nets   ] ,   axis   =   1   )   self   .   total _ rets   =   pd   .   concat   (   [   self   .   fac _ rets   ,   self   .   ab _ rets   ,   self   .   price _ rets   ] ,   axis   =   1   )   self   .   total _ comments   .   columns   =   (   self   .   total _ nets   .   columns   )   =   self   .   total _ rets   .   columns   =   [   \" \u56e0\u5b50 \u7edd\u5bf9 \"   ,   \" \u56e0\u5b50 \u8d85\u989d \"   ,   \" \u4e70\u5165 \u6301\u6709 \"   ]   self   .   total _ comments   =   np   .   around   (   self   .   total _ comments   ,   3   )   self   .   iplot   =   iplot   self   .   plot   ( )   if   comments _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   COMMENTS _ WRITER   comments _ writer   =   COMMENTS _ WRITER   self   .   total _ comments   .   to _ excel   (   comments _ writer   ,   sheet _ name   =   sheetname   )   if   net _ values _ writer   is   None   and   sheetname   is   not   None   :   from   pure _ ocean _ breeze . state . states   import   NET _ VALUES _ WRITER   net _ values _ writer   =   NET _ VALUES _ WRITER   self   .   total _ nets   .   to _ excel   (   net _ values _ writer   ,   sheet _ name   =   sheetname   )   def   plot   (   self   ) :   coms   =   self   .   total _ comments   .   copy   ( )   .   reset _ index   ( )   if   self   .   iplot   :   figs   =   cf   .   figures   (   self   .   total _ nets   ,   [   dict   (   kind   =   \" line \"   ,   y   =   list   (   self   .   total _ nets   .   columns   ) ) ] ,   asList   =   True   ,   )   coms   =   coms   .   rename   (   columns   =   {   list   (   coms   ) [   0   ] :   \" \u7ee9\u6548 \u6307\u6807 \"   } )   table   =   FF   .   create _ table   (   coms   .   iloc   [ : :   -   1   ] )   table   .   update _ yaxes   (   matches   =   None   )   figs   .   append   (   table   )   figs   =   [   figs   [   -   1   ] ]   +   figs   [ :   -   1   ]   figs   [   1   ]   .   update _ layout   (   legend   =   dict   (   yanchor   =   \" top \"   ,   y   =   0.99   ,   xanchor   =   \" left \"   ,   x   =   0.01   )   )   base _ layout   =   cf   .   tools   .   get _ base _ layout   (   figs   )   sp   =   cf   .   subplots   (   figs   ,   shape   =   (   2   ,   10   ) ,   base _ layout   =   base _ layout   ,   vertical _ spacing   =   0.15   ,   horizontal _ spacing   =   0.03   ,   shared _ yaxes   =   False   ,   specs   =   [   [   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   3   } ,   None   ,   None   ,   {   \" rowspan \"   :   2   ,   \" colspan \"   :   6   } ,   None   ,   None   ,   None   ,   None   ,   None   ,   ] ,   [   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   None   ,   ] ,   ] ,   )   sp   [   \" layout \"   ]   .   update   (   showlegend   =   True   )   cf   .   iplot   (   sp   )   else   :   self   .   total _ nets   .   plot   ( )   plt   .   show   ( )   tb   =   Texttable   ( )   tb   .   set _ cols _ width   ( [   8   ]   +   [   7   ]   +   [   8   ]   *   2   +   [   7   ]   *   2   +   [   8   ] )   tb   .   set _ cols _ dtype   ( [   \" f \"   ]   *   7   )   tb   .   header   (   list   (   coms   .   T   .   reset _ index   ( )   .   columns   ) )   tb   .   add _ rows   (   coms   .   T   .   reset _ index   ( )   .   to _ numpy   ( ) ,   header   =   True   )   print   (   tb   .   draw   ( ) )","title":"pure _ star"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.pure_star.__init__","text":"\u62e9\u65f6 \u56de\u6d4b \u6846\u67b6 \uff0c \u8f93\u5165 \u4ed3\u4f4d \u6bd4\u4f8b \u6216 \u4fe1\u53f7 \u503c \uff0c \u4f9d\u636e \u4fe1\u53f7 \u4e70\u5165 \u5bf9\u5e94 \u7684 \u80a1\u7968 \u6216 \u6307\u6570 \uff0c \u5e76 \u8003\u5bdf \u7edd\u5bf9 \u6536\u76ca \u3001 \u8d85\u989d \u6536\u76ca \u548c \u57fa\u51c6 \u6536\u76ca   \u56de\u6d4b \u65b9\u5f0f \u4e3a \uff0c t \u65e5 \u6536\u76d8 \u65f6 \u83b7\u5f97 \u4fe1\u53f7 \uff0c t + 1 \u65e5 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u4e70\u5165 \uff0c t + 2 \u5f00\u76d8 \u65f6\u4ee5 \u5f00\u76d8 \u5f00\u76d8\u4ef7 \u5356\u51fa","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.add_cross_standardlize","text":"\u5c06 \u4f17\u591a \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u505a z - score \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u76f8\u52a0","title":"add _ cross _ standardlize ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.boom_four","text":"\u751f\u6210 20 \u5929 \u5747\u503c \uff0c 20 \u5929 \u6807\u51c6 \u6807\u51c6\u5dee \uff0c \u53ca \u4e8c\u8005 \u6b63\u5411 z - score \u5408\u6210 \uff0c \u6b63\u5411 \u6392\u5e8f \u5408\u6210 \uff0c \u8d1f\u5411 z - score \u5408\u6210 \uff0c \u8d1f \u5411 \u6392\u5e8f \u5408\u6210 \u8fd9 6 \u4e2a \u56e0\u5b50","title":"boom _ four ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.boom_fours","text":"\u5bf9 \u591a\u4e2a \u56e0\u5b50 \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u90fd \u8fdb\u884c boom _ four \u7684 \u64cd\u4f5c","title":"boom _ fours ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.daily_factor_on300500","text":"\u8f93\u5165 \u65e5\u9891 \u6216 \u6708 \u9891 \u56e0\u5b50 \u503c \uff0c \u5c06 \u5176 \u9650\u5b9a \u5728 \u67d0 \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u80a1\u7968 \u6c60\u5185 \uff0c   \u76ee\u524d \u4ec5 \u652f\u6301 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u3001 \u56fd\u8bc1 2000 \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4ee5\u53ca \u8fd9 \u56db\u79cd \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u7ec4\u5408 \u53e0\u52a0 \uff0c \u548c \u9664 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u4ee5\u5916 \u7684 \u80a1\u7968 \u7684 \u6210\u5206 \u6210\u5206\u80a1","title":"daily _ factor _ on300500 ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.daily_factor_on_industry","text":"\u5c06 \u4e00\u4e2a \u56e0\u5b50 \u53d8\u4e3a \u4ec5 \u5728 \u67d0\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u7684 \u80a1\u7968","title":"daily _ factor _ on _ industry ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.de_cross","text":"\u4f7f\u7528 \u82e5\u5e72 \u56e0\u5b50 \u5bf9 \u67d0\u4e2a \u56e0\u5b50 \u8fdb\u884c \u6b63\u4ea4 \u5316 \u5904\u7406","title":"de _ cross ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.deboth","text":"\u901a\u8fc7 \u56de\u6d4b \u7684 \u65b9\u5f0f \uff0c \u5bf9 \u6708 \u9891 \u56e0\u5b50 \u505a \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316","title":"deboth ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.decap","text":"\u5bf9 \u56e0\u5b50 \u505a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316","title":"decap ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.decap_industry","text":"\u5bf9 \u56e0\u5b50 \u505a \u884c\u4e1a \u5e02\u503c \u4e2d\u6027 \u4e2d\u6027\u5316","title":"decap _ industry ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.follow_tests","text":"\u56e0\u5b50 \u5b8c\u6210 \u5168 A \u6d4b\u8bd5 \u540e \uff0c \u8fdb\u884c \u7684 \u4e00\u4e9b \u5fc5\u8981 \u7684 \u540e\u7eed \u6d4b\u8bd5 \uff0c \u5305\u62ec \u5404\u4e2a \u5206\u7ec4 \u8868\u73b0 \u3001 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u4e0e \u7eaf\u51c0 \u5316 \u3001 3510 \u7684 \u591a\u7a7a \u548c \u591a\u5934 \u3001 \u5404\u4e2a \u884c\u4e1a Rank   IC \u3001 \u5404\u4e2a \u884c\u4e1a \u4e70 3 \u53ea \u8d85\u989d \u8868\u73b0","title":"follow _ tests ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.get_group","text":"\u4f7f\u7528 groupby \u7684 \u65b9\u6cd5 \uff0c \u5c06 \u4e00\u7ec4 \u56e0\u5b50 \u503c \u6539\u4e3a \u622a\u9762 \u4e0a \u7684 \u5206\u7ec4 \u503c \uff0c \u6b64 \u65b9\u6cd5 \u76f8\u6bd4 qcut \u7684 \u65b9\u6cd5 \u66f4\u52a0 \u7a33\u5065 \uff0c \u4f46 \u901f\u5ea6 \u66f4\u6162 \u4e00\u4e9b","title":"get _ group ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.group_test_on_industry","text":"\u5728 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u6d4b\u8bd5 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u5206\u7ec4 \u56de\u6d4b","title":"group _ test _ on _ industry ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.icir_weight","text":"\u4f7f\u7528 icir \u6eda\u52a8 \u52a0\u6743 \u7684 \u65b9\u5f0f \uff0c \u52a0\u6743 \u5408\u6210 \u51e0\u4e2a \u56e0\u5b50","title":"icir _ weight ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.long_test_on_industry","text":"\u5bf9 \u6bcf\u4e2a \u7533\u4e07 / \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355","title":"long _ test _ on _ industry ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.long_test_on_swindustry","text":"\u5bf9 \u6bcf\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355","title":"long _ test _ on _ swindustry ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.long_test_on_zxindustry","text":"\u5bf9 \u6bcf\u4e2a \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6210\u5206 \u6210\u5206\u80a1 \uff0c \u4f7f\u7528 \u67d0 \u56e0\u5b50 \u6311\u9009 \u9009\u51fa \u6311\u9009\u51fa \u6700 \u591a\u5934 \u7684 n \u503c \u80a1\u7968 \uff0c \u8003\u5bdf \u5176 \u8d85\u989d \u6536\u76ca \u7ee9\u6548 \u3001 \u6bcf\u6708 \u8d85\u989d \u6536\u76ca \u3001 \u6bcf\u6708 \u6bcf\u4e2a \u884c\u4e1a \u7684 \u591a\u5934 \u540d\u5355","title":"long _ test _ on _ zxindustry ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.market_kind","text":"\u4e0e \u5bbd\u57fa \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u7684 \u51fd\u6570 \u7c7b\u4f3c \uff0c \u9650\u5b9a \u80a1\u7968 \u5728 \u67d0\u4e2a \u5177\u4f53 \u677f\u5757 \u4e0a","title":"market _ kind ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.rankic_test_on_industry","text":"\u4e13\u95e8 \u8ba1\u7b97 \u56e0\u5b50 \u503c \u5728 \u5404\u4e2a \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4e0a \u7684 Rank   IC \u503c \uff0c \u5e76 \u7ed8\u5236 \u67f1\u72b6 \u67f1\u72b6\u56fe","title":"rankic _ test _ on _ industry ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.remove_unavailable","text":"\u5bf9 \u65e5\u9891 \u6216 \u6708 \u9891 \u56e0\u5b50 \u503c \uff0c \u5254\u9664 st \u80a1 \u3001 \u4e0d \u6b63\u5e38 \u4ea4\u6613 \u7684 \u80a1\u7968 \u548c \u4e0a\u5e02 \u4e0d\u8db3 60 \u5929 \u7684 \u80a1\u7968","title":"remove _ unavailable ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.scipy_weight","text":"\u4f7f\u7528 scipy \u7684 minimize \u4f18\u5316 \u6c42\u89e3 \u7684 \u65b9\u5f0f \uff0c \u5bfb\u627e \u6700\u4f18 \u7684 \u56e0\u5b50 \u5408\u6210 \u6743\u91cd \uff0c \u9ed8\u8ba4 \u4f18\u5316 \u6761\u4ef6 \u4e3a \u6700\u5927 ICIR","title":"scipy _ weight ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.show_corr","text":"\u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027","title":"show _ corr ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.show_corrs","text":"\u5c55\u793a \u5f88\u591a \u56e0\u5b50 \u4e24 \u4e24 \u4e4b\u95f4 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027","title":"show _ corrs ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.show_corrs_with_old","text":"\u8ba1\u7b97 \u65b0 \u56e0\u5b50 \u548c \u5df2\u6709 \u56e0\u5b50 \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570","title":"show _ corrs _ with _ old ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.show_cov","text":"\u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027","title":"show _ cov ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.show_covs","text":"\u5c55\u793a \u5f88\u591a \u56e0\u5b50 \u4e24 \u4e24 \u4e4b\u95f4 \u7684 \u622a\u9762 \u76f8\u5173 \u76f8\u5173\u6027","title":"show _ covs ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.show_x_with_func","text":"\u5c55\u793a \u4e24\u4e2a \u56e0\u5b50 \u7684 \u67d0\u79cd \u622a\u9762 \u5173\u7cfb","title":"show _ x _ with _ func ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.symmetrically_orthogonalize","text":"\u5bf9 \u591a\u4e2a \u56e0\u5b50 \u505a \u5bf9\u79f0 \u6b63\u4ea4 \uff0c \u6bcf\u4e2a \u56e0\u5b50 \u5f97\u5230 \u6b63\u4ea4 \u5176\u4ed6 \u56e0\u5b50 \u540e \u7684 \u7ed3\u679c","title":"symmetrically _ orthogonalize ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.test_on_300500","text":"\u5bf9 \u56e0\u5b50 \u5728 \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u8fdb\u884c \u591a\u7a7a \u548c \u591a\u5934 \u6d4b\u8bd5","title":"test _ on _ 300500 ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.test_on_index_four","text":"\u5bf9 \u56e0\u5b50 \u540c\u65f6 \u5728 \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u3001 \u56fd\u8bc1 2000 \u8fd9 4 \u4e2a \u6307\u6570 \u6210\u5206 \u6210\u5206\u80a1 \u5185 \u8fdb\u884c \u591a\u7a7a \u548c \u591a\u5934 \u8d85\u989d \u6d4b\u8bd5","title":"test _ on _ index _ four ( )"},{"location":"%E7%BD%97%E7%9B%98/%E5%8A%A0%E5%B7%A5%26%E6%B5%8B%E8%AF%95%26%E8%AF%84%E4%BB%B7/process/#pure_ocean_breeze.labor.process.to_tradeends","text":"\u5c06 \u6700\u540e \u4e00\u4e2a \u81ea\u7136 \u65e5 \u6539\u53d8 \u4e3a \u6700\u540e \u4e00\u4e2a \u4ea4\u6613 \u4ea4\u6613\u65e5","title":"to _ tradeends ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/","text":"ClickHouseClient   \u00b6   Bases :   object   clickhouse \u7684 \u4e00\u4e9b \u529f\u80fd \uff0c clickhouse \u5199\u5165 \u6570\u636e \u524d \uff0c \u9700\u8981 \u5148 \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \uff0c \u8868\u683c \u5982\u679c \u4e0d \u5b58\u5728 \u5219 \u4e0d\u80fd \u5199\u5165   clickhouse \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \u4f7f\u7528 \u8bed\u53e5 \u5982\u4e0b   SQL   1   2   3   4   5   6   7   8   9   10   11   12   13   CREATE   TABLE   minute _ data   .   minute _ data   (   `   date   `   int   ,   `   num   `   int   ,   `   code   `   VARCHAR   (   9   ) ,   `   open   `   int   ,   `   high   `   int   ,   `   low   `   int   ,   `   close   `   int   ,   `   amount   `   bigint   ,   `   money   `   bigint   )   ENGINE   =   ReplacingMergeTree   ( )   PRIMARY   KEY   (   date   ,   num   )   ORDER   BY   (   date   ,   num   ) ;   \u5176\u4e2d \u5982\u679c \u4e3b\u952e \u4e0d \u6307\u5b9a \uff0c \u5219 \u4f1a \u9ed8\u8ba4 \u4e3a \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \uff0c \u4e3b\u952e \u4e0d\u80fd \u91cd\u590d \uff0c \u56e0\u6b64 \u4f1a \u81ea\u52a8 \u4fdd\u7559 \u6700\u540e \u4e00\u4e2a \u3002   \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \u540e \uff0c \u9700 \u63d2\u5165 \u4e00\u884c \u6570 \uff0c \u624d \u7b97 \u521b\u5efa \u6210\u529f \uff0c \u5426\u5219 \u4f9d\u7136 \u4e0d\u80fd \u5199\u5165 \uff0c \u63d2\u5165 \u8bed\u53e5 \u5982\u4e0b   SQL   1   2   INSERT   INTO   minute _ data   .   minute _ data   (   date   ,   code   ,   open   ,   high   ,   low   ,   close   ,   amount   ,   money   ,   num   )   VALUES   (   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ) ;   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   692   693   694   695   696   697   698   699   700   701   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   719   720   721   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   740   741   742   743   744   745   746   class   ClickHouseClient   (   object   ) :   \" \" \" clickhouse \u7684 \u4e00\u4e9b \u529f\u80fd \uff0c clickhouse \u5199\u5165 \u6570\u636e \u524d \uff0c \u9700\u8981 \u5148 \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \uff0c \u8868\u683c \u5982\u679c \u4e0d \u5b58\u5728 \u5219 \u4e0d\u80fd \u5199\u5165   clickhouse \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \u4f7f\u7528 \u8bed\u53e5 \u5982\u4e0b   ` ` ` sql   CREATE   TABLE   minute _ data . minute _ data   (   ` date `   int ,   ` num `   int ,   ` code `   VARCHAR ( 9 ) ,   ` open `   int ,   ` high `   int ,   ` low `   int ,   ` close `   int ,   ` amount `   bigint ,   ` money `   bigint   )   ENGINE   =   ReplacingMergeTree ( )   PRIMARY   KEY ( date , num )   ORDER   BY   ( date ,   num ) ;   ` ` `   \u5176\u4e2d \u5982\u679c \u4e3b\u952e \u4e0d \u6307\u5b9a \uff0c \u5219 \u4f1a \u9ed8\u8ba4 \u4e3a \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \uff0c \u4e3b\u952e \u4e0d\u80fd \u91cd\u590d \uff0c \u56e0\u6b64 \u4f1a \u81ea\u52a8 \u4fdd\u7559 \u6700\u540e \u4e00\u4e2a \u3002   \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \u540e \uff0c \u9700 \u63d2\u5165 \u4e00\u884c \u6570 \uff0c \u624d \u7b97 \u521b\u5efa \u6210\u529f \uff0c \u5426\u5219 \u4f9d\u7136 \u4e0d\u80fd \u5199\u5165 \uff0c \u63d2\u5165 \u8bed\u53e5 \u5982\u4e0b   ` ` ` sql   INSERT   INTO   minute _ data . minute _ data   ( date ,   code ,   open ,   high ,   low ,   close ,   amount ,   money ,   num )   VALUES   ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ;   ` ` `   \" \" \"   def   __ init __   (   self   ,   database _ name   :   str   ,   database _ host   :   str   =   \" 127.0 . 0.1 \"   ,   database _ user   :   str   =   \" default \"   ,   database _ password   =   \" \"   ,   ) :   self   .   database _ name   =   database _ name   self   .   database _ host   =   database _ host   self   .   database _ user   =   database _ user   self   .   database _ password   =   database _ password   self   .   uri   =   f   \" clickhouse + native : / /   {   database _ host   }   /   {   database _ name   }   \"   self   .   engine   =   create _ engine   (   self   .   uri   )   #   engine   =   create _ engine ( self . uri )   #   session   =   make _ session ( self . engine )   #   metadata   =   MetaData ( bind = engine )   #   #   Base   =   get _ declarative _ base ( metadata = metadata )   def   set _ new _ engine   (   self   ,   engine _ uri   :   str   )   - >   None   :   \" \" \" \u8bbe\u7f6e \u65b0 \u7684 \u5730\u5740   Parameters   ----------   engine _ uri   :   str   \u65b0 \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u5730\u5740   \" \" \"   self   .   uri   =   engine _ uri   self   .   engine   =   create _ engine   (   engine _ uri   )   logger   .   success   (   \" engine \u5df2 \u66f4\u6539 \"   )   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   engine   .   raw _ connection   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   def   get _ data _ old   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pandas . read _ sql \u7684 \u65b9\u5f0f \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   pd   .   read _ sql   (   sql _ order   ,   con   =   self   .   engine   )   return   a   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   get _ data   (   self   ,   sql _ order   :   str   ,   only _ array   :   bool   =   0   )   - >   Union   [   pd   .   DataFrame   ,   np   .   ndarray   ] :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   Union [ pd . DataFrame ,   np . ndarray ]   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   engine   .   raw _ connection   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   if   not   only _ array   :   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   else   :   return   np   .   array   (   df _ data   )   def   get _ data _ old _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data _ old   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   def   get _ data _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 cursor \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   def   save _ data   (   self   ,   df   ,   sql _ order   :   str   ,   if _ exists   =   \" append \"   ,   index   =   False   ) :   \" \" \" \u5b58\u50a8 \u6570\u636e \uff0c if _ exists \u53ef\u4ee5 \u4e3a append \u6216 replace \u6216 fail \uff0c \u9ed8\u8ba4 append \uff0c index \u4e3a \u662f\u5426 \u4fdd\u5b58 df \u7684 index \" \" \"   raise   IOError   (   \" \" \"   \u8bf7 \u4f7f\u7528 pandas \u81ea\u5e26 \u7684 df . to _ sql ( ) \u6765 \u5b58\u50a8 \uff0c \u5b58\u50a8 \u65f6\u8bf7 \u6ce8\u610f \u628a \u5c0f\u6570 \u90fd \u8f6c\u5316 \u4e3a \u6574\u6570 \uff0c \u4f8b\u5982 * 100 \uff08 \u5206\u949f \u6570\u636e \u90fd \u505a \u4e86 \u8fd9\u4e2a \u5904\u7406 \uff09   \u8bf7\u52ff \u643a\u5e26 \u7a7a\u503c \uff0c \u63d0\u524d \u505a\u597d fillna \u5904\u7406 \u3002 \u5927\u4e8e 2147000000 \u5de6\u53f3 \u7684 \u503c \uff0c \u8bf7 \u6307\u5b9a \u7c7b\u578b \u4e3a bigint \uff0c \u5426\u5219 \u4e3a int \u5373\u53ef   \u53e5\u5f0f \u5982 \uff1a   ( np . around ( min1 , 2 ) * 100 ) . ffill ( ) . astype ( int ) . assign ( code = ' 000001 . SZ ' ) . to _ sql ( ' minute _ data ' , engine , if _ exists = ' append ' , index = False )   \" \" \"   )   def   show _ all _ xxx _ in _ tableX   (   self   ,   key   :   str   ,   table   :   str   )   - >   list   :   \" \" \" \u67e5\u8be2 table \u8fd9\u4e2a \u8868\u4e2d \uff0c \u6240\u6709 \u4e0d\u540c \u7684 key \u6709 \u54ea\u4e9b   Parameters   ----------   key   :   str   \u952e \u7684 \u540d\u5b57   table   :   str   \u8868 \u7684 \u540d\u5b57   Returns   -------   list   \u8868\u4e2d \u5168\u90e8 \u7684 \u952e   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct (   {   key   }   )   from   {   self   .   database _ name   }   .   {   table   }   \"   )   return   list   (   df   [   key   ] )   #   TODO :   \u5c06 \u4ee5\u4e0b \u4e24\u4e2a \u51fd\u6570 \u6539\u4e3a \uff0c \u4e0d \u9700\u8981 \u8f93\u5165 \u8868\u540d \uff0c \u4e5f \u53ef\u4ee5 \u8fd4\u56de \u65e5\u671f \uff08 \u4ee5 \u65f6\u95f4 \u66f4\u957f \u7684 \u80a1\u7968 \u6570\u636e \u6570\u636e\u8868 \u4e3a\u51c6 \uff09   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868\u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u8868\u4e2d \u6240\u6709 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   self   .   database _ name   }   .   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   [   i   for   i   in   list   (   df   .   code   )   if   i   ! =   \" 0 \"   ]   def   show _ all _ dates   (   self   ,   table _ name   :   str   ,   mul _ 100   =   False   )   - >   list   :   \" \" \" \u8fd4\u56de \u5206\u949f \u6570\u636e \u4e2d \u6240\u6709 \u65e5\u671f \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09   Parameters   ----------   table _ name   :   str   \u8868\u540d   mul _ 100   :   bool ,   optional   \u8fd4\u56de \u7684 \u65e5\u671f \u662f\u5426 \u6210\u4ee5 100 ,   by   default   False   Returns   -------   list   \u8868\u4e2d \u6240\u6709 \u7684 \u65e5\u671f   \" \" \"   if   ' second '   in   table _ name   :   df   =   self   .   get _ data   (   f   \" select   distinct ( toYYYYMMDD ( date ) )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   else   :   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   if   mul _ 100   :   return   [   i   for   i   in   list   (   df   .   date   )   if   i   ! =   0   ]   else   :   return   [   int   (   i   /   100   )   for   i   in   list   (   df   .   date   )   if   i   ! =   0   ]   do _ order   (   sql _ order   )   \u00b6   \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   any   \u8fd4\u56de \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   engine   .   raw _ connection   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   get _ data   (   sql _ order   ,   only _ array   =   0   )   \u00b6   \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   Union [ pd . DataFrame ,   np . ndarray ]   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   get _ data   (   self   ,   sql _ order   :   str   ,   only _ array   :   bool   =   0   )   - >   Union   [   pd   .   DataFrame   ,   np   .   ndarray   ] :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   Union [ pd . DataFrame ,   np . ndarray ]   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   engine   .   raw _ connection   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   if   not   only _ array   :   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   else   :   return   np   .   array   (   df _ data   )   get _ data _ old   (   sql _ order   )   \u00b6   \u4ee5 pandas . read _ sql \u7684 \u65b9\u5f0f \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   def   get _ data _ old   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pandas . read _ sql \u7684 \u65b9\u5f0f \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   pd   .   read _ sql   (   sql _ order   ,   con   =   self   .   engine   )   return   a   get _ data _ old _ show _ time   (   sql _ order   )   \u00b6   \u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   def   get _ data _ old _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data _ old   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   get _ data _ show _ time   (   sql _ order   )   \u00b6   \u4ee5 cursor \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   def   get _ data _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 cursor \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   save _ data   (   df   ,   sql _ order   ,   if _ exists   =   ' append '   ,   index   =   False   )   \u00b6   \u5b58\u50a8 \u6570\u636e \uff0c if _ exists \u53ef\u4ee5 \u4e3a append \u6216 replace \u6216 fail \uff0c \u9ed8\u8ba4 append \uff0c index \u4e3a \u662f\u5426 \u4fdd\u5b58 df \u7684 index   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   672   673   674   675   676   677   678   679   680   681   def   save _ data   (   self   ,   df   ,   sql _ order   :   str   ,   if _ exists   =   \" append \"   ,   index   =   False   ) :   \" \" \" \u5b58\u50a8 \u6570\u636e \uff0c if _ exists \u53ef\u4ee5 \u4e3a append \u6216 replace \u6216 fail \uff0c \u9ed8\u8ba4 append \uff0c index \u4e3a \u662f\u5426 \u4fdd\u5b58 df \u7684 index \" \" \"   raise   IOError   (   \" \" \"   \u8bf7 \u4f7f\u7528 pandas \u81ea\u5e26 \u7684 df . to _ sql ( ) \u6765 \u5b58\u50a8 \uff0c \u5b58\u50a8 \u65f6\u8bf7 \u6ce8\u610f \u628a \u5c0f\u6570 \u90fd \u8f6c\u5316 \u4e3a \u6574\u6570 \uff0c \u4f8b\u5982 * 100 \uff08 \u5206\u949f \u6570\u636e \u90fd \u505a \u4e86 \u8fd9\u4e2a \u5904\u7406 \uff09   \u8bf7\u52ff \u643a\u5e26 \u7a7a\u503c \uff0c \u63d0\u524d \u505a\u597d fillna \u5904\u7406 \u3002 \u5927\u4e8e 2147000000 \u5de6\u53f3 \u7684 \u503c \uff0c \u8bf7 \u6307\u5b9a \u7c7b\u578b \u4e3a bigint \uff0c \u5426\u5219 \u4e3a int \u5373\u53ef   \u53e5\u5f0f \u5982 \uff1a   ( np . around ( min1 , 2 ) * 100 ) . ffill ( ) . astype ( int ) . assign ( code = ' 000001 . SZ ' ) . to _ sql ( ' minute _ data ' , engine , if _ exists = ' append ' , index = False )   \" \" \"   )   set _ new _ engine   (   engine _ uri   )   \u00b6   \u8bbe\u7f6e \u65b0 \u7684 \u5730\u5740   Parameters   \u00b6   engine _ uri   :   str   \u65b0 \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u5730\u5740   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   556   557   558   559   560   561   562   563   564   565   566   def   set _ new _ engine   (   self   ,   engine _ uri   :   str   )   - >   None   :   \" \" \" \u8bbe\u7f6e \u65b0 \u7684 \u5730\u5740   Parameters   ----------   engine _ uri   :   str   \u65b0 \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u5730\u5740   \" \" \"   self   .   uri   =   engine _ uri   self   .   engine   =   create _ engine   (   engine _ uri   )   logger   .   success   (   \" engine \u5df2 \u66f4\u6539 \"   )   show _ all _ codes   (   table _ name   )   \u00b6   \u8fd4\u56de \u8868\u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09   Parameters   \u00b6   table _ name   :   str   \u8868\u540d   Returns   \u00b6   list   \u8868\u4e2d \u6240\u6709 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868\u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u8868\u4e2d \u6240\u6709 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   self   .   database _ name   }   .   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   [   i   for   i   in   list   (   df   .   code   )   if   i   ! =   \" 0 \"   ]   show _ all _ dates   (   table _ name   ,   mul _ 100   =   False   )   \u00b6   \u8fd4\u56de \u5206\u949f \u6570\u636e \u4e2d \u6240\u6709 \u65e5\u671f \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09   Parameters   \u00b6   table _ name   :   str   \u8868\u540d   mul _ 100   :   bool ,   optional   \u8fd4\u56de \u7684 \u65e5\u671f \u662f\u5426 \u6210\u4ee5 100 ,   by   default   False   Returns   \u00b6   list   \u8868\u4e2d \u6240\u6709 \u7684 \u65e5\u671f   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   720   721   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   740   741   742   743   744   745   746   def   show _ all _ dates   (   self   ,   table _ name   :   str   ,   mul _ 100   =   False   )   - >   list   :   \" \" \" \u8fd4\u56de \u5206\u949f \u6570\u636e \u4e2d \u6240\u6709 \u65e5\u671f \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09   Parameters   ----------   table _ name   :   str   \u8868\u540d   mul _ 100   :   bool ,   optional   \u8fd4\u56de \u7684 \u65e5\u671f \u662f\u5426 \u6210\u4ee5 100 ,   by   default   False   Returns   -------   list   \u8868\u4e2d \u6240\u6709 \u7684 \u65e5\u671f   \" \" \"   if   ' second '   in   table _ name   :   df   =   self   .   get _ data   (   f   \" select   distinct ( toYYYYMMDD ( date ) )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   else   :   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   if   mul _ 100   :   return   [   i   for   i   in   list   (   df   .   date   )   if   i   ! =   0   ]   else   :   return   [   int   (   i   /   100   )   for   i   in   list   (   df   .   date   )   if   i   ! =   0   ]   show _ all _ xxx _ in _ tableX   (   key   ,   table   )   \u00b6   \u67e5\u8be2 table \u8fd9\u4e2a \u8868\u4e2d \uff0c \u6240\u6709 \u4e0d\u540c \u7684 key \u6709 \u54ea\u4e9b   Parameters   \u00b6   key   :   str   \u952e \u7684 \u540d\u5b57   table   :   str   \u8868 \u7684 \u540d\u5b57   Returns   \u00b6   list   \u8868\u4e2d \u5168\u90e8 \u7684 \u952e   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   683   684   685   686   687   688   689   690   691   692   693   694   695   696   697   698   699   def   show _ all _ xxx _ in _ tableX   (   self   ,   key   :   str   ,   table   :   str   )   - >   list   :   \" \" \" \u67e5\u8be2 table \u8fd9\u4e2a \u8868\u4e2d \uff0c \u6240\u6709 \u4e0d\u540c \u7684 key \u6709 \u54ea\u4e9b   Parameters   ----------   key   :   str   \u952e \u7684 \u540d\u5b57   table   :   str   \u8868 \u7684 \u540d\u5b57   Returns   -------   list   \u8868\u4e2d \u5168\u90e8 \u7684 \u952e   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct (   {   key   }   )   from   {   self   .   database _ name   }   .   {   table   }   \"   )   return   list   (   df   [   key   ] )   DriverOfPostgre   \u00b6   Bases :   MetaSQLDriver   \u80fd\u4ee5 postgresql \u548c psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   230   231   232   233   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   class   DriverOfPostgre   (   MetaSQLDriver   ) :   \" \" \" \u80fd\u4ee5 postgresql \u548c psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \" \" \"   def   __ init __   (   self   ,   user   :   str   ,   password   :   str   ,   host   :   str   ,   port   :   str   ,   database   :   str   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d   password   :   str   \u5bc6\u7801   host   :   str   \u5730\u5740   port   :   str   \u7aef\u53e3   database   :   str   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u540d   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   def   connect   (   self   ) :   conn   =   pg   .   connect   (   user   =   self   .   user   ,   password   =   self   .   password   ,   host   =   self   .   host   ,   port   =   self   .   port   ,   database   =   self   .   database   ,   )   return   conn   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   \u00b6   \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   \u00b6   user   :   str   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d   password   :   str   \u5bc6\u7801   host   :   str   \u5730\u5740   port   :   str   \u7aef\u53e3   database   :   str   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u540d   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   233   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   def   __ init __   (   self   ,   user   :   str   ,   password   :   str   ,   host   :   str   ,   port   :   str   ,   database   :   str   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d   password   :   str   \u5bc6\u7801   host   :   str   \u5730\u5740   port   :   str   \u7aef\u53e3   database   :   str   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u540d   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   MetaSQLDriver   \u00b6   Bases :   object   \u6240\u6709 sql \u7c7b \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u901a\u7528 \u7684 \u4e00\u4e9b \u529f\u80fd   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   class   MetaSQLDriver   (   object   ) :   \" \" \" \u6240\u6709 sql \u7c7b \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u901a\u7528 \u7684 \u4e00\u4e9b \u529f\u80fd \" \" \"   def   __ init __   (   self   ,   user   :   str   ,   password   :   str   ,   host   :   str   ,   port   :   str   ,   database   :   str   )   - >   None   :   \" \" \" \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u57fa\u672c \u4fe1\u606f   Parameters   ----------   user   :   str   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d   password   :   str   \u5bc6\u7801   host   :   str   \u5730\u5740   port   :   str   \u7aef\u53e3   database   :   str   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u540d   \" \" \"   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   def   connect   (   self   ) :   ...   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   def   add _ new _ database   (   self   ,   db _ name   :   str   )   - >   None   :   \" \" \" \u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   db _ name   :   str   \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u540d\u79f0   \" \" \"   try   :   self   .   do _ order   (   f   \" CREATE   DATABASE   {   db _ name   }   \"   )   logger   .   success   (   f   \" \u5df2 \u6dfb\u52a0 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u5df2\u7ecf \u5b58\u5728 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8bf7 \u68c0\u67e5 \"   )   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) )   def   get _ data   (   self   ,   sql _ order   :   str   ,   only _ array   :   bool   =   0   )   - >   Union   [   pd   .   DataFrame   ,   np   .   ndarray   ] :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   Union [ pd . DataFrame ,   np . ndarray ]   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   if   not   only _ array   :   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   else   :   return   np   .   array   (   df _ data   )   def   get _ data _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   def   get _ data _ alter   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4e13\u95e8 \u7528\u4e8e \u5e94\u5bf9 get _ data \u51fd\u6570 \u53ef\u80fd \u51fa\u73b0 \u7684 \u7279\u6b8a \u60c5\u51b5 \uff0c \u4f8b\u5982 \u5bbd\u8868   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   df   =   pd   .   DataFrame   (   df _ data   )   df   .   columns   =   list   (   df   .   iloc   [   0   ,   : ] )   df   =   df   .   iloc   [   1   : ,   : ]   df   .   index   =   list   (   df   .   iloc   [ : ,   0   ] )   df   =   df   .   iloc   [ : ,   1   : ]   return   df   def   get _ data _ old   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pandas . read _ sql \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   pd   .   read _ sql   (   sql _ order   ,   con   =   self   .   engine   )   return   a   def   get _ data _ old _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data _ old   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   list   (   df   .   code   )   def   show _ all _ dates   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u65e5\u671f   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   return   list   (   df   .   date   )   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   \u00b6   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u57fa\u672c \u4fe1\u606f   Parameters   \u00b6   user   :   str   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d   password   :   str   \u5bc6\u7801   host   :   str   \u5730\u5740   port   :   str   \u7aef\u53e3   database   :   str   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u540d   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   def   __ init __   (   self   ,   user   :   str   ,   password   :   str   ,   host   :   str   ,   port   :   str   ,   database   :   str   )   - >   None   :   \" \" \" \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u57fa\u672c \u4fe1\u606f   Parameters   ----------   user   :   str   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d   password   :   str   \u5bc6\u7801   host   :   str   \u5730\u5740   port   :   str   \u7aef\u53e3   database   :   str   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u540d   \" \" \"   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   add _ new _ database   (   db _ name   )   \u00b6   \u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   \u00b6   db _ name   :   str   \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u540d\u79f0   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   68   69   70   71   72   73   74   75   76   77   78   79   80   def   add _ new _ database   (   self   ,   db _ name   :   str   )   - >   None   :   \" \" \" \u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   db _ name   :   str   \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u540d\u79f0   \" \" \"   try   :   self   .   do _ order   (   f   \" CREATE   DATABASE   {   db _ name   }   \"   )   logger   .   success   (   f   \" \u5df2 \u6dfb\u52a0 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u5df2\u7ecf \u5b58\u5728 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8bf7 \u68c0\u67e5 \"   )   do _ order   (   sql _ order   )   \u00b6   \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   any   \u8fd4\u56de \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   get _ data   (   sql _ order   ,   only _ array   =   0   )   \u00b6   \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   Union [ pd . DataFrame ,   np . ndarray ]   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) )   def   get _ data   (   self   ,   sql _ order   :   str   ,   only _ array   :   bool   =   0   )   - >   Union   [   pd   .   DataFrame   ,   np   .   ndarray   ] :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   Union [ pd . DataFrame ,   np . ndarray ]   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   if   not   only _ array   :   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   else   :   return   np   .   array   (   df _ data   )   get _ data _ alter   (   sql _ order   )   \u00b6   \u4e13\u95e8 \u7528\u4e8e \u5e94\u5bf9 get _ data \u51fd\u6570 \u53ef\u80fd \u51fa\u73b0 \u7684 \u7279\u6b8a \u60c5\u51b5 \uff0c \u4f8b\u5982 \u5bbd\u8868   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   def   get _ data _ alter   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4e13\u95e8 \u7528\u4e8e \u5e94\u5bf9 get _ data \u51fd\u6570 \u53ef\u80fd \u51fa\u73b0 \u7684 \u7279\u6b8a \u60c5\u51b5 \uff0c \u4f8b\u5982 \u5bbd\u8868   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   df   =   pd   .   DataFrame   (   df _ data   )   df   .   columns   =   list   (   df   .   iloc   [   0   ,   : ] )   df   =   df   .   iloc   [   1   : ,   : ]   df   .   index   =   list   (   df   .   iloc   [ : ,   0   ] )   df   =   df   .   iloc   [ : ,   1   : ]   return   df   get _ data _ old   (   sql _ order   )   \u00b6   \u4ee5 pandas . read _ sql \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   def   get _ data _ old   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pandas . read _ sql \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   pd   .   read _ sql   (   sql _ order   ,   con   =   self   .   engine   )   return   a   get _ data _ old _ show _ time   (   sql _ order   )   \u00b6   \u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   def   get _ data _ old _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data _ old   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   get _ data _ show _ time   (   sql _ order   )   \u00b6   \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   def   get _ data _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   show _ all _ codes   (   table _ name   )   \u00b6   \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801   Parameters   \u00b6   table _ name   :   str   \u8868\u540d   Returns   \u00b6   list   \u5168\u90e8 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   list   (   df   .   code   )   show _ all _ dates   (   table _ name   )   \u00b6   \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f   Parameters   \u00b6   table _ name   :   str   \u8868\u540d   Returns   \u00b6   list   \u5168\u90e8 \u65e5\u671f   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   def   show _ all _ dates   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u65e5\u671f   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   return   list   (   df   .   date   )   PostgreSQL   \u00b6   Bases :   DriverOfPostgre   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   749   750   751   752   753   754   755   756   757   758   759   760   761   762   763   764   765   766   767   768   769   770   771   772   773   774   775   776   777   778   779   780   781   class   PostgreSQL   (   DriverOfPostgre   ) :   def   __ init __   (   self   ,   database   :   str   =   None   ,   user   :   str   =   \" postgres \"   ,   password   :   str   =   \" Kingwila98 \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   int   =   5433   ,   )   - >   None   :   \" \" \" \u8fde\u63a5 postgresql \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   database   :   str ,   optional   _ description _ ,   by   default   None   user   :   str ,   optional   _ description _ ,   by   default   ' postgres '   password   :   str ,   optional   _ description _ ,   by   default   ' Kingwila98 '   host   :   str ,   optional   _ description _ ,   by   default   ' 127.0 . 0.1 '   port   :   int ,   optional   _ description _ ,   by   default   5433   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   self   .   engine   =   create _ engine   (   f   \" postgresql : / /   {   user   }   :   {   password   }   @   {   host   }   :   {   port   }   /   {   database   }   \"   )   __ init __   (   database   =   None   ,   user   =   ' postgres '   ,   password   =   ' Kingwila98 '   ,   host   =   ' 127.0 . 0.1 '   ,   port   =   5433   )   \u00b6   \u8fde\u63a5 postgresql \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   \u00b6   database   :   str ,   optional   description   ,   by   default   None   user   :   str ,   optional   description   ,   by   default   ' postgres '   password   :   str ,   optional   description   ,   by   default   ' Kingwila98 '   host   :   str ,   optional   description   ,   by   default   ' 127.0 . 0.1 '   port   :   int ,   optional   description   ,   by   default   5433   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   750   751   752   753   754   755   756   757   758   759   760   761   762   763   764   765   766   767   768   769   770   771   772   773   774   775   776   777   778   779   780   781   def   __ init __   (   self   ,   database   :   str   =   None   ,   user   :   str   =   \" postgres \"   ,   password   :   str   =   \" Kingwila98 \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   int   =   5433   ,   )   - >   None   :   \" \" \" \u8fde\u63a5 postgresql \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   database   :   str ,   optional   _ description _ ,   by   default   None   user   :   str ,   optional   _ description _ ,   by   default   ' postgres '   password   :   str ,   optional   _ description _ ,   by   default   ' Kingwila98 '   host   :   str ,   optional   _ description _ ,   by   default   ' 127.0 . 0.1 '   port   :   int ,   optional   _ description _ ,   by   default   5433   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   self   .   engine   =   create _ engine   (   f   \" postgresql : / /   {   user   }   :   {   password   }   @   {   host   }   :   {   port   }   /   {   database   }   \"   )   Questdb   \u00b6   Bases :   DriverOfPostgre   Questdb \u7684 \u5199\u5165 \u65b9\u5f0f \u90fd \u4e3a \u8ffd\u52a0 \uff0c \u56e0\u6b64 \u5982\u679c \u60f3 replace \u4e4b\u524d \u7684 \u6570\u636e \uff0c \u8bf7 \u624b\u52a8 \u5220\u9664 \u8868\u683c   Questdb \u7684 web   console \u4e3a 127.0 . 0.1 : 9000 \uff0c \u4f5c\u8005 \u5df2\u7ecf \u4fee\u6539 \u4e3a 127.0 . 0.1 : 9001   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   784   785   786   787   788   789   790   791   792   793   794   795   796   797   798   799   800   801   802   803   804   805   806   807   808   809   810   811   812   813   814   815   816   817   818   819   820   821   822   823   824   825   826   827   828   829   830   831   832   833   834   835   836   837   838   839   840   841   842   843   844   845   846   847   848   849   850   851   852   853   854   855   856   857   858   859   860   861   862   863   864   865   866   867   868   869   870   871   872   873   874   875   876   877   878   879   880   881   882   883   884   885   886   887   888   889   890   891   892   893   894   895   896   897   898   899   900   901   902   903   904   905   906   907   908   909   910   911   912   913   914   915   916   917   918   919   920   921   922   923   924   925   926   927   928   929   930   931   932   933   934   935   936   937   938   939   940   941   942   943   944   945   946   947   948   949   950   951   952   953   954   955   956   957   958   959   960   961   962   963   964   965   966   967   968   969   970   971   972   973   974   975   976   977   978   979   980   981   982   983   984   985   986   987   988   989   990   991   992   993   994   995   996   997   998   999   1000   1001   1002   1003   1004   1005   1006   1007   1008   1009   1010   1011   1012   1013   1014   1015   1016   1017   1018   1019   1020   1021   1022   1023   1024   1025   1026   1027   1028   1029   1030   1031   1032   class   Questdb   (   DriverOfPostgre   ) :   \" \" \" Questdb \u7684 \u5199\u5165 \u65b9\u5f0f \u90fd \u4e3a \u8ffd\u52a0 \uff0c \u56e0\u6b64 \u5982\u679c \u60f3 replace \u4e4b\u524d \u7684 \u6570\u636e \uff0c \u8bf7 \u624b\u52a8 \u5220\u9664 \u8868\u683c   Questdb \u7684 web   console \u4e3a 127.0 . 0.1 : 9000 \uff0c \u4f5c\u8005 \u5df2\u7ecf \u4fee\u6539 \u4e3a 127.0 . 0.1 : 9001 \" \" \"   def   __ init __   (   self   ,   user   :   str   =   \" admin \"   ,   password   :   str   =   \" quest \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   str   =   \" 8812 \"   ,   database   :   str   =   \" qdb \"   ,   tmp _ csv _ path   :   str   =   \" tmp _ dataframe _ for _ questdb . csv \"   ,   web _ port   :   str   =   \" 9001 \"   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str ,   optional   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d ,   by   default   \" admin \"   password   :   str ,   optional   \u5bc6\u7801 ,   by   default   \" quest \"   host   :   str ,   optional   \u5730\u5740 ,   by   default   \" 127.0 . 0.1 \"   port   :   str ,   optional   \u7aef\u53e3 ,   by   default   \" 8812 \"   database   :   str ,   optional   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   \" qdb \"   tmp _ csv _ path   :   str ,   optional   \u901a\u8fc7 csv \u5bfc\u5165 \u6570\u636e \u65f6 \uff0c csv \u6587\u4ef6 \u7684 \u6682\u5b58 \u4f4d\u7f6e ,   by   default   \" / opt / homebrew / var / questdb / copy _ path / tmp _ dataframe . csv \"   web _ port   :   str ,   optional   questdb \u63a7\u5236 \u63a7\u5236\u53f0 \u7684 \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 \uff0c \u5b89\u88c5 questdb \u8f6f\u4ef6 \u65f6 \u9ed8\u8ba4 \u4e3a 9000 \uff0c \u672c\u5e93 \u9ed8\u8ba4 \u4e3a 9001 ,   by   default   9001   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   self   .   tmp _ csv _ path   =   tmp _ csv _ path   self   .   web _ port   =   web _ port   def   __ addapt _ numpy _ float64   (   self   ,   numpy _ float64   ) :   return   AsIs   (   numpy _ float64   )   def   __ addapt _ numpy _ int64   (   self   ,   numpy _ int64   ) :   return   AsIs   (   numpy _ int64   )   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   write _ via _ df   (   self   ,   df   :   pd   .   DataFrame   ,   table _ name   :   str   ,   symbols   :   Union   [   str   ,   bool   ,   List   [   int   ] ,   List   [   str   ] ]   =   None   ,   tuple _ col   :   Union   [   str   ,   List   [   str   ] ]   =   None   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5199\u5165 \u7684 dataframe   table _ name   :   str   questdb \u4e2d\u8be5 \u8868 \u7684 \u8868\u540d   symbols   :   Union [ str ,   bool ,   List [ int ] ,   List [ str ] ] ,   optional   \u4e3a symbols \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   None   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u636e \u7c7b\u578b \u6570\u636e\u7c7b\u578b \u4e3a tuple \u6216 list \u7684 \u5217 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   if   tuple _ col   is   None   :   ...   elif   isinstance   (   tuple _ col   ,   str   ) :   df   [   tuple _ col   ]   =   df   [   tuple _ col   ]   .   apply   (   str   )   else   :   for   t   in   tuple _ col   :   df   [   t   ]   =   df   [   t   ]   .   apply   (   str   )   if   symbols   is   not   None   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   ,   symbols   =   symbols   )   else   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   )   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   get _ data _ with _ tuple   (   self   ,   sql _ order   :   str   ,   tuple _ col   :   Union   [   str   ,   List   [   str   ] ]   =   \" fac \"   ,   without _ timestamp   :   bool   =   1   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4ece questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \uff0c \u8bfb\u53d6 \u90a3\u4e9b \u503c\u4e2d \u5e26\u6709 \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u8868\u683c   Parameters   ----------   sql _ order   :   str   \u8bfb\u53d6 \u7684 sql \u547d\u4ee4   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u503c \u7c7b\u578b \u4e3a \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   ' fac '   without _ timestamp   :   bool ,   optional   \u8bfb\u53d6 \u65f6 \u662f\u5426 \u5220\u53bb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u81ea\u52a8 \u52a0\u5165 \u7684 \u540d\u4e3a ` timestamp ` \u7684 \u5217 ,   by   default   1   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u5230 \u7684 \u6570\u636e   \" \" \"   data   =   self   .   get _ data   (   sql _ order   )   def   eval _ it   (   x   ) :   if   \" , \"   in   x   .   iloc   [   0   ] :   x   =   x   .   apply   (   lambda   y   :   [   float   (   i   )   if   y   not   in   [   \" nan \"   ,   \"   nan \"   ,   \" None \"   ]   else   np   .   nan   for   i   in   y   [   1   :   -   1   ]   .   split   (   \" , \"   )   ]   )   else   :   x   =   x   .   astype   (   float   )   return   x   if   isinstance   (   tuple _ col   ,   str   ) :   data   [   tuple _ col   ]   =   eval _ it   (   data   [   tuple _ col   ] )   else   :   for   t   in   tuple _ col   :   data   [   t   ]   =   eval _ it   (   data   [   t   ] )   if   \" timestamp \"   in   list   (   data   .   columns   ) :   if   without _ timestamp   :   data   =   data   .   drop   (   columns   =   [   \" timestamp \"   ] )   return   data   def   write _ via _ csv   (   self   ,   df   :   pd   .   DataFrame   ,   table   :   str   ,   index _ id   :   str   =   None   )   - >   None   :   \" \" \" \u4ee5 csv \u4e2d\u8f6c \u7684 \u65b9\u5f0f \uff0c \u5c06 pd . DataFrame \u5199\u5165 Questdb \uff0c \u8fd9\u4e00 \u65b9\u6cd5 \u7684 \u901f\u5ea6 \u7ea6 \u4e3a \u76f4\u63a5 \u5199\u5165 \u7684 20 \u500d \u4ee5\u4e0a \uff0c \u5efa\u8bae \u4f7f\u7528 \u6b64 \u65b9\u6cd5   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5b58\u5165 \u7684 pd . DataFrame   table   :   str   \u8868\u540d   \" \" \"   register _ adapter   (   np   .   float64   ,   self   .   __ addapt _ numpy _ float64   )   register _ adapter   (   np   .   int64   ,   self   .   __ addapt _ numpy _ int64   )   conn   =   self   .   connect   ( )   #   SQL   quert   to   execute   tmp _ df   =   self   .   tmp _ csv _ path   +   str   (   np   .   random   .   randint   (   100000000   ) )   if   index _ id   is   None   :   df   .   to _ csv   (   tmp _ df   ,   index   =   None   )   else   :   df   .   to _ csv   (   tmp _ df   ,   index _ label   =   index _ id   )   f   =   open   (   tmp _ df   ,   \" r \"   )   cursor   =   conn   .   cursor   ( )   try   :   csv   =   {   \" data \"   :   (   table   ,   f   ) }   server   =   f   \" http : / /   {   self   .   host   }   :   {   self   .   web _ port   }   / imp \"   response   =   requests   .   post   (   server   ,   files   =   csv   )   except   (   Exception   ,   pg   .   DatabaseError   )   as   error   :   print   (   \" Error :   % s   \"   %   error   )   conn   .   rollback   ( )   cursor   .   close   ( )   f   .   close   ( )   cursor   .   close   ( )   os   .   remove   (   tmp _ df   )   def   show _ all _ tables   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u53d6 Questdb \u4e2d \u6240\u6709 \u7684 \u8868 \u7684 \u540d\u79f0   Returns   -------   pd . DataFrame   \u6240\u6709 \u8868 \u7684 \u540d\u79f0   \" \" \"   return   self   .   get _ data   (   \" show   tables \"   )   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   list   (   df   .   code   )   def   show _ all _ dates   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u65e5\u671f   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   return   list   (   df   .   date   )   def   copy _ all _ tables   (   self   ) :   \" \" \" \u4e0b\u8f7d \u67d0\u4e2a questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u6240\u6709 \u7684 \u8868\u683c \" \" \"   homeplace   =   HomePlace   ( )   path   =   homeplace   .   update _ data _ file   +   self   .   host   +   \" _ copy / \"   if   not   os   .   path   .   exists   (   path   ) :   os   .   makedirs   (   path   )   tables   =   [   i   for   i   in   list   (   self   .   show _ all _ tables   ( )   .   table   )   if   i   not   in   [   \" sys . column _ versions _ purge _ log \"   ,   \" telemetry _ config \"   ,   \" sys . telemetry _ wal \"   ,   \" telemetry \"   ,   ]   ]   logger   .   info   (   f   \" \u5171   {   len   (   tables   )   }   \u4e2a\u8868 \uff0c \u5206\u522b \u4e3a   {   tables   }   \"   )   for   table   in   tables   :   logger   .   info   (   f   \" \u6b63\u5728 \u5907\u4efd   {   table   }   \u8868 \u2026 \u2026 \"   )   down   =   self   .   get _ data   (   f   \" select   *   from   {   table   }   \"   )   down   .   to _ parquet   (   f   \"   {   path   } {   self   .   host   }   _   {   table   }   . parquet \"   )   logger   .   success   (   f   \"   {   table   }   \u8868 \u5907\u4efd \u5b8c\u6210 \"   )   logger   .   success   (   \" \u6240\u6709 \u8868 \u5907\u4efd \u5b8c\u6210 \"   )   def   upload _ all _ copies   (   self   ) :   \" \" \" \u4e0a\u4f20 \u4e4b\u524d \u5907\u4efd \u5728 \u672c\u5730 \u7684 questdb \u7684 \u6240\u6709 \u8868\u683c \" \" \"   homeplace   =   HomePlace   ( )   path   =   homeplace   .   update _ data _ file   +   self   .   host   +   \" _ copy / \"   files   =   os   .   listdir   (   path   )   files   =   [   i   .   split   (   \" . parquet \"   ) [   0   ]   for   i   in   files   ]   logger   .   info   (   f   \" \u5171   {   len   (   files   )   }   \u4e2a\u8868 \uff0c \u5206\u522b \u4e3a   {   files   }   \"   )   for   file   in   files   :   logger   .   info   (   f   \" \u6b63\u5728 \u4e0a\u4f20   {   file   }   \u8868 \u2026 \u2026 \"   )   self   .   write _ via _ df   (   pd   .   read _ parquet   (   path   +   file   +   \" . parquet \"   ) ,   file   .   split   (   self   .   host   +   \" _ \"   ) [   -   1   ] ,   )   logger   .   success   (   f   \"   {   file   }   \u8868 \u4e0a\u4f20 \u5b8c\u6210 \"   )   logger   .   success   (   \" \u6240\u6709 \u8868 \u4e0a\u4f20 \u5b8c\u6210 \"   )   __ init __   (   user   =   ' admin '   ,   password   =   ' quest '   ,   host   =   ' 127.0 . 0.1 '   ,   port   =   ' 8812 '   ,   database   =   ' qdb '   ,   tmp _ csv _ path   =   ' tmp _ dataframe _ for _ questdb . csv '   ,   web _ port   =   ' 9001 '   )   \u00b6   \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   \u00b6   user   :   str ,   optional   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d ,   by   default   \" admin \"   password   :   str ,   optional   \u5bc6\u7801 ,   by   default   \" quest \"   host   :   str ,   optional   \u5730\u5740 ,   by   default   \" 127.0 . 0.1 \"   port   :   str ,   optional   \u7aef\u53e3 ,   by   default   \" 8812 \"   database   :   str ,   optional   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   \" qdb \"   tmp _ csv _ path   :   str ,   optional   \u901a\u8fc7 csv \u5bfc\u5165 \u6570\u636e \u65f6 \uff0c csv \u6587\u4ef6 \u7684 \u6682\u5b58 \u4f4d\u7f6e ,   by   default   \" / opt / homebrew / var / questdb / copy _ path / tmp _ dataframe . csv \"   web _ port   :   str ,   optional   questdb \u63a7\u5236 \u63a7\u5236\u53f0 \u7684 \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 \uff0c \u5b89\u88c5 questdb \u8f6f\u4ef6 \u65f6 \u9ed8\u8ba4 \u4e3a 9000 \uff0c \u672c\u5e93 \u9ed8\u8ba4 \u4e3a 9001 ,   by   default   9001   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   788   789   790   791   792   793   794   795   796   797   798   799   800   801   802   803   804   805   806   807   808   809   810   811   812   813   814   815   816   817   818   819   820   821   822   823   824   def   __ init __   (   self   ,   user   :   str   =   \" admin \"   ,   password   :   str   =   \" quest \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   str   =   \" 8812 \"   ,   database   :   str   =   \" qdb \"   ,   tmp _ csv _ path   :   str   =   \" tmp _ dataframe _ for _ questdb . csv \"   ,   web _ port   :   str   =   \" 9001 \"   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str ,   optional   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d ,   by   default   \" admin \"   password   :   str ,   optional   \u5bc6\u7801 ,   by   default   \" quest \"   host   :   str ,   optional   \u5730\u5740 ,   by   default   \" 127.0 . 0.1 \"   port   :   str ,   optional   \u7aef\u53e3 ,   by   default   \" 8812 \"   database   :   str ,   optional   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   \" qdb \"   tmp _ csv _ path   :   str ,   optional   \u901a\u8fc7 csv \u5bfc\u5165 \u6570\u636e \u65f6 \uff0c csv \u6587\u4ef6 \u7684 \u6682\u5b58 \u4f4d\u7f6e ,   by   default   \" / opt / homebrew / var / questdb / copy _ path / tmp _ dataframe . csv \"   web _ port   :   str ,   optional   questdb \u63a7\u5236 \u63a7\u5236\u53f0 \u7684 \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 \uff0c \u5b89\u88c5 questdb \u8f6f\u4ef6 \u65f6 \u9ed8\u8ba4 \u4e3a 9000 \uff0c \u672c\u5e93 \u9ed8\u8ba4 \u4e3a 9001 ,   by   default   9001   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   self   .   tmp _ csv _ path   =   tmp _ csv _ path   self   .   web _ port   =   web _ port   copy _ all _ tables   ( )   \u00b6   \u4e0b\u8f7d \u67d0\u4e2a questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u6240\u6709 \u7684 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   993   994   995   996   997   998   999   1000   1001   1002   1003   1004   1005   1006   1007   1008   1009   1010   1011   1012   1013   1014   1015   1016   def   copy _ all _ tables   (   self   ) :   \" \" \" \u4e0b\u8f7d \u67d0\u4e2a questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u6240\u6709 \u7684 \u8868\u683c \" \" \"   homeplace   =   HomePlace   ( )   path   =   homeplace   .   update _ data _ file   +   self   .   host   +   \" _ copy / \"   if   not   os   .   path   .   exists   (   path   ) :   os   .   makedirs   (   path   )   tables   =   [   i   for   i   in   list   (   self   .   show _ all _ tables   ( )   .   table   )   if   i   not   in   [   \" sys . column _ versions _ purge _ log \"   ,   \" telemetry _ config \"   ,   \" sys . telemetry _ wal \"   ,   \" telemetry \"   ,   ]   ]   logger   .   info   (   f   \" \u5171   {   len   (   tables   )   }   \u4e2a\u8868 \uff0c \u5206\u522b \u4e3a   {   tables   }   \"   )   for   table   in   tables   :   logger   .   info   (   f   \" \u6b63\u5728 \u5907\u4efd   {   table   }   \u8868 \u2026 \u2026 \"   )   down   =   self   .   get _ data   (   f   \" select   *   from   {   table   }   \"   )   down   .   to _ parquet   (   f   \"   {   path   } {   self   .   host   }   _   {   table   }   . parquet \"   )   logger   .   success   (   f   \"   {   table   }   \u8868 \u5907\u4efd \u5b8c\u6210 \"   )   logger   .   success   (   \" \u6240\u6709 \u8868 \u5907\u4efd \u5b8c\u6210 \"   )   get _ data _ with _ tuple   (   sql _ order   ,   tuple _ col   =   ' fac '   ,   without _ timestamp   =   1   )   \u00b6   \u4ece questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \uff0c \u8bfb\u53d6 \u90a3\u4e9b \u503c\u4e2d \u5e26\u6709 \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u8868\u683c   Parameters   \u00b6   sql _ order   :   str   \u8bfb\u53d6 \u7684 sql \u547d\u4ee4   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u503c \u7c7b\u578b \u4e3a \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   ' fac '   without _ timestamp   :   bool ,   optional   \u8bfb\u53d6 \u65f6 \u662f\u5426 \u5220\u53bb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u81ea\u52a8 \u52a0\u5165 \u7684 \u540d\u4e3a   timestamp   \u7684 \u5217 ,   by   default   1   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u5230 \u7684 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   867   868   869   870   871   872   873   874   875   876   877   878   879   880   881   882   883   884   885   886   887   888   889   890   891   892   893   894   895   896   897   898   899   900   901   902   903   904   905   906   907   908   909   910   911   912   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   get _ data _ with _ tuple   (   self   ,   sql _ order   :   str   ,   tuple _ col   :   Union   [   str   ,   List   [   str   ] ]   =   \" fac \"   ,   without _ timestamp   :   bool   =   1   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4ece questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \uff0c \u8bfb\u53d6 \u90a3\u4e9b \u503c\u4e2d \u5e26\u6709 \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u8868\u683c   Parameters   ----------   sql _ order   :   str   \u8bfb\u53d6 \u7684 sql \u547d\u4ee4   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u503c \u7c7b\u578b \u4e3a \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   ' fac '   without _ timestamp   :   bool ,   optional   \u8bfb\u53d6 \u65f6 \u662f\u5426 \u5220\u53bb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u81ea\u52a8 \u52a0\u5165 \u7684 \u540d\u4e3a ` timestamp ` \u7684 \u5217 ,   by   default   1   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u5230 \u7684 \u6570\u636e   \" \" \"   data   =   self   .   get _ data   (   sql _ order   )   def   eval _ it   (   x   ) :   if   \" , \"   in   x   .   iloc   [   0   ] :   x   =   x   .   apply   (   lambda   y   :   [   float   (   i   )   if   y   not   in   [   \" nan \"   ,   \"   nan \"   ,   \" None \"   ]   else   np   .   nan   for   i   in   y   [   1   :   -   1   ]   .   split   (   \" , \"   )   ]   )   else   :   x   =   x   .   astype   (   float   )   return   x   if   isinstance   (   tuple _ col   ,   str   ) :   data   [   tuple _ col   ]   =   eval _ it   (   data   [   tuple _ col   ] )   else   :   for   t   in   tuple _ col   :   data   [   t   ]   =   eval _ it   (   data   [   t   ] )   if   \" timestamp \"   in   list   (   data   .   columns   ) :   if   without _ timestamp   :   data   =   data   .   drop   (   columns   =   [   \" timestamp \"   ] )   return   data   show _ all _ codes   (   table _ name   )   \u00b6   \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801   Parameters   \u00b6   table _ name   :   str   \u8868\u540d   Returns   \u00b6   list   \u5168\u90e8 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   957   958   959   960   961   962   963   964   965   966   967   968   969   970   971   972   973   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   list   (   df   .   code   )   show _ all _ dates   (   table _ name   )   \u00b6   \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f   Parameters   \u00b6   table _ name   :   str   \u8868\u540d   Returns   \u00b6   list   \u5168\u90e8 \u65e5\u671f   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   975   976   977   978   979   980   981   982   983   984   985   986   987   988   989   990   991   def   show _ all _ dates   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u65e5\u671f   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   return   list   (   df   .   date   )   show _ all _ tables   ( )   \u00b6   \u83b7\u53d6 Questdb \u4e2d \u6240\u6709 \u7684 \u8868 \u7684 \u540d\u79f0   Returns   \u00b6   pd . DataFrame   \u6240\u6709 \u8868 \u7684 \u540d\u79f0   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   947   948   949   950   951   952   953   954   955   def   show _ all _ tables   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u53d6 Questdb \u4e2d \u6240\u6709 \u7684 \u8868 \u7684 \u540d\u79f0   Returns   -------   pd . DataFrame   \u6240\u6709 \u8868 \u7684 \u540d\u79f0   \" \" \"   return   self   .   get _ data   (   \" show   tables \"   )   upload _ all _ copies   ( )   \u00b6   \u4e0a\u4f20 \u4e4b\u524d \u5907\u4efd \u5728 \u672c\u5730 \u7684 questdb \u7684 \u6240\u6709 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   1018   1019   1020   1021   1022   1023   1024   1025   1026   1027   1028   1029   1030   1031   1032   def   upload _ all _ copies   (   self   ) :   \" \" \" \u4e0a\u4f20 \u4e4b\u524d \u5907\u4efd \u5728 \u672c\u5730 \u7684 questdb \u7684 \u6240\u6709 \u8868\u683c \" \" \"   homeplace   =   HomePlace   ( )   path   =   homeplace   .   update _ data _ file   +   self   .   host   +   \" _ copy / \"   files   =   os   .   listdir   (   path   )   files   =   [   i   .   split   (   \" . parquet \"   ) [   0   ]   for   i   in   files   ]   logger   .   info   (   f   \" \u5171   {   len   (   files   )   }   \u4e2a\u8868 \uff0c \u5206\u522b \u4e3a   {   files   }   \"   )   for   file   in   files   :   logger   .   info   (   f   \" \u6b63\u5728 \u4e0a\u4f20   {   file   }   \u8868 \u2026 \u2026 \"   )   self   .   write _ via _ df   (   pd   .   read _ parquet   (   path   +   file   +   \" . parquet \"   ) ,   file   .   split   (   self   .   host   +   \" _ \"   ) [   -   1   ] ,   )   logger   .   success   (   f   \"   {   file   }   \u8868 \u4e0a\u4f20 \u5b8c\u6210 \"   )   logger   .   success   (   \" \u6240\u6709 \u8868 \u4e0a\u4f20 \u5b8c\u6210 \"   )   write _ via _ csv   (   df   ,   table   ,   index _ id   =   None   )   \u00b6   \u4ee5 csv \u4e2d\u8f6c \u7684 \u65b9\u5f0f \uff0c \u5c06 pd . DataFrame \u5199\u5165 Questdb \uff0c \u8fd9\u4e00 \u65b9\u6cd5 \u7684 \u901f\u5ea6 \u7ea6 \u4e3a \u76f4\u63a5 \u5199\u5165 \u7684 20 \u500d \u4ee5\u4e0a \uff0c \u5efa\u8bae \u4f7f\u7528 \u6b64 \u65b9\u6cd5   Parameters   \u00b6   df   :   pd . DataFrame   \u8981 \u5b58\u5165 \u7684 pd . DataFrame   table   :   str   \u8868\u540d   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   914   915   916   917   918   919   920   921   922   923   924   925   926   927   928   929   930   931   932   933   934   935   936   937   938   939   940   941   942   943   944   945   def   write _ via _ csv   (   self   ,   df   :   pd   .   DataFrame   ,   table   :   str   ,   index _ id   :   str   =   None   )   - >   None   :   \" \" \" \u4ee5 csv \u4e2d\u8f6c \u7684 \u65b9\u5f0f \uff0c \u5c06 pd . DataFrame \u5199\u5165 Questdb \uff0c \u8fd9\u4e00 \u65b9\u6cd5 \u7684 \u901f\u5ea6 \u7ea6 \u4e3a \u76f4\u63a5 \u5199\u5165 \u7684 20 \u500d \u4ee5\u4e0a \uff0c \u5efa\u8bae \u4f7f\u7528 \u6b64 \u65b9\u6cd5   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5b58\u5165 \u7684 pd . DataFrame   table   :   str   \u8868\u540d   \" \" \"   register _ adapter   (   np   .   float64   ,   self   .   __ addapt _ numpy _ float64   )   register _ adapter   (   np   .   int64   ,   self   .   __ addapt _ numpy _ int64   )   conn   =   self   .   connect   ( )   #   SQL   quert   to   execute   tmp _ df   =   self   .   tmp _ csv _ path   +   str   (   np   .   random   .   randint   (   100000000   ) )   if   index _ id   is   None   :   df   .   to _ csv   (   tmp _ df   ,   index   =   None   )   else   :   df   .   to _ csv   (   tmp _ df   ,   index _ label   =   index _ id   )   f   =   open   (   tmp _ df   ,   \" r \"   )   cursor   =   conn   .   cursor   ( )   try   :   csv   =   {   \" data \"   :   (   table   ,   f   ) }   server   =   f   \" http : / /   {   self   .   host   }   :   {   self   .   web _ port   }   / imp \"   response   =   requests   .   post   (   server   ,   files   =   csv   )   except   (   Exception   ,   pg   .   DatabaseError   )   as   error   :   print   (   \" Error :   % s   \"   %   error   )   conn   .   rollback   ( )   cursor   .   close   ( )   f   .   close   ( )   cursor   .   close   ( )   os   .   remove   (   tmp _ df   )   write _ via _ df   (   df   ,   table _ name   ,   symbols   =   None   ,   tuple _ col   =   None   )   \u00b6   \u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   \u00b6   df   :   pd . DataFrame   \u8981 \u5199\u5165 \u7684 dataframe   table _ name   :   str   questdb \u4e2d\u8be5 \u8868 \u7684 \u8868\u540d   symbols   :   Union [ str ,   bool ,   List [ int ] ,   List [ str ] ] ,   optional   \u4e3a symbols \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   None   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u636e \u7c7b\u578b \u6570\u636e\u7c7b\u578b \u4e3a tuple \u6216 list \u7684 \u5217 \u7684 \u540d\u5b57 ,   by   default   None   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   832   833   834   835   836   837   838   839   840   841   842   843   844   845   846   847   848   849   850   851   852   853   854   855   856   857   858   859   860   861   862   863   864   865   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   write _ via _ df   (   self   ,   df   :   pd   .   DataFrame   ,   table _ name   :   str   ,   symbols   :   Union   [   str   ,   bool   ,   List   [   int   ] ,   List   [   str   ] ]   =   None   ,   tuple _ col   :   Union   [   str   ,   List   [   str   ] ]   =   None   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5199\u5165 \u7684 dataframe   table _ name   :   str   questdb \u4e2d\u8be5 \u8868 \u7684 \u8868\u540d   symbols   :   Union [ str ,   bool ,   List [ int ] ,   List [ str ] ] ,   optional   \u4e3a symbols \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   None   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u636e \u7c7b\u578b \u6570\u636e\u7c7b\u578b \u4e3a tuple \u6216 list \u7684 \u5217 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   if   tuple _ col   is   None   :   ...   elif   isinstance   (   tuple _ col   ,   str   ) :   df   [   tuple _ col   ]   =   df   [   tuple _ col   ]   .   apply   (   str   )   else   :   for   t   in   tuple _ col   :   df   [   t   ]   =   df   [   t   ]   .   apply   (   str   )   if   symbols   is   not   None   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   ,   symbols   =   symbols   )   else   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   )   sqlConfig   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   class   sqlConfig   (   object   ) :   def   __ init __   (   self   ,   db _ name   :   str   =   None   ,   db _ user   :   str   =   STATES   [   \" db _ user \"   ] ,   db _ host   :   str   =   STATES   [   \" db _ host \"   ] ,   db _ port   :   int   =   STATES   [   \" db _ port \"   ] ,   db _ password   :   str   =   STATES   [   \" db _ password \"   ] ,   ) :   #   \u521d\u59cb \u521d\u59cb\u5316 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u8fde\u63a5 \uff0c \u4f7f\u7528 pymysql \u6a21\u5757   db _ info   =   {   \" user \"   :   db _ user   ,   \" password \"   :   db _ password   ,   \" host \"   :   db _ host   ,   \" port \"   :   db _ port   ,   \" database \"   :   db _ name   ,   }   self   .   db _ name   =   db _ name   self   .   db _ info   =   db _ info   self   .   engine   =   create _ engine   (   \" mysql + pymysql : / /   % ( user ) s   :   % ( password ) s   @   % ( host ) s   :   % ( port ) d   /   % ( database ) s   ? charset = utf8 \"   %   db _ info   ,   encoding   =   \" utf - 8 \"   ,   )   def   connect   (   self   ,   db _ name   :   str   =   None   ) :   \" \" \" \u4ee5 pymysql \u7684 \u65b9\u5f0f \u767b\u5f55 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8fdb\u884c \u66f4 \u7075\u6d3b \u7684 \u64cd\u4f5c \" \" \"   if   db _ name   is   None   :   mydb   =   pymysql   .   connect   (   host   =   self   .   db _ info   [   \" host \"   ] ,   user   =   self   .   db _ info   [   \" user \"   ] ,   password   =   self   .   db _ info   [   \" password \"   ] ,   )   else   :   mydb   =   pymysql   .   connect   (   host   =   self   .   db _ info   [   \" host \"   ] ,   user   =   self   .   db _ info   [   \" user \"   ] ,   password   =   self   .   db _ info   [   \" password \"   ] ,   db   =   db _ name   ,   )   return   mydb   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   def   add _ new _ database   (   self   ,   db _ name   :   str   )   - >   None   :   \" \" \" \u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   db _ name   :   str   \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u540d\u79f0   \" \" \"   try   :   self   .   do _ order   (   f   \" CREATE   DATABASE   {   db _ name   }   \"   )   logger   .   success   (   f   \" \u5df2 \u6dfb\u52a0 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u5df2\u7ecf \u5b58\u5728 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8bf7 \u68c0\u67e5 \"   )   def   show _ tables _ old   (   self   ,   db _ name   :   str   =   None   ,   full   =   True   ) :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868 \" \" \"   if   db _ name   is   None   :   db _ name   =   self   .   db _ name   mydb   =   self   .   connect   ( )   mycursor   =   mydb   .   cursor   ( )   if   full   :   return   mycursor   .   execute   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA =   {   f   '   {   db _ name   }   '   }   \"   )   else   :   return   mycursor   .   execute   (   f   \" select   TABLE _ NAME   from   information _ schema . tables   where   TABLE _ SCHEMA =   {   f   '   {   db _ name   }   '   }   \"   )   def   show _ tables   (   self   ,   db _ name   :   str   =   None   ,   full   :   bool   =   True   ) :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868 \" \" \"   db _ info   =   self   .   db _ info   db _ info   [   \" database \"   ]   =   \" information _ schema \"   engine   =   create _ engine   (   \" mysql + pymysql : / /   % ( user ) s   :   % ( password ) s   @   % ( host ) s   :   % ( port ) d   /   % ( database ) s   ? charset = utf8 \"   %   db _ info   ,   encoding   =   \" utf - 8 \"   ,   )   if   db _ name   is   None   :   db _ name   =   self   .   db _ name   if   full   :   res   =   self   .   get _ data _ sql _ order   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   db _ name   }   ' \"   )   else   :   res   =   self   .   get _ data _ sql _ order   (   f   \" select   TABLE _ NAME   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   db _ name   }   ' \"   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   full   :   return   res   else   :   return   list   (   sorted   (   res   .   table _ name   ) )   def   show _ databases   (   self   ,   user _ only   :   bool   =   True   ,   show _ number   :   bool   =   True   )   - >   list   :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4fe1\u606f \" \" \"   mydb   =   self   .   connect   ( )   mycursor   =   mydb   .   cursor   ( )   res   =   self   .   get _ data _ sql _ order   (   \" select   SCHEMA _ NAME   from   information _ schema . schemata \"   )   res   =   list   (   res   .   SCHEMA _ NAME   )   di   =   { }   if   user _ only   :   res   =   res   [   4   : ]   if   show _ number   :   for   i   in   res   :   di   [   i   ]   =   mycursor   .   execute   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   i   }   ' \"   )   return   di   else   :   return   res   def   get _ data _ sql _ order   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   conn   =   self   .   engine   .   raw _ connection   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df _ data   =   cursor   .   fetchall   ( )   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   def   get _ data _ old   (   self   ,   table _ name   :   str   ,   fields   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   show _ time   =   False   ,   )   - >   pd   .   DataFrame   :   \" \" \"   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   table _ name \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684 ` \u7b26\u53f7 \uff0c \u5f62 \u5982 ` 000001 . SZ ` \u6216 ` 20220717 `   fields \u5f62\u5982 ' date , close , open . amount ' \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   startdate \u5f62\u5982 20130326 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   enddate \u5f62\u5982 20220721 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   \" \" \"   if   show _ time   :   a   =   datetime   .   datetime   .   now   ( )   if   table _ name   [   0   ]   .   isdigit   ( ) :   table _ name   =   f   \" `   {   table _ name   }   ` \"   if   fields   is   None   :   fields   =   \" * \"   if   startdate   is   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   \"   elif   startdate   is   None   and   enddate   is   not   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date < =   {   enddate   }   \"   elif   startdate   is   not   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   \"   else   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   and   date < =   {   enddate   }   \"   self   .   sql _ order   =   sql _ order   res   =   pd   .   read _ sql   (   sql _ order   ,   self   .   engine   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   show _ time   :   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   res   def   get _ data   (   self   ,   table _ name   :   str   ,   fields   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   show _ time   =   False   ,   )   - >   pd   .   DataFrame   :   \" \" \"   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   ` table _ name ` \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684   ` ` ` sql   `   ` ` `   \u7b26\u53f7   \u5f62 \u5982   ` ` ` sql   ` 000001 . SZ `   ` ` `   \u6216   ` ` ` sql   ` 20220717 `   ` ` `   ` fields ` \u5f62 \u5982   ` ` ` sql   ' date , close , open . amount '   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   ` startdate ` \u5f62 \u5982   ` ` ` sql   ` 20130326 `   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   ` enddate ` \u5f62 \u5982   ` ` ` sql   ` 20220721 `   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   \" \" \"   if   show _ time   :   a   =   datetime   .   datetime   .   now   ( )   if   table _ name   [   0   ]   .   isdigit   ( ) :   table _ name   =   f   \" `   {   table _ name   }   ` \"   if   fields   is   None   :   fields   =   \" * \"   if   startdate   is   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   \"   elif   startdate   is   None   and   enddate   is   not   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date < =   {   enddate   }   \"   elif   startdate   is   not   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   \"   else   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   and   date < =   {   enddate   }   \"   self   .   sql _ order   =   sql _ order   res   =   self   .   get _ data _ sql _ order   (   sql _ order   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   show _ time   :   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   res   add _ new _ database   (   db _ name   )   \u00b6   \u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   \u00b6   db _ name   :   str   \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u540d\u79f0   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   323   324   325   326   327   328   329   330   331   332   333   334   335   def   add _ new _ database   (   self   ,   db _ name   :   str   )   - >   None   :   \" \" \" \u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   db _ name   :   str   \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u540d\u79f0   \" \" \"   try   :   self   .   do _ order   (   f   \" CREATE   DATABASE   {   db _ name   }   \"   )   logger   .   success   (   f   \" \u5df2 \u6dfb\u52a0 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u5df2\u7ecf \u5b58\u5728 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8bf7 \u68c0\u67e5 \"   )   connect   (   db _ name   =   None   )   \u00b6   \u4ee5 pymysql \u7684 \u65b9\u5f0f \u767b\u5f55 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8fdb\u884c \u66f4 \u7075\u6d3b \u7684 \u64cd\u4f5c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   def   connect   (   self   ,   db _ name   :   str   =   None   ) :   \" \" \" \u4ee5 pymysql \u7684 \u65b9\u5f0f \u767b\u5f55 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8fdb\u884c \u66f4 \u7075\u6d3b \u7684 \u64cd\u4f5c \" \" \"   if   db _ name   is   None   :   mydb   =   pymysql   .   connect   (   host   =   self   .   db _ info   [   \" host \"   ] ,   user   =   self   .   db _ info   [   \" user \"   ] ,   password   =   self   .   db _ info   [   \" password \"   ] ,   )   else   :   mydb   =   pymysql   .   connect   (   host   =   self   .   db _ info   [   \" host \"   ] ,   user   =   self   .   db _ info   [   \" user \"   ] ,   password   =   self   .   db _ info   [   \" password \"   ] ,   db   =   db _ name   ,   )   return   mydb   do _ order   (   sql _ order   )   \u00b6   \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   any   \u8fd4\u56de \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   get _ data   (   table _ name   ,   fields   =   None   ,   startdate   =   None   ,   enddate   =   None   ,   show _ time   =   False   )   \u00b6   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   table _ name   \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684   SQL   1   `   \u7b26\u53f7   \u5f62 \u5982   SQL   1   `   000001   .   SZ   `   \u6216   SQL   1   `   20220717   `   fields   \u5f62 \u5982   SQL   1   ' date , close , open . amount '   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   startdate   \u5f62 \u5982   SQL   1   `   20130326   `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   enddate   \u5f62 \u5982   SQL   1   `   20220721   `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   def   get _ data   (   self   ,   table _ name   :   str   ,   fields   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   show _ time   =   False   ,   )   - >   pd   .   DataFrame   :   \" \" \"   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   ` table _ name ` \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684   ` ` ` sql   `   ` ` `   \u7b26\u53f7   \u5f62 \u5982   ` ` ` sql   ` 000001 . SZ `   ` ` `   \u6216   ` ` ` sql   ` 20220717 `   ` ` `   ` fields ` \u5f62 \u5982   ` ` ` sql   ' date , close , open . amount '   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   ` startdate ` \u5f62 \u5982   ` ` ` sql   ` 20130326 `   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   ` enddate ` \u5f62 \u5982   ` ` ` sql   ` 20220721 `   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   \" \" \"   if   show _ time   :   a   =   datetime   .   datetime   .   now   ( )   if   table _ name   [   0   ]   .   isdigit   ( ) :   table _ name   =   f   \" `   {   table _ name   }   ` \"   if   fields   is   None   :   fields   =   \" * \"   if   startdate   is   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   \"   elif   startdate   is   None   and   enddate   is   not   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date < =   {   enddate   }   \"   elif   startdate   is   not   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   \"   else   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   and   date < =   {   enddate   }   \"   self   .   sql _ order   =   sql _ order   res   =   self   .   get _ data _ sql _ order   (   sql _ order   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   show _ time   :   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   res   get _ data _ old   (   table _ name   ,   fields   =   None   ,   startdate   =   None   ,   enddate   =   None   ,   show _ time   =   False   )   \u00b6   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   table _ name \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684   \u7b26\u53f7 \uff0c \u5f62 \u5982   000001 . SZ   \u6216   20220717 `   fields \u5f62\u5982 ' date , close , open . amount ' \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   startdate \u5f62\u5982 20130326 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   enddate \u5f62\u5982 20220721 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   def   get _ data _ old   (   self   ,   table _ name   :   str   ,   fields   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   show _ time   =   False   ,   )   - >   pd   .   DataFrame   :   \" \" \"   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   table _ name \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684 ` \u7b26\u53f7 \uff0c \u5f62 \u5982 ` 000001 . SZ ` \u6216 ` 20220717 `   fields \u5f62\u5982 ' date , close , open . amount ' \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   startdate \u5f62\u5982 20130326 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   enddate \u5f62\u5982 20220721 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   \" \" \"   if   show _ time   :   a   =   datetime   .   datetime   .   now   ( )   if   table _ name   [   0   ]   .   isdigit   ( ) :   table _ name   =   f   \" `   {   table _ name   }   ` \"   if   fields   is   None   :   fields   =   \" * \"   if   startdate   is   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   \"   elif   startdate   is   None   and   enddate   is   not   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date < =   {   enddate   }   \"   elif   startdate   is   not   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   \"   else   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   and   date < =   {   enddate   }   \"   self   .   sql _ order   =   sql _ order   res   =   pd   .   read _ sql   (   sql _ order   ,   self   .   engine   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   show _ time   :   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   res   show _ databases   (   user _ only   =   True   ,   show _ number   =   True   )   \u00b6   \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4fe1\u606f   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   def   show _ databases   (   self   ,   user _ only   :   bool   =   True   ,   show _ number   :   bool   =   True   )   - >   list   :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4fe1\u606f \" \" \"   mydb   =   self   .   connect   ( )   mycursor   =   mydb   .   cursor   ( )   res   =   self   .   get _ data _ sql _ order   (   \" select   SCHEMA _ NAME   from   information _ schema . schemata \"   )   res   =   list   (   res   .   SCHEMA _ NAME   )   di   =   { }   if   user _ only   :   res   =   res   [   4   : ]   if   show _ number   :   for   i   in   res   :   di   [   i   ]   =   mycursor   .   execute   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   i   }   ' \"   )   return   di   else   :   return   res   show _ tables   (   db _ name   =   None   ,   full   =   True   )   \u00b6   \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   352   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   def   show _ tables   (   self   ,   db _ name   :   str   =   None   ,   full   :   bool   =   True   ) :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868 \" \" \"   db _ info   =   self   .   db _ info   db _ info   [   \" database \"   ]   =   \" information _ schema \"   engine   =   create _ engine   (   \" mysql + pymysql : / /   % ( user ) s   :   % ( password ) s   @   % ( host ) s   :   % ( port ) d   /   % ( database ) s   ? charset = utf8 \"   %   db _ info   ,   encoding   =   \" utf - 8 \"   ,   )   if   db _ name   is   None   :   db _ name   =   self   .   db _ name   if   full   :   res   =   self   .   get _ data _ sql _ order   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   db _ name   }   ' \"   )   else   :   res   =   self   .   get _ data _ sql _ order   (   f   \" select   TABLE _ NAME   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   db _ name   }   ' \"   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   full   :   return   res   else   :   return   list   (   sorted   (   res   .   table _ name   ) )   show _ tables _ old   (   db _ name   =   None   ,   full   =   True   )   \u00b6   \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   337   338   339   340   341   342   343   344   345   346   347   348   349   350   def   show _ tables _ old   (   self   ,   db _ name   :   str   =   None   ,   full   =   True   ) :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868 \" \" \"   if   db _ name   is   None   :   db _ name   =   self   .   db _ name   mydb   =   self   .   connect   ( )   mycursor   =   mydb   .   cursor   ( )   if   full   :   return   mycursor   .   execute   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA =   {   f   '   {   db _ name   }   '   }   \"   )   else   :   return   mycursor   .   execute   (   f   \" select   TABLE _ NAME   from   information _ schema . tables   where   TABLE _ SCHEMA =   {   f   '   {   db _ name   }   '   }   \"   )","title":"database"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient","text":"Bases :   object   clickhouse \u7684 \u4e00\u4e9b \u529f\u80fd \uff0c clickhouse \u5199\u5165 \u6570\u636e \u524d \uff0c \u9700\u8981 \u5148 \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \uff0c \u8868\u683c \u5982\u679c \u4e0d \u5b58\u5728 \u5219 \u4e0d\u80fd \u5199\u5165   clickhouse \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \u4f7f\u7528 \u8bed\u53e5 \u5982\u4e0b   SQL   1   2   3   4   5   6   7   8   9   10   11   12   13   CREATE   TABLE   minute _ data   .   minute _ data   (   `   date   `   int   ,   `   num   `   int   ,   `   code   `   VARCHAR   (   9   ) ,   `   open   `   int   ,   `   high   `   int   ,   `   low   `   int   ,   `   close   `   int   ,   `   amount   `   bigint   ,   `   money   `   bigint   )   ENGINE   =   ReplacingMergeTree   ( )   PRIMARY   KEY   (   date   ,   num   )   ORDER   BY   (   date   ,   num   ) ;   \u5176\u4e2d \u5982\u679c \u4e3b\u952e \u4e0d \u6307\u5b9a \uff0c \u5219 \u4f1a \u9ed8\u8ba4 \u4e3a \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \uff0c \u4e3b\u952e \u4e0d\u80fd \u91cd\u590d \uff0c \u56e0\u6b64 \u4f1a \u81ea\u52a8 \u4fdd\u7559 \u6700\u540e \u4e00\u4e2a \u3002   \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \u540e \uff0c \u9700 \u63d2\u5165 \u4e00\u884c \u6570 \uff0c \u624d \u7b97 \u521b\u5efa \u6210\u529f \uff0c \u5426\u5219 \u4f9d\u7136 \u4e0d\u80fd \u5199\u5165 \uff0c \u63d2\u5165 \u8bed\u53e5 \u5982\u4e0b   SQL   1   2   INSERT   INTO   minute _ data   .   minute _ data   (   date   ,   code   ,   open   ,   high   ,   low   ,   close   ,   amount   ,   money   ,   num   )   VALUES   (   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ) ;   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   692   693   694   695   696   697   698   699   700   701   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   719   720   721   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   740   741   742   743   744   745   746   class   ClickHouseClient   (   object   ) :   \" \" \" clickhouse \u7684 \u4e00\u4e9b \u529f\u80fd \uff0c clickhouse \u5199\u5165 \u6570\u636e \u524d \uff0c \u9700\u8981 \u5148 \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \uff0c \u8868\u683c \u5982\u679c \u4e0d \u5b58\u5728 \u5219 \u4e0d\u80fd \u5199\u5165   clickhouse \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \u4f7f\u7528 \u8bed\u53e5 \u5982\u4e0b   ` ` ` sql   CREATE   TABLE   minute _ data . minute _ data   (   ` date `   int ,   ` num `   int ,   ` code `   VARCHAR ( 9 ) ,   ` open `   int ,   ` high `   int ,   ` low `   int ,   ` close `   int ,   ` amount `   bigint ,   ` money `   bigint   )   ENGINE   =   ReplacingMergeTree ( )   PRIMARY   KEY ( date , num )   ORDER   BY   ( date ,   num ) ;   ` ` `   \u5176\u4e2d \u5982\u679c \u4e3b\u952e \u4e0d \u6307\u5b9a \uff0c \u5219 \u4f1a \u9ed8\u8ba4 \u4e3a \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \uff0c \u4e3b\u952e \u4e0d\u80fd \u91cd\u590d \uff0c \u56e0\u6b64 \u4f1a \u81ea\u52a8 \u4fdd\u7559 \u6700\u540e \u4e00\u4e2a \u3002   \u521b\u5efa \u8868\u683c \u521b\u5efa\u8868\u683c \u540e \uff0c \u9700 \u63d2\u5165 \u4e00\u884c \u6570 \uff0c \u624d \u7b97 \u521b\u5efa \u6210\u529f \uff0c \u5426\u5219 \u4f9d\u7136 \u4e0d\u80fd \u5199\u5165 \uff0c \u63d2\u5165 \u8bed\u53e5 \u5982\u4e0b   ` ` ` sql   INSERT   INTO   minute _ data . minute _ data   ( date ,   code ,   open ,   high ,   low ,   close ,   amount ,   money ,   num )   VALUES   ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ;   ` ` `   \" \" \"   def   __ init __   (   self   ,   database _ name   :   str   ,   database _ host   :   str   =   \" 127.0 . 0.1 \"   ,   database _ user   :   str   =   \" default \"   ,   database _ password   =   \" \"   ,   ) :   self   .   database _ name   =   database _ name   self   .   database _ host   =   database _ host   self   .   database _ user   =   database _ user   self   .   database _ password   =   database _ password   self   .   uri   =   f   \" clickhouse + native : / /   {   database _ host   }   /   {   database _ name   }   \"   self   .   engine   =   create _ engine   (   self   .   uri   )   #   engine   =   create _ engine ( self . uri )   #   session   =   make _ session ( self . engine )   #   metadata   =   MetaData ( bind = engine )   #   #   Base   =   get _ declarative _ base ( metadata = metadata )   def   set _ new _ engine   (   self   ,   engine _ uri   :   str   )   - >   None   :   \" \" \" \u8bbe\u7f6e \u65b0 \u7684 \u5730\u5740   Parameters   ----------   engine _ uri   :   str   \u65b0 \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u5730\u5740   \" \" \"   self   .   uri   =   engine _ uri   self   .   engine   =   create _ engine   (   engine _ uri   )   logger   .   success   (   \" engine \u5df2 \u66f4\u6539 \"   )   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   engine   .   raw _ connection   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   def   get _ data _ old   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pandas . read _ sql \u7684 \u65b9\u5f0f \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   pd   .   read _ sql   (   sql _ order   ,   con   =   self   .   engine   )   return   a   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   get _ data   (   self   ,   sql _ order   :   str   ,   only _ array   :   bool   =   0   )   - >   Union   [   pd   .   DataFrame   ,   np   .   ndarray   ] :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   Union [ pd . DataFrame ,   np . ndarray ]   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   engine   .   raw _ connection   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   if   not   only _ array   :   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   else   :   return   np   .   array   (   df _ data   )   def   get _ data _ old _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data _ old   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   def   get _ data _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 cursor \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   def   save _ data   (   self   ,   df   ,   sql _ order   :   str   ,   if _ exists   =   \" append \"   ,   index   =   False   ) :   \" \" \" \u5b58\u50a8 \u6570\u636e \uff0c if _ exists \u53ef\u4ee5 \u4e3a append \u6216 replace \u6216 fail \uff0c \u9ed8\u8ba4 append \uff0c index \u4e3a \u662f\u5426 \u4fdd\u5b58 df \u7684 index \" \" \"   raise   IOError   (   \" \" \"   \u8bf7 \u4f7f\u7528 pandas \u81ea\u5e26 \u7684 df . to _ sql ( ) \u6765 \u5b58\u50a8 \uff0c \u5b58\u50a8 \u65f6\u8bf7 \u6ce8\u610f \u628a \u5c0f\u6570 \u90fd \u8f6c\u5316 \u4e3a \u6574\u6570 \uff0c \u4f8b\u5982 * 100 \uff08 \u5206\u949f \u6570\u636e \u90fd \u505a \u4e86 \u8fd9\u4e2a \u5904\u7406 \uff09   \u8bf7\u52ff \u643a\u5e26 \u7a7a\u503c \uff0c \u63d0\u524d \u505a\u597d fillna \u5904\u7406 \u3002 \u5927\u4e8e 2147000000 \u5de6\u53f3 \u7684 \u503c \uff0c \u8bf7 \u6307\u5b9a \u7c7b\u578b \u4e3a bigint \uff0c \u5426\u5219 \u4e3a int \u5373\u53ef   \u53e5\u5f0f \u5982 \uff1a   ( np . around ( min1 , 2 ) * 100 ) . ffill ( ) . astype ( int ) . assign ( code = ' 000001 . SZ ' ) . to _ sql ( ' minute _ data ' , engine , if _ exists = ' append ' , index = False )   \" \" \"   )   def   show _ all _ xxx _ in _ tableX   (   self   ,   key   :   str   ,   table   :   str   )   - >   list   :   \" \" \" \u67e5\u8be2 table \u8fd9\u4e2a \u8868\u4e2d \uff0c \u6240\u6709 \u4e0d\u540c \u7684 key \u6709 \u54ea\u4e9b   Parameters   ----------   key   :   str   \u952e \u7684 \u540d\u5b57   table   :   str   \u8868 \u7684 \u540d\u5b57   Returns   -------   list   \u8868\u4e2d \u5168\u90e8 \u7684 \u952e   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct (   {   key   }   )   from   {   self   .   database _ name   }   .   {   table   }   \"   )   return   list   (   df   [   key   ] )   #   TODO :   \u5c06 \u4ee5\u4e0b \u4e24\u4e2a \u51fd\u6570 \u6539\u4e3a \uff0c \u4e0d \u9700\u8981 \u8f93\u5165 \u8868\u540d \uff0c \u4e5f \u53ef\u4ee5 \u8fd4\u56de \u65e5\u671f \uff08 \u4ee5 \u65f6\u95f4 \u66f4\u957f \u7684 \u80a1\u7968 \u6570\u636e \u6570\u636e\u8868 \u4e3a\u51c6 \uff09   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868\u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u8868\u4e2d \u6240\u6709 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   self   .   database _ name   }   .   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   [   i   for   i   in   list   (   df   .   code   )   if   i   ! =   \" 0 \"   ]   def   show _ all _ dates   (   self   ,   table _ name   :   str   ,   mul _ 100   =   False   )   - >   list   :   \" \" \" \u8fd4\u56de \u5206\u949f \u6570\u636e \u4e2d \u6240\u6709 \u65e5\u671f \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09   Parameters   ----------   table _ name   :   str   \u8868\u540d   mul _ 100   :   bool ,   optional   \u8fd4\u56de \u7684 \u65e5\u671f \u662f\u5426 \u6210\u4ee5 100 ,   by   default   False   Returns   -------   list   \u8868\u4e2d \u6240\u6709 \u7684 \u65e5\u671f   \" \" \"   if   ' second '   in   table _ name   :   df   =   self   .   get _ data   (   f   \" select   distinct ( toYYYYMMDD ( date ) )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   else   :   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   if   mul _ 100   :   return   [   i   for   i   in   list   (   df   .   date   )   if   i   ! =   0   ]   else   :   return   [   int   (   i   /   100   )   for   i   in   list   (   df   .   date   )   if   i   ! =   0   ]","title":"ClickHouseClient"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.do_order","text":"\u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5","title":"do _ order ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.get_data","text":"\u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e","title":"get _ data ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.get_data_old","text":"\u4ee5 pandas . read _ sql \u7684 \u65b9\u5f0f \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e","title":"get _ data _ old ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.get_data_old_show_time","text":"\u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4","title":"get _ data _ old _ show _ time ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.get_data_show_time","text":"\u4ee5 cursor \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4","title":"get _ data _ show _ time ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.save_data","text":"\u5b58\u50a8 \u6570\u636e \uff0c if _ exists \u53ef\u4ee5 \u4e3a append \u6216 replace \u6216 fail \uff0c \u9ed8\u8ba4 append \uff0c index \u4e3a \u662f\u5426 \u4fdd\u5b58 df \u7684 index   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   672   673   674   675   676   677   678   679   680   681   def   save _ data   (   self   ,   df   ,   sql _ order   :   str   ,   if _ exists   =   \" append \"   ,   index   =   False   ) :   \" \" \" \u5b58\u50a8 \u6570\u636e \uff0c if _ exists \u53ef\u4ee5 \u4e3a append \u6216 replace \u6216 fail \uff0c \u9ed8\u8ba4 append \uff0c index \u4e3a \u662f\u5426 \u4fdd\u5b58 df \u7684 index \" \" \"   raise   IOError   (   \" \" \"   \u8bf7 \u4f7f\u7528 pandas \u81ea\u5e26 \u7684 df . to _ sql ( ) \u6765 \u5b58\u50a8 \uff0c \u5b58\u50a8 \u65f6\u8bf7 \u6ce8\u610f \u628a \u5c0f\u6570 \u90fd \u8f6c\u5316 \u4e3a \u6574\u6570 \uff0c \u4f8b\u5982 * 100 \uff08 \u5206\u949f \u6570\u636e \u90fd \u505a \u4e86 \u8fd9\u4e2a \u5904\u7406 \uff09   \u8bf7\u52ff \u643a\u5e26 \u7a7a\u503c \uff0c \u63d0\u524d \u505a\u597d fillna \u5904\u7406 \u3002 \u5927\u4e8e 2147000000 \u5de6\u53f3 \u7684 \u503c \uff0c \u8bf7 \u6307\u5b9a \u7c7b\u578b \u4e3a bigint \uff0c \u5426\u5219 \u4e3a int \u5373\u53ef   \u53e5\u5f0f \u5982 \uff1a   ( np . around ( min1 , 2 ) * 100 ) . ffill ( ) . astype ( int ) . assign ( code = ' 000001 . SZ ' ) . to _ sql ( ' minute _ data ' , engine , if _ exists = ' append ' , index = False )   \" \" \"   )","title":"save _ data ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.set_new_engine","text":"\u8bbe\u7f6e \u65b0 \u7684 \u5730\u5740","title":"set _ new _ engine ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.show_all_codes","text":"\u8fd4\u56de \u8868\u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09","title":"show _ all _ codes ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.show_all_dates","text":"\u8fd4\u56de \u5206\u949f \u6570\u636e \u4e2d \u6240\u6709 \u65e5\u671f \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09","title":"show _ all _ dates ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.ClickHouseClient.show_all_xxx_in_tableX","text":"\u67e5\u8be2 table \u8fd9\u4e2a \u8868\u4e2d \uff0c \u6240\u6709 \u4e0d\u540c \u7684 key \u6709 \u54ea\u4e9b","title":"show _ all _ xxx _ in _ tableX ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.DriverOfPostgre","text":"Bases :   MetaSQLDriver   \u80fd\u4ee5 postgresql \u548c psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   230   231   232   233   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   class   DriverOfPostgre   (   MetaSQLDriver   ) :   \" \" \" \u80fd\u4ee5 postgresql \u548c psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \" \" \"   def   __ init __   (   self   ,   user   :   str   ,   password   :   str   ,   host   :   str   ,   port   :   str   ,   database   :   str   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d   password   :   str   \u5bc6\u7801   host   :   str   \u5730\u5740   port   :   str   \u7aef\u53e3   database   :   str   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u540d   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   def   connect   (   self   ) :   conn   =   pg   .   connect   (   user   =   self   .   user   ,   password   =   self   .   password   ,   host   =   self   .   host   ,   port   =   self   .   port   ,   database   =   self   .   database   ,   )   return   conn","title":"DriverOfPostgre"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.DriverOfPostgre.__init__","text":"\u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver","text":"Bases :   object   \u6240\u6709 sql \u7c7b \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u901a\u7528 \u7684 \u4e00\u4e9b \u529f\u80fd   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   class   MetaSQLDriver   (   object   ) :   \" \" \" \u6240\u6709 sql \u7c7b \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u901a\u7528 \u7684 \u4e00\u4e9b \u529f\u80fd \" \" \"   def   __ init __   (   self   ,   user   :   str   ,   password   :   str   ,   host   :   str   ,   port   :   str   ,   database   :   str   )   - >   None   :   \" \" \" \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u57fa\u672c \u4fe1\u606f   Parameters   ----------   user   :   str   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d   password   :   str   \u5bc6\u7801   host   :   str   \u5730\u5740   port   :   str   \u7aef\u53e3   database   :   str   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u540d   \" \" \"   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   def   connect   (   self   ) :   ...   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   def   add _ new _ database   (   self   ,   db _ name   :   str   )   - >   None   :   \" \" \" \u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   db _ name   :   str   \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u540d\u79f0   \" \" \"   try   :   self   .   do _ order   (   f   \" CREATE   DATABASE   {   db _ name   }   \"   )   logger   .   success   (   f   \" \u5df2 \u6dfb\u52a0 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u5df2\u7ecf \u5b58\u5728 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8bf7 \u68c0\u67e5 \"   )   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) )   def   get _ data   (   self   ,   sql _ order   :   str   ,   only _ array   :   bool   =   0   )   - >   Union   [   pd   .   DataFrame   ,   np   .   ndarray   ] :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   Union [ pd . DataFrame ,   np . ndarray ]   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   if   not   only _ array   :   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   else   :   return   np   .   array   (   df _ data   )   def   get _ data _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   def   get _ data _ alter   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4e13\u95e8 \u7528\u4e8e \u5e94\u5bf9 get _ data \u51fd\u6570 \u53ef\u80fd \u51fa\u73b0 \u7684 \u7279\u6b8a \u60c5\u51b5 \uff0c \u4f8b\u5982 \u5bbd\u8868   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   df   =   pd   .   DataFrame   (   df _ data   )   df   .   columns   =   list   (   df   .   iloc   [   0   ,   : ] )   df   =   df   .   iloc   [   1   : ,   : ]   df   .   index   =   list   (   df   .   iloc   [ : ,   0   ] )   df   =   df   .   iloc   [ : ,   1   : ]   return   df   def   get _ data _ old   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pandas . read _ sql \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   pd   .   read _ sql   (   sql _ order   ,   con   =   self   .   engine   )   return   a   def   get _ data _ old _ show _ time   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   a   =   datetime   .   datetime   .   now   ( )   df   =   self   .   get _ data _ old   (   sql _ order   )   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   df   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   list   (   df   .   code   )   def   show _ all _ dates   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u65e5\u671f   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   return   list   (   df   .   date   )","title":"MetaSQLDriver"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.__init__","text":"\u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u57fa\u672c \u4fe1\u606f","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.add_new_database","text":"\u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93","title":"add _ new _ database ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.do_order","text":"\u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5","title":"do _ order ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.get_data","text":"\u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e","title":"get _ data ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.get_data_alter","text":"\u4e13\u95e8 \u7528\u4e8e \u5e94\u5bf9 get _ data \u51fd\u6570 \u53ef\u80fd \u51fa\u73b0 \u7684 \u7279\u6b8a \u60c5\u51b5 \uff0c \u4f8b\u5982 \u5bbd\u8868","title":"get _ data _ alter ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.get_data_old","text":"\u4ee5 pandas . read _ sql \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e","title":"get _ data _ old ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.get_data_old_show_time","text":"\u4ee5 pd . read _ sql \u548c sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4","title":"get _ data _ old _ show _ time ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.get_data_show_time","text":"\u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c \u5e76 \u544a\u77e5 \u6240\u7528 \u65f6\u95f4","title":"get _ data _ show _ time ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.show_all_codes","text":"\u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801","title":"show _ all _ codes ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.MetaSQLDriver.show_all_dates","text":"\u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f","title":"show _ all _ dates ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.PostgreSQL","text":"Bases :   DriverOfPostgre   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   749   750   751   752   753   754   755   756   757   758   759   760   761   762   763   764   765   766   767   768   769   770   771   772   773   774   775   776   777   778   779   780   781   class   PostgreSQL   (   DriverOfPostgre   ) :   def   __ init __   (   self   ,   database   :   str   =   None   ,   user   :   str   =   \" postgres \"   ,   password   :   str   =   \" Kingwila98 \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   int   =   5433   ,   )   - >   None   :   \" \" \" \u8fde\u63a5 postgresql \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   database   :   str ,   optional   _ description _ ,   by   default   None   user   :   str ,   optional   _ description _ ,   by   default   ' postgres '   password   :   str ,   optional   _ description _ ,   by   default   ' Kingwila98 '   host   :   str ,   optional   _ description _ ,   by   default   ' 127.0 . 0.1 '   port   :   int ,   optional   _ description _ ,   by   default   5433   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   self   .   engine   =   create _ engine   (   f   \" postgresql : / /   {   user   }   :   {   password   }   @   {   host   }   :   {   port   }   /   {   database   }   \"   )","title":"PostgreSQL"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.PostgreSQL.__init__","text":"\u8fde\u63a5 postgresql \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb","text":"Bases :   DriverOfPostgre   Questdb \u7684 \u5199\u5165 \u65b9\u5f0f \u90fd \u4e3a \u8ffd\u52a0 \uff0c \u56e0\u6b64 \u5982\u679c \u60f3 replace \u4e4b\u524d \u7684 \u6570\u636e \uff0c \u8bf7 \u624b\u52a8 \u5220\u9664 \u8868\u683c   Questdb \u7684 web   console \u4e3a 127.0 . 0.1 : 9000 \uff0c \u4f5c\u8005 \u5df2\u7ecf \u4fee\u6539 \u4e3a 127.0 . 0.1 : 9001   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   784   785   786   787   788   789   790   791   792   793   794   795   796   797   798   799   800   801   802   803   804   805   806   807   808   809   810   811   812   813   814   815   816   817   818   819   820   821   822   823   824   825   826   827   828   829   830   831   832   833   834   835   836   837   838   839   840   841   842   843   844   845   846   847   848   849   850   851   852   853   854   855   856   857   858   859   860   861   862   863   864   865   866   867   868   869   870   871   872   873   874   875   876   877   878   879   880   881   882   883   884   885   886   887   888   889   890   891   892   893   894   895   896   897   898   899   900   901   902   903   904   905   906   907   908   909   910   911   912   913   914   915   916   917   918   919   920   921   922   923   924   925   926   927   928   929   930   931   932   933   934   935   936   937   938   939   940   941   942   943   944   945   946   947   948   949   950   951   952   953   954   955   956   957   958   959   960   961   962   963   964   965   966   967   968   969   970   971   972   973   974   975   976   977   978   979   980   981   982   983   984   985   986   987   988   989   990   991   992   993   994   995   996   997   998   999   1000   1001   1002   1003   1004   1005   1006   1007   1008   1009   1010   1011   1012   1013   1014   1015   1016   1017   1018   1019   1020   1021   1022   1023   1024   1025   1026   1027   1028   1029   1030   1031   1032   class   Questdb   (   DriverOfPostgre   ) :   \" \" \" Questdb \u7684 \u5199\u5165 \u65b9\u5f0f \u90fd \u4e3a \u8ffd\u52a0 \uff0c \u56e0\u6b64 \u5982\u679c \u60f3 replace \u4e4b\u524d \u7684 \u6570\u636e \uff0c \u8bf7 \u624b\u52a8 \u5220\u9664 \u8868\u683c   Questdb \u7684 web   console \u4e3a 127.0 . 0.1 : 9000 \uff0c \u4f5c\u8005 \u5df2\u7ecf \u4fee\u6539 \u4e3a 127.0 . 0.1 : 9001 \" \" \"   def   __ init __   (   self   ,   user   :   str   =   \" admin \"   ,   password   :   str   =   \" quest \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   str   =   \" 8812 \"   ,   database   :   str   =   \" qdb \"   ,   tmp _ csv _ path   :   str   =   \" tmp _ dataframe _ for _ questdb . csv \"   ,   web _ port   :   str   =   \" 9001 \"   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str ,   optional   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d ,   by   default   \" admin \"   password   :   str ,   optional   \u5bc6\u7801 ,   by   default   \" quest \"   host   :   str ,   optional   \u5730\u5740 ,   by   default   \" 127.0 . 0.1 \"   port   :   str ,   optional   \u7aef\u53e3 ,   by   default   \" 8812 \"   database   :   str ,   optional   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   \" qdb \"   tmp _ csv _ path   :   str ,   optional   \u901a\u8fc7 csv \u5bfc\u5165 \u6570\u636e \u65f6 \uff0c csv \u6587\u4ef6 \u7684 \u6682\u5b58 \u4f4d\u7f6e ,   by   default   \" / opt / homebrew / var / questdb / copy _ path / tmp _ dataframe . csv \"   web _ port   :   str ,   optional   questdb \u63a7\u5236 \u63a7\u5236\u53f0 \u7684 \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 \uff0c \u5b89\u88c5 questdb \u8f6f\u4ef6 \u65f6 \u9ed8\u8ba4 \u4e3a 9000 \uff0c \u672c\u5e93 \u9ed8\u8ba4 \u4e3a 9001 ,   by   default   9001   \" \" \"   super   ( )   .   __ init __   (   user   ,   password   ,   host   ,   port   ,   database   )   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   self   .   tmp _ csv _ path   =   tmp _ csv _ path   self   .   web _ port   =   web _ port   def   __ addapt _ numpy _ float64   (   self   ,   numpy _ float64   ) :   return   AsIs   (   numpy _ float64   )   def   __ addapt _ numpy _ int64   (   self   ,   numpy _ int64   ) :   return   AsIs   (   numpy _ int64   )   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   write _ via _ df   (   self   ,   df   :   pd   .   DataFrame   ,   table _ name   :   str   ,   symbols   :   Union   [   str   ,   bool   ,   List   [   int   ] ,   List   [   str   ] ]   =   None   ,   tuple _ col   :   Union   [   str   ,   List   [   str   ] ]   =   None   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5199\u5165 \u7684 dataframe   table _ name   :   str   questdb \u4e2d\u8be5 \u8868 \u7684 \u8868\u540d   symbols   :   Union [ str ,   bool ,   List [ int ] ,   List [ str ] ] ,   optional   \u4e3a symbols \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   None   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u636e \u7c7b\u578b \u6570\u636e\u7c7b\u578b \u4e3a tuple \u6216 list \u7684 \u5217 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   if   tuple _ col   is   None   :   ...   elif   isinstance   (   tuple _ col   ,   str   ) :   df   [   tuple _ col   ]   =   df   [   tuple _ col   ]   .   apply   (   str   )   else   :   for   t   in   tuple _ col   :   df   [   t   ]   =   df   [   t   ]   .   apply   (   str   )   if   symbols   is   not   None   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   ,   symbols   =   symbols   )   else   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   )   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) ,   wait   =   wait _ fixed   (   3   ) )   def   get _ data _ with _ tuple   (   self   ,   sql _ order   :   str   ,   tuple _ col   :   Union   [   str   ,   List   [   str   ] ]   =   \" fac \"   ,   without _ timestamp   :   bool   =   1   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4ece questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \uff0c \u8bfb\u53d6 \u90a3\u4e9b \u503c\u4e2d \u5e26\u6709 \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u8868\u683c   Parameters   ----------   sql _ order   :   str   \u8bfb\u53d6 \u7684 sql \u547d\u4ee4   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u503c \u7c7b\u578b \u4e3a \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   ' fac '   without _ timestamp   :   bool ,   optional   \u8bfb\u53d6 \u65f6 \u662f\u5426 \u5220\u53bb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u81ea\u52a8 \u52a0\u5165 \u7684 \u540d\u4e3a ` timestamp ` \u7684 \u5217 ,   by   default   1   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u5230 \u7684 \u6570\u636e   \" \" \"   data   =   self   .   get _ data   (   sql _ order   )   def   eval _ it   (   x   ) :   if   \" , \"   in   x   .   iloc   [   0   ] :   x   =   x   .   apply   (   lambda   y   :   [   float   (   i   )   if   y   not   in   [   \" nan \"   ,   \"   nan \"   ,   \" None \"   ]   else   np   .   nan   for   i   in   y   [   1   :   -   1   ]   .   split   (   \" , \"   )   ]   )   else   :   x   =   x   .   astype   (   float   )   return   x   if   isinstance   (   tuple _ col   ,   str   ) :   data   [   tuple _ col   ]   =   eval _ it   (   data   [   tuple _ col   ] )   else   :   for   t   in   tuple _ col   :   data   [   t   ]   =   eval _ it   (   data   [   t   ] )   if   \" timestamp \"   in   list   (   data   .   columns   ) :   if   without _ timestamp   :   data   =   data   .   drop   (   columns   =   [   \" timestamp \"   ] )   return   data   def   write _ via _ csv   (   self   ,   df   :   pd   .   DataFrame   ,   table   :   str   ,   index _ id   :   str   =   None   )   - >   None   :   \" \" \" \u4ee5 csv \u4e2d\u8f6c \u7684 \u65b9\u5f0f \uff0c \u5c06 pd . DataFrame \u5199\u5165 Questdb \uff0c \u8fd9\u4e00 \u65b9\u6cd5 \u7684 \u901f\u5ea6 \u7ea6 \u4e3a \u76f4\u63a5 \u5199\u5165 \u7684 20 \u500d \u4ee5\u4e0a \uff0c \u5efa\u8bae \u4f7f\u7528 \u6b64 \u65b9\u6cd5   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5b58\u5165 \u7684 pd . DataFrame   table   :   str   \u8868\u540d   \" \" \"   register _ adapter   (   np   .   float64   ,   self   .   __ addapt _ numpy _ float64   )   register _ adapter   (   np   .   int64   ,   self   .   __ addapt _ numpy _ int64   )   conn   =   self   .   connect   ( )   #   SQL   quert   to   execute   tmp _ df   =   self   .   tmp _ csv _ path   +   str   (   np   .   random   .   randint   (   100000000   ) )   if   index _ id   is   None   :   df   .   to _ csv   (   tmp _ df   ,   index   =   None   )   else   :   df   .   to _ csv   (   tmp _ df   ,   index _ label   =   index _ id   )   f   =   open   (   tmp _ df   ,   \" r \"   )   cursor   =   conn   .   cursor   ( )   try   :   csv   =   {   \" data \"   :   (   table   ,   f   ) }   server   =   f   \" http : / /   {   self   .   host   }   :   {   self   .   web _ port   }   / imp \"   response   =   requests   .   post   (   server   ,   files   =   csv   )   except   (   Exception   ,   pg   .   DatabaseError   )   as   error   :   print   (   \" Error :   % s   \"   %   error   )   conn   .   rollback   ( )   cursor   .   close   ( )   f   .   close   ( )   cursor   .   close   ( )   os   .   remove   (   tmp _ df   )   def   show _ all _ tables   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u83b7\u53d6 Questdb \u4e2d \u6240\u6709 \u7684 \u8868 \u7684 \u540d\u79f0   Returns   -------   pd . DataFrame   \u6240\u6709 \u8868 \u7684 \u540d\u79f0   \" \" \"   return   self   .   get _ data   (   \" show   tables \"   )   def   show _ all _ codes   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( code )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" code \"   )   return   list   (   df   .   code   )   def   show _ all _ dates   (   self   ,   table _ name   :   str   )   - >   list   :   \" \" \" \u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f   Parameters   ----------   table _ name   :   str   \u8868\u540d   Returns   -------   list   \u5168\u90e8 \u65e5\u671f   \" \" \"   df   =   self   .   get _ data   (   f   \" select   distinct ( date )   from   {   table _ name   }   \"   )   .   sort _ values   (   \" date \"   )   return   list   (   df   .   date   )   def   copy _ all _ tables   (   self   ) :   \" \" \" \u4e0b\u8f7d \u67d0\u4e2a questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u6240\u6709 \u7684 \u8868\u683c \" \" \"   homeplace   =   HomePlace   ( )   path   =   homeplace   .   update _ data _ file   +   self   .   host   +   \" _ copy / \"   if   not   os   .   path   .   exists   (   path   ) :   os   .   makedirs   (   path   )   tables   =   [   i   for   i   in   list   (   self   .   show _ all _ tables   ( )   .   table   )   if   i   not   in   [   \" sys . column _ versions _ purge _ log \"   ,   \" telemetry _ config \"   ,   \" sys . telemetry _ wal \"   ,   \" telemetry \"   ,   ]   ]   logger   .   info   (   f   \" \u5171   {   len   (   tables   )   }   \u4e2a\u8868 \uff0c \u5206\u522b \u4e3a   {   tables   }   \"   )   for   table   in   tables   :   logger   .   info   (   f   \" \u6b63\u5728 \u5907\u4efd   {   table   }   \u8868 \u2026 \u2026 \"   )   down   =   self   .   get _ data   (   f   \" select   *   from   {   table   }   \"   )   down   .   to _ parquet   (   f   \"   {   path   } {   self   .   host   }   _   {   table   }   . parquet \"   )   logger   .   success   (   f   \"   {   table   }   \u8868 \u5907\u4efd \u5b8c\u6210 \"   )   logger   .   success   (   \" \u6240\u6709 \u8868 \u5907\u4efd \u5b8c\u6210 \"   )   def   upload _ all _ copies   (   self   ) :   \" \" \" \u4e0a\u4f20 \u4e4b\u524d \u5907\u4efd \u5728 \u672c\u5730 \u7684 questdb \u7684 \u6240\u6709 \u8868\u683c \" \" \"   homeplace   =   HomePlace   ( )   path   =   homeplace   .   update _ data _ file   +   self   .   host   +   \" _ copy / \"   files   =   os   .   listdir   (   path   )   files   =   [   i   .   split   (   \" . parquet \"   ) [   0   ]   for   i   in   files   ]   logger   .   info   (   f   \" \u5171   {   len   (   files   )   }   \u4e2a\u8868 \uff0c \u5206\u522b \u4e3a   {   files   }   \"   )   for   file   in   files   :   logger   .   info   (   f   \" \u6b63\u5728 \u4e0a\u4f20   {   file   }   \u8868 \u2026 \u2026 \"   )   self   .   write _ via _ df   (   pd   .   read _ parquet   (   path   +   file   +   \" . parquet \"   ) ,   file   .   split   (   self   .   host   +   \" _ \"   ) [   -   1   ] ,   )   logger   .   success   (   f   \"   {   file   }   \u8868 \u4e0a\u4f20 \u5b8c\u6210 \"   )   logger   .   success   (   \" \u6240\u6709 \u8868 \u4e0a\u4f20 \u5b8c\u6210 \"   )","title":"Questdb"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.__init__","text":"\u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.copy_all_tables","text":"\u4e0b\u8f7d \u67d0\u4e2a questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u6240\u6709 \u7684 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   993   994   995   996   997   998   999   1000   1001   1002   1003   1004   1005   1006   1007   1008   1009   1010   1011   1012   1013   1014   1015   1016   def   copy _ all _ tables   (   self   ) :   \" \" \" \u4e0b\u8f7d \u67d0\u4e2a questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u6240\u6709 \u7684 \u8868\u683c \" \" \"   homeplace   =   HomePlace   ( )   path   =   homeplace   .   update _ data _ file   +   self   .   host   +   \" _ copy / \"   if   not   os   .   path   .   exists   (   path   ) :   os   .   makedirs   (   path   )   tables   =   [   i   for   i   in   list   (   self   .   show _ all _ tables   ( )   .   table   )   if   i   not   in   [   \" sys . column _ versions _ purge _ log \"   ,   \" telemetry _ config \"   ,   \" sys . telemetry _ wal \"   ,   \" telemetry \"   ,   ]   ]   logger   .   info   (   f   \" \u5171   {   len   (   tables   )   }   \u4e2a\u8868 \uff0c \u5206\u522b \u4e3a   {   tables   }   \"   )   for   table   in   tables   :   logger   .   info   (   f   \" \u6b63\u5728 \u5907\u4efd   {   table   }   \u8868 \u2026 \u2026 \"   )   down   =   self   .   get _ data   (   f   \" select   *   from   {   table   }   \"   )   down   .   to _ parquet   (   f   \"   {   path   } {   self   .   host   }   _   {   table   }   . parquet \"   )   logger   .   success   (   f   \"   {   table   }   \u8868 \u5907\u4efd \u5b8c\u6210 \"   )   logger   .   success   (   \" \u6240\u6709 \u8868 \u5907\u4efd \u5b8c\u6210 \"   )","title":"copy _ all _ tables ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.get_data_with_tuple","text":"\u4ece questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \uff0c \u8bfb\u53d6 \u90a3\u4e9b \u503c\u4e2d \u5e26\u6709 \u5143\u7ec4 \u6216 \u5217\u8868 \u7684 \u8868\u683c","title":"get _ data _ with _ tuple ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.show_all_codes","text":"\u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u80a1\u7968 \u7684 \u4ee3\u7801","title":"show _ all _ codes ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.show_all_dates","text":"\u8fd4\u56de \u8868 \uff08 \u5e38\u7528 \u4e8e \u5206\u949f \u6570\u636e \uff09 \u4e2d \u6240\u6709 \u65e5\u671f","title":"show _ all _ dates ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.show_all_tables","text":"\u83b7\u53d6 Questdb \u4e2d \u6240\u6709 \u7684 \u8868 \u7684 \u540d\u79f0","title":"show _ all _ tables ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.upload_all_copies","text":"\u4e0a\u4f20 \u4e4b\u524d \u5907\u4efd \u5728 \u672c\u5730 \u7684 questdb \u7684 \u6240\u6709 \u8868\u683c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   1018   1019   1020   1021   1022   1023   1024   1025   1026   1027   1028   1029   1030   1031   1032   def   upload _ all _ copies   (   self   ) :   \" \" \" \u4e0a\u4f20 \u4e4b\u524d \u5907\u4efd \u5728 \u672c\u5730 \u7684 questdb \u7684 \u6240\u6709 \u8868\u683c \" \" \"   homeplace   =   HomePlace   ( )   path   =   homeplace   .   update _ data _ file   +   self   .   host   +   \" _ copy / \"   files   =   os   .   listdir   (   path   )   files   =   [   i   .   split   (   \" . parquet \"   ) [   0   ]   for   i   in   files   ]   logger   .   info   (   f   \" \u5171   {   len   (   files   )   }   \u4e2a\u8868 \uff0c \u5206\u522b \u4e3a   {   files   }   \"   )   for   file   in   files   :   logger   .   info   (   f   \" \u6b63\u5728 \u4e0a\u4f20   {   file   }   \u8868 \u2026 \u2026 \"   )   self   .   write _ via _ df   (   pd   .   read _ parquet   (   path   +   file   +   \" . parquet \"   ) ,   file   .   split   (   self   .   host   +   \" _ \"   ) [   -   1   ] ,   )   logger   .   success   (   f   \"   {   file   }   \u8868 \u4e0a\u4f20 \u5b8c\u6210 \"   )   logger   .   success   (   \" \u6240\u6709 \u8868 \u4e0a\u4f20 \u5b8c\u6210 \"   )","title":"upload _ all _ copies ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.write_via_csv","text":"\u4ee5 csv \u4e2d\u8f6c \u7684 \u65b9\u5f0f \uff0c \u5c06 pd . DataFrame \u5199\u5165 Questdb \uff0c \u8fd9\u4e00 \u65b9\u6cd5 \u7684 \u901f\u5ea6 \u7ea6 \u4e3a \u76f4\u63a5 \u5199\u5165 \u7684 20 \u500d \u4ee5\u4e0a \uff0c \u5efa\u8bae \u4f7f\u7528 \u6b64 \u65b9\u6cd5","title":"write _ via _ csv ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.Questdb.write_via_df","text":"\u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93","title":"write _ via _ df ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   class   sqlConfig   (   object   ) :   def   __ init __   (   self   ,   db _ name   :   str   =   None   ,   db _ user   :   str   =   STATES   [   \" db _ user \"   ] ,   db _ host   :   str   =   STATES   [   \" db _ host \"   ] ,   db _ port   :   int   =   STATES   [   \" db _ port \"   ] ,   db _ password   :   str   =   STATES   [   \" db _ password \"   ] ,   ) :   #   \u521d\u59cb \u521d\u59cb\u5316 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u8fde\u63a5 \uff0c \u4f7f\u7528 pymysql \u6a21\u5757   db _ info   =   {   \" user \"   :   db _ user   ,   \" password \"   :   db _ password   ,   \" host \"   :   db _ host   ,   \" port \"   :   db _ port   ,   \" database \"   :   db _ name   ,   }   self   .   db _ name   =   db _ name   self   .   db _ info   =   db _ info   self   .   engine   =   create _ engine   (   \" mysql + pymysql : / /   % ( user ) s   :   % ( password ) s   @   % ( host ) s   :   % ( port ) d   /   % ( database ) s   ? charset = utf8 \"   %   db _ info   ,   encoding   =   \" utf - 8 \"   ,   )   def   connect   (   self   ,   db _ name   :   str   =   None   ) :   \" \" \" \u4ee5 pymysql \u7684 \u65b9\u5f0f \u767b\u5f55 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8fdb\u884c \u66f4 \u7075\u6d3b \u7684 \u64cd\u4f5c \" \" \"   if   db _ name   is   None   :   mydb   =   pymysql   .   connect   (   host   =   self   .   db _ info   [   \" host \"   ] ,   user   =   self   .   db _ info   [   \" user \"   ] ,   password   =   self   .   db _ info   [   \" password \"   ] ,   )   else   :   mydb   =   pymysql   .   connect   (   host   =   self   .   db _ info   [   \" host \"   ] ,   user   =   self   .   db _ info   [   \" user \"   ] ,   password   =   self   .   db _ info   [   \" password \"   ] ,   db   =   db _ name   ,   )   return   mydb   def   do _ order   (   self   ,   sql _ order   :   str   )   - >   any   :   \" \" \" \u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   any   \u8fd4\u56de \u7ed3\u679c   \" \" \"   conn   =   self   .   connect   ( )   cur   =   conn   .   cursor   ( )   return   cur   .   execute   (   sql _ order   )   def   add _ new _ database   (   self   ,   db _ name   :   str   )   - >   None   :   \" \" \" \u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   db _ name   :   str   \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u540d\u79f0   \" \" \"   try   :   self   .   do _ order   (   f   \" CREATE   DATABASE   {   db _ name   }   \"   )   logger   .   success   (   f   \" \u5df2 \u6dfb\u52a0 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \"   )   except   Exception   :   logger   .   warning   (   f   \" \u5df2\u7ecf \u5b58\u5728 \u540d\u4e3a   {   db _ name   }   \u7684 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8bf7 \u68c0\u67e5 \"   )   def   show _ tables _ old   (   self   ,   db _ name   :   str   =   None   ,   full   =   True   ) :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868 \" \" \"   if   db _ name   is   None   :   db _ name   =   self   .   db _ name   mydb   =   self   .   connect   ( )   mycursor   =   mydb   .   cursor   ( )   if   full   :   return   mycursor   .   execute   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA =   {   f   '   {   db _ name   }   '   }   \"   )   else   :   return   mycursor   .   execute   (   f   \" select   TABLE _ NAME   from   information _ schema . tables   where   TABLE _ SCHEMA =   {   f   '   {   db _ name   }   '   }   \"   )   def   show _ tables   (   self   ,   db _ name   :   str   =   None   ,   full   :   bool   =   True   ) :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868 \" \" \"   db _ info   =   self   .   db _ info   db _ info   [   \" database \"   ]   =   \" information _ schema \"   engine   =   create _ engine   (   \" mysql + pymysql : / /   % ( user ) s   :   % ( password ) s   @   % ( host ) s   :   % ( port ) d   /   % ( database ) s   ? charset = utf8 \"   %   db _ info   ,   encoding   =   \" utf - 8 \"   ,   )   if   db _ name   is   None   :   db _ name   =   self   .   db _ name   if   full   :   res   =   self   .   get _ data _ sql _ order   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   db _ name   }   ' \"   )   else   :   res   =   self   .   get _ data _ sql _ order   (   f   \" select   TABLE _ NAME   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   db _ name   }   ' \"   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   full   :   return   res   else   :   return   list   (   sorted   (   res   .   table _ name   ) )   def   show _ databases   (   self   ,   user _ only   :   bool   =   True   ,   show _ number   :   bool   =   True   )   - >   list   :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4fe1\u606f \" \" \"   mydb   =   self   .   connect   ( )   mycursor   =   mydb   .   cursor   ( )   res   =   self   .   get _ data _ sql _ order   (   \" select   SCHEMA _ NAME   from   information _ schema . schemata \"   )   res   =   list   (   res   .   SCHEMA _ NAME   )   di   =   { }   if   user _ only   :   res   =   res   [   4   : ]   if   show _ number   :   for   i   in   res   :   di   [   i   ]   =   mycursor   .   execute   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   i   }   ' \"   )   return   di   else   :   return   res   def   get _ data _ sql _ order   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   conn   =   self   .   engine   .   raw _ connection   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df _ data   =   cursor   .   fetchall   ( )   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   def   get _ data _ old   (   self   ,   table _ name   :   str   ,   fields   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   show _ time   =   False   ,   )   - >   pd   .   DataFrame   :   \" \" \"   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   table _ name \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684 ` \u7b26\u53f7 \uff0c \u5f62 \u5982 ` 000001 . SZ ` \u6216 ` 20220717 `   fields \u5f62\u5982 ' date , close , open . amount ' \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   startdate \u5f62\u5982 20130326 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   enddate \u5f62\u5982 20220721 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   \" \" \"   if   show _ time   :   a   =   datetime   .   datetime   .   now   ( )   if   table _ name   [   0   ]   .   isdigit   ( ) :   table _ name   =   f   \" `   {   table _ name   }   ` \"   if   fields   is   None   :   fields   =   \" * \"   if   startdate   is   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   \"   elif   startdate   is   None   and   enddate   is   not   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date < =   {   enddate   }   \"   elif   startdate   is   not   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   \"   else   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   and   date < =   {   enddate   }   \"   self   .   sql _ order   =   sql _ order   res   =   pd   .   read _ sql   (   sql _ order   ,   self   .   engine   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   show _ time   :   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   res   def   get _ data   (   self   ,   table _ name   :   str   ,   fields   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   show _ time   =   False   ,   )   - >   pd   .   DataFrame   :   \" \" \"   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   ` table _ name ` \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684   ` ` ` sql   `   ` ` `   \u7b26\u53f7   \u5f62 \u5982   ` ` ` sql   ` 000001 . SZ `   ` ` `   \u6216   ` ` ` sql   ` 20220717 `   ` ` `   ` fields ` \u5f62 \u5982   ` ` ` sql   ' date , close , open . amount '   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   ` startdate ` \u5f62 \u5982   ` ` ` sql   ` 20130326 `   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   ` enddate ` \u5f62 \u5982   ` ` ` sql   ` 20220721 `   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   \" \" \"   if   show _ time   :   a   =   datetime   .   datetime   .   now   ( )   if   table _ name   [   0   ]   .   isdigit   ( ) :   table _ name   =   f   \" `   {   table _ name   }   ` \"   if   fields   is   None   :   fields   =   \" * \"   if   startdate   is   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   \"   elif   startdate   is   None   and   enddate   is   not   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date < =   {   enddate   }   \"   elif   startdate   is   not   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   \"   else   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   and   date < =   {   enddate   }   \"   self   .   sql _ order   =   sql _ order   res   =   self   .   get _ data _ sql _ order   (   sql _ order   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   show _ time   :   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   res","title":"sqlConfig"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig.add_new_database","text":"\u6dfb\u52a0 \u4e00\u4e2a \u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93","title":"add _ new _ database ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig.connect","text":"\u4ee5 pymysql \u7684 \u65b9\u5f0f \u767b\u5f55 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8fdb\u884c \u66f4 \u7075\u6d3b \u7684 \u64cd\u4f5c   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   def   connect   (   self   ,   db _ name   :   str   =   None   ) :   \" \" \" \u4ee5 pymysql \u7684 \u65b9\u5f0f \u767b\u5f55 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \uff0c \u8fdb\u884c \u66f4 \u7075\u6d3b \u7684 \u64cd\u4f5c \" \" \"   if   db _ name   is   None   :   mydb   =   pymysql   .   connect   (   host   =   self   .   db _ info   [   \" host \"   ] ,   user   =   self   .   db _ info   [   \" user \"   ] ,   password   =   self   .   db _ info   [   \" password \"   ] ,   )   else   :   mydb   =   pymysql   .   connect   (   host   =   self   .   db _ info   [   \" host \"   ] ,   user   =   self   .   db _ info   [   \" user \"   ] ,   password   =   self   .   db _ info   [   \" password \"   ] ,   db   =   db _ name   ,   )   return   mydb","title":"connect ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig.do_order","text":"\u6267\u884c \u4efb\u610f \u4e00\u53e5 sql \u8bed\u53e5","title":"do _ order ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig.get_data","text":"\u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   table _ name   \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684   SQL   1   `   \u7b26\u53f7   \u5f62 \u5982   SQL   1   `   000001   .   SZ   `   \u6216   SQL   1   `   20220717   `   fields   \u5f62 \u5982   SQL   1   ' date , close , open . amount '   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   startdate   \u5f62 \u5982   SQL   1   `   20130326   `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   enddate   \u5f62 \u5982   SQL   1   `   20220721   `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   def   get _ data   (   self   ,   table _ name   :   str   ,   fields   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   show _ time   =   False   ,   )   - >   pd   .   DataFrame   :   \" \" \"   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   ` table _ name ` \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684   ` ` ` sql   `   ` ` `   \u7b26\u53f7   \u5f62 \u5982   ` ` ` sql   ` 000001 . SZ `   ` ` `   \u6216   ` ` ` sql   ` 20220717 `   ` ` `   ` fields ` \u5f62 \u5982   ` ` ` sql   ' date , close , open . amount '   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   ` startdate ` \u5f62 \u5982   ` ` ` sql   ` 20130326 `   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   ` enddate ` \u5f62 \u5982   ` ` ` sql   ` 20220721 `   ` ` `   \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   \" \" \"   if   show _ time   :   a   =   datetime   .   datetime   .   now   ( )   if   table _ name   [   0   ]   .   isdigit   ( ) :   table _ name   =   f   \" `   {   table _ name   }   ` \"   if   fields   is   None   :   fields   =   \" * \"   if   startdate   is   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   \"   elif   startdate   is   None   and   enddate   is   not   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date < =   {   enddate   }   \"   elif   startdate   is   not   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   \"   else   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   and   date < =   {   enddate   }   \"   self   .   sql _ order   =   sql _ order   res   =   self   .   get _ data _ sql _ order   (   sql _ order   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   show _ time   :   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   res","title":"get _ data ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig.get_data_old","text":"\u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   table _ name \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684   \u7b26\u53f7 \uff0c \u5f62 \u5982   000001 . SZ   \u6216   20220717 `   fields \u5f62\u5982 ' date , close , open . amount ' \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   startdate \u5f62\u5982 20130326 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   enddate \u5f62\u5982 20220721 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   def   get _ data _ old   (   self   ,   table _ name   :   str   ,   fields   :   str   =   None   ,   startdate   :   int   =   None   ,   enddate   :   int   =   None   ,   show _ time   =   False   ,   )   - >   pd   .   DataFrame   :   \" \" \"   \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \uff0c   table _ name \u4e3a\u8868\u540d \uff0c \u6570\u5b57 \u5f00\u5934 \u7684 \u52a0 \u952e\u76d8 \u5de6\u4e0a \u4e0a\u89d2 \u5de6\u4e0a\u89d2 \u7684 ` \u7b26\u53f7 \uff0c \u5f62 \u5982 ` 000001 . SZ ` \u6216 ` 20220717 `   fields \u5f62\u5982 ' date , close , open . amount ' \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5165 \u6240\u6709 \u5217   startdate \u5f62\u5982 20130326 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u4ece\u5934 \u8bfb   enddate \u5f62\u5982 20220721 \uff0c \u4e0d \u6307\u5b9a \u5219 \u9ed8\u8ba4 \u8bfb\u5230 \u5c3e   \" \" \"   if   show _ time   :   a   =   datetime   .   datetime   .   now   ( )   if   table _ name   [   0   ]   .   isdigit   ( ) :   table _ name   =   f   \" `   {   table _ name   }   ` \"   if   fields   is   None   :   fields   =   \" * \"   if   startdate   is   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   \"   elif   startdate   is   None   and   enddate   is   not   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date < =   {   enddate   }   \"   elif   startdate   is   not   None   and   enddate   is   None   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   \"   else   :   sql _ order   =   f   \" SELECT   {   fields   }   FROM   {   self   .   db _ name   }   .   {   table _ name   }   where   date > =   {   startdate   }   and   date < =   {   enddate   }   \"   self   .   sql _ order   =   sql _ order   res   =   pd   .   read _ sql   (   sql _ order   ,   self   .   engine   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   show _ time   :   b   =   datetime   .   datetime   .   now   ( )   c   =   b   -   a   l   =   c   .   seconds   +   c   .   microseconds   /   1e6   l   =   round   (   l   ,   2   )   print   (   f   \" \u5171\u7528 \u65f6   {   l   }   \u79d2 \"   )   return   res","title":"get _ data _ old ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig.show_databases","text":"\u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4fe1\u606f   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   def   show _ databases   (   self   ,   user _ only   :   bool   =   True   ,   show _ number   :   bool   =   True   )   - >   list   :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4fe1\u606f \" \" \"   mydb   =   self   .   connect   ( )   mycursor   =   mydb   .   cursor   ( )   res   =   self   .   get _ data _ sql _ order   (   \" select   SCHEMA _ NAME   from   information _ schema . schemata \"   )   res   =   list   (   res   .   SCHEMA _ NAME   )   di   =   { }   if   user _ only   :   res   =   res   [   4   : ]   if   show _ number   :   for   i   in   res   :   di   [   i   ]   =   mycursor   .   execute   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   i   }   ' \"   )   return   di   else   :   return   res","title":"show _ databases ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig.show_tables","text":"\u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   352   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   def   show _ tables   (   self   ,   db _ name   :   str   =   None   ,   full   :   bool   =   True   ) :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868 \" \" \"   db _ info   =   self   .   db _ info   db _ info   [   \" database \"   ]   =   \" information _ schema \"   engine   =   create _ engine   (   \" mysql + pymysql : / /   % ( user ) s   :   % ( password ) s   @   % ( host ) s   :   % ( port ) d   /   % ( database ) s   ? charset = utf8 \"   %   db _ info   ,   encoding   =   \" utf - 8 \"   ,   )   if   db _ name   is   None   :   db _ name   =   self   .   db _ name   if   full   :   res   =   self   .   get _ data _ sql _ order   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   db _ name   }   ' \"   )   else   :   res   =   self   .   get _ data _ sql _ order   (   f   \" select   TABLE _ NAME   from   information _ schema . tables   where   TABLE _ SCHEMA = '   {   db _ name   }   ' \"   )   res   .   columns   =   res   .   columns   .   str   .   lower   ( )   if   full   :   return   res   else   :   return   list   (   sorted   (   res   .   table _ name   ) )","title":"show _ tables ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/database/#pure_ocean_breeze.data.database.sqlConfig.show_tables_old","text":"\u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868   Source   code   in   pure _ ocean _ breeze / data / database . py   Python   337   338   339   340   341   342   343   344   345   346   347   348   349   350   def   show _ tables _ old   (   self   ,   db _ name   :   str   =   None   ,   full   =   True   ) :   \" \" \" \u663e\u793a \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e0b \u7684 \u6240\u6709 \u8868 \" \" \"   if   db _ name   is   None   :   db _ name   =   self   .   db _ name   mydb   =   self   .   connect   ( )   mycursor   =   mydb   .   cursor   ( )   if   full   :   return   mycursor   .   execute   (   f   \" select   *   from   information _ schema . tables   where   TABLE _ SCHEMA =   {   f   '   {   db _ name   }   '   }   \"   )   else   :   return   mycursor   .   execute   (   f   \" select   TABLE _ NAME   from   information _ schema . tables   where   TABLE _ SCHEMA =   {   f   '   {   db _ name   }   '   }   \"   )","title":"show _ tables _ old ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/dicts/","text":"\u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u4ee3\u7801 \u4e0e \u540d\u5b57 \u5bf9\u7167 \u7167\u8868 \u5bf9\u7167\u8868   \u00b6   Python   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   INDUS _ DICT   =   {   k   :   v   for   k   ,   v   in   zip   (   [   \" 801170 . SI \"   ,   \" 801010 . SI \"   ,   \" 801140 . SI \"   ,   \" 801080 . SI \"   ,   \" 801780 . SI \"   ,   \" 801110 . SI \"   ,   \" 801230 . SI \"   ,   \" 801950 . SI \"   ,   \" 801180 . SI \"   ,   \" 801040 . SI \"   ,   \" 801740 . SI \"   ,   \" 801890 . SI \"   ,   \" 801770 . SI \"   ,   \" 801960 . SI \"   ,   \" 801200 . SI \"   ,   \" 801120 . SI \"   ,   \" 801710 . SI \"   ,   \" 801720 . SI \"   ,   \" 801880 . SI \"   ,   \" 801750 . SI \"   ,   \" 801050 . SI \"   ,   \" 801790 . SI \"   ,   \" 801150 . SI \"   ,   \" 801980 . SI \"   ,   \" 801030 . SI \"   ,   \" 801730 . SI \"   ,   \" 801160 . SI \"   ,   \" 801130 . SI \"   ,   \" 801210 . SI \"   ,   \" 801970 . SI \"   ,   \" 801760 . SI \"   ,   ] ,   [   \" \u4ea4\u901a \u901a\u8fd0 \u8fd0\u8f93 \u4ea4\u901a\u8fd0\u8f93 \"   ,   \" \u519c\u6797 \u519c\u6797\u7267 \u519c\u6797\u7267\u6e14 \"   ,   \" \u8f7b\u5de5 \u5236\u9020 \"   ,   \" \u7535\u5b50 \"   ,   \" \u94f6\u884c \"   ,   \" \u5bb6\u7528 \u7528\u7535 \u7535\u5668 \u7528\u7535\u5668 \u5bb6\u7528\u7535\u5668 \"   ,   \" \u7efc\u5408 \"   ,   \" \u7164\u70ad \"   ,   \" \u623f\u5730 \u5730\u4ea7 \u623f\u5730\u4ea7 \"   ,   \" \u94a2\u94c1 \"   ,   \" \u56fd\u9632 \u519b\u5de5 \"   ,   \" \u673a\u68b0 \u8bbe\u5907 \u673a\u68b0\u8bbe\u5907 \"   ,   \" \u901a\u4fe1 \"   ,   \" \u77f3\u6cb9 \u77f3\u5316 \"   ,   \" \u5546\u8d38 \u96f6\u552e \"   ,   \" \u98df\u54c1 \u996e\u6599 \u98df\u54c1\u996e\u6599 \"   ,   \" \u5efa\u7b51 \u6750\u6599 \u5efa\u7b51\u6750\u6599 \"   ,   \" \u5efa\u7b51 \u88c5\u9970 \"   ,   \" \u6c7d\u8f66 \"   ,   \" \u8ba1\u7b97 \u7b97\u673a \u8ba1\u7b97\u673a \"   ,   \" \u6709\u8272 \u91d1\u5c5e \u6709\u8272\u91d1\u5c5e \"   ,   \" \u975e\u94f6 \u91d1\u878d \"   ,   \" \u533b\u836f \u751f\u7269 \"   ,   \" \u7f8e\u5bb9 \u62a4\u7406 \"   ,   \" \u57fa\u7840 \u5316\u5de5 \"   ,   \" \u7535\u529b \u8bbe\u5907 \u7535\u529b\u8bbe\u5907 \"   ,   \" \u516c\u7528 \u4e8b\u4e1a \u516c\u7528\u4e8b\u4e1a \"   ,   \" \u7eba\u7ec7 \u670d\u9970 \"   ,   \" \u793e\u4f1a \u670d\u52a1 \"   ,   \" \u73af\u4fdd \"   ,   \" \u4f20\u5a92 \"   ,   ] ,   )   }   \u5e38\u7528 \u5bbd\u57fa \u6307\u6570 \u7684 \u4ee3\u7801 \u548c \u540d\u5b57   \u00b6   Python   1   2   3   4   5   6   INDEX _ DICT   =   {   \" 000300 . SH \"   :   \" \u6caa \u6df1 300 \"   ,   \" 000905 . SH \"   :   \" \u4e2d\u8bc1 500 \"   ,   \" 000852 . SH \"   :   \" \u4e2d\u8bc1 1000 \"   ,   \" 399303 . SZ \"   :   \" \u56fd\u8bc1 2000 \"   }   \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u4ee3\u7801 \u548c \u540d\u5b57 \u5bf9\u7167 \u7167\u8868 \u5bf9\u7167\u8868   \u00b6   Python   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   ZXINDUS _ DICT   =   {   \" CI005001 . INDX \"   :   \" \u77f3\u6cb9 \u77f3\u5316 \"   ,   \" CI005002 . INDX \"   :   \" \u7164\u70ad \"   ,   \" CI005003 . INDX \"   :   \" \u6709\u8272 \u91d1\u5c5e \u6709\u8272\u91d1\u5c5e \"   ,   \" CI005004 . INDX \"   :   \" \u7535\u529b \u53ca \u516c\u7528 \u4e8b\u4e1a \u516c\u7528\u4e8b\u4e1a \"   ,   \" CI005005 . INDX \"   :   \" \u7535\u529b \u53ca \u516c\u7528 \u4e8b\u4e1a \u516c\u7528\u4e8b\u4e1a \"   ,   \" CI005005 . INDX \"   :   \" \u94a2\u94c1 \"   ,   \" CI005006 . INDX \"   :   \" \u57fa\u7840 \u5316\u5de5 \"   ,   \" CI005007 . INDX \"   :   \" \u5efa\u7b51 \"   ,   \" CI005008 . INDX \"   :   \" \u5efa\u6750 \"   ,   \" CI005009 . INDX \"   :   \" \u8f7b\u5de5 \u5236\u9020 \"   ,   \" CI005010 . INDX \"   :   \" \u673a\u68b0 \"   ,   \" CI005011 . INDX \"   :   \" \u7535\u529b \u8bbe\u5907 \u7535\u529b\u8bbe\u5907 \u53ca \u80fd\u6e90 \u65b0\u80fd\u6e90 \"   ,   \" CI005012 . INDX \"   :   \" \u56fd\u9632 \u519b\u5de5 \"   ,   \" CI005013 . INDX \"   :   \" \u6c7d\u8f66 \"   ,   \" CI005014 . INDX \"   :   \" \u5546\u8d38 \u96f6\u552e \"   ,   \" CI005015 . INDX \"   :   \" \u6d88\u8d39 \u6d88\u8d39\u8005 \u670d\u52a1 \"   ,   \" CI005016 . INDX \"   :   \" \u5bb6\u7535 \"   ,   \" CI005017 . INDX \"   :   \" \u7eba\u7ec7 \u670d\u88c5 \"   ,   \" CI005018 . INDX \"   :   \" \u533b\u836f \"   ,   \" CI005019 . INDX \"   :   \" \u98df\u54c1 \u996e\u6599 \u98df\u54c1\u996e\u6599 \"   ,   \" CI005020 . INDX \"   :   \" \u519c\u6797 \u519c\u6797\u7267 \u519c\u6797\u7267\u6e14 \"   ,   \" CI005021 . INDX \"   :   \" \u94f6\u884c \"   ,   \" CI005022 . INDX \"   :   \" \u94f6\u884c \u975e\u94f6\u884c \u91d1\u878d \"   ,   \" CI005023 . INDX \"   :   \" \u623f\u5730 \u5730\u4ea7 \u623f\u5730\u4ea7 \"   ,   \" CI005024 . INDX \"   :   \" \u4ea4\u901a \u901a\u8fd0 \u8fd0\u8f93 \u4ea4\u901a\u8fd0\u8f93 \"   ,   \" CI005025 . INDX \"   :   \" \u7535\u5b50 \"   ,   \" CI005026 . INDX \"   :   \" \u901a\u4fe1 \"   ,   \" CI005027 . INDX \"   :   \" \u8ba1\u7b97 \u7b97\u673a \u8ba1\u7b97\u673a \"   ,   \" CI005028 . INDX \"   :   \" \u4f20\u5a92 \"   ,   \" CI005029 . INDX \"   :   \" \u7efc\u5408 \"   ,   \" CI005030 . INDX \"   :   \" \u7efc\u5408 \u91d1\u878d \"   ,   }","title":"dicts"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/dicts/#_1","text":"Python   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   INDUS _ DICT   =   {   k   :   v   for   k   ,   v   in   zip   (   [   \" 801170 . SI \"   ,   \" 801010 . SI \"   ,   \" 801140 . SI \"   ,   \" 801080 . SI \"   ,   \" 801780 . SI \"   ,   \" 801110 . SI \"   ,   \" 801230 . SI \"   ,   \" 801950 . SI \"   ,   \" 801180 . SI \"   ,   \" 801040 . SI \"   ,   \" 801740 . SI \"   ,   \" 801890 . SI \"   ,   \" 801770 . SI \"   ,   \" 801960 . SI \"   ,   \" 801200 . SI \"   ,   \" 801120 . SI \"   ,   \" 801710 . SI \"   ,   \" 801720 . SI \"   ,   \" 801880 . SI \"   ,   \" 801750 . SI \"   ,   \" 801050 . SI \"   ,   \" 801790 . SI \"   ,   \" 801150 . SI \"   ,   \" 801980 . SI \"   ,   \" 801030 . SI \"   ,   \" 801730 . SI \"   ,   \" 801160 . SI \"   ,   \" 801130 . SI \"   ,   \" 801210 . SI \"   ,   \" 801970 . SI \"   ,   \" 801760 . SI \"   ,   ] ,   [   \" \u4ea4\u901a \u901a\u8fd0 \u8fd0\u8f93 \u4ea4\u901a\u8fd0\u8f93 \"   ,   \" \u519c\u6797 \u519c\u6797\u7267 \u519c\u6797\u7267\u6e14 \"   ,   \" \u8f7b\u5de5 \u5236\u9020 \"   ,   \" \u7535\u5b50 \"   ,   \" \u94f6\u884c \"   ,   \" \u5bb6\u7528 \u7528\u7535 \u7535\u5668 \u7528\u7535\u5668 \u5bb6\u7528\u7535\u5668 \"   ,   \" \u7efc\u5408 \"   ,   \" \u7164\u70ad \"   ,   \" \u623f\u5730 \u5730\u4ea7 \u623f\u5730\u4ea7 \"   ,   \" \u94a2\u94c1 \"   ,   \" \u56fd\u9632 \u519b\u5de5 \"   ,   \" \u673a\u68b0 \u8bbe\u5907 \u673a\u68b0\u8bbe\u5907 \"   ,   \" \u901a\u4fe1 \"   ,   \" \u77f3\u6cb9 \u77f3\u5316 \"   ,   \" \u5546\u8d38 \u96f6\u552e \"   ,   \" \u98df\u54c1 \u996e\u6599 \u98df\u54c1\u996e\u6599 \"   ,   \" \u5efa\u7b51 \u6750\u6599 \u5efa\u7b51\u6750\u6599 \"   ,   \" \u5efa\u7b51 \u88c5\u9970 \"   ,   \" \u6c7d\u8f66 \"   ,   \" \u8ba1\u7b97 \u7b97\u673a \u8ba1\u7b97\u673a \"   ,   \" \u6709\u8272 \u91d1\u5c5e \u6709\u8272\u91d1\u5c5e \"   ,   \" \u975e\u94f6 \u91d1\u878d \"   ,   \" \u533b\u836f \u751f\u7269 \"   ,   \" \u7f8e\u5bb9 \u62a4\u7406 \"   ,   \" \u57fa\u7840 \u5316\u5de5 \"   ,   \" \u7535\u529b \u8bbe\u5907 \u7535\u529b\u8bbe\u5907 \"   ,   \" \u516c\u7528 \u4e8b\u4e1a \u516c\u7528\u4e8b\u4e1a \"   ,   \" \u7eba\u7ec7 \u670d\u9970 \"   ,   \" \u793e\u4f1a \u670d\u52a1 \"   ,   \" \u73af\u4fdd \"   ,   \" \u4f20\u5a92 \"   ,   ] ,   )   }","title":"\u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u4ee3\u7801 \u4e0e \u540d\u5b57 \u5bf9\u7167\u8868"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/dicts/#_2","text":"Python   1   2   3   4   5   6   INDEX _ DICT   =   {   \" 000300 . SH \"   :   \" \u6caa \u6df1 300 \"   ,   \" 000905 . SH \"   :   \" \u4e2d\u8bc1 500 \"   ,   \" 000852 . SH \"   :   \" \u4e2d\u8bc1 1000 \"   ,   \" 399303 . SZ \"   :   \" \u56fd\u8bc1 2000 \"   }","title":"\u5e38\u7528 \u5bbd\u57fa \u6307\u6570 \u7684 \u4ee3\u7801 \u548c \u540d\u5b57"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/dicts/#_3","text":"Python   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   ZXINDUS _ DICT   =   {   \" CI005001 . INDX \"   :   \" \u77f3\u6cb9 \u77f3\u5316 \"   ,   \" CI005002 . INDX \"   :   \" \u7164\u70ad \"   ,   \" CI005003 . INDX \"   :   \" \u6709\u8272 \u91d1\u5c5e \u6709\u8272\u91d1\u5c5e \"   ,   \" CI005004 . INDX \"   :   \" \u7535\u529b \u53ca \u516c\u7528 \u4e8b\u4e1a \u516c\u7528\u4e8b\u4e1a \"   ,   \" CI005005 . INDX \"   :   \" \u7535\u529b \u53ca \u516c\u7528 \u4e8b\u4e1a \u516c\u7528\u4e8b\u4e1a \"   ,   \" CI005005 . INDX \"   :   \" \u94a2\u94c1 \"   ,   \" CI005006 . INDX \"   :   \" \u57fa\u7840 \u5316\u5de5 \"   ,   \" CI005007 . INDX \"   :   \" \u5efa\u7b51 \"   ,   \" CI005008 . INDX \"   :   \" \u5efa\u6750 \"   ,   \" CI005009 . INDX \"   :   \" \u8f7b\u5de5 \u5236\u9020 \"   ,   \" CI005010 . INDX \"   :   \" \u673a\u68b0 \"   ,   \" CI005011 . INDX \"   :   \" \u7535\u529b \u8bbe\u5907 \u7535\u529b\u8bbe\u5907 \u53ca \u80fd\u6e90 \u65b0\u80fd\u6e90 \"   ,   \" CI005012 . INDX \"   :   \" \u56fd\u9632 \u519b\u5de5 \"   ,   \" CI005013 . INDX \"   :   \" \u6c7d\u8f66 \"   ,   \" CI005014 . INDX \"   :   \" \u5546\u8d38 \u96f6\u552e \"   ,   \" CI005015 . INDX \"   :   \" \u6d88\u8d39 \u6d88\u8d39\u8005 \u670d\u52a1 \"   ,   \" CI005016 . INDX \"   :   \" \u5bb6\u7535 \"   ,   \" CI005017 . INDX \"   :   \" \u7eba\u7ec7 \u670d\u88c5 \"   ,   \" CI005018 . INDX \"   :   \" \u533b\u836f \"   ,   \" CI005019 . INDX \"   :   \" \u98df\u54c1 \u996e\u6599 \u98df\u54c1\u996e\u6599 \"   ,   \" CI005020 . INDX \"   :   \" \u519c\u6797 \u519c\u6797\u7267 \u519c\u6797\u7267\u6e14 \"   ,   \" CI005021 . INDX \"   :   \" \u94f6\u884c \"   ,   \" CI005022 . INDX \"   :   \" \u94f6\u884c \u975e\u94f6\u884c \u91d1\u878d \"   ,   \" CI005023 . INDX \"   :   \" \u623f\u5730 \u5730\u4ea7 \u623f\u5730\u4ea7 \"   ,   \" CI005024 . INDX \"   :   \" \u4ea4\u901a \u901a\u8fd0 \u8fd0\u8f93 \u4ea4\u901a\u8fd0\u8f93 \"   ,   \" CI005025 . INDX \"   :   \" \u7535\u5b50 \"   ,   \" CI005026 . INDX \"   :   \" \u901a\u4fe1 \"   ,   \" CI005027 . INDX \"   :   \" \u8ba1\u7b97 \u7b97\u673a \u8ba1\u7b97\u673a \"   ,   \" CI005028 . INDX \"   :   \" \u4f20\u5a92 \"   ,   \" CI005029 . INDX \"   :   \" \u7efc\u5408 \"   ,   \" CI005030 . INDX \"   :   \" \u7efc\u5408 \u91d1\u878d \"   ,   }","title":"\u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u4ee3\u7801 \u548c \u540d\u5b57 \u5bf9\u7167\u8868"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/","text":"database _ read _ final _ factors   (   name   =   None   ,   order   =   None   ,   freq   =   ' \u6708 '   ,   output   =   0   ,   new   =   0   )   \u00b6   \u6839\u636e \u56e0\u5b50 \u540d\u5b57 \uff0c \u6216 \u56e0\u5b50 \u5e8f\u53f7 \uff0c \u8bfb\u53d6 \u6700\u7ec8 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c   Parameters   \u00b6   name   :   str ,   optional   \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   None   order   :   int ,   optional   \u56e0\u5b50 \u7684 \u5e8f\u53f7 ,   by   default   None   freq   :   str ,   optional   \u56e0\u5b50 \u7684 \u9891\u7387 \uff0c \u76ee\u524d \u652f\u6301   ' \u6708 '   \u548c   ' \u5468 '   output   :   bool ,   optional   \u662f\u5426 \u8f93\u51fa \u5230 csv \u6587\u4ef6 ,   by   default   0   new   :   bool ,   optional   \u662f\u5426 \u53ea \u8f93\u51fa \u6700\u65b0 \u4e00\u671f \u7684 \u56e0\u5b50 \u503c ,   by   default   0   Returns   \u00b6   Tuple [ pd . DataFrame , str ]   \u6700\u7ec8 \u56e0\u5b50 \u503c \u548c \u6587\u4ef6 \u8def\u5f84   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   760   761   762   763   764   765   766   767   768   769   770   771   772   773   774   775   776   777   778   779   780   781   782   783   784   785   786   787   788   789   790   791   792   793   794   795   796   797   798   799   800   801   802   803   804   805   806   807   808   809   810   811   812   813   814   815   816   817   818   819   820   821   822   823   824   825   826   827   828   829   830   831   832   833   834   835   836   837   838   839   840   841   842   843   844   845   846   847   848   849   850   851   852   853   854   855   856   857   858   859   860   861   862   863   864   865   866   867   868   869   870   871   872   873   874   875   876   877   878   879   880   881   882   883   884   885   @ deprecation   .   deprecated   (   deprecated _ in   =   \" 4.0 \"   ,   removed _ in   =   \" 5.0 \"   ,   current _ version   =   __ version __   ,   details   =   \" \u7531\u4e8e \u56e0\u5b50 \u6210\u679c \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u5347\u7ea7 \uff0c 3 . x \u7248\u672c \u7684 \u56e0\u5b50 \u6210\u679c \u8bfb\u53d6 \u51fd\u6570 \u5c06 \u4e0b\u7ebf \"   ,   )   def   database _ read _ final _ factors   (   name   :   str   =   None   ,   order   :   int   =   None   ,   freq   :   str   =   \" \u6708 \"   ,   output   :   bool   =   0   ,   new   :   bool   =   0   ,   )   - >   Tuple   [   pd   .   DataFrame   ,   str   ] :   \" \" \" \u6839\u636e \u56e0\u5b50 \u540d\u5b57 \uff0c \u6216 \u56e0\u5b50 \u5e8f\u53f7 \uff0c \u8bfb\u53d6 \u6700\u7ec8 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c   Parameters   ----------   name   :   str ,   optional   \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   None   order   :   int ,   optional   \u56e0\u5b50 \u7684 \u5e8f\u53f7 ,   by   default   None   freq   :   str ,   optional   \u56e0\u5b50 \u7684 \u9891\u7387 \uff0c \u76ee\u524d \u652f\u6301 ` ' \u6708 ' ` \u548c ` ' \u5468 ' `   output   :   bool ,   optional   \u662f\u5426 \u8f93\u51fa \u5230 csv \u6587\u4ef6 ,   by   default   0   new   :   bool ,   optional   \u662f\u5426 \u53ea \u8f93\u51fa \u6700\u65b0 \u4e00\u671f \u7684 \u56e0\u5b50 \u503c ,   by   default   0   Returns   -------   ` Tuple [ pd . DataFrame , str ] `   \u6700\u7ec8 \u56e0\u5b50 \u503c \u548c \u6587\u4ef6 \u8def\u5f84   \" \" \"   homeplace   =   HomePlace   ( )   facs   =   os   .   listdir   (   homeplace   .   final _ factor _ file   )   if   name   is   None   and   order   is   None   :   raise   IOError   (   \" \u8bf7 \u6307\u5b9a \u56e0\u5b50 \u540d\u5b57 \u6216\u8005 \u56e0\u5b50 \u5e8f\u53f7 \"   )   elif   name   is   None   and   order   is   not   None   :   key   =   \" \u56e0\u5b50 \u591a\u56e0\u5b50 \"   +   str   (   order   )   +   \" _ \"   +   freq   ans   =   [   i   for   i   in   facs   if   ( (   key   in   i   )   and   (   freq   in   i   ) ) ] [   0   ]   elif   name   is   not   None   and   name   is   None   :   key   =   name   ans   =   [   i   for   i   in   facs   if   ( (   key   in   i   )   and   (   freq   in   i   ) ) ]   if   len   (   ans   )   >   0   :   ans   =   ans   [   0   ]   else   :   raise   IOError   (   f   \" \u60a8 \u540d\u5b57 \u8bb0\u9519 \u4e86 \uff0c \u4e0d \u5b58\u5728 \u53eb   {   name   }   \u7684 \u56e0\u5b50 \"   )   else   :   key1   =   name   key2   =   \" \u56e0\u5b50 \u591a\u56e0\u5b50 \"   +   str   (   order   )   +   \" _ \"   +   freq   ans1   =   [   i   for   i   in   facs   if   ( (   key1   in   i   )   and   (   freq   in   i   ) ) ]   if   len   (   ans1   )   >   0   :   ans1   =   ans1   [   0   ]   else   :   raise   IOError   (   f   \" \u60a8 \u540d\u5b57 \u8bb0\u9519 \u4e86 \uff0c \u4e0d \u5b58\u5728 \u53eb   {   name   }   \u7684 \u56e0\u5b50 \"   )   ans2   =   [   i   for   i   in   facs   if   ( (   key2   in   i   )   and   (   freq   in   i   ) ) ] [   0   ]   if   ans1   ! =   ans2   :   ans   =   ans1   logger   .   warning   (   \" \u60a8 \u8f93\u5165 \u7684 \u540d\u5b57 \u548c \u5e8f\u53f7 \u4e0d \u4e00\u81f4 \uff0c \u6000\u7591 \u60a8 \u8bb0\u9519 \u4e86 \u5e8f\u53f7 \uff0c \u7a0b\u5e8f \u9ed8\u8ba4 \u4ee5 \u540d\u5b57 \u4e3a\u51c6 \u4e86 \u54c8 \"   )   else   :   ans   =   ans1   path   =   homeplace   .   final _ factor _ file   +   ans   df   =   pd   .   read _ parquet   (   path   )   df   =   df   [   sorted   (   list   (   df   .   columns   ) ) ]   final _ date   =   df   .   index   .   max   ( )   final _ date   =   datetime   .   datetime   .   strftime   (   final _ date   ,   \" % Y% m   % d   \"   )   if   output   :   if   new   :   if   os   .   path   .   exists   (   ans   .   split   (   \" _ \"   ) [   0   ] ) :   fac _ name   =   (   ans   .   split   (   \" _ \"   ) [   0   ]   +   \" / \"   +   ans   .   split   (   \" _ \"   ) [   0   ]   +   \" \u56e0\u5b50 \"   +   final _ date   +   \" _ \"   +   freq   +   \" \u9891 \"   +   \" \u56e0\u5b50 \u503c . csv \"   )   else   :   os   .   makedirs   (   ans   .   split   (   \" _ \"   ) [   0   ] )   fac _ name   =   (   ans   .   split   (   \" _ \"   ) [   0   ]   +   \" / \"   +   ans   .   split   (   \" _ \"   ) [   0   ]   +   \" \u56e0\u5b50 \"   +   final _ date   +   \" _ \"   +   freq   +   \" \u9891 \"   +   \" \u56e0\u5b50 \u503c . csv \"   )   df   .   tail   (   1   )   .   T   .   to _ csv   (   fac _ name   )   logger   .   success   (   f   \"   {   final _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2 \u4fdd\u5b58 \"   )   else   :   if   os   .   path   .   exists   (   ans   .   split   (   \" _ \"   ) [   0   ] ) :   fac _ name   =   (   ans   .   split   (   \" _ \"   ) [   0   ]   +   \" / \"   +   ans   .   split   (   \" _ \"   ) [   0   ]   +   \" \u56e0\u5b50 \u622a\u81f3 \"   +   final _ date   +   \" _ \"   +   freq   +   \" \u9891 \"   +   \" \u56e0\u5b50 \u503c . csv \"   )   else   :   os   .   makedirs   (   ans   .   split   (   \" _ \"   ) [   0   ] )   fac _ name   =   (   ans   .   split   (   \" _ \"   ) [   0   ]   +   \" / \"   +   ans   .   split   (   \" _ \"   ) [   0   ]   +   \" \u56e0\u5b50 \u622a\u81f3 \"   +   final _ date   +   \" _ \"   +   freq   +   \" \u9891 \"   +   \" \u56e0\u5b50 \u503c . csv \"   )   df   .   to _ csv   (   fac _ name   )   logger   .   success   (   f   \" \u622a\u81f3   {   final _ date   }   \u7684 \u56e0\u5b50 \u503c \u5df2 \u4fdd\u5b58 \"   )   return   df   ,   fac _ name   else   :   return   df   ,   \" \"   database _ read _ primary _ factors   (   name   ,   name2   =   None   )   \u00b6   \u6839\u636e \u56e0\u5b50 \u540d\u5b57 \uff0c \u8bfb\u53d6 \u521d\u7ea7 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c   Parameters   \u00b6   name   :   str ,   optional   \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   None   name2   :   str ,   optional   \u5b50 \u56e0\u5b50 \u7684 \u540d\u5b57 \uff0c \u5f53\u6709 \u591a\u4e2a \u5206\u652f \u56e0\u5b50 \uff0c \u5206\u522b \u50a8\u5b58 \u65f6 \uff0c \u4f7f\u7528 \u8fd9\u4e2a \u53c2\u6570 \u6765 \u6307\u5b9a \u5177\u4f53 \u7684 \u5b50 \u56e0\u5b50 ,   by   default   None   Returns   \u00b6   pd . DataFrame   \u521d\u7ea7 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   888   889   890   891   892   893   894   895   896   897   898   899   900   901   902   903   904   905   906   907   908   909   910   911   912   913   914   915   916   @ deprecation   .   deprecated   (   deprecated _ in   =   \" 4.0 \"   ,   removed _ in   =   \" 5.0 \"   ,   current _ version   =   __ version __   ,   details   =   \" \u7531\u4e8e \u56e0\u5b50 \u6210\u679c \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u5347\u7ea7 \uff0c 3 . x \u7248\u672c \u7684 \u56e0\u5b50 \u6210\u679c \u8bfb\u53d6 \u51fd\u6570 \u5c06 \u4e0b\u7ebf \"   ,   )   def   database _ read _ primary _ factors   (   name   :   str   ,   name2   :   str   =   None   )   - >   pd   .   DataFrame   :   \" \" \" \u6839\u636e \u56e0\u5b50 \u540d\u5b57 \uff0c \u8bfb\u53d6 \u521d\u7ea7 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c   Parameters   ----------   name   :   str ,   optional   \u56e0\u5b50 \u7684 \u540d\u5b57 ,   by   default   None   name2   :   str ,   optional   \u5b50 \u56e0\u5b50 \u7684 \u540d\u5b57 \uff0c \u5f53\u6709 \u591a\u4e2a \u5206\u652f \u56e0\u5b50 \uff0c \u5206\u522b \u50a8\u5b58 \u65f6 \uff0c \u4f7f\u7528 \u8fd9\u4e2a \u53c2\u6570 \u6765 \u6307\u5b9a \u5177\u4f53 \u7684 \u5b50 \u56e0\u5b50 ,   by   default   None   Returns   -------   ` pd . DataFrame `   \u521d\u7ea7 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c   \" \" \"   homeplace   =   HomePlace   ( )   if   name2   is   None   :   name   =   name   +   \" / \"   +   name   +   \" _ \u521d\u7ea7 . parquet \"   else   :   name   =   name   +   \" / \"   +   name   +   \" _ \u521d\u7ea7 _ \"   +   name2   +   \" . parquet \"   df   =   pd   .   read _ parquet   (   homeplace   .   factor _ data _ file   +   name   )   df   =   df   [   sorted   (   list   (   df   .   columns   ) ) ]   return   df   get _ industry _ dummies   (   daily   =   0   ,   monthly   =   0   ,   start   =   STATES   [   ' START '   ] ,   swindustry   =   0   ,   zxindustry   =   0   )   \u00b6   \u751f\u6210 30 / 31 \u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \u77e9\u9635 \uff0c \u8fd4\u56de \u4e00\u4e2a \u5b57\u5178   Parameters   \u00b6   daily   :   bool ,   optional   \u8fd4\u56de \u65e5\u9891 \u7684 \u54d1 \u53d8\u91cf ,   by   default   0   monthly   :   bool ,   optional   \u8fd4\u56de \u6708\u9891 \u7684 \u54d1 \u53d8\u91cf ,   by   default   0   start   :   int ,   optional   \u8d77\u59cb \u65e5\u671f ,   by   default   STATES [ \" START \" ]   swindustry   :   bool ,   optional   \u662f\u5426 \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u662f\u5426 \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   \u00b6   Dict   \u5404\u4e2a \u884c\u4e1a \u53ca\u5176 \u54d1 \u53d8\u91cf \u6784\u6210 \u7684 \u5b57\u5178   Raises   \u00b6   ValueError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u9891\u7387 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   697   698   699   700   701   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   719   720   721   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   740   741   742   743   744   745   746   747   748   749   750   751   752   753   754   755   756   757   def   get _ industry _ dummies   (   daily   :   bool   =   0   ,   monthly   :   bool   =   0   ,   start   :   int   =   STATES   [   \" START \"   ] ,   swindustry   :   bool   =   0   ,   zxindustry   :   bool   =   0   ,   )   - >   Dict   :   \" \" \" \u751f\u6210 30 / 31 \u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \u77e9\u9635 \uff0c \u8fd4\u56de \u4e00\u4e2a \u5b57\u5178   Parameters   ----------   daily   :   bool ,   optional   \u8fd4\u56de \u65e5\u9891 \u7684 \u54d1 \u53d8\u91cf ,   by   default   0   monthly   :   bool ,   optional   \u8fd4\u56de \u6708\u9891 \u7684 \u54d1 \u53d8\u91cf ,   by   default   0   start   :   int ,   optional   \u8d77\u59cb \u65e5\u671f ,   by   default   STATES [ \" START \" ]   swindustry   :   bool ,   optional   \u662f\u5426 \u4f7f\u7528 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   zxindustry   :   bool ,   optional   \u662f\u5426 \u4f7f\u7528 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a ,   by   default   0   Returns   -------   ` Dict `   \u5404\u4e2a \u884c\u4e1a \u53ca\u5176 \u54d1 \u53d8\u91cf \u6784\u6210 \u7684 \u5b57\u5178   Raises   ------   ` ValueError `   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u9891\u7387 \uff0c \u5c06 \u62a5\u9519   \" \" \"   homeplace   =   HomePlace   ( )   if   swindustry   :   name   =   \" \u7533\u4e07 \u884c\u4e1a 2021 \u7248\u54d1 \u53d8\u91cf . parquet \"   else   :   name   =   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u540d\u79f0 \u7248 . parquet \"   if   monthly   :   industry _ dummy   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   name   )   industry _ dummy   =   (   industry _ dummy   .   set _ index   (   \" date \"   )   .   groupby   (   \" code \"   )   .   resample   (   \" M \"   )   .   last   ( )   .   fillna   (   0   )   .   drop   (   columns   =   [   \" code \"   ] )   .   reset _ index   ( )   )   elif   daily   :   industry _ dummy   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   name   )   .   fillna   (   0   )   else   :   raise   ValueError   (   \" \u60a8 \u603b\u5f97 \u6307\u5b9a \u4e00\u4e2a \u9891\u7387 \u5427 \uff1f \ud83e\udd12 \"   )   industry _ dummy   =   industry _ dummy   [   industry _ dummy   .   date   > =   pd   .   Timestamp   (   str   (   start   ) ) ]   ws   =   list   (   industry _ dummy   .   columns   ) [   2   : ]   ress   =   { }   for   w   in   ws   :   df   =   industry _ dummy   [ [   \" date \"   ,   \" code \"   ,   w   ] ]   df   =   df   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   w   )   df   =   df   .   replace   (   0   ,   np   .   nan   )   ress   [   w   ]   =   df   return   ress   read _ daily   (   path   =   None   ,   open   =   0   ,   close   =   0   ,   high   =   0   ,   low   =   0   ,   vwap   =   0   ,   tr   =   0   ,   sharenum   =   0   ,   total _ sharenum   =   0   ,   amount   =   0   ,   money   =   0   ,   age   =   0   ,   flow _ cap   =   0   ,   total _ cap   =   0   ,   adjfactor   =   0   ,   st   =   0   ,   state   =   0   ,   unadjust   =   0   ,   ret   =   0   ,   ret _ inday   =   0   ,   ret _ night   =   0   ,   vol _ daily   =   0   ,   vol   =   0   ,   vol _ inday   =   0   ,   vol _ night   =   0   ,   swing   =   0   ,   pb   =   0   ,   pe   =   0   ,   pettm   =   0   ,   iret   =   0   ,   ivol   =   0   ,   illiquidity   =   0   ,   swindustry _ ret   =   0   ,   zxindustry _ ret   =   0   ,   stop _ up   =   0   ,   stop _ down   =   0   ,   zxindustry _ dummy _ code   =   0   ,   zxindustry _ dummy _ name   =   0   ,   swindustry _ dummy   =   0   ,   hs300 _ member _ weight   =   0   ,   zz500 _ member _ weight   =   0   ,   zz1000 _ member _ weight   =   0   ,   start   =   STATES   [   ' START '   ] )   \u00b6   \u76f4\u63a5 \u8bfb\u53d6 \u5e38\u7528 \u7684 \u91cf \u4ef7 \u8bfb\u53d6 \u65e5\u9891 \u6570\u636e \uff0c \u9ed8\u8ba4 \u4e3a \u590d\u6743 \u4ef7\u683c \uff0c   \u5728   open , close , high , low , tr , sharenum , volume   \u4e2d \u9009\u62e9 \u4e00\u4e2a \u53c2\u6570 \u6307\u5b9a \u4e3a 1   Parameters   \u00b6   path   :   str ,   optional   \u8981 \u8bfb\u53d6 \u6587\u4ef6 \u7684 \u8def\u5f84 \uff0c \u7531\u4e8e \u5e38\u7528 \u7684 \u9ad8\u5f00 \u4f4e\u6536 \u6362\u624b \u6362\u624b\u7387 \u7b49 \u90fd \u5df2\u7ecf \u5c01\u88c5 \uff0c \u56e0\u6b64 \u6b64\u5904 \u901a\u5e38 \u4e3a None ,   by   default   None   open   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u5f00\u76d8 \u5f00\u76d8\u4ef7 ,   by   default   0   close   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6536\u76d8 \u6536\u76d8\u4ef7 ,   by   default   0   high   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 ,   by   default   0   low   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 ,   by   default   0   vwap   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u65e5\u5747 \u6210\u4ea4 \u6210\u4ea4\u4ef7 ,   by   default   0   tr   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6362\u624b \u6362\u624b\u7387 ,   by   default   0   sharenum   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6d41\u901a \u6d41\u901a\u80a1 \u6570 ,   by   default   0   total _ sharenum   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u603b \u80a1\u6570 ,   by   default   0   amount   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6210\u4ea4 \u6210\u4ea4\u91cf ,   by   default   0   money   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6210\u4ea4 \u6210\u4ea4\u989d ,   by   default   0   age   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u4e0a\u5e02 \u5929\u6570 ,   by   default   0   flow _ cap   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6d41\u901a \u5e02\u503c ,   by   default   0   total _ cap   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u603b \u5e02\u503c ,   by   default   0   adjfactor   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u590d\u6743 \u56e0\u5b50 ,   by   default   0   st   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u5f53\u65e5 \u662f\u5426 \u4e3a st \u80a1 \uff0c 1 \u8868\u793a \u662f st \u80a1 \uff0c \u7a7a\u503c \u5219 \u4e0d\u662f ,   by   default   0   state   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u5f53\u65e5 \u4ea4\u6613 \u72b6\u6001 \u662f\u5426 \u6b63\u5e38 \uff0c 1 \u8868\u793a \u6b63\u5e38 \u4ea4\u6613 \uff0c \u7a7a\u503c \u5219 \u4e0d\u662f ,   by   default   0   unadjust   :   bool ,   optional   \u4e3a 1 \u5219 \u5c06 \u4e0a\u8ff0 \u4ef7\u683c \u6539\u4e3a \u4e0d \u590d\u6743 \u4ef7\u683c ,   by   default   0   ret   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   ret _ inday   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u65e5\u5185 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   ret _ night   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u9694\u591c \u6ce2\u52a8 \u7387 ,   by   default   0   vol _ daily   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4f7f\u7528 \u5206\u949f \u6536\u76d8 \u6536\u76d8\u4ef7 \u7684 \u6807\u51c6 \u6807\u51c6\u5dee \u8ba1\u7b97 \u7684 \u6ce2\u52a8 \u7387 ,   by   default   0   vol   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6eda\u52a8 20 \u65e5 \u65e5\u95f4 \u6ce2\u52a8 \u7387 ,   by   default   0   vol _ inday   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6eda\u52a8 20 \u65e5\u65e5 \u5185 \u6536\u76ca \u6536\u76ca\u7387 \u6ce2\u52a8 \u7387 ,   by   default   0   vol _ night   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6eda\u52a8 20 \u65e5 \u9694\u591c \u6536\u76ca \u6536\u76ca\u7387 \u6ce2\u52a8 \u7387 ,   by   default   0   swing   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u632f\u5e45 ,   by   default   0   pb   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u5e02\u51c0\u7387 ,   by   default   0   pe   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u5e02\u76c8\u7387 ,   by   default   0   pettm   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u5e02\u76c8\u7387 ,   by   default   0   iret   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 20 \u65e5 \u56de\u5f52 \u7684 fama \u4e09 \u56e0\u5b50 \uff08 \u5e02\u573a \u3001 \u6d41\u901a \u5e02\u503c \u3001 \u5e02\u51c0\u7387 \uff09 \u7279\u8d28 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   ivol   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 20 \u65e5 \u56de\u5f52 \u7684 20 \u65e5 fama \u4e09 \u56e0\u5b50 \uff08 \u5e02\u573a \u3001 \u6d41\u901a \u5e02\u503c \u3001 \u5e02\u51c0\u7387 \uff09 \u7279\u8d28 \u6ce2\u52a8 \u7387 ,   by   default   0   illiquidity   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u5f53\u65e5 amihud \u975e \u6d41\u52a8 \u6d41\u52a8\u6027 \u6307\u6807 ,   by   default   0   swindustry _ ret   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6bcf \u53ea \u80a1\u7968 \u5bf9\u5e94 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u5f53\u65e5 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   zxindustry _ ret   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6bcf \u53ea \u80a1\u7968 \u5bf9\u5e94 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u5f53\u65e5 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   stop _ up   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6bcf \u53ea \u80a1\u7968 \u6da8\u505c \u4ef7 ,   by   default   0   stop _ down   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6bcf \u53ea \u80a1\u7968 \u8dcc\u505c \u4ef7 ,   by   default   0   zxindustry _ dummy _ code   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u8868 \u4ee3\u7801 \u7248 ,   by   default   0   zxindustry _ dummy _ name   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u8868 \u540d\u79f0 \u7248 ,   by   default   0   swindustry _ dummy   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf ,   by   default   0   hs300 _ member _ weight   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6caa \u6df1 300 \u6210\u5206 \u80a1\u6743 \u91cd \uff08 \u6708\u9891 \uff09 ,   by   default   0   zz500 _ member _ weight   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4e2d\u8bc1 500 \u6210\u5206 \u80a1\u6743 \u91cd \uff08 \u6708\u9891 \uff09 ,   by   default   0   zz1000 _ member _ weight   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4e2d\u8bc1 1000 \u6210\u5206 \u80a1\u6743 \u91cd \uff08 \u6708\u9891 \uff09 ,   by   default   0   start   :   Union [ int , str ] ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   STATES [ \" START \" ]   Returns   \u00b6   pd . DataFrame   \u4e00\u4e2a columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c index \u4e3a \u65f6\u95f4 \uff0c values \u4e3a \u76ee\u6807 \u6570\u636e \u7684 pd . DataFrame   Raises   \u00b6   IOError   open , close , high , low , tr , sharenum , volume   \u90fd \u4e3a 0 \u65f6 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   262   263   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   def   read _ daily   (   path   :   str   =   None   ,   open   :   bool   =   0   ,   close   :   bool   =   0   ,   high   :   bool   =   0   ,   low   :   bool   =   0   ,   vwap   :   bool   =   0   ,   tr   :   bool   =   0   ,   sharenum   :   bool   =   0   ,   total _ sharenum   :   bool   =   0   ,   amount   :   bool   =   0   ,   money   :   bool   =   0   ,   age   :   bool   =   0   ,   flow _ cap   :   bool   =   0   ,   total _ cap   :   bool   =   0   ,   adjfactor   :   bool   =   0   ,   st   :   bool   =   0   ,   state   :   bool   =   0   ,   unadjust   :   bool   =   0   ,   ret   :   bool   =   0   ,   ret _ inday   :   bool   =   0   ,   ret _ night   :   bool   =   0   ,   vol _ daily   :   bool   =   0   ,   vol   :   bool   =   0   ,   vol _ inday   :   bool   =   0   ,   vol _ night   :   bool   =   0   ,   swing   :   bool   =   0   ,   pb   :   bool   =   0   ,   pe   :   bool   =   0   ,   pettm   :   bool   =   0   ,   iret   :   bool   =   0   ,   ivol   :   bool   =   0   ,   illiquidity   :   bool   =   0   ,   swindustry _ ret   :   bool   =   0   ,   zxindustry _ ret   :   bool   =   0   ,   stop _ up   :   bool   =   0   ,   stop _ down   :   bool   =   0   ,   zxindustry _ dummy _ code   :   bool   =   0   ,   zxindustry _ dummy _ name   :   bool   =   0   ,   swindustry _ dummy   :   bool   =   0   ,   hs300 _ member _ weight   :   bool   =   0   ,   zz500 _ member _ weight   :   bool   =   0   ,   zz1000 _ member _ weight   :   bool   =   0   ,   start   :   Union   [   int   ,   str   ]   =   STATES   [   \" START \"   ] ,   )   - >   pd   .   DataFrame   :   \" \" \" \u76f4\u63a5 \u8bfb\u53d6 \u5e38\u7528 \u7684 \u91cf \u4ef7 \u8bfb\u53d6 \u65e5\u9891 \u6570\u636e \uff0c \u9ed8\u8ba4 \u4e3a \u590d\u6743 \u4ef7\u683c \uff0c   \u5728   open , close , high , low , tr , sharenum , volume   \u4e2d \u9009\u62e9 \u4e00\u4e2a \u53c2\u6570 \u6307\u5b9a \u4e3a 1   Parameters   ----------   path   :   str ,   optional   \u8981 \u8bfb\u53d6 \u6587\u4ef6 \u7684 \u8def\u5f84 \uff0c \u7531\u4e8e \u5e38\u7528 \u7684 \u9ad8\u5f00 \u4f4e\u6536 \u6362\u624b \u6362\u624b\u7387 \u7b49 \u90fd \u5df2\u7ecf \u5c01\u88c5 \uff0c \u56e0\u6b64 \u6b64\u5904 \u901a\u5e38 \u4e3a None ,   by   default   None   open   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u5f00\u76d8 \u5f00\u76d8\u4ef7 ,   by   default   0   close   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6536\u76d8 \u6536\u76d8\u4ef7 ,   by   default   0   high   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7 ,   by   default   0   low   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7 ,   by   default   0   vwap   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u65e5\u5747 \u6210\u4ea4 \u6210\u4ea4\u4ef7 ,   by   default   0   tr   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6362\u624b \u6362\u624b\u7387 ,   by   default   0   sharenum   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6d41\u901a \u6d41\u901a\u80a1 \u6570 ,   by   default   0   total _ sharenum   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u603b \u80a1\u6570 ,   by   default   0   amount   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6210\u4ea4 \u6210\u4ea4\u91cf ,   by   default   0   money   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6210\u4ea4 \u6210\u4ea4\u989d ,   by   default   0   age   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u4e0a\u5e02 \u5929\u6570 ,   by   default   0   flow _ cap   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6d41\u901a \u5e02\u503c ,   by   default   0   total _ cap   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u603b \u5e02\u503c ,   by   default   0   adjfactor   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u590d\u6743 \u56e0\u5b50 ,   by   default   0   st   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u5f53\u65e5 \u662f\u5426 \u4e3a st \u80a1 \uff0c 1 \u8868\u793a \u662f st \u80a1 \uff0c \u7a7a\u503c \u5219 \u4e0d\u662f ,   by   default   0   state   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u5f53\u65e5 \u4ea4\u6613 \u72b6\u6001 \u662f\u5426 \u6b63\u5e38 \uff0c 1 \u8868\u793a \u6b63\u5e38 \u4ea4\u6613 \uff0c \u7a7a\u503c \u5219 \u4e0d\u662f ,   by   default   0   unadjust   :   bool ,   optional   \u4e3a 1 \u5219 \u5c06 \u4e0a\u8ff0 \u4ef7\u683c \u6539\u4e3a \u4e0d \u590d\u6743 \u4ef7\u683c ,   by   default   0   ret   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u65e5\u95f4 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   ret _ inday   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u65e5\u5185 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   ret _ night   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u9694\u591c \u6ce2\u52a8 \u7387 ,   by   default   0   vol _ daily   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4f7f\u7528 \u5206\u949f \u6536\u76d8 \u6536\u76d8\u4ef7 \u7684 \u6807\u51c6 \u6807\u51c6\u5dee \u8ba1\u7b97 \u7684 \u6ce2\u52a8 \u7387 ,   by   default   0   vol   :   bool ,   optional   \u4e3a 1 \u5219 \u9009\u62e9 \u8bfb\u53d6 \u6eda\u52a8 20 \u65e5 \u65e5\u95f4 \u6ce2\u52a8 \u7387 ,   by   default   0   vol _ inday   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6eda\u52a8 20 \u65e5\u65e5 \u5185 \u6536\u76ca \u6536\u76ca\u7387 \u6ce2\u52a8 \u7387 ,   by   default   0   vol _ night   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6eda\u52a8 20 \u65e5 \u9694\u591c \u6536\u76ca \u6536\u76ca\u7387 \u6ce2\u52a8 \u7387 ,   by   default   0   swing   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u632f\u5e45 ,   by   default   0   pb   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u5e02\u51c0\u7387 ,   by   default   0   pe   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u5e02\u76c8\u7387 ,   by   default   0   pettm   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u5e02\u76c8\u7387 ,   by   default   0   iret   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 20 \u65e5 \u56de\u5f52 \u7684 fama \u4e09 \u56e0\u5b50 \uff08 \u5e02\u573a \u3001 \u6d41\u901a \u5e02\u503c \u3001 \u5e02\u51c0\u7387 \uff09 \u7279\u8d28 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   ivol   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 20 \u65e5 \u56de\u5f52 \u7684 20 \u65e5 fama \u4e09 \u56e0\u5b50 \uff08 \u5e02\u573a \u3001 \u6d41\u901a \u5e02\u503c \u3001 \u5e02\u51c0\u7387 \uff09 \u7279\u8d28 \u6ce2\u52a8 \u7387 ,   by   default   0   illiquidity   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u5f53\u65e5 amihud \u975e \u6d41\u52a8 \u6d41\u52a8\u6027 \u6307\u6807 ,   by   default   0   swindustry _ ret   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6bcf \u53ea \u80a1\u7968 \u5bf9\u5e94 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u5f53\u65e5 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   zxindustry _ ret   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6bcf \u53ea \u80a1\u7968 \u5bf9\u5e94 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u5f53\u65e5 \u6536\u76ca \u6536\u76ca\u7387 ,   by   default   0   stop _ up   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6bcf \u53ea \u80a1\u7968 \u6da8\u505c \u4ef7 ,   by   default   0   stop _ down   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6bcf \u53ea \u80a1\u7968 \u8dcc\u505c \u4ef7 ,   by   default   0   zxindustry _ dummy _ code   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u8868 \u4ee3\u7801 \u7248 ,   by   default   0   zxindustry _ dummy _ name   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u8868 \u540d\u79f0 \u7248 ,   by   default   0   swindustry _ dummy   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf ,   by   default   0   hs300 _ member _ weight   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u6caa \u6df1 300 \u6210\u5206 \u80a1\u6743 \u91cd \uff08 \u6708\u9891 \uff09 ,   by   default   0   zz500 _ member _ weight   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4e2d\u8bc1 500 \u6210\u5206 \u80a1\u6743 \u91cd \uff08 \u6708\u9891 \uff09 ,   by   default   0   zz1000 _ member _ weight   :   bool ,   optional   \u4e3a 1 \u5219 \u8868\u793a \u8bfb\u53d6 \u4e2d\u8bc1 1000 \u6210\u5206 \u80a1\u6743 \u91cd \uff08 \u6708\u9891 \uff09 ,   by   default   0   start   :   Union [ int , str ] ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   STATES [ \" START \" ]   Returns   -------   ` pd . DataFrame `   \u4e00\u4e2a columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c index \u4e3a \u65f6\u95f4 \uff0c values \u4e3a \u76ee\u6807 \u6570\u636e \u7684 pd . DataFrame   Raises   ------   ` IOError `   open , close , high , low , tr , sharenum , volume   \u90fd \u4e3a 0 \u65f6 \uff0c \u5c06 \u62a5\u9519   \" \" \"   if   not   unadjust   :   if   path   :   return   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   path   )   elif   open   :   opens   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" opens . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   opens   elif   close   :   closes   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" closes . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   closes   elif   high   :   highs   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" highs . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   highs   elif   low   :   lows   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" lows . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   lows   elif   vwap   :   df   =   (   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" vwaps . parquet \"   )   *   read _ daily   (   adjfactor   =   1   ,   start   =   start   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   )   elif   tr   :   trs   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" trs . parquet \"   )   .   replace   (   0   ,   np   .   nan   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   trs   elif   sharenum   :   sharenums   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" sharenums . parquet \"   )   df   =   sharenums   elif   total _ sharenum   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" total _ sharenums . parquet \"   )   elif   amount   :   volumes   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" amounts . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   volumes   elif   money   :   df   =   pd   .   read _ parquet   (   homeplace   .   factor _ data _ file   +   \" \u65e5\u9891 \u6570\u636e - \u6bcf\u65e5 \u6210\u4ea4 \u6210\u4ea4\u989d / \u6bcf\u65e5 \u6210\u4ea4 \u6210\u4ea4\u989d . parquet \"   )   elif   age   :   age   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" ages . parquet \"   )   df   =   age   elif   flow _ cap   :   closes   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" closes _ unadj . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   sharenums   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" sharenums . parquet \"   )   flow _ cap   =   closes   *   sharenums   df   =   flow _ cap   elif   total _ cap   :   closes   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" closes _ unadj . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   sharenums   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" total _ sharenums . parquet \"   )   flow _ cap   =   closes   *   sharenums   df   =   flow _ cap   elif   adjfactor   :   #   df = pd . read _ parquet ( homeplace . daily _ data _ file + ' adjfactors . parquet ' )   df   =   (   read _ daily   (   close   =   1   ,   start   =   start   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   /   read _ daily   (   close   =   1   ,   start   =   start   ,   unadjust   =   1   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   )   elif   st   :   st   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" sts . parquet \"   )   df   =   st   elif   state   :   state   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" states . parquet \"   )   state   =   state   .   where   (   state   = =   1   ,   np   .   nan   )   df   =   state   elif   ret   :   df   =   read _ daily   (   close   =   1   ,   start   =   start   )   df   =   df   /   df   .   shift   (   1   )   -   1   elif   ret _ inday   :   df   =   read _ daily   (   close   =   1   ,   start   =   start   )   /   read _ daily   (   open   =   1   ,   start   =   start   )   -   1   elif   ret _ night   :   df   =   (   read _ daily   (   open   =   1   ,   start   =   start   )   /   read _ daily   (   close   =   1   ,   start   =   start   )   .   shift   (   1   )   -   1   )   elif   vol _ daily   :   df   =   pd   .   read _ parquet   (   homeplace   .   factor _ data _ file   +   \" \u8349\u6728 \u8349\u6728\u7686\u5175 / \u8349\u6728 \u8349\u6728\u7686\u5175 _ \u521d\u7ea7 . parquet \"   )   *   read _ daily   (   state   =   1   )   elif   vol   :   df   =   read _ daily   (   ret   =   1   ,   start   =   start   )   df   =   df   .   rolling   (   20   ,   min _ periods   =   10   )   .   std   ( )   elif   vol _ inday   :   df   =   read _ daily   (   ret _ inday   =   1   ,   start   =   start   )   df   =   df   .   rolling   (   20   ,   min _ periods   =   10   )   .   std   ( )   elif   vol _ night   :   df   =   read _ daily   (   ret _ night   =   1   ,   start   =   start   )   df   =   df   .   rolling   (   20   ,   min _ periods   =   10   )   .   std   ( )   elif   swing   :   df   =   (   read _ daily   (   high   =   1   ,   start   =   start   )   -   read _ daily   (   low   =   1   ,   start   =   start   )   )   /   read _ daily   (   close   =   1   ,   start   =   start   )   .   shift   (   1   )   elif   pb   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" pb . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   pe   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" pe . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   pettm   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" pettm . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   iret   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" idiosyncratic _ ret . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   ivol   :   df   =   read _ daily   (   iret   =   1   ,   start   =   start   )   df   =   df   .   rolling   (   20   ,   min _ periods   =   10   )   .   std   ( )   elif   illiquidity   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" illiquidity . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   swindustry _ ret   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u80a1\u7968 \u5bf9\u5e94 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u6bcf\u65e5 \u6536\u76ca \u6536\u76ca\u7387 . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   zxindustry _ ret   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u80a1\u7968 \u5bf9\u5e94 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6bcf\u65e5 \u6536\u76ca \u6536\u76ca\u7387 . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   stop _ up   :   df   =   (   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" stop _ ups . parquet \"   )   *   read _ daily   (   adjfactor   =   1   ,   start   =   start   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   )   elif   stop _ down   :   df   =   (   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" stop _ downs . parquet \"   )   *   read _ daily   (   adjfactor   =   1   ,   start   =   start   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   )   elif   zxindustry _ dummy _ code   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u4ee3\u7801 \u7248 . parquet \"   )   elif   zxindustry _ dummy _ name   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u540d\u79f0 \u7248 . parquet \"   )   elif   swindustry _ dummy   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u7533\u4e07 \u884c\u4e1a 2021 \u7248\u54d1 \u53d8\u91cf . parquet \"   )   elif   hs300 _ member _ weight   :   df   =   (   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u6caa \u6df1 300 \u6210\u5206 \u80a1\u6743 \u91cd . parquet \"   )   .   resample   (   \" M \"   )   .   last   ( )   )   elif   zz500 _ member _ weight   :   df   =   (   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 500 \u6210\u5206 \u80a1\u6743 \u91cd . parquet \"   )   .   resample   (   \" M \"   )   .   last   ( )   )   elif   zz1000 _ member _ weight   :   df   =   (   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u8bc1 1000 \u6210\u5206 \u80a1\u6743 \u91cd . parquet \"   )   .   resample   (   \" M \"   )   .   last   ( )   )   else   :   raise   IOError   (   \" \u9601\u4e0b \u603b\u5f97 \u8bfb\u70b9 \u4ec0\u4e48 \u5427 \uff1f \ud83e\udd12 \"   )   else   :   if   open   :   opens   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" opens _ unadj . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   opens   elif   close   :   closes   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" closes _ unadj . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   closes   elif   high   :   highs   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" highs _ unadj . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   highs   elif   low   :   lows   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" lows _ unadj . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   df   =   lows   elif   vwap   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" vwaps . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   stop _ up   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" stop _ ups . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   elif   stop _ down   :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" stop _ downs . parquet \"   )   *   read _ daily   (   state   =   1   ,   start   =   start   )   else   :   raise   IOError   (   \" \u9601\u4e0b \u603b\u5f97 \u8bfb\u70b9 \u4ec0\u4e48 \u5427 \uff1f \ud83e\udd12 \"   )   if   \" date \"   not   in   df   .   columns   :   df   =   df   [   df   .   index   > =   pd   .   Timestamp   (   str   (   start   ) ) ]   return   df   .   dropna   (   how   =   \" all \"   )   read _ index _ single   (   code   ,   questdb _ host   =   ' 127.0 . 0.1 '   )   \u00b6   \u8bfb\u53d6 \u67d0\u4e2a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e   Parameters   \u00b6   code   :   str   \u6307\u6570 \u7684 wind \u4ee3\u7801   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   Returns   \u00b6   pd . Series   \u65e5 \u884c\u60c5 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   def   read _ index _ single   (   code   :   str   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   )   - >   pd   .   Series   :   \" \" \" \u8bfb\u53d6 \u67d0\u4e2a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e   Parameters   ----------   code   :   str   \u6307\u6570 \u7684 wind \u4ee3\u7801   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   Returns   -------   pd . Series   \u65e5 \u884c\u60c5 \u6570\u636e   \" \" \"   try   :   chc   =   ClickHouseClient   (   \" minute _ data \"   )   hs300   =   (   chc   .   get _ data   (   f   \" select   date , num , close   FROM   minute _ data . minute _ data _ index   WHERE   code = '   {   code   }   ' \"   )   /   100   )   hs300   .   date   =   pd   .   to _ datetime   (   hs300   .   date   ,   format   =   \" % Y% m   % d   \"   )   hs300   =   (   hs300   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   .   groupby   (   \" date \"   )   .   last   ( )   .   drop   (   columns   =   [   \" num \"   ] )   .   close   )   return   hs300   except   Exception   :   try   :   qdb   =   Questdb   (   host   =   questdb _ host   )   hs300   =   qdb   .   get _ data   (   f   \" select   date , num , close   FROM   ' minute _ data _ index '   WHERE   code = '   {   code   }   ' \"   )   except   Exception   :   qdb   =   Questdb   (   host   =   \" 192.168 . 1.3 \"   )   hs300   =   qdb   .   get _ data   (   f   \" select   date , num , close   FROM   ' minute _ data _ index '   WHERE   code = '   {   code   }   ' \"   )   hs300   .   date   =   pd   .   to _ datetime   (   hs300   .   date   ,   format   =   \" % Y% m   % d   \"   )   hs300   .   num   =   hs300   .   num   .   astype   (   int   )   hs300   =   (   hs300   .   sort _ values   ( [   \" date \"   ,   \" num \"   ] )   .   groupby   (   \" date \"   )   .   last   ( )   .   drop   (   columns   =   [   \" num \"   ] )   .   close   )   return   hs300   read _ index _ three   (   day   =   None   )   \u00b6   \u8bfb\u53d6 \u4e09\u5927 \u6307\u6570 \u7684 \u539f\u59cb \u884c\u60c5 \u6570\u636e \uff0c \u8fd4\u56de \u5e76 \u4fdd\u5b58 \u5728 \u672c\u5730   Parameters   \u00b6   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   Returns   \u00b6   Tuple [ pd . DataFrame ]   \u5206\u522b \u8fd4\u56de \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u7684 \u884c\u60c5 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   def   read _ index _ three   (   day   :   int   =   None   )   - >   Tuple   [   pd   .   DataFrame   ] :   \" \" \" \u8bfb\u53d6 \u4e09\u5927 \u6307\u6570 \u7684 \u539f\u59cb \u884c\u60c5 \u6570\u636e \uff0c \u8fd4\u56de \u5e76 \u4fdd\u5b58 \u5728 \u672c\u5730   Parameters   ----------   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   Returns   -------   ` Tuple [ pd . DataFrame ] `   \u5206\u522b \u8fd4\u56de \u6caa \u6df1 300 \u3001 \u4e2d\u8bc1 500 \u3001 \u4e2d\u8bc1 1000 \u7684 \u884c\u60c5 \u6570\u636e   \" \" \"   if   day   is   None   :   day   =   STATES   [   \" START \"   ]   hs300   ,   zz500   ,   zz1000   ,   zz2000   =   (   read _ index _ single   (   \" 000300 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( ) ,   read _ index _ single   (   \" 000905 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( ) ,   read _ index _ single   (   \" 000852 . SH \"   )   .   resample   (   \" M \"   )   .   last   ( ) ,   read _ index _ single   (   \" 399303 . SZ \"   )   .   resample   (   \" M \"   )   .   last   ( ) ,   )   hs300   =   hs300   [   hs300   .   index   > =   pd   .   Timestamp   (   str   (   day   ) ) ]   zz500   =   zz500   [   zz500   .   index   > =   pd   .   Timestamp   (   str   (   day   ) ) ]   zz1000   =   zz1000   [   zz1000   .   index   > =   pd   .   Timestamp   (   str   (   day   ) ) ]   zz2000   =   zz2000   [   zz2000   .   index   > =   pd   .   Timestamp   (   str   (   day   ) ) ]   return   hs300   ,   zz500   ,   zz1000   ,   zz2000   read _ market   (   open   =   0   ,   close   =   0   ,   high   =   0   ,   low   =   0   ,   start   =   STATES   [   ' START '   ] ,   every _ stock   =   1   ,   market _ code   =   ' 000985 . SH '   ,   questdb _ host   =   ' 127.0 . 0.1 '   )   \u00b6   \u8bfb\u53d6 \u4e2d\u8bc1 \u5168\u6307 \u65e5 \u884c\u60c5 \u6570\u636e   Parameters   \u00b6   open   :   bool ,   optional   \u8bfb\u53d6 \u5f00\u76d8 \u70b9\u6570 ,   by   default   0   close   :   bool ,   optional   \u8bfb\u53d6 \u6536\u76d8 \u70b9\u6570 ,   by   default   0   high   :   bool ,   optional   \u8bfb\u53d6 \u6700\u9ad8 \u9ad8\u70b9 \u6700\u9ad8\u70b9 \u6570 ,   by   default   0   low   :   bool ,   optional   \u8bfb\u53d6 \u6700\u4f4e \u4f4e\u70b9 \u6700\u4f4e\u70b9 \u6570 ,   by   default   0   start   :   int ,   optional   \u8bfb\u53d6 \u7684 \u8d77\u59cb \u65e5\u671f ,   by   default   STATES [ \" START \" ]   every _ stock   :   bool ,   optional   \u662f\u5426 \u4fee\u6539 \u4e3a index \u662f \u65f6\u95f4 \uff0c columns \u662f \u6bcf \u53ea \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u6bcf \u4e00\u5217 \u503c \u90fd \u76f8\u540c \u7684 \u5f62\u5f0f ,   by   default   1   market _ code   :   str ,   optional   \u9009\u7528 \u54ea\u4e2a \u6307\u6570 \u4f5c\u4e3a \u5e02\u573a \u6307\u6570 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   Returns   \u00b6   Union [ pd . DataFrame , pd . Series ]   \u4e2d\u8bc1 \u5168\u6307 \u6bcf\u5929 \u7684 \u6307\u6570   Raises   \u00b6   IOError   \u5982\u679c \u6ca1\u6709 \u6307\u5b9a \u4efb\u4f55 \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   def   read _ market   (   open   :   bool   =   0   ,   close   :   bool   =   0   ,   high   :   bool   =   0   ,   low   :   bool   =   0   ,   start   :   int   =   STATES   [   \" START \"   ] ,   every _ stock   :   bool   =   1   ,   market _ code   :   str   =   \" 000985 . SH \"   ,   questdb _ host   :   str   =   \" 127.0 . 0.1 \"   ,   )   - >   Union   [   pd   .   DataFrame   ,   pd   .   Series   ] :   \" \" \" \u8bfb\u53d6 \u4e2d\u8bc1 \u5168\u6307 \u65e5 \u884c\u60c5 \u6570\u636e   Parameters   ----------   open   :   bool ,   optional   \u8bfb\u53d6 \u5f00\u76d8 \u70b9\u6570 ,   by   default   0   close   :   bool ,   optional   \u8bfb\u53d6 \u6536\u76d8 \u70b9\u6570 ,   by   default   0   high   :   bool ,   optional   \u8bfb\u53d6 \u6700\u9ad8 \u9ad8\u70b9 \u6700\u9ad8\u70b9 \u6570 ,   by   default   0   low   :   bool ,   optional   \u8bfb\u53d6 \u6700\u4f4e \u4f4e\u70b9 \u6700\u4f4e\u70b9 \u6570 ,   by   default   0   start   :   int ,   optional   \u8bfb\u53d6 \u7684 \u8d77\u59cb \u65e5\u671f ,   by   default   STATES [ \" START \" ]   every _ stock   :   bool ,   optional   \u662f\u5426 \u4fee\u6539 \u4e3a index \u662f \u65f6\u95f4 \uff0c columns \u662f \u6bcf \u53ea \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c \u6bcf \u4e00\u5217 \u503c \u90fd \u76f8\u540c \u7684 \u5f62\u5f0f ,   by   default   1   market _ code   :   str ,   optional   \u9009\u7528 \u54ea\u4e2a \u6307\u6570 \u4f5c\u4e3a \u5e02\u573a \u6307\u6570 \uff0c \u9ed8\u8ba4 \u4f7f\u7528 \u4e2d\u8bc1 \u5168\u6307   questdb _ host :   str ,   optional   questdb \u7684 host \uff0c \u4f7f\u7528 NAS \u65f6 \u6539\u4e3a ' 192.168 . 1.3 ' ,   by   default   ' 127.0 . 0.1 '   Returns   -------   Union [ pd . DataFrame , pd . Series ]   \u4e2d\u8bc1 \u5168\u6307 \u6bcf\u5929 \u7684 \u6307\u6570   Raises   ------   IOError   \u5982\u679c \u6ca1\u6709 \u6307\u5b9a \u4efb\u4f55 \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   \" \" \"   try   :   chc   =   ClickHouseClient   (   \" minute _ data \"   )   df   =   (   chc   .   get _ data   (   f   \" select   date , num , close , high , low   from   minute _ data . minute _ data _ index   where   code = '   {   market _ code   }   '   and   date > =   {   start   }   00   order   by   date , num \"   )   /   100   )   except   Exception   :   try   :   qdb   =   Questdb   (   host   =   questdb _ host   )   df   =   qdb   .   get _ data   (   f   \" select   date , num , close , high , low   from   minute _ data _ index   where   code = '   {   market _ code   }   '   and   cast ( date   as   int ) > =   {   start   }   \"   )   except   Exception   :   qdb   =   Questdb   (   host   =   \" 192.168 . 1.3 \"   )   df   =   qdb   .   get _ data   (   f   \" select   date , num , close , high , low   from   minute _ data _ index   where   code = '   {   market _ code   }   '   and   cast ( date   as   int ) > =   {   start   }   \"   )   df   .   num   =   df   .   num   .   astype   (   int   )   df   =   df   .   set _ index   (   \" date \"   )   df   .   index   =   pd   .   to _ datetime   (   df   .   index   .   astype   (   str   ) ,   format   =   \" % Y% m   % d   \"   )   if   open   :   #   \u7c73 \u7b50 \u7684 \u7b2c\u4e00 \u4e00\u5206 \u5206\u949f \u7b2c\u4e00\u5206 \u4e00\u5206\u949f \u7b2c\u4e00\u5206\u949f \u662f \u96c6\u5408 \u7ade\u4ef7 \u96c6\u5408\u7ade\u4ef7 \uff0c \u7b2c\u4e00 \u4e00\u5206 \u5206\u949f \u7b2c\u4e00\u5206 \u4e00\u5206\u949f \u7b2c\u4e00\u5206\u949f \u7684 \u6536\u76d8 \u6536\u76d8\u4ef7 \u5373 \u4e3a \u5f53\u5929 \u5f00\u76d8 \u5f00\u76d8\u4ef7   df   =   df   [   df   .   num   = =   1   ]   .   open   elif   close   :   df   =   df   [   df   .   num   = =   240   ]   .   close   elif   high   :   df   =   df   [   df   .   num   >   1   ]   df   =   df   .   groupby   (   \" date \"   )   .   max   ( )   df   =   df   .   high   elif   low   :   df   =   df   [   df   .   num   >   1   ]   df   =   df   .   groupby   (   \" date \"   )   .   min   ( )   df   =   df   .   low   else   :   raise   IOError   (   \" \u603b\u5f97 \u6307\u5b9a \u4e00\u4e2a \u6307\u6807 \u5427 \uff1f \ud83e\udd12 \"   )   if   every _ stock   :   tr   =   read _ daily   (   tr   =   1   ,   start   =   start   )   df   =   pd   .   DataFrame   ( {   k   :   list   (   df   )   for   k   in   list   (   tr   .   columns   ) } ,   index   =   df   .   index   )   return   df   read _ money _ flow   (   buy   =   0   ,   sell   =   0   ,   exlarge   =   0   ,   large   =   0   ,   median   =   0   ,   small   =   0   ,   whole   =   0   )   \u00b6   \u4e00\u952e \u8bfb\u5165 \u8d44\u91d1 \u6d41\u5411 \u6570\u636e \uff0c \u5305\u62ec \u8d85\u5927 \u5355 \u3001 \u5927\u5355 \u3001 \u4e2d\u5355 \u3001 \u5c0f\u5355 \u7684 \u4e70\u5165 \u548c \u5356\u51fa \u60c5\u51b5   Parameters   \u00b6   buy   :   bool ,   optional   \u65b9\u5411 \u4e3a \u4e70 ,   by   default   0   sell   :   bool ,   optional   \u65b9\u5411 \u4e3a \u5356 ,   by   default   0   exlarge   :   bool ,   optional   \u8d85\u5927 \u5355 \uff0c \u91d1\u989d \u5927\u4e8e 100 \u4e07 \uff0c \u4e3a \u673a\u6784 \u64cd\u4f5c ,   by   default   0   large   :   bool ,   optional   \u5927\u5355 \uff0c \u91d1\u989d \u5728 20 \u4e07\u5230 100 \u4e07 \u4e4b\u95f4 \uff0c \u4e3a \u5927\u6237 \u7279\u5927 \u5355 ,   by   default   0   median   :   bool ,   optional   \u4e2d\u5355 \uff0c \u91d1\u989d \u5728 4 \u4e07\u5230 20 \u4e07 \u4e4b\u95f4 \uff0c \u4e3a \u4e2d\u6237 \u5927\u5355 ,   by   default   0   small   :   bool ,   optional   \u5c0f\u5355 \uff0c \u91d1\u989d \u5728 4 \u4e07 \u4ee5\u4e0b \uff0c \u4e3a \u6563\u6237 \u4e2d\u5355 ,   by   default   0   whole   :   bool ,   optional   \u8bfb\u5165 \u5f53\u5929 \u7684 \u603b \u4ea4\u6613 \u4ea4\u6613\u989d ,   by   default   0   Returns   \u00b6   pd . DataFrame   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5bf9\u5e94 \u7c7b\u578b \u8ba2\u5355 \u5f53\u65e5 \u7684 \u6210\u4ea4 \u91d1\u989d   Raises   \u00b6   IOError   buy \u548c sell \u5fc5\u987b \u6307\u5b9a \u4e00\u4e2a \uff0c \u5426\u5219 \u4f1a \u62a5\u9519   IOError   exlarge \uff0c large \uff0c median \u548c small \u5fc5\u987b \u6307\u5b9a \u4e00\u4e2a \uff0c \u5426\u5219 \u4f1a \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   def   read _ money _ flow   (   buy   :   bool   =   0   ,   sell   :   bool   =   0   ,   exlarge   :   bool   =   0   ,   large   :   bool   =   0   ,   median   :   bool   =   0   ,   small   :   bool   =   0   ,   whole   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u4e00\u952e \u8bfb\u5165 \u8d44\u91d1 \u6d41\u5411 \u6570\u636e \uff0c \u5305\u62ec \u8d85\u5927 \u5355 \u3001 \u5927\u5355 \u3001 \u4e2d\u5355 \u3001 \u5c0f\u5355 \u7684 \u4e70\u5165 \u548c \u5356\u51fa \u60c5\u51b5   Parameters   ----------   buy   :   bool ,   optional   \u65b9\u5411 \u4e3a \u4e70 ,   by   default   0   sell   :   bool ,   optional   \u65b9\u5411 \u4e3a \u5356 ,   by   default   0   exlarge   :   bool ,   optional   \u8d85\u5927 \u5355 \uff0c \u91d1\u989d \u5927\u4e8e 100 \u4e07 \uff0c \u4e3a \u673a\u6784 \u64cd\u4f5c ,   by   default   0   large   :   bool ,   optional   \u5927\u5355 \uff0c \u91d1\u989d \u5728 20 \u4e07\u5230 100 \u4e07 \u4e4b\u95f4 \uff0c \u4e3a \u5927\u6237 \u7279\u5927 \u5355 ,   by   default   0   median   :   bool ,   optional   \u4e2d\u5355 \uff0c \u91d1\u989d \u5728 4 \u4e07\u5230 20 \u4e07 \u4e4b\u95f4 \uff0c \u4e3a \u4e2d\u6237 \u5927\u5355 ,   by   default   0   small   :   bool ,   optional   \u5c0f\u5355 \uff0c \u91d1\u989d \u5728 4 \u4e07 \u4ee5\u4e0b \uff0c \u4e3a \u6563\u6237 \u4e2d\u5355 ,   by   default   0   whole   :   bool ,   optional   \u8bfb\u5165 \u5f53\u5929 \u7684 \u603b \u4ea4\u6613 \u4ea4\u6613\u989d ,   by   default   0   Returns   -------   pd . DataFrame   index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5bf9\u5e94 \u7c7b\u578b \u8ba2\u5355 \u5f53\u65e5 \u7684 \u6210\u4ea4 \u91d1\u989d   Raises   ------   IOError   buy \u548c sell \u5fc5\u987b \u6307\u5b9a \u4e00\u4e2a \uff0c \u5426\u5219 \u4f1a \u62a5\u9519   IOError   exlarge \uff0c large \uff0c median \u548c small \u5fc5\u987b \u6307\u5b9a \u4e00\u4e2a \uff0c \u5426\u5219 \u4f1a \u62a5\u9519   \" \" \"   if   not   whole   :   if   buy   :   if   exlarge   :   name   =   \" buy _ value _ exlarge \"   elif   large   :   name   =   \" buy _ value _ large \"   elif   median   :   name   =   \" buy _ value _ med \"   elif   small   :   name   =   \" buy _ value _ small \"   else   :   raise   IOError   (   \" \u60a8 \u603b\u5f97 \u6307\u5b9a \u4e00\u79cd \u89c4\u6a21 \u5427 \uff1f \ud83e\udd12 \"   )   elif   sell   :   if   exlarge   :   name   =   \" sell _ value _ exlarge \"   elif   large   :   name   =   \" sell _ value _ large \"   elif   median   :   name   =   \" sell _ value _ med \"   elif   small   :   name   =   \" sell _ value _ small \"   else   :   raise   IOError   (   \" \u60a8 \u603b\u5f97 \u6307\u5b9a \u4e00\u79cd \u89c4\u6a21 \u5427 \uff1f \ud83e\udd12 \"   )   else   :   raise   IOError   (   \" \u60a8 \u603b\u5f97 \u6307\u5b9a \u4e00\u4e0b \u662f \u4e70 \u8fd8\u662f \u5356 \u5427 \uff1f \ud83e\udd12 \"   )   name   =   homeplace   .   daily _ data _ file   +   name   +   \" . parquet \"   df   =   pd   .   read _ parquet   (   name   )   return   df   else   :   dfs   =   [   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   name   +   \" . parquet \"   )   for   name   in   [   \" buy _ value _ exlarge \"   ,   \" buy _ value _ large \"   ,   \" buy _ value _ med \"   ,   \" buy _ value _ small \"   ,   \" sell _ value _ exlarge \"   ,   \" sell _ value _ large \"   ,   \" sell _ value _ med \"   ,   \" sell _ value _ small \"   ,   ]   ]   dfs   =   sum   (   dfs   )   return   dfs   read _ swindustry _ prices   (   day   =   None   ,   monthly   =   1   ,   start   =   STATES   [   ' START '   ] )   \u00b6   \u8bfb\u53d6 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6216 \u6708 \u884c\u60c5   Parameters   \u00b6   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   monthly   :   bool ,   optional   \u662f\u5426 \u4e3a \u6708 \u884c\u60c5 ,   by   default   1   Returns   \u00b6   pd . DataFrame   \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u884c\u60c5 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   def   read _ swindustry _ prices   (   day   :   int   =   None   ,   monthly   :   bool   =   1   ,   start   :   int   =   STATES   [   \" START \"   ]   )   - >   pd   .   DataFrame   :   \" \" \" \u8bfb\u53d6 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6216 \u6708 \u884c\u60c5   Parameters   ----------   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   monthly   :   bool ,   optional   \u662f\u5426 \u4e3a \u6708 \u884c\u60c5 ,   by   default   1   Returns   -------   ` pd . DataFrame `   \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u884c\u60c5 \u6570\u636e   \" \" \"   if   day   is   None   :   day   =   STATES   [   \" START \"   ]   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u7533\u4e07 \u5404 \u884c\u4e1a \u884c\u60c5 \u6570\u636e . parquet \"   )   df   =   df   [   df   .   index   > =   pd   .   Timestamp   (   str   (   start   ) ) ]   if   monthly   :   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   return   df   read _ zxindustry _ prices   (   day   =   None   ,   monthly   =   1   ,   start   =   STATES   [   ' START '   ] )   \u00b6   \u8bfb\u53d6 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6216 \u6708 \u884c\u60c5   Parameters   \u00b6   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   monthly   :   bool ,   optional   \u662f\u5426 \u4e3a \u6708 \u884c\u60c5 ,   by   default   1   Returns   \u00b6   pd . DataFrame   \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u884c\u60c5 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / read _ data . py   Python   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   692   693   694   def   read _ zxindustry _ prices   (   day   :   int   =   None   ,   monthly   :   bool   =   1   ,   start   :   int   =   STATES   [   \" START \"   ]   )   - >   pd   .   DataFrame   :   \" \" \" \u8bfb\u53d6 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6216 \u6708 \u884c\u60c5   Parameters   ----------   day   :   int ,   optional   \u8d77\u59cb \u65e5\u671f \uff0c \u5f62\u5982 20130101 ,   by   default   None   monthly   :   bool ,   optional   \u662f\u5426 \u4e3a \u6708 \u884c\u60c5 ,   by   default   1   Returns   -------   ` pd . DataFrame `   \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u884c\u60c5 \u6570\u636e   \" \" \"   if   day   is   None   :   day   =   STATES   [   \" START \"   ]   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u5404 \u884c\u4e1a \u884c\u60c5 \u6570\u636e . parquet \"   )   df   =   df   [   df   .   index   > =   pd   .   Timestamp   (   str   (   start   ) ) ]   if   monthly   :   df   =   df   .   resample   (   \" M \"   )   .   last   ( )   return   df","title":"read _ data"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.database_read_final_factors","text":"\u6839\u636e \u56e0\u5b50 \u540d\u5b57 \uff0c \u6216 \u56e0\u5b50 \u5e8f\u53f7 \uff0c \u8bfb\u53d6 \u6700\u7ec8 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c","title":"database _ read _ final _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.database_read_primary_factors","text":"\u6839\u636e \u56e0\u5b50 \u540d\u5b57 \uff0c \u8bfb\u53d6 \u521d\u7ea7 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c","title":"database _ read _ primary _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.get_industry_dummies","text":"\u751f\u6210 30 / 31 \u4e2a \u884c\u4e1a \u7684 \u54d1 \u53d8\u91cf \u77e9\u9635 \uff0c \u8fd4\u56de \u4e00\u4e2a \u5b57\u5178","title":"get _ industry _ dummies ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.read_daily","text":"\u76f4\u63a5 \u8bfb\u53d6 \u5e38\u7528 \u7684 \u91cf \u4ef7 \u8bfb\u53d6 \u65e5\u9891 \u6570\u636e \uff0c \u9ed8\u8ba4 \u4e3a \u590d\u6743 \u4ef7\u683c \uff0c   \u5728   open , close , high , low , tr , sharenum , volume   \u4e2d \u9009\u62e9 \u4e00\u4e2a \u53c2\u6570 \u6307\u5b9a \u4e3a 1","title":"read _ daily ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.read_index_single","text":"\u8bfb\u53d6 \u67d0\u4e2a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6536\u76d8 \u6536\u76d8\u4ef7 \u6570\u636e","title":"read _ index _ single ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.read_index_three","text":"\u8bfb\u53d6 \u4e09\u5927 \u6307\u6570 \u7684 \u539f\u59cb \u884c\u60c5 \u6570\u636e \uff0c \u8fd4\u56de \u5e76 \u4fdd\u5b58 \u5728 \u672c\u5730","title":"read _ index _ three ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.read_market","text":"\u8bfb\u53d6 \u4e2d\u8bc1 \u5168\u6307 \u65e5 \u884c\u60c5 \u6570\u636e","title":"read _ market ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.read_money_flow","text":"\u4e00\u952e \u8bfb\u5165 \u8d44\u91d1 \u6d41\u5411 \u6570\u636e \uff0c \u5305\u62ec \u8d85\u5927 \u5355 \u3001 \u5927\u5355 \u3001 \u4e2d\u5355 \u3001 \u5c0f\u5355 \u7684 \u4e70\u5165 \u548c \u5356\u51fa \u60c5\u51b5","title":"read _ money _ flow ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.read_swindustry_prices","text":"\u8bfb\u53d6 \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6216 \u6708 \u884c\u60c5","title":"read _ swindustry _ prices ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/read_data/#pure_ocean_breeze.data.read_data.read_zxindustry_prices","text":"\u8bfb\u53d6 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6307\u6570 \u7684 \u65e5 \u884c\u60c5 \u6216 \u6708 \u884c\u60c5","title":"read _ zxindustry _ prices ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/","text":"\u9488\u5bf9 \u4e00\u4e9b \u4e0d \u5e38\u89c1 \u7684 \u6587\u4ef6 \u683c\u5f0f \u6587\u4ef6\u683c\u5f0f \uff0c \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e \u6587\u4ef6 \u7684 \u4e00\u4e9b \u5de5\u5177 \u51fd\u6570 \uff0c \u4ee5\u53ca \u5176\u4ed6 \u6570\u636e \u5de5\u5177   pure _ dawn   \u00b6   Bases :   object   \u56e0\u5b50 \u5207\u5272 \u8bba \u7684 \u6bcd \u6846\u67b6 \uff0c \u53ef\u4ee5 \u5bf9 \u4e24\u4e2a \u56e0\u5b50 \u8fdb\u884c \u7c7b\u4f3c \u4e8e \u56e0\u5b50 \u5207\u5272 \u7684 \u64cd\u4f5c   \u53ef \u7528\u4e8e \u6d3e\u751f \u4efb\u4f55 \" \u4ee5 \u4e24\u4e2a \u56e0\u5b50 \u751f\u6210 \u4e00\u4e2a \u56e0\u5b50 \" \u7684 \u5b50\u7c7b   \u4f7f\u7528 \u4e3e\u4f8b   cut \u51fd\u6570 \u91cc \uff0c \u5fc5\u987b \u5e26\u6709 \u8f93\u5165 \u53d8\u91cf df , df \u6709 \u4e24\u4e2a columns \uff0c \u4e00\u4e2a \u540d\u4e3a ' fac1 ' \uff0c \u4e00\u4e2a \u540d\u4e3a ' fac2 ' \uff0c df \u662f \u6700\u8fd1 \u4e00\u4e2a \u56de\u770b \u671f\u5185 \u7684 \u6570\u636e   Python   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   class   Cut   (   pure _ dawn   ) :   def   cut   (   self   ,   df   ) :   df   =   df   .   sort _ values   (   ' fac1 '   )   df   =   df   .   assign   (   fac3   =   df   .   fac1   *   df   .   fac2   )   ret0   =   df   .   fac2   .   iloc   [ :   4   ]   .   mean   ( )   ret1   =   df   .   fac2   .   iloc   [   4   :   8   ]   .   mean   ( )   ret2   =   df   .   fac2   .   iloc   [   8   :   12   ]   .   mean   ( )   ret3   =   df   .   fac2   .   iloc   [   12   :   16   ]   .   mean   ( )   ret4   =   df   .   fac2   .   iloc   [   16   : ]   .   mean   ( )   aret0   =   df   .   fac3   .   iloc   [ :   4   ]   .   mean   ( )   aret1   =   df   .   fac3   .   iloc   [   4   :   8   ]   .   mean   ( )   aret2   =   df   .   fac3   .   iloc   [   8   :   12   ]   .   mean   ( )   aret3   =   df   .   fac3   .   iloc   [   12   :   16   ]   .   mean   ( )   aret4   =   df   .   fac3   .   iloc   [   16   : ]   .   mean   ( )   return   ret0   ,   ret1   ,   ret2   ,   ret3   ,   ret4   ,   aret0   ,   aret1   ,   aret2   ,   aret3   ,   aret4   cut   =   Cut   (   ct   ,   ret _ inday   )   cut   .   run   (   cut   .   cut   )   cut0   =   get _ value   (   cut   ( ) ,   0   )   cut1   =   get _ value   (   cut   ( ) ,   1   )   cut2   =   get _ value   (   cut   ( ) ,   2   )   cut3   =   get _ value   (   cut   ( ) ,   3   )   cut4   =   get _ value   (   cut   ( ) ,   4   )   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   class   pure _ dawn   (   object   ) :   \" \" \"   \u56e0\u5b50 \u5207\u5272 \u8bba \u7684 \u6bcd \u6846\u67b6 \uff0c \u53ef\u4ee5 \u5bf9 \u4e24\u4e2a \u56e0\u5b50 \u8fdb\u884c \u7c7b\u4f3c \u4e8e \u56e0\u5b50 \u5207\u5272 \u7684 \u64cd\u4f5c   \u53ef \u7528\u4e8e \u6d3e\u751f \u4efb\u4f55 \" \u4ee5 \u4e24\u4e2a \u56e0\u5b50 \u751f\u6210 \u4e00\u4e2a \u56e0\u5b50 \" \u7684 \u5b50\u7c7b   \u4f7f\u7528 \u4e3e\u4f8b   cut \u51fd\u6570 \u91cc \uff0c \u5fc5\u987b \u5e26\u6709 \u8f93\u5165 \u53d8\u91cf df , df \u6709 \u4e24\u4e2a columns \uff0c \u4e00\u4e2a \u540d\u4e3a ' fac1 ' \uff0c \u4e00\u4e2a \u540d\u4e3a ' fac2 ' \uff0c df \u662f \u6700\u8fd1 \u4e00\u4e2a \u56de\u770b \u671f\u5185 \u7684 \u6570\u636e   ` ` ` python   class   Cut ( pure _ dawn ) :   def   cut ( self , df ) :   df = df . sort _ values ( ' fac1 ' )   df = df . assign ( fac3 = df . fac1 * df . fac2 )   ret0 = df . fac2 . iloc [ : 4 ] . mean ( )   ret1 = df . fac2 . iloc [ 4 : 8 ] . mean ( )   ret2 = df . fac2 . iloc [ 8 : 12 ] . mean ( )   ret3 = df . fac2 . iloc [ 12 : 16 ] . mean ( )   ret4 = df . fac2 . iloc [ 16 : ] . mean ( )   aret0 = df . fac3 . iloc [ : 4 ] . mean ( )   aret1 = df . fac3 . iloc [ 4 : 8 ] . mean ( )   aret2 = df . fac3 . iloc [ 8 : 12 ] . mean ( )   aret3 = df . fac3 . iloc [ 12 : 16 ] . mean ( )   aret4 = df . fac3 . iloc [ 16 : ] . mean ( )   return   ret0 , ret1 , ret2 , ret3 , ret4 , aret0 , aret1 , aret2 , aret3 , aret4   cut = Cut ( ct , ret _ inday )   cut . run ( cut . cut )   cut0 = get _ value ( cut ( ) , 0 )   cut1 = get _ value ( cut ( ) , 1 )   cut2 = get _ value ( cut ( ) , 2 )   cut3 = get _ value ( cut ( ) , 3 )   cut4 = get _ value ( cut ( ) , 4 )   ` ` `   \" \" \"   def   __ init __   (   self   ,   fac1   :   pd   .   DataFrame   ,   fac2   :   pd   .   DataFrame   ,   *   args   :   list   )   - >   None   :   \" \" \" \u51e0\u4e2a \u56e0\u5b50 \u7684 \u64cd\u4f5c \uff0c \u6bcf\u4e2a \u6708 \u64cd\u4f5c \u4e00\u6b21   Parameters   ----------   fac1   :   pd . DataFrame   \u56e0\u5b50 \u503c 1 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   fac2   :   pd . DataFrame   \u56e0\u5b50 2 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   \" \" \"   self   .   fac1   =   fac1   self   .   fac1   =   self   .   fac1   .   stack   ( )   .   reset _ index   ( )   self   .   fac1   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac1 \"   ]   self   .   fac2   =   fac2   self   .   fac2   =   self   .   fac2   .   stack   ( )   .   reset _ index   ( )   self   .   fac2   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac2 \"   ]   fac _ all   =   pd   .   merge   (   self   .   fac1   ,   self   .   fac2   ,   on   =   [   \" date \"   ,   \" code \"   ] )   for   i   ,   fac   in   enumerate   (   args   ) :   fac   =   fac   .   stack   ( )   .   reset _ index   ( )   fac   .   columns   =   [   \" date \"   ,   \" code \"   ,   f   \" fac   {   i   +   3   }   \"   ]   fac _ all   =   pd   .   merge   (   fac _ all   ,   fac   ,   on   =   [   \" date \"   ,   \" code \"   ] )   fac _ all   =   fac _ all   .   sort _ values   ( [   \" date \"   ,   \" code \"   ] )   self   .   fac   =   fac _ all   .   copy   ( )   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u8fd4\u56de \u6700\u7ec8 \u6708\u5ea6 \u56e0\u5b50 \u503c   Returns   -------   ` pd . DataFrame `   \u6700\u7ec8 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   fac   .   copy   ( )   def   get _ fac _ long _ and _ tradedays   (   self   ) :   \" \" \" \u5c06 \u4e24\u4e2a \u56e0\u5b50 \u7684 \u77e9\u9635 \u8f6c\u5316 \u4e3a\u957f \u5217\u8868 \" \" \"   self   .   tradedays   =   sorted   (   list   (   set   (   self   .   fac   .   date   ) ) )   def   get _ month _ starts _ and _ ends   (   self   ,   backsee   =   20   ) :   \" \" \" \u8ba1\u7b97 \u51fa \u6bcf\u4e2a \u6708 \u56de \u770b \u671f\u95f4 \u7684 \u8d77\u70b9 \u65e5 \u548c \u7ec8\u70b9 \u65e5 \" \" \"   self   .   month _ ends   =   [   i   for   i   ,   j   in   zip   (   self   .   tradedays   [ :   -   1   ] ,   self   .   tradedays   [   1   : ] )   if   i   .   month   ! =   j   .   month   ]   self   .   month _ ends   .   append   (   self   .   tradedays   [   -   1   ] )   self   .   month _ starts   =   [   self   .   find _ begin   (   self   .   tradedays   ,   i   ,   backsee   =   backsee   )   for   i   in   self   .   month _ ends   ]   self   .   month _ starts   [   0   ]   =   self   .   tradedays   [   0   ]   def   find _ begin   (   self   ,   tradedays   ,   end _ day   ,   backsee   =   20   ) :   \" \" \" \u627e\u51fa \u56de\u770b \u82e5\u5e72 \u82e5\u5e72\u5929 \u7684 \u5f00\u59cb \u65e5 \uff0c \u9ed8\u8ba4 \u4e3a 20 \" \" \"   end _ day _ index   =   tradedays   .   index   (   end _ day   )   start _ day _ index   =   end _ day _ index   -   backsee   +   1   start _ day   =   tradedays   [   start _ day _ index   ]   return   start _ day   def   make _ monthly _ factors _ single _ code   (   self   ,   df   ,   func   ,   daily   ) :   \" \" \"   \u5bf9 \u5355\u4e00 \u80a1\u7968 \u6765 \u8ba1\u7b97 \u6708\u5ea6 \u56e0\u5b50   func \u4e3a \u5355\u6708 \u6267\u884c \u7684 \u51fd\u6570 \uff0c \u8fd4\u56de \u8fd4\u56de\u503c \u5e94\u4e3a \u6708\u5ea6 \u56e0\u5b50 \uff0c \u5982 \u4e00\u4e2a float \u6216 \u4e00\u4e2a list   df \u4e3a \u4e00\u4e2a \u80a1\u7968 \u7684 \u56db \u5217\u8868 \uff0c \u5305\u542b \u65f6\u95f4 \u3001 \u4ee3\u7801 \u3001 \u56e0\u5b50 1 \u548c \u56e0\u5b50 2   \" \" \"   res   =   { }   if   daily   :   ones   =   [   self   .   find _ begin   (   i   )   for   i   in   self   .   tradedays   [   self   .   backsee   -   1   : ] ]   twos   =   self   .   tradedays   [   self   .   backsee   -   1   : ]   else   :   ones   =   self   .   month _ starts   twos   =   self   .   month _ ends   for   start   ,   end   in   zip   (   ones   ,   twos   ) :   this _ month   =   df   [ (   df   .   date   > =   start   )   &   (   df   .   date   < =   end   ) ]   res   [   end   ]   =   func   (   this _ month   )   dates   =   list   (   res   .   keys   ( ) )   corrs   =   list   (   res   .   values   ( ) )   part   =   pd   .   DataFrame   ( {   \" date \"   :   dates   ,   \" corr \"   :   corrs   } )   return   part   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   return   res   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   return   res   .   fac   return   full _ run   def   get _ monthly _ factor   (   self   ,   func   ,   whole _ cross   :   bool   =   0   ,   daily   :   bool   =   0   ,   history _ file   :   str   =   None   ) :   \" \" \" \u8fd0\u884c \u81ea\u5df1 \u5199 \u7684 \u51fd\u6570 \uff0c \u83b7\u5f97 \u6708\u5ea6 \u56e0\u5b50 \" \" \"   if   daily   :   iter _ item   =   self   .   tradedays   [   self   .   backsee   -   1   : ]   else   :   iter _ item   =   self   .   month _ ends   res   =   [ ]   if   history _ file   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history _ file   ) :   old   =   pd   .   read _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   old _ date   =   old   .   index   .   max   ( )   if   old _ date   = =   self   .   fac   .   date   .   max   ( ) :   logger   .   info   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \uff0c \u65e0\u9700 \u8ba1\u7b97 \"   )   self   .   fac   =   old   else   :   try   :   new _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   old _ date   ,   self   .   backsee   )   fac   =   self   .   fac   [   self   .   fac   .   date   >   new _ date   ]   iter _ item   =   [   i   for   i   in   iter _ item   if   i   >   new _ date   ]   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   =   pd   .   concat   ( [   old   ,   fac   ] )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   fac   =   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   fac   =   (   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   fac   .   columns   ) ]   fac   =   fac   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   =   pd   .   concat   ( [   old   ,   fac   ] )   self   .   fac   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   logger   .   success   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u66f4\u65b0 \u5b8c\u6210 \"   )   except   Exception   :   logger   .   info   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \uff0c \u65e0\u9700 \u8ba1\u7b97 \"   )   else   :   logger   .   info   (   \" \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u8ba1\u7b97 \uff0c \u8bf7 \u8010\u5fc3 \u7b49\u5f85 \u2026 \u2026 \"   )   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   self   .   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   self   .   fac   =   self   .   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   self   .   fac   =   (   self   .   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   self   .   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   fac   .   columns   ) ]   self   .   fac   =   self   .   fac   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   logger   .   success   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u5199\u5165 \u5b8c\u6210 \"   )   else   :   logger   .   warning   (   \" \u60a8 \u672c\u6b21 \u8ba1\u7b97 \u6ca1\u6709 \u6307\u5b9a \u4efb\u4f55 \u672c\u5730 \u6587\u4ef6 \u8def\u5f84 \uff0c \u8fd9 \u5f88 \u53ef\u80fd \u4f1a \u5bfc\u81f4 \u5927\u91cf \u7684 \u91cd\u590d \u8ba1\u7b97 \u548c \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u65f6\u95f4 \u6d6a\u8d39 \uff0c \u8bf7 \u6ce8\u610f \uff01 \"   )   if   daily   :   logger   .   warning   (   \" \u60a8 \u6307\u5b9a \u7684 \u662f \u65e5\u9891 \u8ba1\u7b97 \uff0c \u975e\u6708\u9891 \u8ba1\u7b97 \uff0c \u56e0\u6b64 \u5f3a\u70c8 \u5efa\u8bae \u5f3a\u70c8\u5efa\u8bae \u60a8 \u6307\u5b9a history _ file \u53c2\u6570 \uff01 \uff01 \"   )   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   self   .   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   self   .   fac   =   self   .   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   self   .   fac   =   (   self   .   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   self   .   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   fac   .   columns   ) ]   self   .   fac   =   self   .   fac   .   resample   (   \" M \"   )   .   last   ( )   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u5207\u5272 \u5b8c\u6210 \u5566 \ud83d\udec1 \"   )   def   run   (   self   ,   func   :   Callable   ,   backsee   :   int   =   20   ,   whole _ cross   :   bool   =   0   ,   daily   :   bool   =   0   ,   history _ file   :   str   =   None   ,   )   - >   None   :   \" \" \" \u6267\u884c \u8ba1\u7b97 \u7684 \u6846\u67b6 \uff0c \u4ea7\u751f \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u6bcf\u4e2a \u6708 \u8981 \u8fdb\u884c \u7684 \u64cd\u4f5c   backsee   :   int ,   optional   \u56de \u770b\u671f \uff0c \u5373 \u6bcf\u4e2a \u6708 \u6708\u5e95 \u5bf9 \u8fc7\u53bb \u591a\u5c11 \u5929 \u8fdb\u884c \u8ba1\u7b97 ,   by   default   20   whole _ cross   :   bool ,   optional   \u662f\u5426 \u540c\u65f6 \u53d6 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u6240\u6709 \u80a1\u7968 \u8fdb\u884c \u8ba1\u7b97 ,   by   default   20   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u65e5 \u8ba1\u7b97 ,   by   default   20   history _ file   :   str ,   optional   \u5b58\u50a8 \u5386\u53f2 \u6570\u636e \u5386\u53f2\u6570\u636e \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d ,   by   default   None   \" \" \"   self   .   backsee   =   backsee   self   .   get _ fac _ long _ and _ tradedays   ( )   self   .   get _ month _ starts _ and _ ends   (   backsee   =   backsee   )   self   .   get _ monthly _ factor   (   func   ,   whole _ cross   =   whole _ cross   ,   daily   =   daily   ,   history _ file   =   history _ file   )   __ call __   ( )   \u00b6   \u8fd4\u56de \u6700\u7ec8 \u6708\u5ea6 \u56e0\u5b50 \u503c   Returns   \u00b6   pd . DataFrame   \u6700\u7ec8 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   445   446   447   448   449   450   451   452   453   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u8fd4\u56de \u6700\u7ec8 \u6708\u5ea6 \u56e0\u5b50 \u503c   Returns   -------   ` pd . DataFrame `   \u6700\u7ec8 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   fac   .   copy   ( )   __ init __   (   fac1   ,   fac2   ,   *   args   )   \u00b6   \u51e0\u4e2a \u56e0\u5b50 \u7684 \u64cd\u4f5c \uff0c \u6bcf\u4e2a \u6708 \u64cd\u4f5c \u4e00\u6b21   Parameters   \u00b6   fac1   :   pd . DataFrame   \u56e0\u5b50 \u503c 1 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   fac2   :   pd . DataFrame   \u56e0\u5b50 2 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   def   __ init __   (   self   ,   fac1   :   pd   .   DataFrame   ,   fac2   :   pd   .   DataFrame   ,   *   args   :   list   )   - >   None   :   \" \" \" \u51e0\u4e2a \u56e0\u5b50 \u7684 \u64cd\u4f5c \uff0c \u6bcf\u4e2a \u6708 \u64cd\u4f5c \u4e00\u6b21   Parameters   ----------   fac1   :   pd . DataFrame   \u56e0\u5b50 \u503c 1 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   fac2   :   pd . DataFrame   \u56e0\u5b50 2 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   \" \" \"   self   .   fac1   =   fac1   self   .   fac1   =   self   .   fac1   .   stack   ( )   .   reset _ index   ( )   self   .   fac1   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac1 \"   ]   self   .   fac2   =   fac2   self   .   fac2   =   self   .   fac2   .   stack   ( )   .   reset _ index   ( )   self   .   fac2   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac2 \"   ]   fac _ all   =   pd   .   merge   (   self   .   fac1   ,   self   .   fac2   ,   on   =   [   \" date \"   ,   \" code \"   ] )   for   i   ,   fac   in   enumerate   (   args   ) :   fac   =   fac   .   stack   ( )   .   reset _ index   ( )   fac   .   columns   =   [   \" date \"   ,   \" code \"   ,   f   \" fac   {   i   +   3   }   \"   ]   fac _ all   =   pd   .   merge   (   fac _ all   ,   fac   ,   on   =   [   \" date \"   ,   \" code \"   ] )   fac _ all   =   fac _ all   .   sort _ values   ( [   \" date \"   ,   \" code \"   ] )   self   .   fac   =   fac _ all   .   copy   ( )   find _ begin   (   tradedays   ,   end _ day   ,   backsee   =   20   )   \u00b6   \u627e\u51fa \u56de\u770b \u82e5\u5e72 \u82e5\u5e72\u5929 \u7684 \u5f00\u59cb \u65e5 \uff0c \u9ed8\u8ba4 \u4e3a 20   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   472   473   474   475   476   477   def   find _ begin   (   self   ,   tradedays   ,   end _ day   ,   backsee   =   20   ) :   \" \" \" \u627e\u51fa \u56de\u770b \u82e5\u5e72 \u82e5\u5e72\u5929 \u7684 \u5f00\u59cb \u65e5 \uff0c \u9ed8\u8ba4 \u4e3a 20 \" \" \"   end _ day _ index   =   tradedays   .   index   (   end _ day   )   start _ day _ index   =   end _ day _ index   -   backsee   +   1   start _ day   =   tradedays   [   start _ day _ index   ]   return   start _ day   for _ cross _ via _ zip   (   func   )   staticmethod   \u00b6   \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   Python   1   2   3   4   return   (   pd   .   Series   ( [   1.54   ,   8.77   ,   9.99   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   pd   .   Series   ( [   3.54   ,   6.98   ,   9.01   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   )   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   return   res   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   return   res   .   fac   return   full _ run   get _ fac _ long _ and _ tradedays   ( )   \u00b6   \u5c06 \u4e24\u4e2a \u56e0\u5b50 \u7684 \u77e9\u9635 \u8f6c\u5316 \u4e3a\u957f \u5217\u8868   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   455   456   457   def   get _ fac _ long _ and _ tradedays   (   self   ) :   \" \" \" \u5c06 \u4e24\u4e2a \u56e0\u5b50 \u7684 \u77e9\u9635 \u8f6c\u5316 \u4e3a\u957f \u5217\u8868 \" \" \"   self   .   tradedays   =   sorted   (   list   (   set   (   self   .   fac   .   date   ) ) )   get _ month _ starts _ and _ ends   (   backsee   =   20   )   \u00b6   \u8ba1\u7b97 \u51fa \u6bcf\u4e2a \u6708 \u56de \u770b \u671f\u95f4 \u7684 \u8d77\u70b9 \u65e5 \u548c \u7ec8\u70b9 \u65e5   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   459   460   461   462   463   464   465   466   467   468   469   470   def   get _ month _ starts _ and _ ends   (   self   ,   backsee   =   20   ) :   \" \" \" \u8ba1\u7b97 \u51fa \u6bcf\u4e2a \u6708 \u56de \u770b \u671f\u95f4 \u7684 \u8d77\u70b9 \u65e5 \u548c \u7ec8\u70b9 \u65e5 \" \" \"   self   .   month _ ends   =   [   i   for   i   ,   j   in   zip   (   self   .   tradedays   [ :   -   1   ] ,   self   .   tradedays   [   1   : ] )   if   i   .   month   ! =   j   .   month   ]   self   .   month _ ends   .   append   (   self   .   tradedays   [   -   1   ] )   self   .   month _ starts   =   [   self   .   find _ begin   (   self   .   tradedays   ,   i   ,   backsee   =   backsee   )   for   i   in   self   .   month _ ends   ]   self   .   month _ starts   [   0   ]   =   self   .   tradedays   [   0   ]   get _ monthly _ factor   (   func   ,   whole _ cross   =   0   ,   daily   =   0   ,   history _ file   =   None   )   \u00b6   \u8fd0\u884c \u81ea\u5df1 \u5199 \u7684 \u51fd\u6570 \uff0c \u83b7\u5f97 \u6708\u5ea6 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   def   get _ monthly _ factor   (   self   ,   func   ,   whole _ cross   :   bool   =   0   ,   daily   :   bool   =   0   ,   history _ file   :   str   =   None   ) :   \" \" \" \u8fd0\u884c \u81ea\u5df1 \u5199 \u7684 \u51fd\u6570 \uff0c \u83b7\u5f97 \u6708\u5ea6 \u56e0\u5b50 \" \" \"   if   daily   :   iter _ item   =   self   .   tradedays   [   self   .   backsee   -   1   : ]   else   :   iter _ item   =   self   .   month _ ends   res   =   [ ]   if   history _ file   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history _ file   ) :   old   =   pd   .   read _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   old _ date   =   old   .   index   .   max   ( )   if   old _ date   = =   self   .   fac   .   date   .   max   ( ) :   logger   .   info   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \uff0c \u65e0\u9700 \u8ba1\u7b97 \"   )   self   .   fac   =   old   else   :   try   :   new _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   old _ date   ,   self   .   backsee   )   fac   =   self   .   fac   [   self   .   fac   .   date   >   new _ date   ]   iter _ item   =   [   i   for   i   in   iter _ item   if   i   >   new _ date   ]   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   =   pd   .   concat   ( [   old   ,   fac   ] )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   fac   =   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   fac   =   (   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   fac   .   columns   ) ]   fac   =   fac   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   =   pd   .   concat   ( [   old   ,   fac   ] )   self   .   fac   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   logger   .   success   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u66f4\u65b0 \u5b8c\u6210 \"   )   except   Exception   :   logger   .   info   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \uff0c \u65e0\u9700 \u8ba1\u7b97 \"   )   else   :   logger   .   info   (   \" \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u8ba1\u7b97 \uff0c \u8bf7 \u8010\u5fc3 \u7b49\u5f85 \u2026 \u2026 \"   )   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   self   .   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   self   .   fac   =   self   .   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   self   .   fac   =   (   self   .   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   self   .   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   fac   .   columns   ) ]   self   .   fac   =   self   .   fac   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   logger   .   success   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u5199\u5165 \u5b8c\u6210 \"   )   else   :   logger   .   warning   (   \" \u60a8 \u672c\u6b21 \u8ba1\u7b97 \u6ca1\u6709 \u6307\u5b9a \u4efb\u4f55 \u672c\u5730 \u6587\u4ef6 \u8def\u5f84 \uff0c \u8fd9 \u5f88 \u53ef\u80fd \u4f1a \u5bfc\u81f4 \u5927\u91cf \u7684 \u91cd\u590d \u8ba1\u7b97 \u548c \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u65f6\u95f4 \u6d6a\u8d39 \uff0c \u8bf7 \u6ce8\u610f \uff01 \"   )   if   daily   :   logger   .   warning   (   \" \u60a8 \u6307\u5b9a \u7684 \u662f \u65e5\u9891 \u8ba1\u7b97 \uff0c \u975e\u6708\u9891 \u8ba1\u7b97 \uff0c \u56e0\u6b64 \u5f3a\u70c8 \u5efa\u8bae \u5f3a\u70c8\u5efa\u8bae \u60a8 \u6307\u5b9a history _ file \u53c2\u6570 \uff01 \uff01 \"   )   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   self   .   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   self   .   fac   =   self   .   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   self   .   fac   =   (   self   .   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   self   .   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   fac   .   columns   ) ]   self   .   fac   =   self   .   fac   .   resample   (   \" M \"   )   .   last   ( )   make _ monthly _ factors _ single _ code   (   df   ,   func   ,   daily   )   \u00b6   \u5bf9 \u5355\u4e00 \u80a1\u7968 \u6765 \u8ba1\u7b97 \u6708\u5ea6 \u56e0\u5b50   func \u4e3a \u5355\u6708 \u6267\u884c \u7684 \u51fd\u6570 \uff0c \u8fd4\u56de \u8fd4\u56de\u503c \u5e94\u4e3a \u6708\u5ea6 \u56e0\u5b50 \uff0c \u5982 \u4e00\u4e2a float \u6216 \u4e00\u4e2a list   df \u4e3a \u4e00\u4e2a \u80a1\u7968 \u7684 \u56db \u5217\u8868 \uff0c \u5305\u542b \u65f6\u95f4 \u3001 \u4ee3\u7801 \u3001 \u56e0\u5b50 1 \u548c \u56e0\u5b50 2   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   def   make _ monthly _ factors _ single _ code   (   self   ,   df   ,   func   ,   daily   ) :   \" \" \"   \u5bf9 \u5355\u4e00 \u80a1\u7968 \u6765 \u8ba1\u7b97 \u6708\u5ea6 \u56e0\u5b50   func \u4e3a \u5355\u6708 \u6267\u884c \u7684 \u51fd\u6570 \uff0c \u8fd4\u56de \u8fd4\u56de\u503c \u5e94\u4e3a \u6708\u5ea6 \u56e0\u5b50 \uff0c \u5982 \u4e00\u4e2a float \u6216 \u4e00\u4e2a list   df \u4e3a \u4e00\u4e2a \u80a1\u7968 \u7684 \u56db \u5217\u8868 \uff0c \u5305\u542b \u65f6\u95f4 \u3001 \u4ee3\u7801 \u3001 \u56e0\u5b50 1 \u548c \u56e0\u5b50 2   \" \" \"   res   =   { }   if   daily   :   ones   =   [   self   .   find _ begin   (   i   )   for   i   in   self   .   tradedays   [   self   .   backsee   -   1   : ] ]   twos   =   self   .   tradedays   [   self   .   backsee   -   1   : ]   else   :   ones   =   self   .   month _ starts   twos   =   self   .   month _ ends   for   start   ,   end   in   zip   (   ones   ,   twos   ) :   this _ month   =   df   [ (   df   .   date   > =   start   )   &   (   df   .   date   < =   end   ) ]   res   [   end   ]   =   func   (   this _ month   )   dates   =   list   (   res   .   keys   ( ) )   corrs   =   list   (   res   .   values   ( ) )   part   =   pd   .   DataFrame   ( {   \" date \"   :   dates   ,   \" corr \"   :   corrs   } )   return   part   run   (   func   ,   backsee   =   20   ,   whole _ cross   =   0   ,   daily   =   0   ,   history _ file   =   None   )   \u00b6   \u6267\u884c \u8ba1\u7b97 \u7684 \u6846\u67b6 \uff0c \u4ea7\u751f \u56e0\u5b50 \u503c   Parameters   \u00b6   func   :   Callable   \u6bcf\u4e2a \u6708 \u8981 \u8fdb\u884c \u7684 \u64cd\u4f5c   backsee   :   int ,   optional   \u56de \u770b\u671f \uff0c \u5373 \u6bcf\u4e2a \u6708 \u6708\u5e95 \u5bf9 \u8fc7\u53bb \u591a\u5c11 \u5929 \u8fdb\u884c \u8ba1\u7b97 ,   by   default   20   whole _ cross   :   bool ,   optional   \u662f\u5426 \u540c\u65f6 \u53d6 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u6240\u6709 \u80a1\u7968 \u8fdb\u884c \u8ba1\u7b97 ,   by   default   20   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u65e5 \u8ba1\u7b97 ,   by   default   20   history _ file   :   str ,   optional   \u5b58\u50a8 \u5386\u53f2 \u6570\u636e \u5386\u53f2\u6570\u636e \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d ,   by   default   None   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u5207\u5272 \u5b8c\u6210 \u5566 \ud83d\udec1 \"   )   def   run   (   self   ,   func   :   Callable   ,   backsee   :   int   =   20   ,   whole _ cross   :   bool   =   0   ,   daily   :   bool   =   0   ,   history _ file   :   str   =   None   ,   )   - >   None   :   \" \" \" \u6267\u884c \u8ba1\u7b97 \u7684 \u6846\u67b6 \uff0c \u4ea7\u751f \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u6bcf\u4e2a \u6708 \u8981 \u8fdb\u884c \u7684 \u64cd\u4f5c   backsee   :   int ,   optional   \u56de \u770b\u671f \uff0c \u5373 \u6bcf\u4e2a \u6708 \u6708\u5e95 \u5bf9 \u8fc7\u53bb \u591a\u5c11 \u5929 \u8fdb\u884c \u8ba1\u7b97 ,   by   default   20   whole _ cross   :   bool ,   optional   \u662f\u5426 \u540c\u65f6 \u53d6 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u6240\u6709 \u80a1\u7968 \u8fdb\u884c \u8ba1\u7b97 ,   by   default   20   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u65e5 \u8ba1\u7b97 ,   by   default   20   history _ file   :   str ,   optional   \u5b58\u50a8 \u5386\u53f2 \u6570\u636e \u5386\u53f2\u6570\u636e \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d ,   by   default   None   \" \" \"   self   .   backsee   =   backsee   self   .   get _ fac _ long _ and _ tradedays   ( )   self   .   get _ month _ starts _ and _ ends   (   backsee   =   backsee   )   self   .   get _ monthly _ factor   (   func   ,   whole _ cross   =   whole _ cross   ,   daily   =   daily   ,   history _ file   =   history _ file   )   add _ suffix   (   code   )   \u00b6   \u7ed9 \u6ca1\u6709 \u540e\u7f00 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u52a0\u4e0a wind \u540e\u7f00   Parameters   \u00b6   code   :   str   \u6ca1\u6709 \u540e\u7f00 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Returns   \u00b6   str   \u52a0\u5b8c wind \u540e\u7f00 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   268   269   270   271   272   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   @ do _ on _ dfs   def   add _ suffix   (   code   :   str   )   - >   str   :   \" \" \" \u7ed9 \u6ca1\u6709 \u540e\u7f00 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u52a0\u4e0a wind \u540e\u7f00   Parameters   ----------   code   :   str   \u6ca1\u6709 \u540e\u7f00 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Returns   -------   ` str `   \u52a0\u5b8c wind \u540e\u7f00 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   if   code   .   startswith   (   \" 0 \"   )   or   code   .   startswith   (   \" 3 \"   ) :   code   =   code   +   \" . SZ \"   elif   code   .   startswith   (   \" 6 \"   ) :   code   =   code   +   \" . SH \"   elif   code   .   startswith   (   \" 8 \"   ) :   code   =   code   +   \" . BJ \"   else   :   code   =   code   +   \" . UN \"   return   code   all _ pos   (   df   )   \u00b6   \u5c06 \u56e0\u5b50 \u503c \u6bcf\u4e2a \u622a\u9762 \u4e0a \u51cf\u53bb \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u4ece\u800c \u90fd \u53d8\u6210 \u975e \u8d1f\u6570   Parameters   \u00b6   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   Returns   \u00b6   pd . DataFrame   \u53d8\u5316 \u540e \u975e\u8d1f \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1833   1834   1835   1836   1837   1838   1839   1840   1841   1842   1843   1844   1845   1846   1847   @ do _ on _ dfs   def   all _ pos   (   df   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u5c06 \u56e0\u5b50 \u503c \u6bcf\u4e2a \u622a\u9762 \u4e0a \u51cf\u53bb \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u4ece\u800c \u90fd \u53d8\u6210 \u975e \u8d1f\u6570   Parameters   ----------   df   :   pd . DataFrame   \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   Returns   -------   pd . DataFrame   \u53d8\u5316 \u540e \u975e\u8d1f \u7684 \u56e0\u5b50 \u503c   \" \" \"   return   (   df   .   T   -   df   .   T   .   min   ( ) )   .   T   calcWeightedStd   (   series   ,   weights   )   \u00b6   \u8ba1\u7b97 \u534a\u8870 \u52a0\u6743 \u6807\u51c6 \u6807\u51c6\u5dee   Parameters   \u00b6   series   :   pd . Series   \u76ee\u6807 \u5e8f\u5217   weights   :   Union [ pd . Series , np . ndarray ]   \u6743\u91cd \u5e8f\u5217   Returns   \u00b6   float   \u534a\u8870 \u52a0\u6743 \u6807\u51c6 \u6807\u51c6\u5dee   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1295   1296   1297   1298   1299   1300   1301   1302   1303   1304   1305   1306   1307   1308   1309   1310   1311   1312   @ do _ on _ dfs   def   calcWeightedStd   (   series   :   pd   .   Series   ,   weights   :   Union   [   pd   .   Series   ,   np   .   ndarray   ] )   - >   float   :   \" \" \" \u8ba1\u7b97 \u534a\u8870 \u52a0\u6743 \u6807\u51c6 \u6807\u51c6\u5dee   Parameters   ----------   series   :   pd . Series   \u76ee\u6807 \u5e8f\u5217   weights   :   Union [ pd . Series , np . ndarray ]   \u6743\u91cd \u5e8f\u5217   Returns   -------   ` float `   \u534a\u8870 \u52a0\u6743 \u6807\u51c6 \u6807\u51c6\u5dee   \" \" \"   weights   / =   np   .   sum   (   weights   )   return   np   .   sqrt   (   np   .   sum   ( (   series   -   np   .   mean   (   series   ) )   * *   2   *   weights   ) )   calc _ exp _ list   (   window   ,   half _ life   )   \u00b6   \u751f\u6210 \u534a\u8870 \u5e8f\u5217   Parameters   \u00b6   window   :   int   \u7a97\u53e3 \u7a97\u53e3\u671f   half _ life   :   int   \u534a\u8870\u671f   Returns   \u00b6   np . ndarray   \u534a\u8870 \u5e8f\u5217   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1275   1276   1277   1278   1279   1280   1281   1282   1283   1284   1285   1286   1287   1288   1289   1290   1291   1292   @ do _ on _ dfs   def   calc _ exp _ list   (   window   :   int   ,   half _ life   :   int   )   - >   np   .   ndarray   :   \" \" \" \u751f\u6210 \u534a\u8870 \u5e8f\u5217   Parameters   ----------   window   :   int   \u7a97\u53e3 \u7a97\u53e3\u671f   half _ life   :   int   \u534a\u8870\u671f   Returns   -------   ` np . ndarray `   \u534a\u8870 \u5e8f\u5217   \" \" \"   exp _ wt   =   np   .   asarray   ( [   0.5   * *   (   1   /   half _ life   ) ]   *   window   )   * *   np   .   arange   (   window   )   return   exp _ wt   [ : :   -   1   ]   /   np   .   sum   (   exp _ wt   )   clip   (   df   ,   mad   =   0   ,   three _ sigma   =   0   ,   percentile   =   0   ,   parameter   =   None   )   \u00b6   \u5bf9 \u56e0\u5b50 \u503c \u8fdb\u884c \u622a\u9762 \u53bb \u6781\u503c \u7684 \u64cd\u4f5c   Parameters   \u00b6   df   :   pd . DataFrame   \u8981 \u5904\u7406 \u7684 \u56e0\u5b50 \u8868 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c index \u4e3a \u65f6\u95f4   mad   :   bool ,   optional   \u4f7f\u7528 mad \u6cd5\u53bb \u6781\u503c \uff0c \u5148 \u8ba1\u7b97 \u6240\u6709 \u56e0\u5b50 \u4e0e \u5e73\u5747 \u5747\u503c \u5e73\u5747\u503c \u4e4b\u95f4 \u7684 \u8ddd\u79bb \u603b\u548c \u6765 \u68c0\u6d4b \u79bb\u7fa4 \u503c ,   by   default   0   three _ sigma   :   bool ,   optional   \u6839\u636e \u5747\u503c \u548c \u51e0\u500d \u6807\u51c6 \u6807\u51c6\u5dee \u505a \u8c03\u6574 ,   by   default   0   percentile   :   bool ,   optional   \u6839\u636e \u4e0a \u4e0b\u9650 \u7684 \u5206 \u4f4d\u6570 \u53bb \u6781\u503c ,   by   default   0   parameter   :   Union [ float , tuple ] ,   optional   \u53c2\u6570 \uff0c mad \u548c three _ sigma \u9ed8\u8ba4 \u53c2\u6570 \u4e3a 3 \uff0c \u8f93\u5165 float \u5f62\u5f0f \uff1b \u800c percentile \u9ed8\u8ba4 \u53c2\u6570 \u4e3a ( 0.025 , 0.975 ) \uff0c \u8f93\u5165 tuple \u5f62\u5f0f ,   by   default   None   \u53c2\u8003 \u8d44\u6599 \u53c2\u8003\u8d44\u6599   Returns   \u00b6   pd . DataFrame   \u53bb \u6781\u503c \u540e \u7684 \u53c2\u6570   Raises   \u00b6   ValueError   \u4e0d \u6307\u5b9a \u65b9\u6cd5 \u6216 \u53c2\u6570 \u7c7b\u578b \u9519\u8bef \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1940   1941   1942   1943   1944   1945   1946   1947   1948   1949   1950   1951   1952   1953   1954   1955   1956   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   1977   1978   1979   1980   1981   @ do _ on _ dfs   def   clip   (   df   :   pd   .   DataFrame   ,   mad   :   bool   =   0   ,   three _ sigma   :   bool   =   0   ,   percentile   :   bool   =   0   ,   parameter   :   Union   [   float   ,   tuple   ]   =   None   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56e0\u5b50 \u503c \u8fdb\u884c \u622a\u9762 \u53bb \u6781\u503c \u7684 \u64cd\u4f5c   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5904\u7406 \u7684 \u56e0\u5b50 \u8868 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c index \u4e3a \u65f6\u95f4   mad   :   bool ,   optional   \u4f7f\u7528 mad \u6cd5\u53bb \u6781\u503c \uff0c \u5148 \u8ba1\u7b97 \u6240\u6709 \u56e0\u5b50 \u4e0e \u5e73\u5747 \u5747\u503c \u5e73\u5747\u503c \u4e4b\u95f4 \u7684 \u8ddd\u79bb \u603b\u548c \u6765 \u68c0\u6d4b \u79bb\u7fa4 \u503c ,   by   default   0   three _ sigma   :   bool ,   optional   \u6839\u636e \u5747\u503c \u548c \u51e0\u500d \u6807\u51c6 \u6807\u51c6\u5dee \u505a \u8c03\u6574 ,   by   default   0   percentile   :   bool ,   optional   \u6839\u636e \u4e0a \u4e0b\u9650 \u7684 \u5206 \u4f4d\u6570 \u53bb \u6781\u503c ,   by   default   0   parameter   :   Union [ float , tuple ] ,   optional   \u53c2\u6570 \uff0c mad \u548c three _ sigma \u9ed8\u8ba4 \u53c2\u6570 \u4e3a 3 \uff0c \u8f93\u5165 float \u5f62\u5f0f \uff1b \u800c percentile \u9ed8\u8ba4 \u53c2\u6570 \u4e3a ( 0.025 , 0.975 ) \uff0c \u8f93\u5165 tuple \u5f62\u5f0f ,   by   default   None   [ \u53c2\u8003 \u8d44\u6599 \u53c2\u8003\u8d44\u6599 ] ( https : / / blog . csdn . net / The _ Time _ Runner / article / details / 100118505 )   Returns   -------   pd . DataFrame   \u53bb \u6781\u503c \u540e \u7684 \u53c2\u6570   Raises   ------   ValueError   \u4e0d \u6307\u5b9a \u65b9\u6cd5 \u6216 \u53c2\u6570 \u7c7b\u578b \u9519\u8bef \uff0c \u5c06 \u62a5\u9519   \" \" \"   if   mad   and   ( (   isinstance   (   parameter   ,   float   ) )   or   (   parameter   is   None   ) ) :   return   clip _ mad   (   df   ,   parameter   )   elif   three _ sigma   and   ( (   isinstance   (   parameter   ,   float   ) )   or   (   parameter   is   None   ) ) :   return   clip _ three _ sigma   (   df   ,   parameter   )   elif   percentile   and   ( (   isinstance   (   parameter   ,   tuple   ) )   or   (   parameter   is   None   ) ) :   return   clip _ percentile   (   df   ,   parameter   [   0   ] ,   parameter   [   1   ] )   else   :   raise   ValueError   (   \" \u53c2\u6570 \u8f93\u5165 \u9519\u8bef \"   )   coin _ reverse   (   ret20   ,   vol20   ,   mean   =   1   ,   positive _ negtive   =   0   )   \u00b6   \u7403\u961f \u786c\u5e01 \u6cd5 \uff1a \u6839\u636e vol20 \u7684 \u5927\u5c0f \uff0c \u7ffb\u8f6c \u4e00\u534a ret20 \uff0c \u628a vol20 \u8f83\u5927 \u7684 \u90e8\u5206 \uff0c \u7ed9 ret20 \u6dfb\u52a0 \u8d1f\u53f7   Parameters   \u00b6   ret20   :   pd . DataFrame   \u8981 \u88ab \u7ffb\u8f6c \u7684 \u56e0\u5b50 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   vol20   :   pd . DataFrame   \u7ffb\u8f6c \u7684 \u4f9d\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   mean   :   bool ,   optional   \u4e3a 1 \u5219 \u4ee5 \u662f\u5426 \u5927\u4e8e \u622a\u9762 \u5747\u503c \u4e3a \u6807\u51c6 \u7ffb\u8f6c \uff0c \u5426\u5219 \u4ee5 \u662f\u5426 \u5927\u4e8e \u622a\u9762 \u4f4d\u6570 \u4e2d\u4f4d\u6570 \u4e3a \u6807\u51c6 ,   by   default   1   positive _ negtive   :   bool ,   optional   \u662f\u5426 \u622a\u9762 \u4e0a \u6b63 \u8d1f\u503c \u7684 \u4e24 \u90e8\u5206 \uff0c \u5404 \u7ffb\u8f6c \u4e00\u534a ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u7ffb\u8f6c \u540e \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1149   1150   1151   1152   1153   1154   1155   1156   1157   1158   1159   1160   1161   1162   1163   1164   1165   1166   1167   1168   1169   1170   1171   1172   1173   1174   1175   1176   1177   1178   1179   1180   1181   1182   1183   1184   1185   1186   1187   1188   1189   1190   1191   1192   1193   1194   1195   1196   1197   1198   1199   1200   1201   1202   1203   1204   1205   1206   1207   1208   1209   1210   1211   1212   1213   1214   1215   1216   1217   1218   1219   1220   1221   1222   1223   1224   1225   1226   1227   1228   1229   1230   @ do _ on _ dfs   def   coin _ reverse   (   ret20   :   pd   .   DataFrame   ,   vol20   :   pd   .   DataFrame   ,   mean   :   bool   =   1   ,   positive _ negtive   :   bool   =   0   )   - >   pd   .   DataFrame   :   \" \" \" \u7403\u961f \u786c\u5e01 \u6cd5 \uff1a \u6839\u636e vol20 \u7684 \u5927\u5c0f \uff0c \u7ffb\u8f6c \u4e00\u534a ret20 \uff0c \u628a vol20 \u8f83\u5927 \u7684 \u90e8\u5206 \uff0c \u7ed9 ret20 \u6dfb\u52a0 \u8d1f\u53f7   Parameters   ----------   ret20   :   pd . DataFrame   \u8981 \u88ab \u7ffb\u8f6c \u7684 \u56e0\u5b50 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   vol20   :   pd . DataFrame   \u7ffb\u8f6c \u7684 \u4f9d\u636e \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   mean   :   bool ,   optional   \u4e3a 1 \u5219 \u4ee5 \u662f\u5426 \u5927\u4e8e \u622a\u9762 \u5747\u503c \u4e3a \u6807\u51c6 \u7ffb\u8f6c \uff0c \u5426\u5219 \u4ee5 \u662f\u5426 \u5927\u4e8e \u622a\u9762 \u4f4d\u6570 \u4e2d\u4f4d\u6570 \u4e3a \u6807\u51c6 ,   by   default   1   positive _ negtive   :   bool ,   optional   \u662f\u5426 \u622a\u9762 \u4e0a \u6b63 \u8d1f\u503c \u7684 \u4e24 \u90e8\u5206 \uff0c \u5404 \u7ffb\u8f6c \u4e00\u534a ,   by   default   0   Returns   -------   ` pd . DataFrame `   \u7ffb\u8f6c \u540e \u7684 \u56e0\u5b50 \u503c   \" \" \"   if   positive _ negtive   :   if   not   mean   :   down20   =   np   .   sign   (   ret20   )   down20   =   down20   .   replace   (   1   ,   np   .   nan   )   down20   =   down20   .   replace   (   -   1   ,   1   )   vol20 _ down   =   down20   *   vol20   vol20 _ down   =   (   vol20 _ down   .   T   -   vol20 _ down   .   T   .   median   ( ) )   .   T   vol20 _ down   =   np   .   sign   (   vol20 _ down   )   ret20 _ down   =   ret20   [   ret20   <   0   ]   ret20 _ down   =   vol20 _ down   *   ret20 _ down   up20   =   np   .   sign   (   ret20   )   up20   =   up20   .   replace   (   -   1   ,   np   .   nan   )   vol20 _ up   =   up20   *   vol20   vol20 _ up   =   (   vol20 _ up   .   T   -   vol20 _ up   .   T   .   median   ( ) )   .   T   vol20 _ up   =   np   .   sign   (   vol20 _ up   )   ret20 _ up   =   ret20   [   ret20   >   0   ]   ret20 _ up   =   vol20 _ up   *   ret20 _ up   ret20 _ up   =   ret20 _ up   .   replace   (   np   .   nan   ,   0   )   ret20 _ down   =   ret20 _ down   .   replace   (   np   .   nan   ,   0   )   new _ ret20   =   ret20 _ up   +   ret20 _ down   new _ ret20 _ tr   =   new _ ret20   .   replace   (   0   ,   np   .   nan   )   return   new _ ret20 _ tr   else   :   down20   =   np   .   sign   (   ret20   )   down20   =   down20   .   replace   (   1   ,   np   .   nan   )   down20   =   down20   .   replace   (   -   1   ,   1   )   vol20 _ down   =   down20   *   vol20   vol20 _ down   =   (   vol20 _ down   .   T   -   vol20 _ down   .   T   .   mean   ( ) )   .   T   vol20 _ down   =   np   .   sign   (   vol20 _ down   )   ret20 _ down   =   ret20   [   ret20   <   0   ]   ret20 _ down   =   vol20 _ down   *   ret20 _ down   up20   =   np   .   sign   (   ret20   )   up20   =   up20   .   replace   (   -   1   ,   np   .   nan   )   vol20 _ up   =   up20   *   vol20   vol20 _ up   =   (   vol20 _ up   .   T   -   vol20 _ up   .   T   .   mean   ( ) )   .   T   vol20 _ up   =   np   .   sign   (   vol20 _ up   )   ret20 _ up   =   ret20   [   ret20   >   0   ]   ret20 _ up   =   vol20 _ up   *   ret20 _ up   ret20 _ up   =   ret20 _ up   .   replace   (   np   .   nan   ,   0   )   ret20 _ down   =   ret20 _ down   .   replace   (   np   .   nan   ,   0   )   new _ ret20   =   ret20 _ up   +   ret20 _ down   new _ ret20 _ tr   =   new _ ret20   .   replace   (   0   ,   np   .   nan   )   return   new _ ret20 _ tr   else   :   if   not   mean   :   vol20 _ dummy   =   np   .   sign   ( (   vol20   .   T   -   vol20   .   T   .   median   ( ) )   .   T   )   ret20   =   ret20   *   vol20 _ dummy   return   ret20   else   :   vol20 _ dummy   =   np   .   sign   ( (   vol20   .   T   -   vol20   .   T   .   mean   ( ) )   .   T   )   ret20   =   ret20   *   vol20 _ dummy   return   ret20   convert _ code   (   x   )   \u00b6   \u5c06 \u7c73 \u7b50 \u4ee3\u7801 \u8f6c\u6362 \u4e3a wind \u4ee3\u7801 \uff0c \u5e76 \u8bc6\u522b \u5176\u662f \u80a1\u7968 \u8fd8\u662f \u6307\u6570   Parameters   \u00b6   x   :   str   \u7c73 \u7b50 \u7684 \u80a1\u7968 / \u6307\u6570 \u4ee3\u7801 \uff0c \u4ee5   XSHE   \u6216   XSHG   \u7ed3\u5c3e   Returns   \u00b6   Tuple [ str , str ]   \u8f6c\u6362 \u540e \u7684 \u80a1\u7968 / \u6307\u6570 \u4ee3\u7801 \uff0c \u4ee5\u53ca \u8be5 \u4ee3\u7801 \u5c5e\u4e8e \u80a1\u7968 \u8fd8\u662f \u6307\u6570   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   @ do _ on _ dfs   def   convert _ code   (   x   :   str   )   - >   Tuple   [   str   ,   str   ] :   \" \" \" \u5c06 \u7c73 \u7b50 \u4ee3\u7801 \u8f6c\u6362 \u4e3a wind \u4ee3\u7801 \uff0c \u5e76 \u8bc6\u522b \u5176\u662f \u80a1\u7968 \u8fd8\u662f \u6307\u6570   Parameters   ----------   x   :   str   \u7c73 \u7b50 \u7684 \u80a1\u7968 / \u6307\u6570 \u4ee3\u7801 \uff0c \u4ee5   XSHE   \u6216   XSHG   \u7ed3\u5c3e   Returns   -------   ` Tuple [ str , str ] `   \u8f6c\u6362 \u540e \u7684 \u80a1\u7968 / \u6307\u6570 \u4ee3\u7801 \uff0c \u4ee5\u53ca \u8be5 \u4ee3\u7801 \u5c5e\u4e8e \u80a1\u7968 \u8fd8\u662f \u6307\u6570   \" \" \"   x1   =   x   .   split   (   \" / \"   ) [   -   1   ]   .   split   (   \" . \"   ) [   0   ]   x2   =   x   .   split   (   \" / \"   ) [   -   1   ]   .   split   (   \" . \"   ) [   1   ]   if   x2   = =   \" XSHE \"   :   x2   =   \" . SZ \"   elif   x2   = =   \" XSHG \"   :   x2   =   \" . SH \"   elif   x2   = =   \" SZ \"   :   x2   =   \" . XSHE \"   elif   x2   = =   \" SH \"   :   x2   =   \" . XSHG \"   x   =   x1   +   x2   if   (   x1   [   0   ]   = =   \" 0 \"   or   x1   [ :   2   ]   = =   \" 30 \"   )   and   x2   in   [   \" . SZ \"   ,   \" . XSHE \"   ] :   kind   =   \" stock \"   elif   x1   [   0   ]   = =   \" 6 \"   and   x2   in   [   \" . SH \"   ,   \" . XSHG \"   ] :   kind   =   \" stock \"   else   :   kind   =   \" index \"   return   x   ,   kind   corr _ two _ daily   (   df1   ,   df2   ,   history   =   None   ,   rolling _ window   =   20   ,   n _ jobs   =   1   ,   daily   =   1   ,   method   =   ' pearson '   )   \u00b6   \u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Parameters   \u00b6   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   history   :   str ,   optional   \u4ece \u67d0\u5904 \u8bfb\u53d6 \u8ba1\u7b97 \u597d \u7684 \u5386\u53f2 \u6587\u4ef6   rolling _ window   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 ,   by   default   20   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u5929 \u8ba1\u7b97 ,   by   default   1   method   :   str ,   optional   \u4f7f\u7528 \u54ea \u79cd \u65b9\u6cd5 \u8ba1\u7b97 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 ,   by   default   ' pearson '   Returns   \u00b6   pd . DataFrame   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u540e \u7684 \u7ed3\u679c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   694   695   696   697   698   699   700   701   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   719   720   721   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   740   741   742   743   744   745   746   747   748   749   750   751   752   753   754   755   756   757   758   759   760   761   762   763   764   765   766   767   768   769   770   771   772   773   774   775   776   def   corr _ two _ daily   (   df1   :   pd   .   DataFrame   ,   df2   :   pd   .   DataFrame   ,   history   :   str   =   None   ,   rolling _ window   :   int   =   20   ,   n _ jobs   :   int   =   1   ,   daily   :   bool   =   1   ,   method   :   str   =   \" pearson \"   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Parameters   ----------   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   history   :   str ,   optional   \u4ece \u67d0\u5904 \u8bfb\u53d6 \u8ba1\u7b97 \u597d \u7684 \u5386\u53f2 \u6587\u4ef6   rolling _ window   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 ,   by   default   20   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u5929 \u8ba1\u7b97 ,   by   default   1   method   :   str ,   optional   \u4f7f\u7528 \u54ea \u79cd \u65b9\u6cd5 \u8ba1\u7b97 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 ,   by   default   ' pearson '   Returns   -------   pd . DataFrame   \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u540e \u7684 \u7ed3\u679c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   if   daily   :   if   method   = =   \" pearson \"   :   def   corr _ in   (   a   ,   b   ,   c   ) :   return   c   .   iloc   [   -   1   ] ,   np   .   corrcoef   (   a   ,   b   ) [   0   ,   1   ]   return   func _ two _ daily   (   df1   =   df1   ,   df2   =   df2   ,   func   =   corr _ in   ,   history   =   history   ,   rolling _ window   =   rolling _ window   ,   n _ jobs   =   n _ jobs   ,   )   elif   method   = =   \" spearman \"   :   def   corr _ in   (   a   ,   b   ,   c   ) :   return   c   .   iloc   [   -   1   ] ,   np   .   corrcoef   (   np   .   argsort   (   a   ) ,   np   .   argsort   (   b   ) ) [   0   ,   1   ]   return   func _ two _ daily   (   df1   =   df1   ,   df2   =   df2   ,   func   =   corr _ in   ,   history   =   history   ,   rolling _ window   =   rolling _ window   ,   n _ jobs   =   n _ jobs   ,   )   else   :   raise   ValueError   (   \" \u60a8 \u8f93\u5165 \u7684 \u65b9\u6cd5 \u6682 \u4e0d \u652f\u6301 \"   )   else   :   if   method   = =   \" pearson \"   :   class   Cut   (   pure _ dawn   ) :   def   cut   (   self   ,   df   :   pd   .   DataFrame   ) :   return   df   [ [   \" fac1 \"   ,   \" fac2 \"   ] ]   .   corr   ( )   .   iloc   [   0   ,   1   ]   cut   =   Cut   (   df1   ,   df2   )   cut   .   run   (   cut   .   cut   ,   backsee   =   rolling _ window   ,   history _ file   =   history   )   return   cut   ( )   elif   method   = =   \" spearman \"   :   class   Cut   (   pure _ dawn   ) :   def   cut   (   self   ,   df   :   pd   .   DataFrame   ) :   return   df   [ [   \" fac1 \"   ,   \" fac2 \"   ] ]   .   rank   ( )   .   corr   ( )   .   iloc   [   0   ,   1   ]   cut   =   Cut   (   df1   ,   df2   )   cut   .   run   (   cut   .   cut   ,   backsee   =   rolling _ window   ,   history _ file   =   history   )   return   cut   ( )   else   :   raise   ValueError   (   \" \u60a8 \u8f93\u5165 \u7684 \u65b9\u6cd5 \u6682 \u4e0d \u652f\u6301 \"   )   count _ value   (   df   ,   with _ zero   =   0   )   \u00b6   \u8ba1\u7b97 dataframe \u4e2d \u603b\u5171 \u6709 \u591a\u5c11 \uff08 \u975e 0 \uff09 \u975e\u7a7a \u7684 \u503c   Parameters   \u00b6   df   :   pd . DataFrame   \u8981 \u68c0\u6d4b \u7684 dataframe   with _ zero   :   bool ,   optional   \u7edf\u8ba1 \u6570\u91cf \u65f6 \uff0c \u662f\u5426 \u4e5f \u628a \u503c \u4e3a 0 \u7684 \u6570\u636e \u7edf\u8ba1 \u8fdb\u53bb ,   by   default   0   Returns   \u00b6   int   \uff08 \u975e 0 \uff09 \u975e\u7a7a \u7684 \u6570\u636e \u7684 \u4e2a\u6570   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1055   1056   1057   1058   1059   1060   1061   1062   1063   1064   1065   1066   1067   1068   1069   1070   1071   1072   1073   1074   @ do _ on _ dfs   def   count _ value   (   df   :   pd   .   DataFrame   ,   with _ zero   :   bool   =   0   )   - >   int   :   \" \" \" \u8ba1\u7b97 dataframe \u4e2d \u603b\u5171 \u6709 \u591a\u5c11 \uff08 \u975e 0 \uff09 \u975e\u7a7a \u7684 \u503c   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u68c0\u6d4b \u7684 dataframe   with _ zero   :   bool ,   optional   \u7edf\u8ba1 \u6570\u91cf \u65f6 \uff0c \u662f\u5426 \u4e5f \u628a \u503c \u4e3a 0 \u7684 \u6570\u636e \u7edf\u8ba1 \u8fdb\u53bb ,   by   default   0   Returns   -------   int   \uff08 \u975e 0 \uff09 \u975e\u7a7a \u7684 \u6570\u636e \u7684 \u4e2a\u6570   \" \" \"   y   =   np   .   sign   (   np   .   abs   (   df   ) )   if   with _ zero   :   y   =   np   .   sign   (   y   +   1   )   return   y   .   sum   ( )   .   sum   ( )   cov _ two _ daily   (   df1   ,   df2   ,   history   =   None   ,   rolling _ window   =   20   ,   n _ jobs   =   1   ,   daily   =   1   )   \u00b6   \u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u65b9\u5dee \u534f\u65b9\u5dee   Parameters   \u00b6   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   history   :   str ,   optional   \u4ece \u67d0\u5904 \u8bfb\u53d6 \u8ba1\u7b97 \u597d \u7684 \u5386\u53f2 \u6587\u4ef6   rolling _ window   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 ,   by   default   20   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u5929 \u8ba1\u7b97 ,   by   default   1   Returns   \u00b6   pd . DataFrame   \u6c42 \u65b9\u5dee \u534f\u65b9\u5dee \u540e \u7684 \u7ed3\u679c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   779   780   781   782   783   784   785   786   787   788   789   790   791   792   793   794   795   796   797   798   799   800   801   802   803   804   805   806   807   808   809   810   811   812   813   814   815   816   817   818   819   820   821   822   823   824   825   826   827   828   829   830   def   cov _ two _ daily   (   df1   :   pd   .   DataFrame   ,   df2   :   pd   .   DataFrame   ,   history   :   str   =   None   ,   rolling _ window   :   int   =   20   ,   n _ jobs   :   int   =   1   ,   daily   :   bool   =   1   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u65b9\u5dee \u534f\u65b9\u5dee   Parameters   ----------   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   history   :   str ,   optional   \u4ece \u67d0\u5904 \u8bfb\u53d6 \u8ba1\u7b97 \u597d \u7684 \u5386\u53f2 \u6587\u4ef6   rolling _ window   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 ,   by   default   20   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u5929 \u8ba1\u7b97 ,   by   default   1   Returns   -------   pd . DataFrame   \u6c42 \u65b9\u5dee \u534f\u65b9\u5dee \u540e \u7684 \u7ed3\u679c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   if   daily   :   def   cov _ in   (   a   ,   b   ,   c   ) :   return   c   .   iloc   [   -   1   ] ,   np   .   cov   (   a   ,   b   ) [   0   ,   1   ]   return   func _ two _ daily   (   df1   =   df1   ,   df2   =   df2   ,   func   =   cov _ in   ,   history   =   history   ,   rolling _ window   =   rolling _ window   ,   n _ jobs   =   n _ jobs   ,   )   else   :   class   Cut   (   pure _ dawn   ) :   def   cut   (   self   ,   df   :   pd   .   DataFrame   ) :   return   df   [ [   \" fac1 \"   ,   \" fac2 \"   ] ]   .   cov   ( )   .   iloc   [   0   ,   1   ]   cut   =   Cut   (   df1   ,   df2   )   cut   .   run   (   cut   .   cut   ,   backsee   =   rolling _ window   ,   history _ file   =   history   )   return   cut   ( )   debj   (   df   )   \u00b6   \u53bb\u9664 \u56e0\u5b50 \u4e2d \u7684 \u5317\u4ea4\u6240 \u6570\u636e   Parameters   \u00b6   df   :   pd . DataFrame   \u5305\u542b \u5317\u4ea4\u6240 \u7684 \u56e0\u5b50 dataframe \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Returns   \u00b6   pd . DataFrame   \u53bb\u9664 \u5317\u4ea4\u6240 \u80a1\u7968 \u7684 \u56e0\u5b50 dataframe   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1015   1016   1017   1018   1019   1020   1021   1022   1023   1024   1025   1026   1027   1028   1029   1030   @ do _ on _ dfs   def   debj   (   df   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u53bb\u9664 \u56e0\u5b50 \u4e2d \u7684 \u5317\u4ea4\u6240 \u6570\u636e   Parameters   ----------   df   :   pd . DataFrame   \u5305\u542b \u5317\u4ea4\u6240 \u7684 \u56e0\u5b50 dataframe \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Returns   -------   pd . DataFrame   \u53bb\u9664 \u5317\u4ea4\u6240 \u80a1\u7968 \u7684 \u56e0\u5b50 dataframe   \" \" \"   df   =   df   [ [   i   for   i   in   list   (   df   .   columns   )   if   i   [   0   ]   in   [   \" 0 \"   ,   \" 3 \"   ,   \" 6 \"   ] ] ]   return   df   detect _ nan   (   df   )   \u00b6   \u68c0\u67e5 \u4e00\u4e2a pd . DataFrame \u4e2d \u662f\u5426 \u5b58\u5728 \u7a7a\u503c   Parameters   \u00b6   df   :   pd . DataFrame   \u5f85 \u68c0\u67e5 \u7684 pd . DataFrame   Returns   \u00b6   bool   \u68c0\u67e5 \u7ed3\u679c \uff0c \u6709 \u7a7a\u503c \u4e3a True \uff0c \u5426\u5219 \u4e3a False   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1077   1078   1079   1080   1081   1082   1083   1084   1085   1086   1087   1088   1089   1090   1091   1092   1093   1094   1095   1096   1097   @ do _ on _ dfs   def   detect _ nan   (   df   :   pd   .   DataFrame   )   - >   bool   :   \" \" \" \u68c0\u67e5 \u4e00\u4e2a pd . DataFrame \u4e2d \u662f\u5426 \u5b58\u5728 \u7a7a\u503c   Parameters   ----------   df   :   pd . DataFrame   \u5f85 \u68c0\u67e5 \u7684 pd . DataFrame   Returns   -------   ` bool `   \u68c0\u67e5 \u7ed3\u679c \uff0c \u6709 \u7a7a\u503c \u4e3a True \uff0c \u5426\u5219 \u4e3a False   \" \" \"   x   =   df   .   isna   ( )   +   0   if   x   .   sum   ( )   .   sum   ( ) :   print   (   \" \u5b58\u5728 \u7a7a\u503c \"   )   return   True   else   :   print   (   \" \u4e0d \u5b58\u5728 \u7a7a\u503c \"   )   return   False   drop _ duplicates _ index   (   new   )   \u00b6   \u5bf9 dataframe \u4f9d\u7167 \u5176 index \u8fdb\u884c \u53bb \u91cd \uff0c \u5e76 \u4fdd\u7559 \u6700 \u4e0a\u9762 \u7684 \u884c   Parameters   \u00b6   new   :   pd . DataFrame   \u8981 \u53bb \u91cd \u7684 dataframe   Returns   \u00b6   pd . DataFrame   \u53bb \u91cd\u540e \u7684 dataframe   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   947   948   949   950   951   952   953   954   955   956   957   958   959   960   961   962   963   964   965   966   967   968   969   970   971   972   973   974   975   976   @ do _ on _ dfs   def   drop _ duplicates _ index   (   new   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 dataframe \u4f9d\u7167 \u5176 index \u8fdb\u884c \u53bb \u91cd \uff0c \u5e76 \u4fdd\u7559 \u6700 \u4e0a\u9762 \u7684 \u884c   Parameters   ----------   new   :   pd . DataFrame   \u8981 \u53bb \u91cd \u7684 dataframe   Returns   -------   pd . DataFrame   \u53bb \u91cd\u540e \u7684 dataframe   \" \" \"   pri _ name   =   new   .   index   .   name   new   =   new   .   reset _ index   ( )   new   =   new   .   rename   (   columns   =   {   list   (   new   .   columns   ) [   0   ] :   \" tmp _ name _ for _ this _ function _ never _ same _ to _ others \"   }   )   new   =   new   .   drop _ duplicates   (   subset   =   [   \" tmp _ name _ for _ this _ function _ never _ same _ to _ others \"   ] ,   keep   =   \" first \"   )   new   =   new   .   set _ index   (   \" tmp _ name _ for _ this _ function _ never _ same _ to _ others \"   )   if   pri _ name   = =   \" tmp _ name _ for _ this _ function _ never _ same _ to _ others \"   :   new   .   index   .   name   =   \" date \"   else   :   new   .   index   .   name   =   pri _ name   return   new   feather _ to _ parquet   (   folder   )   \u00b6   \u5c06 \u67d0\u4e2a \u8def\u5f84 \u4e0b \u7684 \u6240\u6709 feather \u6587\u4ef6 \u90fd \u8f6c\u5316 \u4e3a parquet \u6587\u4ef6   Parameters   \u00b6   folder   :   str   \u8981 \u8f6c\u5316 \u7684 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u8def\u5f84   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1424   1425   1426   1427   1428   1429   1430   1431   1432   1433   1434   1435   1436   1437   1438   1439   1440   1441   1442   1443   1444   @ do _ on _ dfs   def   feather _ to _ parquet   (   folder   :   str   ) :   \" \" \" \u5c06 \u67d0\u4e2a \u8def\u5f84 \u4e0b \u7684 \u6240\u6709 feather \u6587\u4ef6 \u90fd \u8f6c\u5316 \u4e3a parquet \u6587\u4ef6   Parameters   ----------   folder   :   str   \u8981 \u8f6c\u5316 \u7684 \u6587\u4ef6 \u4ef6\u5939 \u6587\u4ef6\u5939 \u8def\u5f84   \" \" \"   files   =   os   .   listdir   (   folder   )   files   =   [   folder   +   i   for   i   in   files   ]   for   file   in   tqdm   .   auto   .   tqdm   (   files   ) :   try   :   df   =   pd   .   read _ feather   (   file   )   if   ( (   \" date \"   in   list   (   df   .   columns   ) )   and   (   \" code \"   not   in   list   (   df   .   columns   ) ) )   or   (   \" index \"   in   list   (   df   .   columns   )   ) :   df   =   df   .   set _ index   (   list   (   df   .   columns   ) [   0   ] )   df   .   to _ parquet   (   file   .   split   (   \" . \"   ) [   0   ]   +   \" . parquet \"   )   except   Exception   :   logger   .   warning   (   f   \"   {   file   }   \u4e0d\u662f parquet \u6587\u4ef6 \"   )   feather _ to _ parquet _ all   ( )   \u00b6   \u5c06 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u6240\u6709 \u7684 feather \u6587\u4ef6 \u90fd \u8f6c\u5316 \u4e3a parquet \u6587\u4ef6   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1447   1448   1449   1450   1451   1452   1453   1454   1455   def   feather _ to _ parquet _ all   ( ) :   \" \" \" \u5c06 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u6240\u6709 \u7684 feather \u6587\u4ef6 \u90fd \u8f6c\u5316 \u4e3a parquet \u6587\u4ef6 \" \" \"   homeplace   =   HomePlace   ( )   feather _ to _ parquet   (   homeplace   .   daily _ data _ file   )   feather _ to _ parquet   (   homeplace   .   barra _ data _ file   )   feather _ to _ parquet   (   homeplace   .   final _ factor _ file   )   feather _ to _ parquet   (   homeplace   .   update _ data _ file   )   feather _ to _ parquet   (   homeplace   .   factor _ data _ file   )   logger   .   success   (   \" \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u7684 feather \u6587\u4ef6 \u5168\u90e8 \u88ab \u8f6c\u5316 \u4e3a\u4e86 parquet \u6587\u4ef6 \uff0c \u60a8 \u53ef\u4ee5 \u624b\u52a8 \u5220\u9664 \u6240\u6709 \u7684 feather \u6587\u4ef6 \u4e86 \"   )   func _ two _ daily   (   df1   ,   df2   ,   func   ,   history   =   None   ,   rolling _ window   =   20   ,   n _ jobs   =   1   )   \u00b6   \u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Parameters   \u00b6   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   func   :   Callable   \u8981 \u5bf9 \u4e24\u5217 \u6570 \u8fdb\u884c \u64cd\u4f5c \u7684 \u51fd\u6570   history   :   str ,   optional   \u4ece \u67d0\u5904 \u8bfb\u53d6 \u8ba1\u7b97 \u597d \u7684 \u5386\u53f2 \u6587\u4ef6   rolling _ window   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 ,   by   default   20   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   Returns   \u00b6   pd . DataFrame   \u8ba1\u7b97 \u540e \u7684 \u7ed3\u679c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   833   834   835   836   837   838   839   840   841   842   843   844   845   846   847   848   849   850   851   852   853   854   855   856   857   858   859   860   861   862   863   864   865   866   867   868   869   870   871   872   873   874   875   876   877   878   879   880   881   882   883   884   885   886   887   888   889   890   891   892   893   894   895   896   897   898   899   900   901   902   903   904   905   906   907   908   909   910   911   912   913   914   915   916   917   918   919   920   921   922   923   924   925   926   927   928   929   930   931   932   933   934   935   936   937   938   939   940   941   942   943   944   def   func _ two _ daily   (   df1   :   pd   .   DataFrame   ,   df2   :   pd   .   DataFrame   ,   func   :   Callable   ,   history   :   str   =   None   ,   rolling _ window   :   int   =   20   ,   n _ jobs   :   int   =   1   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570   Parameters   ----------   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   func   :   Callable   \u8981 \u5bf9 \u4e24\u5217 \u6570 \u8fdb\u884c \u64cd\u4f5c \u7684 \u51fd\u6570   history   :   str ,   optional   \u4ece \u67d0\u5904 \u8bfb\u53d6 \u8ba1\u7b97 \u597d \u7684 \u5386\u53f2 \u6587\u4ef6   rolling _ window   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 ,   by   default   20   n _ jobs   :   int ,   optional   \u5e76\u884c \u6570\u91cf ,   by   default   1   Returns   -------   pd . DataFrame   \u8ba1\u7b97 \u540e \u7684 \u7ed3\u679c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   \" \" \"   the _ func   =   partial   (   func   )   def   func _ rolling   (   df   ) :   df   =   df   .   sort _ values   ( [   \" date \"   ] )   if   df   .   shape   [   0   ]   >   rolling _ window   :   df   =   npext   .   rolling _ apply   (   the _ func   ,   rolling _ window   ,   df   .   fac1   ,   df   .   fac2   ,   df   .   date   ,   n _ jobs   =   n _ jobs   )   return   df   homeplace   =   HomePlace   ( )   if   history   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history   ) :   old   =   pd   .   read _ parquet   (   homeplace   .   update _ data _ file   +   history   )   new _ end   =   min   (   df1   .   index   .   max   ( ) ,   df2   .   index   .   max   ( ) )   if   new _ end   >   old   .   index   .   max   ( ) :   old _ end   =   datetime   .   datetime   .   strftime   (   old   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u4e0a\u6b21 \u66f4\u65b0 \u5230 \u4e86   {   old _ end   }   \"   )   df1a   =   df1   [   df1   .   index   < =   old   .   index   .   max   ( ) ]   .   tail   (   rolling _ window   -   1   )   df1b   =   df1   [   df1   .   index   >   old   .   index   .   max   ( ) ]   df1   =   pd   .   concat   ( [   df1a   ,   df1b   ] )   df2a   =   df2   [   df2   .   index   < =   old   .   index   .   max   ( ) ]   .   tail   (   rolling _ window   -   1   )   df2b   =   df2   [   df2   .   index   >   old   .   index   .   max   ( ) ]   df2   =   pd   .   concat   ( [   df2a   ,   df2b   ] )   twins   =   merge _ many   ( [   df1   ,   df2   ] )   tqdm   .   auto   .   tqdm   .   pandas   ( )   corrs   =   twins   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   func _ rolling   )   cor   =   [ ]   for   i   in   range   (   len   (   corrs   ) ) :   df   =   (   pd   .   DataFrame   (   corrs   .   iloc   [   i   ] )   .   dropna   ( )   .   assign   (   code   =   corrs   .   index   [   i   ] )   )   cor   .   append   (   df   )   cors   =   pd   .   concat   (   cor   )   cors   .   columns   =   [   \" date \"   ,   \" corr \"   ,   \" code \"   ]   cors   =   cors   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" corr \"   )   if   history   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history   ) :   cors   =   pd   .   concat   ( [   old   ,   cors   ] )   cors   =   drop _ duplicates _ index   (   cors   )   cors   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history   )   new _ end   =   datetime   .   datetime   .   strftime   (   cors   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5df2\u7ecf \u66f4\u65b0 \u81f3   {   new _ end   }   \"   )   return   cors   else   :   logger   .   info   (   f   \" \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   return   old   else   :   logger   .   info   (   \" \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u8ba1\u7b97 \uff0c \u8bf7 \u8010\u5fc3 \u7b49\u5f85 \uff0c \u8ba1\u7b97 \u5b8c\u6210 \u540e \u5c06 \u5b58\u50a8 \"   )   twins   =   merge _ many   ( [   df1   ,   df2   ] )   tqdm   .   auto   .   tqdm   .   pandas   ( )   corrs   =   twins   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   func _ rolling   )   cor   =   [ ]   for   i   in   range   (   len   (   corrs   ) ) :   df   =   pd   .   DataFrame   (   corrs   .   iloc   [   i   ] )   .   dropna   ( )   .   assign   (   code   =   corrs   .   index   [   i   ] )   cor   .   append   (   df   )   cors   =   pd   .   concat   (   cor   )   cors   .   columns   =   [   \" date \"   ,   \" corr \"   ,   \" code \"   ]   cors   =   cors   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" corr \"   )   if   history   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history   ) :   cors   =   pd   .   concat   ( [   old   ,   cors   ] )   cors   =   drop _ duplicates _ index   (   cors   )   cors   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history   )   new _ end   =   datetime   .   datetime   .   strftime   (   cors   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u5df2\u7ecf \u66f4\u65b0 \u81f3   {   new _ end   }   \"   )   return   cors   else   :   logger   .   warning   (   \" \u60a8 \u672c\u6b21 \u8ba1\u7b97 \u6ca1\u6709 \u6307\u5b9a \u4efb\u4f55 \u672c\u5730 \u6587\u4ef6 \u8def\u5f84 \uff0c \u8fd9 \u5f88 \u53ef\u80fd \u4f1a \u5bfc\u81f4 \u5927\u91cf \u7684 \u91cd\u590d \u8ba1\u7b97 \u548c \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u65f6\u95f4 \u6d6a\u8d39 \uff0c \u8bf7 \u6ce8\u610f \uff01 \"   )   twins   =   merge _ many   ( [   df1   ,   df2   ] )   tqdm   .   auto   .   tqdm   .   pandas   ( )   corrs   =   twins   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   func _ rolling   )   cor   =   [ ]   for   i   in   range   (   len   (   corrs   ) ) :   df   =   pd   .   DataFrame   (   corrs   .   iloc   [   i   ] )   .   dropna   ( )   .   assign   (   code   =   corrs   .   index   [   i   ] )   cor   .   append   (   df   )   cors   =   pd   .   concat   (   cor   )   cors   .   columns   =   [   \" date \"   ,   \" corr \"   ,   \" code \"   ]   cors   =   cors   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" corr \"   )   return   cors   get _ abs   (   df   ,   quantile   =   None   ,   square   =   0   )   \u00b6   \u5747\u503c \u8ddd\u79bb \u5316 \uff1a \u8ba1\u7b97 \u56e0\u5b50 \u4e0e \u622a\u9762 \u5747\u503c \u7684 \u8ddd\u79bb   Parameters   \u00b6   df   :   pd . DataFrame   \u672a \u5747\u503c \u8ddd\u79bb \u5316 \u7684 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   quantile   :   bool ,   optional   \u4e3a 1 \u5219 \u8ba1\u7b97 \u5230 \u67d0\u4e2a \u5206 \u4f4d\u70b9 \u7684 \u8ddd\u79bb ,   by   default   None   square   :   bool ,   optional   \u4e3a 1 \u5219 \u8ba1\u7b97 \u8ddd\u79bb \u7684 \u5e73\u65b9 ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u5747\u503c \u8ddd\u79bb \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1100   1101   1102   1103   1104   1105   1106   1107   1108   1109   1110   1111   1112   1113   1114   1115   1116   1117   1118   1119   1120   1121   1122   1123   1124   1125   1126   1127   @ do _ on _ dfs   def   get _ abs   (   df   :   pd   .   DataFrame   ,   quantile   :   float   =   None   ,   square   :   bool   =   0   )   - >   pd   .   DataFrame   :   \" \" \" \u5747\u503c \u8ddd\u79bb \u5316 \uff1a \u8ba1\u7b97 \u56e0\u5b50 \u4e0e \u622a\u9762 \u5747\u503c \u7684 \u8ddd\u79bb   Parameters   ----------   df   :   pd . DataFrame   \u672a \u5747\u503c \u8ddd\u79bb \u5316 \u7684 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   quantile   :   bool ,   optional   \u4e3a 1 \u5219 \u8ba1\u7b97 \u5230 \u67d0\u4e2a \u5206 \u4f4d\u70b9 \u7684 \u8ddd\u79bb ,   by   default   None   square   :   bool ,   optional   \u4e3a 1 \u5219 \u8ba1\u7b97 \u8ddd\u79bb \u7684 \u5e73\u65b9 ,   by   default   0   Returns   -------   ` pd . DataFrame `   \u5747\u503c \u8ddd\u79bb \u5316 \u4e4b\u540e \u7684 \u56e0\u5b50 \u503c   \" \" \"   if   not   square   :   if   quantile   is   not   None   :   return   np   .   abs   ( (   df   .   T   -   df   .   T   .   quantile   (   quantile   ) )   .   T   )   else   :   return   np   .   abs   ( (   df   .   T   -   df   .   T   .   mean   ( ) )   .   T   )   else   :   if   quantile   is   not   None   :   return   ( (   df   .   T   -   df   .   T   .   quantile   (   quantile   ) )   .   T   )   * *   2   else   :   return   ( (   df   .   T   -   df   .   T   .   mean   ( ) )   .   T   )   * *   2   get _ fac _ cross _ via _ func   (   df   ,   func   ,   history _ file   =   None   ,   backsee   =   20   ,   fillna _ method   =   ' ffill '   ,   daily   =   0   )   \u00b6   \u5bf9 \u4e00\u4e2a \u65e5\u9891 \u56e0\u5b50 \uff0c \u5bf9 \u5176 \u6eda\u52a8 \u65f6\u95f4 \u7a97\u53e3 \u8fdb\u884c \u56e0\u5b50 \u6708\u5ea6 \u5316 \u8ba1\u7b97 \u3002   \u5177\u4f53 \u4f53\u64cd \u64cd\u4f5c \u5177\u4f53\u64cd\u4f5c \u4e3a \u6bcf\u5929 \uff08 \u6216 \u6bcf\u6708 \u6708\u5e95 \uff09 \u622a\u53d6 \u8fc7\u53bb \u4e00\u6bb5 \u7a97\u53e3 \uff0c \u5e76 \u8fdb\u884c \u67d0\u4e2a \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u7684 \u64cd\u4f5c \uff0c   Parameters   \u00b6   df   :   pd . DataFrame   \u65e5\u9891 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u65f6\u95f4   func   :   Callable   \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u7684 \u64cd\u4f5c \u51fd\u6570 \uff0c \u9700\u8981 \u5bf9 \u4e00\u4e2a \u7a97\u53e3 \u65f6\u95f4 \u5185 \u7684 \u9762\u677f \u6570\u636e \u8fdb\u884c \u5904\u7406 \uff0c \u6700\u7ec8 \u8981 \u8fd4\u56de \u4e00\u4e2a series \uff0c index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u6708\u5ea6 \u5316 \u7684 \u56e0\u5b50 \u503c \uff0c name \u65e0\u6240 \u6240\u8c13 \u65e0\u6240\u8c13   history _ file   :   str ,   optional   \u7528\u4e8e \u5b58\u50a8 \u5386\u53f2 \u6570\u636e \u5386\u53f2\u6570\u636e \u7684 \u672c\u5730 \u6587\u4ef6 ,   by   default   None   backsee   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 \u957f\u5ea6 ,   by   default   20   fillna _ method   :   Union [ float ,   str ] ,   optional   \u5bf9 \u7f3a\u5931 \u503c \u8fdb\u884c \u8865\u5168 \uff0c \u53ef \u9009\u62e9 \u8865\u5168 \u65b9\u5f0f \uff0c \u8f93\u5165   ' ffill '   \u6216   ' bfill '   \u5373\u4e3a \u53d6\u524d \u53d6\u540e \u586b\u5145 \uff1b \u8f93\u5165 \u6570\u5b57 \u5219 \u4e3a \u7528 \u56fa\u5b9a \u6570\u5b57 \u586b\u5145 \uff1b \u8f93\u5165 None \u5219 \u4e0d \u586b\u5145 \u7f3a\u5931 \u503c   by   default   \" ffill \"   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u5929 \u6eda\u52a8 ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u6708\u5ea6 \u5316\u540e \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1675   1676   1677   1678   1679   1680   1681   1682   1683   1684   1685   1686   1687   1688   1689   1690   1691   1692   1693   1694   1695   1696   1697   1698   1699   1700   1701   1702   1703   1704   1705   1706   1707   1708   1709   1710   1711   1712   1713   1714   1715   1716   1717   1718   1719   1720   1721   1722   1723   1724   1725   1726   1727   1728   1729   1730   1731   1732   1733   1734   1735   1736   1737   1738   1739   1740   1741   1742   1743   1744   1745   1746   1747   1748   1749   1750   1751   1752   1753   1754   1755   1756   1757   1758   1759   1760   1761   1762   1763   1764   1765   1766   1767   1768   1769   1770   1771   1772   1773   1774   1775   1776   1777   1778   1779   1780   1781   1782   1783   1784   1785   1786   1787   1788   1789   1790   1791   1792   1793   1794   1795   1796   @ do _ on _ dfs   def   get _ fac _ cross _ via _ func   (   df   :   pd   .   DataFrame   ,   func   :   Callable   ,   history _ file   :   str   =   None   ,   backsee   :   int   =   20   ,   fillna _ method   :   Union   [   float   ,   str   ,   None   ]   =   \" ffill \"   ,   daily   :   bool   =   0   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u4e00\u4e2a \u65e5\u9891 \u56e0\u5b50 \uff0c \u5bf9 \u5176 \u6eda\u52a8 \u65f6\u95f4 \u7a97\u53e3 \u8fdb\u884c \u56e0\u5b50 \u6708\u5ea6 \u5316 \u8ba1\u7b97 \u3002   \u5177\u4f53 \u4f53\u64cd \u64cd\u4f5c \u5177\u4f53\u64cd\u4f5c \u4e3a \u6bcf\u5929 \uff08 \u6216 \u6bcf\u6708 \u6708\u5e95 \uff09 \u622a\u53d6 \u8fc7\u53bb \u4e00\u6bb5 \u7a97\u53e3 \uff0c \u5e76 \u8fdb\u884c \u67d0\u4e2a \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u7684 \u64cd\u4f5c \uff0c   Parameters   ----------   df   :   pd . DataFrame   \u65e5\u9891 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u65f6\u95f4   func   :   Callable   \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u7684 \u64cd\u4f5c \u51fd\u6570 \uff0c \u9700\u8981 \u5bf9 \u4e00\u4e2a \u7a97\u53e3 \u65f6\u95f4 \u5185 \u7684 \u9762\u677f \u6570\u636e \u8fdb\u884c \u5904\u7406 \uff0c \u6700\u7ec8 \u8981 \u8fd4\u56de \u4e00\u4e2a series \uff0c index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u6708\u5ea6 \u5316 \u7684 \u56e0\u5b50 \u503c \uff0c name \u65e0\u6240 \u6240\u8c13 \u65e0\u6240\u8c13   history _ file   :   str ,   optional   \u7528\u4e8e \u5b58\u50a8 \u5386\u53f2 \u6570\u636e \u5386\u53f2\u6570\u636e \u7684 \u672c\u5730 \u6587\u4ef6 ,   by   default   None   backsee   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 \u957f\u5ea6 ,   by   default   20   fillna _ method   :   Union [ float ,   str ] ,   optional   \u5bf9 \u7f3a\u5931 \u503c \u8fdb\u884c \u8865\u5168 \uff0c \u53ef \u9009\u62e9 \u8865\u5168 \u65b9\u5f0f \uff0c \u8f93\u5165 ` ' ffill ' ` \u6216 ` ' bfill ' ` \u5373\u4e3a \u53d6\u524d \u53d6\u540e \u586b\u5145 \uff1b \u8f93\u5165 \u6570\u5b57 \u5219 \u4e3a \u7528 \u56fa\u5b9a \u6570\u5b57 \u586b\u5145 \uff1b \u8f93\u5165 None \u5219 \u4e0d \u586b\u5145 \u7f3a\u5931 \u503c   by   default   \" ffill \"   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u5929 \u6eda\u52a8 ,   by   default   0   Returns   -------   pd . DataFrame   \u6708\u5ea6 \u5316\u540e \u7684 \u56e0\u5b50 \u503c   \" \" \"   homeplace   =   HomePlace   ( )   if   history _ file   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history _ file   ) :   old   =   pd   .   read _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   else   :   old   =   None   logger   .   info   (   \" \u8fd9\u4e00 \u7ed3\u679c \u662f \u65b0 \u7684 \uff0c \u5c06 \u4ece\u5934 \u8ba1\u7b97 \"   )   else   :   old   =   None   if   old   is   not   None   :   old _ end   =   old   .   index   .   max   ( )   pastpart   =   df   [   df   .   index   < =   old _ end   ]   old _ tail   =   pastpart   .   tail   (   backsee   -   1   )   old _ end _ str   =   datetime   .   datetime   .   strftime   (   old _ end   ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u5230 \u4e86   {   old _ end _ str   }   \"   )   df   =   df   [   df   .   index   >   old _ end   ]   if   df   .   shape   [   0   ]   >   0   :   df   =   pd   .   concat   ( [   old _ tail   ,   df   ] )   ends   =   list   (   df   .   index   )   ends   =   pd   .   Series   (   ends   ,   index   =   ends   )   ends   =   ends   .   resample   (   \" M \"   )   .   last   ( )   ends   =   list   (   ends   )   if   daily   :   iters   =   list   (   df   .   index   )   else   :   iters   =   ends   dfs   =   [ ]   for   end   in   tqdm   .   auto   .   tqdm   (   iters   ) :   if   isinstance   (   fillna _ method   ,   float   ) :   df0   =   (   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   .   fillna   (   fillna _ method   )   .   dropna   (   axis   =   1   )   )   elif   isinstance   (   fillna _ method   ,   str   ) :   df0   =   (   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   .   fillna   (   method   =   fillna _ method   )   .   dropna   (   axis   =   1   )   )   else   :   df0   =   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   corr   =   func   (   df0   )   .   to _ frame   (   end   )   dfs   .   append   (   corr   )   dfs   =   pd   .   concat   (   dfs   ,   axis   =   1   )   .   T   dfs   =   drop _ duplicates _ index   (   pd   .   concat   ( [   old   ,   dfs   ] ) )   dfs   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   return   dfs   else   :   logger   .   info   (   \" \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   return   old   else   :   ends   =   list   (   df   .   index   )   ends   =   pd   .   Series   (   ends   ,   index   =   ends   )   ends   =   ends   .   resample   (   \" M \"   )   .   last   ( )   ends   =   list   (   ends   )   if   daily   :   iters   =   list   (   df   .   index   )   else   :   iters   =   ends   dfs   =   [ ]   for   end   in   tqdm   .   auto   .   tqdm   (   iters   ) :   if   isinstance   (   fillna _ method   ,   float   ) :   df0   =   (   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   .   fillna   (   fillna _ method   )   .   dropna   (   axis   =   1   )   )   elif   isinstance   (   fillna _ method   ,   str   ) :   df0   =   (   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   .   fillna   (   method   =   fillna _ method   )   .   dropna   (   axis   =   1   )   )   else   :   df0   =   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   corr   =   func   (   df0   )   .   to _ frame   (   end   )   dfs   .   append   (   corr   )   dfs   =   pd   .   concat   (   dfs   ,   axis   =   1   )   .   T   if   history _ file   is   not   None   :   dfs   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   return   dfs   get _ fac _ via _ corr   (   df   ,   history _ file   =   None   ,   backsee   =   20   ,   fillna _ method   =   ' ffill '   ,   corr _ method   =   ' pearson '   ,   daily   =   0   ,   abs   =   0   ,   riskmetrics   =   0   ,   riskmetrics _ lambda   =   0.94   )   \u00b6   \u5bf9 \u4e00\u4e2a \u65e5\u9891 \u56e0\u5b50 \uff0c \u5bf9 \u5176 \u6eda\u52a8 \u65f6\u95f4 \u7a97\u53e3 \u8fdb\u884c \u56e0\u5b50 \u6708\u5ea6 \u5316 \u8ba1\u7b97 \u3002   \u5177\u4f53 \u4f53\u64cd \u64cd\u4f5c \u5177\u4f53\u64cd\u4f5c \u4e3a \u6bcf\u5929 \uff08 \u6216 \u6bcf\u6708 \u6708\u5e95 \uff09 \u8ba1\u7b97 \u8fc7\u53bb 20 \u5929 \u56e0\u5b50 \u503c \u7684 \u76f8\u5173 \u76f8\u5173\u6027 \u77e9\u9635 \uff0c   \u7136\u540e \u5bf9 \u6bcf\u4e2a \u80a1\u7968 \u7684 \u6240\u6709 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u6c42 \u5747\u503c   Parameters   \u00b6   df   :   pd . DataFrame   \u65e5\u9891 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u65f6\u95f4   history _ file   :   str ,   optional   \u7528\u4e8e \u5b58\u50a8 \u5386\u53f2 \u6570\u636e \u5386\u53f2\u6570\u636e \u7684 \u672c\u5730 \u6587\u4ef6 ,   by   default   None   backsee   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 \u957f\u5ea6 ,   by   default   20   fillna _ method   :   Union [ float ,   str ] ,   optional   \u7531\u4e8e \u5b58\u5728 \u7f3a\u5931 \u503c\u65f6 \uff0c \u76f8\u5173 \u76f8\u5173\u6027 \u77e9\u9635 \u7684 \u8ba1\u7b97 \u5b58\u5728 \u95ee\u9898 \uff0c \u56e0\u6b64 \u8fd9\u91cc \u5bf9 \u5176 \u8fdb\u884c \u8865\u5168 \uff0c \u53ef \u9009\u62e9 \u8865\u5168 \u65b9\u5f0f \uff0c \u8f93\u5165   \u2018 ffill '   \u6216   ' bfill '   \u5373\u4e3a \u53d6\u524d \u53d6\u540e \u586b\u5145 , \u8f93\u5165 \u6570\u5b57 \u5219 \u4e3a \u7528 \u56fa\u5b9a \u6570\u5b57 \u586b\u5145   by   default   \" ffill \"   corr _ method   :   str ,   optional   \u6c42 \u76f8\u5173 \u76f8\u5173\u6027 \u7684 \u65b9\u6cd5 \uff0c \u53ef\u4ee5 \u6307\u5b9a   ' pearson '   \u3001   ' spearman '   \u3001   ' kendall '   ,   default   ' pearson '   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u5929 \u6eda\u52a8 ,   by   default   0   abs   :   bool ,   optional   \u662f\u5426 \u8981 \u5bf9 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u77e9\u9635 \u53d6 \u7edd\u5bf9 \u7edd\u5bf9\u503c ,   by   default   0   riskmetrics   :   bool ,   optional   \u4f7f\u7528 RiskMetrics \u65b9\u6cd5 \uff0c \u5bf9 \u76f8\u5173 \u76f8\u5173\u6027 \u8fdb\u884c \u8c03\u6574 \uff0c \u589e\u52a0 \u4e34\u8fd1 \u4ea4\u6613 \u4ea4\u6613\u65e5 \u7684 \u6743\u91cd ,   by   default   0   riskmetrics _ lambda   :   float ,   optional   \u4f7f\u7528 RiskMetrics \u65b9\u6cd5 \u65f6 \u7684 lambda \u53c2\u6570 ,   by   default   0.94   Returns   \u00b6   pd . DataFrame   \u6708\u5ea6 \u5316\u540e \u7684 \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1499   1500   1501   1502   1503   1504   1505   1506   1507   1508   1509   1510   1511   1512   1513   1514   1515   1516   1517   1518   1519   1520   1521   1522   1523   1524   1525   1526   1527   1528   1529   1530   1531   1532   1533   1534   1535   1536   1537   1538   1539   1540   1541   1542   1543   1544   1545   1546   1547   1548   1549   1550   1551   1552   1553   1554   1555   1556   1557   1558   1559   1560   1561   1562   1563   1564   1565   1566   1567   1568   1569   1570   1571   1572   1573   1574   1575   1576   1577   1578   1579   1580   1581   1582   1583   1584   1585   1586   1587   1588   1589   1590   1591   1592   1593   1594   1595   1596   1597   1598   1599   1600   1601   1602   1603   1604   1605   1606   1607   1608   1609   1610   1611   1612   1613   1614   1615   1616   1617   1618   1619   1620   1621   1622   1623   1624   1625   1626   1627   1628   1629   1630   1631   1632   1633   1634   1635   1636   1637   1638   1639   1640   1641   1642   1643   1644   1645   1646   1647   1648   1649   1650   1651   1652   1653   1654   1655   1656   1657   1658   1659   1660   1661   1662   1663   1664   1665   1666   1667   1668   1669   1670   1671   1672   @ do _ on _ dfs   def   get _ fac _ via _ corr   (   df   :   pd   .   DataFrame   ,   history _ file   :   str   =   None   ,   backsee   :   int   =   20   ,   fillna _ method   :   Union   [   float   ,   str   ]   =   \" ffill \"   ,   corr _ method   :   str   =   \" pearson \"   ,   daily   :   bool   =   0   ,   abs   :   bool   =   0   ,   riskmetrics   :   bool   =   0   ,   riskmetrics _ lambda   :   float   =   0.94   ,   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u4e00\u4e2a \u65e5\u9891 \u56e0\u5b50 \uff0c \u5bf9 \u5176 \u6eda\u52a8 \u65f6\u95f4 \u7a97\u53e3 \u8fdb\u884c \u56e0\u5b50 \u6708\u5ea6 \u5316 \u8ba1\u7b97 \u3002   \u5177\u4f53 \u4f53\u64cd \u64cd\u4f5c \u5177\u4f53\u64cd\u4f5c \u4e3a \u6bcf\u5929 \uff08 \u6216 \u6bcf\u6708 \u6708\u5e95 \uff09 \u8ba1\u7b97 \u8fc7\u53bb 20 \u5929 \u56e0\u5b50 \u503c \u7684 \u76f8\u5173 \u76f8\u5173\u6027 \u77e9\u9635 \uff0c   \u7136\u540e \u5bf9 \u6bcf\u4e2a \u80a1\u7968 \u7684 \u6240\u6709 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u6c42 \u5747\u503c   Parameters   ----------   df   :   pd . DataFrame   \u65e5\u9891 \u56e0\u5b50 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u65f6\u95f4   history _ file   :   str ,   optional   \u7528\u4e8e \u5b58\u50a8 \u5386\u53f2 \u6570\u636e \u5386\u53f2\u6570\u636e \u7684 \u672c\u5730 \u6587\u4ef6 ,   by   default   None   backsee   :   int ,   optional   \u6eda\u52a8 \u7a97\u53e3 \u957f\u5ea6 ,   by   default   20   fillna _ method   :   Union [ float ,   str ] ,   optional   \u7531\u4e8e \u5b58\u5728 \u7f3a\u5931 \u503c\u65f6 \uff0c \u76f8\u5173 \u76f8\u5173\u6027 \u77e9\u9635 \u7684 \u8ba1\u7b97 \u5b58\u5728 \u95ee\u9898 \uff0c \u56e0\u6b64 \u8fd9\u91cc \u5bf9 \u5176 \u8fdb\u884c \u8865\u5168 \uff0c \u53ef \u9009\u62e9 \u8865\u5168 \u65b9\u5f0f \uff0c \u8f93\u5165 ` \u2018 ffill ' ` \u6216 ` ' bfill ' ` \u5373\u4e3a \u53d6\u524d \u53d6\u540e \u586b\u5145 , \u8f93\u5165 \u6570\u5b57 \u5219 \u4e3a \u7528 \u56fa\u5b9a \u6570\u5b57 \u586b\u5145   by   default   \" ffill \"   corr _ method   :   str ,   optional   \u6c42 \u76f8\u5173 \u76f8\u5173\u6027 \u7684 \u65b9\u6cd5 \uff0c \u53ef\u4ee5 \u6307\u5b9a ` ' pearson ' ` \u3001 ` ' spearman ' ` \u3001 ` ' kendall ' ` ,   default   ' pearson '   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u5929 \u6eda\u52a8 ,   by   default   0   abs   :   bool ,   optional   \u662f\u5426 \u8981 \u5bf9 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u77e9\u9635 \u53d6 \u7edd\u5bf9 \u7edd\u5bf9\u503c ,   by   default   0   riskmetrics   :   bool ,   optional   \u4f7f\u7528 RiskMetrics \u65b9\u6cd5 \uff0c \u5bf9 \u76f8\u5173 \u76f8\u5173\u6027 \u8fdb\u884c \u8c03\u6574 \uff0c \u589e\u52a0 \u4e34\u8fd1 \u4ea4\u6613 \u4ea4\u6613\u65e5 \u7684 \u6743\u91cd ,   by   default   0   riskmetrics _ lambda   :   float ,   optional   \u4f7f\u7528 RiskMetrics \u65b9\u6cd5 \u65f6 \u7684 lambda \u53c2\u6570 ,   by   default   0.94   Returns   -------   pd . DataFrame   \u6708\u5ea6 \u5316\u540e \u7684 \u56e0\u5b50 \u503c   \" \" \"   homeplace   =   HomePlace   ( )   if   history _ file   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history _ file   ) :   old   =   pd   .   read _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   else   :   old   =   None   logger   .   info   (   \" \u8fd9\u4e00 \u7ed3\u679c \u662f \u65b0 \u7684 \uff0c \u5c06 \u4ece\u5934 \u8ba1\u7b97 \"   )   else   :   old   =   None   if   old   is   not   None   :   old _ end   =   old   .   index   .   max   ( )   pastpart   =   df   [   df   .   index   < =   old _ end   ]   old _ tail   =   pastpart   .   tail   (   backsee   -   1   )   old _ end _ str   =   datetime   .   datetime   .   strftime   (   old _ end   ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u4e0a\u6b21 \u8ba1\u7b97 \u5230 \u4e86   {   old _ end _ str   }   \"   )   df   =   df   [   df   .   index   >   old _ end   ]   if   df   .   shape   [   0   ]   >   0   :   df   =   pd   .   concat   ( [   old _ tail   ,   df   ] )   ends   =   list   (   df   .   index   )   ends   =   pd   .   Series   (   ends   ,   index   =   ends   )   ends   =   ends   .   resample   (   \" M \"   )   .   last   ( )   ends   =   list   (   ends   )   if   daily   :   iters   =   list   (   df   .   index   )   else   :   iters   =   ends   dfs   =   [ ]   for   end   in   tqdm   .   auto   .   tqdm   (   iters   ) :   if   isinstance   (   fillna _ method   ,   float   ) :   df0   =   (   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   .   fillna   (   fillna _ method   )   .   dropna   (   axis   =   1   )   )   else   :   df0   =   (   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   .   fillna   (   method   =   fillna _ method   )   .   dropna   (   axis   =   1   )   )   if   riskmetrics   :   df0   =   (   (   df0   -   df0   .   mean   ( ) )   .   T   *   (   pd   .   Series   (   [   riskmetrics _ lambda   * *   (   backsee   -   i   )   for   i   in   range   (   df0   .   shape   [   0   ] )   ] ,   index   =   df0   .   index   ,   )   * *   0.5   )   )   .   T   if   corr _ method   = =   \" spearman \"   :   corr   =   df0   .   rank   ( )   .   corr   ( )   else   :   corr   =   df0   .   corr   (   method   =   corr _ method   )   if   abs   :   corr   =   corr   .   abs   ( )   df0   =   corr   .   mean   ( )   .   to _ frame   (   end   )   dfs   .   append   (   df0   )   dfs   =   pd   .   concat   (   dfs   ,   axis   =   1   )   .   T   dfs   =   drop _ duplicates _ index   (   pd   .   concat   ( [   old   ,   dfs   ] ) )   dfs   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   if   daily   :   return   dfs   else   :   return   dfs   .   resample   (   \" M \"   )   .   last   ( )   else   :   logger   .   info   (   \" \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \"   )   return   old   else   :   ends   =   list   (   df   .   index   )   ends   =   pd   .   Series   (   ends   ,   index   =   ends   )   ends   =   ends   .   resample   (   \" M \"   )   .   last   ( )   ends   =   list   (   ends   )   if   daily   :   iters   =   list   (   df   .   index   )   else   :   iters   =   ends   dfs   =   [ ]   for   end   in   tqdm   .   auto   .   tqdm   (   iters   ) :   if   isinstance   (   fillna _ method   ,   float   ) :   df0   =   (   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   .   fillna   (   fillna _ method   )   .   dropna   (   axis   =   1   )   )   else   :   df0   =   (   df   .   loc   [ :   end   ]   .   tail   (   backsee   )   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   .   fillna   (   method   =   fillna _ method   )   .   dropna   (   axis   =   1   )   )   if   riskmetrics   :   df0   =   (   (   df0   -   df0   .   mean   ( ) )   .   T   *   (   pd   .   Series   (   [   riskmetrics _ lambda   * *   (   backsee   -   i   )   for   i   in   range   (   df0   .   shape   [   0   ] )   ] ,   index   =   df0   .   index   ,   )   * *   0.5   )   )   .   T   if   corr _ method   = =   \" spearman \"   :   corr   =   df0   .   rank   ( )   .   corr   ( )   else   :   corr   =   df0   .   corr   (   method   =   corr _ method   )   if   abs   :   corr   =   corr   .   abs   ( )   df0   =   corr   .   mean   ( )   .   to _ frame   (   end   )   dfs   .   append   (   df0   )   dfs   =   pd   .   concat   (   dfs   ,   axis   =   1   )   .   T   if   history _ file   is   not   None   :   dfs   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   if   daily   :   return   dfs   else   :   return   dfs   .   resample   (   \" M \"   )   .   last   ( )   get _ list _ std   (   delta _ sts   )   \u00b6   \u540c\u4e00 \u4e00\u5929 \u540c\u4e00\u5929 \u591a\u4e2a \u56e0\u5b50 \uff0c \u8ba1\u7b97 \u8fd9\u4e9b \u56e0\u5b50 \u5728 \u5f53\u5929 \u7684 \u6807\u51c6 \u6807\u51c6\u5dee   Parameters   \u00b6   delta _ sts   :   List [ pd . DataFrame ]   \u591a\u4e2a \u56e0\u5b50 \u6784\u6210 \u7684 list \uff0c \u6bcf\u4e2a \u56e0\u5b50 index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Returns   \u00b6   pd . DataFrame   \u6bcf\u5929 \u6bcf \u53ea \u80a1\u7968 \u591a\u4e2a \u56e0\u5b50 \u7684 \u6807\u51c6 \u6807\u51c6\u5dee   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1315   1316   1317   1318   1319   1320   1321   1322   1323   1324   1325   1326   1327   1328   1329   1330   1331   1332   def   get _ list _ std   (   delta _ sts   :   List   [   pd   .   DataFrame   ] )   - >   pd   .   DataFrame   :   \" \" \" \u540c\u4e00 \u4e00\u5929 \u540c\u4e00\u5929 \u591a\u4e2a \u56e0\u5b50 \uff0c \u8ba1\u7b97 \u8fd9\u4e9b \u56e0\u5b50 \u5728 \u5f53\u5929 \u7684 \u6807\u51c6 \u6807\u51c6\u5dee   Parameters   ----------   delta _ sts   :   List [ pd . DataFrame ]   \u591a\u4e2a \u56e0\u5b50 \u6784\u6210 \u7684 list \uff0c \u6bcf\u4e2a \u56e0\u5b50 index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Returns   -------   ` pd . DataFrame `   \u6bcf\u5929 \u6bcf \u53ea \u80a1\u7968 \u591a\u4e2a \u56e0\u5b50 \u7684 \u6807\u51c6 \u6807\u51c6\u5dee   \" \" \"   delta _ sts _ mean   =   sum   (   delta _ sts   )   /   len   (   delta _ sts   )   delta _ sts _ std   =   [ (   i   -   delta _ sts _ mean   )   * *   2   for   i   in   delta _ sts   ]   delta _ sts _ std   =   sum   (   delta _ sts _ std   )   delta _ sts _ std   =   delta _ sts _ std   * *   0.5   /   len   (   delta _ sts   )   * *   0.5   return   delta _ sts _ std   get _ list _ std _ weighted   (   delta _ sts   ,   weights   )   \u00b6   \u5bf9 \u591a\u4e2a df \u5bf9\u5e94 \u4f4d\u7f6e \u4e0a \u7684 \u503c\u6c42 \u52a0\u6743 \u6807\u51c6 \u6807\u51c6\u5dee   Parameters   \u00b6   delta _ sts   :   List [ pd . DataFrame ]   \u591a\u4e2a dataframe   weights   :   list   \u6743\u91cd \u5e8f\u5217   Returns   \u00b6   pd . DataFrame   \u6807\u51c6 \u6807\u51c6\u5dee \u5e8f\u5217   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1335   1336   1337   1338   1339   1340   1341   1342   1343   1344   1345   1346   1347   1348   1349   1350   1351   1352   1353   1354   def   get _ list _ std _ weighted   (   delta _ sts   :   List   [   pd   .   DataFrame   ] ,   weights   :   list   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u591a\u4e2a df \u5bf9\u5e94 \u4f4d\u7f6e \u4e0a \u7684 \u503c\u6c42 \u52a0\u6743 \u6807\u51c6 \u6807\u51c6\u5dee   Parameters   ----------   delta _ sts   :   List [ pd . DataFrame ]   \u591a\u4e2a dataframe   weights   :   list   \u6743\u91cd \u5e8f\u5217   Returns   -------   pd . DataFrame   \u6807\u51c6 \u6807\u51c6\u5dee \u5e8f\u5217   \" \" \"   weights   =   [   i   /   sum   (   weights   )   for   i   in   weights   ]   delta _ sts _ mean   =   sum   (   delta _ sts   )   /   len   (   delta _ sts   )   delta _ sts _ std   =   [ (   i   -   delta _ sts _ mean   )   * *   2   for   i   in   delta _ sts   ]   delta _ sts _ std   =   sum   ( [   i   *   j   for   i   ,   j   in   zip   (   delta _ sts _ std   ,   weights   ) ] )   return   delta _ sts _ std   * *   0.5   get _ normal   (   df   )   \u00b6   \u5c06 \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6b63\u6001\u5316   Parameters   \u00b6   df   :   pd . DataFrame   \u539f\u59cb \u56e0\u5b50 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Returns   \u00b6   pd . DataFrame   \u6bcf\u4e2a \u622a\u9762 \u6a2a\u622a\u9762 \u90fd \u5448\u73b0 \u5206\u5e03 \u6b63\u6001\u5206\u5e03 \u7684 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1130   1131   1132   1133   1134   1135   1136   1137   1138   1139   1140   1141   1142   1143   1144   1145   1146   @ do _ on _ dfs   def   get _ normal   (   df   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u5c06 \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6b63\u6001\u5316   Parameters   ----------   df   :   pd . DataFrame   \u539f\u59cb \u56e0\u5b50 \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   Returns   -------   ` pd . DataFrame `   \u6bcf\u4e2a \u622a\u9762 \u6a2a\u622a\u9762 \u90fd \u5448\u73b0 \u5206\u5e03 \u6b63\u6001\u5206\u5e03 \u7684 \u56e0\u5b50   \" \" \"   df   =   df   .   replace   (   0   ,   np   .   nan   )   df   =   df   .   T   .   apply   (   lambda   x   :   ss   .   boxcox   (   x   ) [   0   ] )   .   T   return   df   get _ value   (   df   ,   n   )   \u00b6   \u5f88\u591a \u56e0\u5b50 \u8ba1\u7b97 \u65f6 \uff0c \u4f1a \u4e00\u6b21 \u4e00\u6b21\u6027 \u751f\u6210 \u5f88\u591a \u503c \uff0c \u4f7f\u7528 \u65f6 \u53ea \u53d6\u51fa \u4e00\u4e2a \u503c   Parameters   \u00b6   df   :   pd . DataFrame   \u6bcf\u4e2a value \u662f \u4e00\u4e2a \u5217\u8868 \u6216 \u5143\u7ec4 \u7684 pd . DataFrame   n   :   int   \u53d6 \u7b2c n \u4e2a\u503c   Returns   \u00b6   pd . DataFrame   \u4ec5 \u6709 \u7b2c n \u4e2a\u503c \u6784\u6210 \u7684 pd . DataFrame   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   @ do _ on _ dfs   def   get _ value   (   df   :   pd   .   DataFrame   ,   n   :   int   )   - >   pd   .   DataFrame   :   \" \" \" \u5f88\u591a \u56e0\u5b50 \u8ba1\u7b97 \u65f6 \uff0c \u4f1a \u4e00\u6b21 \u4e00\u6b21\u6027 \u751f\u6210 \u5f88\u591a \u503c \uff0c \u4f7f\u7528 \u65f6 \u53ea \u53d6\u51fa \u4e00\u4e2a \u503c   Parameters   ----------   df   :   pd . DataFrame   \u6bcf\u4e2a value \u662f \u4e00\u4e2a \u5217\u8868 \u6216 \u5143\u7ec4 \u7684 pd . DataFrame   n   :   int   \u53d6 \u7b2c n \u4e2a\u503c   Returns   -------   ` pd . DataFrame `   \u4ec5 \u6709 \u7b2c n \u4e2a\u503c \u6784\u6210 \u7684 pd . DataFrame   \" \" \"   def   get _ value _ single   (   x   ,   n   ) :   try   :   return   x   [   n   ]   except   Exception   :   return   np   .   nan   df   =   df   .   applymap   (   lambda   x   :   get _ value _ single   (   x   ,   n   ) )   return   df   get _ values   (   df   )   \u00b6   \u4ece \u4e00\u4e2a values \u4e3a \u5217\u8868 \u7684 dataframe \u4e2d \uff0c \u4e00\u6b21 \u4e00\u6b21\u6027 \u53d6\u51fa \u6240\u6709 \u503c \uff0c \u5206\u522b \u8bbe\u7f6e \u4e3a \u4e00\u4e2a dataframe \uff0c \u5e76 \u4f9d\u7167 \u987a\u5e8f \u5b58\u50a8 \u987a\u5e8f\u5b58\u50a8 \u5728 \u5217\u8868 \u4e2d   Parameters   \u00b6   df   :   pd . DataFrame   \u4e00\u4e2a values \u4e3a list \u7684 dataframe   Returns   \u00b6   List [ pd . DataFrame ]   \u591a\u4e2a dataframe \uff0c \u6bcf \u4e00\u4e2a \u7684 values \u90fd \u662f float \u5f62\u5f0f   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1479   1480   1481   1482   1483   1484   1485   1486   1487   1488   1489   1490   1491   1492   1493   1494   1495   1496   def   get _ values   (   df   :   pd   .   DataFrame   )   - >   List   [   pd   .   DataFrame   ] :   \" \" \" \u4ece \u4e00\u4e2a values \u4e3a \u5217\u8868 \u7684 dataframe \u4e2d \uff0c \u4e00\u6b21 \u4e00\u6b21\u6027 \u53d6\u51fa \u6240\u6709 \u503c \uff0c \u5206\u522b \u8bbe\u7f6e \u4e3a \u4e00\u4e2a dataframe \uff0c \u5e76 \u4f9d\u7167 \u987a\u5e8f \u5b58\u50a8 \u987a\u5e8f\u5b58\u50a8 \u5728 \u5217\u8868 \u4e2d   Parameters   ----------   df   :   pd . DataFrame   \u4e00\u4e2a values \u4e3a list \u7684 dataframe   Returns   -------   List [ pd . DataFrame ]   \u591a\u4e2a dataframe \uff0c \u6bcf \u4e00\u4e2a \u7684 values \u90fd \u662f float \u5f62\u5f0f   \" \" \"   d   =   df   .   dropna   (   how   =   \" all \"   ,   axis   =   1   )   d   =   d   .   iloc   [ : ,   0   ]   .   dropna   ( )   num   =   len   (   d   .   iloc   [   0   ] )   facs   =   list   (   map   (   lambda   x   :   get _ value   (   df   ,   x   ) ,   range   (   num   ) ) )   return   facs   indus _ name   (   df   ,   col _ name   =   None   )   \u00b6   \u5c06 2021 \u7248\u7533 \u4e07 \u884c\u4e1a \u7684 \u4ee3\u7801 \uff0c \u8f6c\u5316 \u4e3a \u5bf9\u5e94 \u884c\u4e1a \u7684 \u540d\u5b57   Parameters   \u00b6   df   :   pd . DataFrame   \u4e00\u4e2a \u5305\u542b \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4ee3\u7801 \u7684 pd . DataFrame \uff0c \u5176\u4e2d \u67d0 \u4e00\u5217 \u6216 index \u4e3a \u884c\u4e1a \u4ee3\u7801   col _ name   :   str ,   optional   \u4ec5 \u67d0 \u5217\u4e3a \u884c\u4e1a \u4ee3\u7801 \u65f6 \u6307\u5b9a \u8be5 \u53c2\u6570 \uff0c \u8be5\u5217 \u7684 \u540d\u5b57 \uff0c \u5426\u5219 \u9ed8\u8ba4 \u8f6c\u5316 index ,   by   default   None   Returns   \u00b6   pd . DataFrame   \u8f6c\u5316 \u540e \u7684 pd . DataFrame   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   252   @ do _ on _ dfs   def   indus _ name   (   df   :   pd   .   DataFrame   ,   col _ name   :   str   =   None   )   - >   pd   .   DataFrame   :   \" \" \" \u5c06 2021 \u7248\u7533 \u4e07 \u884c\u4e1a \u7684 \u4ee3\u7801 \uff0c \u8f6c\u5316 \u4e3a \u5bf9\u5e94 \u884c\u4e1a \u7684 \u540d\u5b57   Parameters   ----------   df   :   pd . DataFrame   \u4e00\u4e2a \u5305\u542b \u7533\u4e07 \u4e00\u7ea7 \u884c\u4e1a \u4ee3\u7801 \u7684 pd . DataFrame \uff0c \u5176\u4e2d \u67d0 \u4e00\u5217 \u6216 index \u4e3a \u884c\u4e1a \u4ee3\u7801   col _ name   :   str ,   optional   \u4ec5 \u67d0 \u5217\u4e3a \u884c\u4e1a \u4ee3\u7801 \u65f6 \u6307\u5b9a \u8be5 \u53c2\u6570 \uff0c \u8be5\u5217 \u7684 \u540d\u5b57 \uff0c \u5426\u5219 \u9ed8\u8ba4 \u8f6c\u5316 index ,   by   default   None   Returns   -------   ` pd . DataFrame `   \u8f6c\u5316 \u540e \u7684 pd . DataFrame   \" \" \"   names   =   pd   .   DataFrame   (   {   \" indus _ we _ cant _ same \"   :   [   \" 801170 . SI \"   ,   \" 801010 . SI \"   ,   \" 801140 . SI \"   ,   \" 801080 . SI \"   ,   \" 801780 . SI \"   ,   \" 801110 . SI \"   ,   \" 801230 . SI \"   ,   \" 801950 . SI \"   ,   \" 801180 . SI \"   ,   \" 801040 . SI \"   ,   \" 801740 . SI \"   ,   \" 801890 . SI \"   ,   \" 801770 . SI \"   ,   \" 801960 . SI \"   ,   \" 801200 . SI \"   ,   \" 801120 . SI \"   ,   \" 801710 . SI \"   ,   \" 801720 . SI \"   ,   \" 801880 . SI \"   ,   \" 801750 . SI \"   ,   \" 801050 . SI \"   ,   \" 801790 . SI \"   ,   \" 801150 . SI \"   ,   \" 801980 . SI \"   ,   \" 801030 . SI \"   ,   \" 801730 . SI \"   ,   \" 801160 . SI \"   ,   \" 801130 . SI \"   ,   \" 801210 . SI \"   ,   \" 801970 . SI \"   ,   \" 801760 . SI \"   ,   ] ,   \" \u884c\u4e1a \u540d\u79f0 \"   :   [   \" \u4ea4\u901a \u901a\u8fd0 \u8fd0\u8f93 \u4ea4\u901a\u8fd0\u8f93 \"   ,   \" \u519c\u6797 \u519c\u6797\u7267 \u519c\u6797\u7267\u6e14 \"   ,   \" \u8f7b\u5de5 \u5236\u9020 \"   ,   \" \u7535\u5b50 \"   ,   \" \u94f6\u884c \"   ,   \" \u5bb6\u7528 \u7528\u7535 \u7535\u5668 \u7528\u7535\u5668 \u5bb6\u7528\u7535\u5668 \"   ,   \" \u7efc\u5408 \"   ,   \" \u7164\u70ad \"   ,   \" \u623f\u5730 \u5730\u4ea7 \u623f\u5730\u4ea7 \"   ,   \" \u94a2\u94c1 \"   ,   \" \u56fd\u9632 \u519b\u5de5 \"   ,   \" \u673a\u68b0 \u8bbe\u5907 \u673a\u68b0\u8bbe\u5907 \"   ,   \" \u901a\u4fe1 \"   ,   \" \u77f3\u6cb9 \u77f3\u5316 \"   ,   \" \u5546\u8d38 \u96f6\u552e \"   ,   \" \u98df\u54c1 \u996e\u6599 \u98df\u54c1\u996e\u6599 \"   ,   \" \u5efa\u7b51 \u6750\u6599 \u5efa\u7b51\u6750\u6599 \"   ,   \" \u5efa\u7b51 \u88c5\u9970 \"   ,   \" \u6c7d\u8f66 \"   ,   \" \u8ba1\u7b97 \u7b97\u673a \u8ba1\u7b97\u673a \"   ,   \" \u6709\u8272 \u91d1\u5c5e \u6709\u8272\u91d1\u5c5e \"   ,   \" \u975e\u94f6 \u91d1\u878d \"   ,   \" \u533b\u836f \u751f\u7269 \"   ,   \" \u7f8e\u5bb9 \u62a4\u7406 \"   ,   \" \u57fa\u7840 \u5316\u5de5 \"   ,   \" \u7535\u529b \u8bbe\u5907 \u7535\u529b\u8bbe\u5907 \"   ,   \" \u516c\u7528 \u4e8b\u4e1a \u516c\u7528\u4e8b\u4e1a \"   ,   \" \u7eba\u7ec7 \u670d\u9970 \"   ,   \" \u793e\u4f1a \u670d\u52a1 \"   ,   \" \u73af\u4fdd \"   ,   \" \u4f20\u5a92 \"   ,   ] ,   }   )   .   sort _ values   ( [   \" indus _ we _ cant _ same \"   ] )   if   col _ name   :   names   =   names   .   rename   (   columns   =   {   \" indus _ we _ cant _ same \"   :   col _ name   } )   df   =   pd   .   merge   (   df   ,   names   ,   on   =   [   col _ name   ] )   else   :   df   =   df   .   reset _ index   ( )   df   =   df   .   rename   (   columns   =   {   list   (   df   .   columns   ) [   0   ] :   \" indus _ we _ cant _ same \"   } )   df   =   (   pd   .   merge   (   df   ,   names   ,   on   =   [   \" indus _ we _ cant _ same \"   ] )   .   set _ index   (   \" \u884c\u4e1a \u540d\u79f0 \"   )   .   drop   (   columns   =   [   \" indus _ we _ cant _ same \"   ] )   )   return   df   judge _ factor _ by _ third   (   fac1   ,   fac2   ,   judge   )   \u00b6   \u5bf9\u4e8e fac1 \u548c fac2 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u4f9d\u636e judge \u8fd9\u4e2a series \u6216 dataframe \u8fdb\u884c \u5224\u65ad \uff0c   judge \u53ef\u80fd \u4e3a \u5168 \u5e02\u573a \u7684 \u67d0\u4e2a \u65f6\u5e8f \u6307\u6807 \uff0c \u4e5f \u53ef\u80fd \u662f \u6bcf\u4e2a \u80a1\u7968 \u5404 \u4e00\u4e2a \u7684 \u6307\u6807 \uff0c   \u5982\u679c judge \u8fd9 \u4e00\u671f \u7684 \u503c \u5927\u4e8e 0 \uff0c \u5219 \u53d6 fac1 \u7684 \u503c \uff0c \u5c0f\u4e8e 0 \u5219 \u53d6 fac2 \u7684 \u503c   Parameters   \u00b6   fac1   :   pd . DataFrame   \u56e0\u5b50 1 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   fac2   :   pd . DataFrame   \u56e0\u5b50 2 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   judge   :   Union [ pd . DataFrame , pd . Series ]   \u5e02\u573a \u6307\u6807 \u6216 \u4e2a\u80a1 \u6307\u6807 \uff0c \u4e3a \u5e02\u573a \u6307\u6807 \u65f6 \uff0c \u5219 \u8f93\u5165 series \u5f62\u5f0f \uff0c index \u4e3a \u65f6\u95f4 \uff0c values \u4e3a \u6307\u6807 \u6807\u503c \u6307\u6807\u503c   \u4e3a \u4e2a\u80a1 \u6307\u6807 \u65f6 \uff0c \u5219 \u8f93\u5165 dataframe \u5f62\u5f0f \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   Returns   \u00b6   pd . DataFrame   \u5408\u6210 \u540e \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1984   1985   1986   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   def   judge _ factor _ by _ third   (   fac1   :   pd   .   DataFrame   ,   fac2   :   pd   .   DataFrame   ,   judge   :   Union   [   pd   .   DataFrame   ,   pd   .   Series   ]   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9\u4e8e fac1 \u548c fac2 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u4f9d\u636e judge \u8fd9\u4e2a series \u6216 dataframe \u8fdb\u884c \u5224\u65ad \uff0c   judge \u53ef\u80fd \u4e3a \u5168 \u5e02\u573a \u7684 \u67d0\u4e2a \u65f6\u5e8f \u6307\u6807 \uff0c \u4e5f \u53ef\u80fd \u662f \u6bcf\u4e2a \u80a1\u7968 \u5404 \u4e00\u4e2a \u7684 \u6307\u6807 \uff0c   \u5982\u679c judge \u8fd9 \u4e00\u671f \u7684 \u503c \u5927\u4e8e 0 \uff0c \u5219 \u53d6 fac1 \u7684 \u503c \uff0c \u5c0f\u4e8e 0 \u5219 \u53d6 fac2 \u7684 \u503c   Parameters   ----------   fac1   :   pd . DataFrame   \u56e0\u5b50 1 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   fac2   :   pd . DataFrame   \u56e0\u5b50 2 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   judge   :   Union [ pd . DataFrame , pd . Series ]   \u5e02\u573a \u6307\u6807 \u6216 \u4e2a\u80a1 \u6307\u6807 \uff0c \u4e3a \u5e02\u573a \u6307\u6807 \u65f6 \uff0c \u5219 \u8f93\u5165 series \u5f62\u5f0f \uff0c index \u4e3a \u65f6\u95f4 \uff0c values \u4e3a \u6307\u6807 \u6807\u503c \u6307\u6807\u503c   \u4e3a \u4e2a\u80a1 \u6307\u6807 \u65f6 \uff0c \u5219 \u8f93\u5165 dataframe \u5f62\u5f0f \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   Returns   -------   pd . DataFrame   \u5408\u6210 \u540e \u7684 \u56e0\u5b50 \u503c \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   \" \" \"   if   isinstance   (   judge   ,   pd   .   Series   ) :   judge   =   pd   .   DataFrame   (   {   k   :   list   (   judge   )   for   k   in   list   (   fac1   .   columns   ) } ,   index   =   judge   .   index   )   s1   =   (   judge   >   0   )   +   0   s2   =   (   judge   <   0   )   +   0   fac1   =   fac1   *   s1   fac2   =   fac2   *   s2   fac   =   fac1   +   fac2   have   =   np   .   sign   (   fac1   .   abs   ( )   +   1   )   return   fac   *   have   merge _ many   (   dfs   ,   names   =   None   ,   how   =   ' outer '   )   \u00b6   \u5c06 \u591a\u4e2a \u5bbd dataframe \u4f9d\u636e columns \u548c index \uff0c \u62fc\u63a5 \u5728 \u4e00\u8d77 \uff0c \u62fc\u6210 \u4e00\u4e2a \u957f dataframe   Parameters   \u00b6   dfs   :   List [ pd . DataFrame ]   \u5c06 \u6240\u6709 \u8981 \u62fc\u63a5 \u7684 \u5bbd\u8868 \u653e\u5728 \u4e00\u4e2a \u5217\u8868 \u91cc   names   :   list ,   optional   \u62fc\u63a5 \u540e \uff0c \u6bcf \u4e00\u5217 \u5bbd\u8868 \u5bf9\u5e94 \u7684 \u540d\u5b57 ,   by   default   None   how   :   str ,   optional   \u62fc\u63a5 \u7684 \u65b9\u5f0f ,   by   default   ' outer '   Returns   \u00b6   pd . DataFrame   \u62fc\u63a5 \u540e \u7684 dataframe   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   def   merge _ many   (   dfs   :   List   [   pd   .   DataFrame   ] ,   names   :   list   =   None   ,   how   :   str   =   \" outer \"   )   - >   pd   .   DataFrame   :   \" \" \" \u5c06 \u591a\u4e2a \u5bbd dataframe \u4f9d\u636e columns \u548c index \uff0c \u62fc\u63a5 \u5728 \u4e00\u8d77 \uff0c \u62fc\u6210 \u4e00\u4e2a \u957f dataframe   Parameters   ----------   dfs   :   List [ pd . DataFrame ]   \u5c06 \u6240\u6709 \u8981 \u62fc\u63a5 \u7684 \u5bbd\u8868 \u653e\u5728 \u4e00\u4e2a \u5217\u8868 \u91cc   names   :   list ,   optional   \u62fc\u63a5 \u540e \uff0c \u6bcf \u4e00\u5217 \u5bbd\u8868 \u5bf9\u5e94 \u7684 \u540d\u5b57 ,   by   default   None   how   :   str ,   optional   \u62fc\u63a5 \u7684 \u65b9\u5f0f ,   by   default   ' outer '   Returns   -------   pd . DataFrame   \u62fc\u63a5 \u540e \u7684 dataframe   \" \" \"   num   =   len   (   dfs   )   if   names   is   None   :   names   =   [   f   \" fac   {   i   +   1   }   \"   for   i   in   range   (   num   ) ]   dfs   =   [   i   .   stack   ( )   .   reset _ index   ( )   for   i   in   dfs   ]   dfs   =   [   i   .   rename   (   columns   =   {   list   (   i   .   columns   ) [   -   1   ] :   j   } )   for   i   ,   j   in   zip   (   dfs   ,   names   ) ]   dfs   =   [   i   .   rename   (   columns   =   {   list   (   i   .   columns   ) [   -   2   ] :   \" code \"   ,   list   (   i   .   columns   ) [   0   ] :   \" date \"   } )   for   i   in   dfs   ]   df   =   reduce   (   lambda   x   ,   y   :   pd   .   merge   (   x   ,   y   ,   on   =   [   \" date \"   ,   \" code \"   ] ,   how   =   how   ) ,   dfs   )   return   df   multidfs _ to _ one   (   *   args   )   \u00b6   \u5f88\u591a \u4e2a df \uff0c \u5404\u6709 \u4e00\u90e8 \u90e8\u5206 \u4e00\u90e8\u5206 \uff0c \u5176\u4f59 \u4f4d\u7f6e \u90fd \u662f \u7a7a \uff0c   \u60f3 \u628a \u5404\u81ea df \u6709\u503c \u7684 \u90e8\u5206 \u4fdd\u7559 \uff0c \u90fd \u6ca1\u6709 \u503c \u7684 \u90e8\u5206 \u7ee7\u7eed \u8bbe\u4e3a \u7a7a   Returns   \u00b6   pd . DataFrame   \u5408\u5e76 \u540e \u7684 df   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1233   1234   1235   1236   1237   1238   1239   1240   1241   1242   1243   1244   1245   1246   1247   1248   1249   1250   1251   @ do _ on _ dfs   def   multidfs _ to _ one   (   *   args   :   list   )   - >   pd   .   DataFrame   :   \" \" \" \u5f88\u591a \u4e2a df \uff0c \u5404\u6709 \u4e00\u90e8 \u90e8\u5206 \u4e00\u90e8\u5206 \uff0c \u5176\u4f59 \u4f4d\u7f6e \u90fd \u662f \u7a7a \uff0c   \u60f3 \u628a \u5404\u81ea df \u6709\u503c \u7684 \u90e8\u5206 \u4fdd\u7559 \uff0c \u90fd \u6ca1\u6709 \u503c \u7684 \u90e8\u5206 \u7ee7\u7eed \u8bbe\u4e3a \u7a7a   Returns   -------   ` pd . DataFrame `   \u5408\u5e76 \u540e \u7684 df   \" \" \"   dfs   =   [   i   .   fillna   (   0   )   for   i   in   args   ]   background   =   np   .   sign   (   np   .   abs   (   np   .   sign   (   sum   (   dfs   ) ) )   +   1   )   .   replace   (   1   ,   0   )   dfs   =   [ (   i   +   background   )   .   fillna   (   0   )   for   i   in   dfs   ]   df _ nans   =   [   i   .   isna   ( )   for   i   in   dfs   ]   nan   =   reduce   (   lambda   x   ,   y   :   x   *   y   ,   df _ nans   )   nan   =   nan   .   replace   (   1   ,   np   .   nan   )   nan   =   nan   .   replace   (   0   ,   1   )   df _ final   =   sum   (   dfs   )   *   nan   return   df _ final   read _ mat   (   path   )   \u00b6   \u8bfb\u53d6 mat \u6587\u4ef6   Parameters   \u00b6   path   :   str   mat \u6587\u4ef6 \u8def\u5f84   Returns   \u00b6   pd . DataFrame   \u5b57\u5178 \u7684 \u7b2c 4 \u4e2a value   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   @ do _ on _ dfs   def   read _ mat   (   path   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u8bfb\u53d6 mat \u6587\u4ef6   Parameters   ----------   path   :   str   mat \u6587\u4ef6 \u8def\u5f84   Returns   -------   ` pd . DataFrame `   \u5b57\u5178 \u7684 \u7b2c 4 \u4e2a value   \" \" \"   return   list   (   scio   .   loadmat   (   path   )   .   values   ( ) ) [   3   ]   rqdatac _ show _ used   ( )   \u00b6   \u67e5\u8be2 \u6d41\u91cf \u4f7f\u7528 \u60c5\u51b5   Returns   \u00b6   float   \u5f53\u65e5 \u5df2\u7ecf \u4f7f\u7528 \u7684 \u6d41\u91cf MB \u6570   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   255   256   257   258   259   260   261   262   263   264   265   def   rqdatac _ show _ used   ( )   - >   float   :   \" \" \" \u67e5\u8be2 \u6d41\u91cf \u4f7f\u7528 \u60c5\u51b5   Returns   -------   ` float `   \u5f53\u65e5 \u5df2\u7ecf \u4f7f\u7528 \u7684 \u6d41\u91cf MB \u6570   \" \" \"   user2   =   round   (   rqdatac   .   user   .   get _ quota   ( ) [   \" bytes _ used \"   ]   /   1024   /   1024   ,   2   )   print   (   f   \" \u4eca\u65e5 \u5df2 \u4f7f\u7528 rqsdk \u6d41\u91cf   {   user2   }   MB \"   )   return   user2   same _ columns   (   dfs   )   \u00b6   \u4fdd\u7559 \u591a\u4e2a dataframe \u5171\u540c columns \u7684 \u90e8\u5206   Parameters   \u00b6   dfs   :   List [ pd . DataFrame ]   \u591a\u4e2a dataframe   Returns   \u00b6   List [ pd . DataFrame ]   \u4fdd\u7559 \u5171\u540c \u90e8\u5206 \u540e \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1377   1378   1379   1380   1381   1382   1383   1384   1385   1386   1387   1388   1389   1390   1391   1392   1393   1394   1395   1396   1397   1398   def   same _ columns   (   dfs   :   List   [   pd   .   DataFrame   ] )   - >   List   [   pd   .   DataFrame   ] :   \" \" \" \u4fdd\u7559 \u591a\u4e2a dataframe \u5171\u540c columns \u7684 \u90e8\u5206   Parameters   ----------   dfs   :   List [ pd . DataFrame ]   \u591a\u4e2a dataframe   Returns   -------   List [ pd . DataFrame ]   \u4fdd\u7559 \u5171\u540c \u90e8\u5206 \u540e \u7684 \u7ed3\u679c   \" \" \"   dfs   =   [   i   .   T   for   i   in   dfs   ]   res   =   [ ]   for   i   ,   df   in   enumerate   (   dfs   ) :   others   =   dfs   [ :   i   ]   +   dfs   [   i   +   1   : ]   for   other   in   others   :   df   =   df   [   df   .   index   .   isin   (   other   .   index   ) ]   res   .   append   (   df   .   T   )   return   res   same _ index   (   dfs   )   \u00b6   \u4fdd\u7559 \u591a\u4e2a dataframe \u5171\u540c index \u7684 \u90e8\u5206   Parameters   \u00b6   dfs   :   List [ pd . DataFrame ]   \u591a\u4e2a dataframe   Returns   \u00b6   List [ pd . DataFrame ]   \u4fdd\u7559 \u5171\u540c \u90e8\u5206 \u540e \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1401   1402   1403   1404   1405   1406   1407   1408   1409   1410   1411   1412   1413   1414   1415   1416   1417   1418   1419   1420   1421   def   same _ index   (   dfs   :   List   [   pd   .   DataFrame   ] )   - >   List   [   pd   .   DataFrame   ] :   \" \" \" \u4fdd\u7559 \u591a\u4e2a dataframe \u5171\u540c index \u7684 \u90e8\u5206   Parameters   ----------   dfs   :   List [ pd . DataFrame ]   \u591a\u4e2a dataframe   Returns   -------   List [ pd . DataFrame ]   \u4fdd\u7559 \u5171\u540c \u90e8\u5206 \u540e \u7684 \u7ed3\u679c   \" \" \"   res   =   [ ]   for   i   ,   df   in   enumerate   (   dfs   ) :   others   =   dfs   [ :   i   ]   +   dfs   [   i   +   1   : ]   for   other   in   others   :   df   =   df   [   df   .   index   .   isin   (   other   .   index   ) ]   res   .   append   (   df   )   return   res   select _ max   (   df1   ,   df2   )   \u00b6   \u4e24\u4e2a columns \u4e0e index \u5b8c\u5168 \u76f8\u540c \u5b8c\u5168\u76f8\u540c \u7684 df \uff0c \u6bcf\u4e2a \u503c \u90fd \u6311\u51fa \u8f83\u5927 \u503c   Parameters   \u00b6   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a df   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a df   Returns   \u00b6   pd . DataFrame   \u4e24\u4e2a df \u6bcf\u4e2a value \u4e2d \u7684 \u8f83\u5927 \u8005   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   979   980   981   982   983   984   985   986   987   988   989   990   991   992   993   994   def   select _ max   (   df1   :   pd   .   DataFrame   ,   df2   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u4e24\u4e2a columns \u4e0e index \u5b8c\u5168 \u76f8\u540c \u5b8c\u5168\u76f8\u540c \u7684 df \uff0c \u6bcf\u4e2a \u503c \u90fd \u6311\u51fa \u8f83\u5927 \u503c   Parameters   ----------   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a df   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a df   Returns   -------   ` pd . DataFrame `   \u4e24\u4e2a df \u6bcf\u4e2a value \u4e2d \u7684 \u8f83\u5927 \u8005   \" \" \"   return   (   df1   +   df2   +   np   .   abs   (   df1   -   df2   ) )   /   2   select _ min   (   df1   ,   df2   )   \u00b6   \u4e24\u4e2a columns \u4e0e index \u5b8c\u5168 \u76f8\u540c \u5b8c\u5168\u76f8\u540c \u7684 df \uff0c \u6bcf\u4e2a \u503c \u90fd \u6311\u51fa \u8f83\u5c0f\u503c   Parameters   \u00b6   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a df   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a df   Returns   \u00b6   pd . DataFrame   \u4e24\u4e2a df \u6bcf\u4e2a value \u4e2d \u7684 \u8f83 \u5c0f\u8005   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   997   998   999   1000   1001   1002   1003   1004   1005   1006   1007   1008   1009   1010   1011   1012   def   select _ min   (   df1   :   pd   .   DataFrame   ,   df2   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u4e24\u4e2a columns \u4e0e index \u5b8c\u5168 \u76f8\u540c \u5b8c\u5168\u76f8\u540c \u7684 df \uff0c \u6bcf\u4e2a \u503c \u90fd \u6311\u51fa \u8f83\u5c0f\u503c   Parameters   ----------   df1   :   pd . DataFrame   \u7b2c\u4e00 \u4e00\u4e2a \u7b2c\u4e00\u4e2a df   df2   :   pd . DataFrame   \u7b2c\u4e8c \u4e8c\u4e2a \u7b2c\u4e8c\u4e2a df   Returns   -------   ` pd . DataFrame `   \u4e24\u4e2a df \u6bcf\u4e2a value \u4e2d \u7684 \u8f83 \u5c0f\u8005   \" \" \"   return   (   df1   +   df2   -   np   .   abs   (   df1   -   df2   ) )   /   2   set _ index _ first   (   df   )   \u00b6   \u5c06 dataframe \u7684 \u7b2c\u4e00 \u4e00\u5217 \u7b2c\u4e00\u5217 \uff0c \u65e0\u8bba \u5176\u662f \u4ec0\u4e48 \u540d\u5b57 \uff0c \u90fd \u8bbe\u7f6e \u4e3a index   Parameters   \u00b6   df   :   pd . DataFrame   \u8981 \u4fee\u6539 \u7684 dataframe   Returns   pd . DataFrame   \u4fee\u6539 \u540e \u7684 dataframe   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   @ do _ on _ dfs   def   set _ index _ first   (   df   :   pd   .   DataFrame   )   - >   pd   .   DataFrame   :   \" \" \" \u5c06 dataframe \u7684 \u7b2c\u4e00 \u4e00\u5217 \u7b2c\u4e00\u5217 \uff0c \u65e0\u8bba \u5176\u662f \u4ec0\u4e48 \u540d\u5b57 \uff0c \u90fd \u8bbe\u7f6e \u4e3a index   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u4fee\u6539 \u7684 dataframe   Returns   -------   pd . DataFrame   \u4fee\u6539 \u540e \u7684 dataframe   \" \" \"   df   =   df   .   set _ index   (   list   (   df   .   columns   ) [   0   ] )   return   df   standardlize   (   df   ,   all _ pos   =   0   )   \u00b6   \u5bf9 \u56e0\u5b50 dataframe \u505a \u622a\u9762 \u6a2a\u622a\u9762 z - score \u6807\u51c6 \u6807\u51c6\u5316   Parameters   \u00b6   df   :   pd . DataFrame   \u8981 \u505a \u4e2d\u6027 \u4e2d\u6027\u5316 \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   all _ pos   :   bool ,   optional   \u662f\u5426 \u8981 \u5c06 \u503c \u90fd \u53d8\u6210 \u6b63\u6570 \uff0c \u901a\u8fc7 \u51cf\u53bb \u622a\u9762 \u7684 \u6700\u5c0f \u6700\u5c0f\u503c \u5b9e\u73b0 ,   by   default   0   Returns   \u00b6   pd . DataFrame   \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1033   1034   1035   1036   1037   1038   1039   1040   1041   1042   1043   1044   1045   1046   1047   1048   1049   1050   1051   1052   @ do _ on _ dfs   def   standardlize   (   df   :   pd   .   DataFrame   ,   all _ pos   :   bool   =   0   )   - >   pd   .   DataFrame   :   \" \" \" \u5bf9 \u56e0\u5b50 dataframe \u505a \u622a\u9762 \u6a2a\u622a\u9762 z - score \u6807\u51c6 \u6807\u51c6\u5316   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u505a \u4e2d\u6027 \u4e2d\u6027\u5316 \u7684 \u56e0\u5b50 \u503c \uff0c index \u662f \u65f6\u95f4 \uff0c columns \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801   all _ pos   :   bool ,   optional   \u662f\u5426 \u8981 \u5c06 \u503c \u90fd \u53d8\u6210 \u6b63\u6570 \uff0c \u901a\u8fc7 \u51cf\u53bb \u622a\u9762 \u7684 \u6700\u5c0f \u6700\u5c0f\u503c \u5b9e\u73b0 ,   by   default   0   Returns   -------   pd . DataFrame   \u6807\u51c6 \u6807\u51c6\u5316 \u4e4b\u540e \u7684 \u56e0\u5b50   \" \" \"   df   =   ( (   df   .   T   -   df   .   T   .   mean   ( ) )   /   df   .   T   .   std   ( ) )   .   T   if   all _ pos   :   df   =   (   df   .   T   -   df   .   T   .   min   ( ) )   .   T   return   df   to _ group   (   df   ,   group   =   10   )   \u00b6   \u628a \u4e00\u4e2a index \u4e3a \u65f6\u95f4 \uff0c code \u4e3a \u65f6\u95f4 \u7684 df \uff0c \u6bcf\u4e2a \u622a\u9762 \u4e0a \u7684 \u503c \uff0c \u6309\u7167 \u6392\u5e8f \u5206\u4e3a group \u7ec4 \uff0c \u5c06\u503c \u6539\u4e3a \u7ec4\u53f7 \uff0c \u4ece 0 \u5f00\u59cb   Parameters   \u00b6   df   :   pd . DataFrame   \u8981 \u6539\u4e3a \u7ec4\u53f7 \u7684 df   group   :   int ,   optional   \u5206\u4e3a \u591a\u5c11 \u7ec4 ,   by   default   10   Returns   \u00b6   pd . DataFrame   \u7ec4\u53f7 \u7ec4\u6210 \u7684 dataframe   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1357   1358   1359   1360   1361   1362   1363   1364   1365   1366   1367   1368   1369   1370   1371   1372   1373   1374   @ do _ on _ dfs   def   to _ group   (   df   :   pd   .   DataFrame   ,   group   :   int   =   10   )   - >   pd   .   DataFrame   :   \" \" \" \u628a \u4e00\u4e2a index \u4e3a \u65f6\u95f4 \uff0c code \u4e3a \u65f6\u95f4 \u7684 df \uff0c \u6bcf\u4e2a \u622a\u9762 \u4e0a \u7684 \u503c \uff0c \u6309\u7167 \u6392\u5e8f \u5206\u4e3a group \u7ec4 \uff0c \u5c06\u503c \u6539\u4e3a \u7ec4\u53f7 \uff0c \u4ece 0 \u5f00\u59cb   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u6539\u4e3a \u7ec4\u53f7 \u7684 df   group   :   int ,   optional   \u5206\u4e3a \u591a\u5c11 \u7ec4 ,   by   default   10   Returns   -------   pd . DataFrame   \u7ec4\u53f7 \u7ec4\u6210 \u7684 dataframe   \" \" \"   df   =   df   .   T   .   apply   (   lambda   x   :   pd   .   qcut   (   x   ,   group   ,   labels   =   False   ,   duplicates   =   \" drop \"   ) )   .   T   return   df   to _ percent   (   x   )   \u00b6   \u628a \u5c0f\u6570 \u8f6c\u5316 \u4e3a 2 \u4f4d \u5c0f\u6570 \u7684 \u767e\u5206 \u5206\u6570 \u767e\u5206\u6570   Parameters   \u00b6   x   :   float   \u8981 \u8f6c\u6362 \u7684 \u5c0f\u6570   Returns   \u00b6   Union [ float , str ]   \u7a7a\u503c \u5219 \u4f9d\u7136 \u4e3a\u7a7a \uff0c \u5426\u5219 \u8fd4\u56de \u5e26 % \u7684 \u5b57\u7b26 \u5b57\u7b26\u4e32   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1254   1255   1256   1257   1258   1259   1260   1261   1262   1263   1264   1265   1266   1267   1268   1269   1270   1271   1272   @ do _ on _ dfs   def   to _ percent   (   x   :   float   )   - >   Union   [   float   ,   str   ] :   \" \" \" \u628a \u5c0f\u6570 \u8f6c\u5316 \u4e3a 2 \u4f4d \u5c0f\u6570 \u7684 \u767e\u5206 \u5206\u6570 \u767e\u5206\u6570   Parameters   ----------   x   :   float   \u8981 \u8f6c\u6362 \u7684 \u5c0f\u6570   Returns   -------   Union [ float , str ]   \u7a7a\u503c \u5219 \u4f9d\u7136 \u4e3a\u7a7a \uff0c \u5426\u5219 \u8fd4\u56de \u5e26 % \u7684 \u5b57\u7b26 \u5b57\u7b26\u4e32   \" \" \"   if   np   .   isnan   (   x   ) :   return   x   else   :   x   =   str   (   round   (   x   *   100   ,   2   ) )   +   \" % \"   return   x   zip _ many _ dfs   (   dfs   )   \u00b6   \u5c06 \u591a\u4e2a dataframe \uff0c \u4e00\u8d77 \u62fc\u5728\u4e00\u8d77 \uff0c \u76f8\u540c index \u548c columns \u6307\u5411 \u7684 \u90a3\u4e2a values \uff0c \u53d8\u4e3a \u591a\u4e2a dataframe \u7684 \u503c \u7684 \u5217\u8868   \u901a\u5e38 \u7528\u4e8e \u5b58\u50a8 \u6574\u5408 \u5206\u949f \u6570\u636e \u8ba1\u7b97 \u7684 \u56e0\u5b50 \u503c   Parameters   \u00b6   dfs   :   List [ pd . DataFrame ]   \u591a\u4e2a dataframe \uff0c \u6bcf \u4e00\u4e2a \u7684 values \u90fd \u662f float \u5f62\u5f0f   Returns   \u00b6   pd . DataFrame   \u6574\u5408 \u540e \u7684 dataframe \uff0c \u6bcf \u4e00\u4e2a values \u90fd \u662f list \u7684 \u5f62\u5f0f   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1458   1459   1460   1461   1462   1463   1464   1465   1466   1467   1468   1469   1470   1471   1472   1473   1474   1475   1476   def   zip _ many _ dfs   (   dfs   :   List   [   pd   .   DataFrame   ] )   - >   pd   .   DataFrame   :   \" \" \" \u5c06 \u591a\u4e2a dataframe \uff0c \u4e00\u8d77 \u62fc\u5728\u4e00\u8d77 \uff0c \u76f8\u540c index \u548c columns \u6307\u5411 \u7684 \u90a3\u4e2a values \uff0c \u53d8\u4e3a \u591a\u4e2a dataframe \u7684 \u503c \u7684 \u5217\u8868   \u901a\u5e38 \u7528\u4e8e \u5b58\u50a8 \u6574\u5408 \u5206\u949f \u6570\u636e \u8ba1\u7b97 \u7684 \u56e0\u5b50 \u503c   Parameters   ----------   dfs   :   List [ pd . DataFrame ]   \u591a\u4e2a dataframe \uff0c \u6bcf \u4e00\u4e2a \u7684 values \u90fd \u662f float \u5f62\u5f0f   Returns   -------   pd . DataFrame   \u6574\u5408 \u540e \u7684 dataframe \uff0c \u6bcf \u4e00\u4e2a values \u90fd \u662f list \u7684 \u5f62\u5f0f   \" \" \"   df   =   merge _ many   (   dfs   )   cols   =   [   df   [   f   \" fac   {   i   }   \"   ]   for   i   in   range   (   1   ,   len   (   dfs   )   +   1   ) ]   df   =   df   .   assign   (   fac   =   pd   .   Series   (   zip   (   *   cols   ) ) )   df   =   df   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" fac \"   )   return   df   \u751f\u6210 \u6bcf\u65e5 \u5206\u7c7b \u8868   (   df   ,   code   ,   entry   ,   exit   ,   kind   )   \u00b6   Text   Only   1   2   3   4   5   6   7   df \u662f \u8981 \u5305\u542b \u4efb\u610f \u591a\u5217 \u7684 \u8868\u683c \uff0c \u4e3a dataframe \u683c\u5f0f \uff0c \u4e3b\u8981 \u5185\u5bb9 \u4e3a \uff0c \u6bcf \u4e00\u884c \u662f   \u4e00\u53ea \u80a1\u7968 \u6216 \u4e00\u53ea \u57fa\u91d1 \u7684 \u4ee3\u7801 \u3001 \u5206\u7c7b \u3001 \u8fdb\u5165 \u8be5 \u5206\u7c7b \u7684 \u65f6\u95f4 \u3001 \u79fb\u9664 \u8be5 \u5206\u7c7b \u7684 \u65f6\u95f4 \uff0c   \u9664\u6b64 \u4e4b\u5916 \u9664\u6b64\u4e4b\u5916 \uff0c \u8fd8 \u53ef\u4ee5 \u5305\u542b \u5f88\u591a \u5176\u4ed6 \u5185\u5bb9   code \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u5217 \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f \uff1b   entry \u662f \u80a1\u7968 \u8fdb\u5165 \u8be5 \u5206\u7c7b \u7684 \u65e5\u671f \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   exit \u662f \u80a1\u7968 \u9000\u51fa \u8be5 \u5206\u7c7b \u7684 \u65e5\u671f \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   kind \u662f \u5206\u7c7b \u5217 \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   @ do _ on _ dfs   def   \u751f\u6210 \u6bcf\u65e5 \u5206\u7c7b \u8868   (   df   :   pd   .   DataFrame   ,   code   :   str   ,   entry   :   str   ,   exit   :   str   ,   kind   :   str   )   - >   pd   .   DataFrame   :   \" \" \"   ` ` `   df \u662f \u8981 \u5305\u542b \u4efb\u610f \u591a\u5217 \u7684 \u8868\u683c \uff0c \u4e3a dataframe \u683c\u5f0f \uff0c \u4e3b\u8981 \u5185\u5bb9 \u4e3a \uff0c \u6bcf \u4e00\u884c \u662f   \u4e00\u53ea \u80a1\u7968 \u6216 \u4e00\u53ea \u57fa\u91d1 \u7684 \u4ee3\u7801 \u3001 \u5206\u7c7b \u3001 \u8fdb\u5165 \u8be5 \u5206\u7c7b \u7684 \u65f6\u95f4 \u3001 \u79fb\u9664 \u8be5 \u5206\u7c7b \u7684 \u65f6\u95f4 \uff0c   \u9664\u6b64 \u4e4b\u5916 \u9664\u6b64\u4e4b\u5916 \uff0c \u8fd8 \u53ef\u4ee5 \u5305\u542b \u5f88\u591a \u5176\u4ed6 \u5185\u5bb9   code \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u5217 \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f \uff1b   entry \u662f \u80a1\u7968 \u8fdb\u5165 \u8be5 \u5206\u7c7b \u7684 \u65e5\u671f \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   exit \u662f \u80a1\u7968 \u9000\u51fa \u8be5 \u5206\u7c7b \u7684 \u65e5\u671f \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   kind \u662f \u5206\u7c7b \u5217 \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   ` ` `   \" \" \"   df   =   df   [ [   code   ,   entry   ,   exit   ,   kind   ] ]   df   =   df   .   fillna   (   int   (   datetime   .   datetime   .   now   ( )   .   strftime   (   \" % Y% m   % d   \"   ) ) )   try   :   if   type   (   df   [   entry   ]   .   iloc   [   0   ] )   = =   str   :   df   [   entry   ]   =   df   [   entry   ]   .   astype   (   str   )   df   [   exit   ]   =   df   [   exit   ]   .   astype   (   str   )   else   :   df   [   entry   ]   =   df   [   entry   ]   .   astype   (   int   )   .   astype   (   str   )   df   [   exit   ]   =   df   [   exit   ]   .   astype   (   int   )   .   astype   (   str   )   except   Exception   :   print   (   \" \u60a8 \u7684 \u8fdb\u5165 \u65e5\u671f \u548c \u63a8\u51fa \u65e5\u671f \uff0c \u65e2 \u4e0d\u662f \u5b57\u7b26 \u5b57\u7b26\u4e32 \uff0c \u53c8 \u4e0d\u662f \u6570\u5b57 \u683c\u5f0f \uff0c \u597d\u597d \u68c0\u67e5 \u4e00\u4e0b \u68c0\u67e5\u4e00\u4e0b \u5427 \"   )   df   =   df   .   set _ index   ( [   code   ,   kind   ] )   df   =   df   .   stack   ( )   .   to _ frame   (   name   =   \" date \"   )   def   fill _ middle   (   df1   ) :   min _ time   =   df1   .   date   .   min   ( )   max _ time   =   df1   .   date   .   max   ( )   df2   =   pd   .   DataFrame   ( {   \" date \"   :   pd   .   date _ range   (   min _ time   ,   max _ time   ) } )   return   df2   ff   =   df   .   reset _ index   ( )   .   groupby   ( [   code   ,   kind   ] )   .   apply   (   fill _ middle   )   ff   =   ff   .   reset _ index   ( )   ff   =   ff   [ [   code   ,   kind   ,   \" date \"   ] ]   ff   =   ff   [   ff   .   date   > =   pd   .   Timestamp   (   \" 2004 - 01 - 01 \"   ) ]   return   ff   \u8ba1\u7b97 \u8fde\u7eed \u671f\u6570   (   ret0   ,   point   =   0   )   \u00b6   \u8ba1\u7b97 \u4e00\u5217 \u6570 \uff0c \u6301\u7eed \u5927\u4e8e \u6216 \u6301\u7eed \u5c0f\u4e8e \u67d0\u4e2a \u4e34\u754c \u4e34\u754c\u70b9 \u7684 \u671f\u6570   Parameters   \u00b6   ret0   :   pd . Series   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u3001 \u6216\u8005 \u67d0\u4e2a \u6307\u6807 \u7684 \u5e8f\u5217   point   :   float ,   optional   \u4e34\u754c \u4e34\u754c\u503c ,   by   default   0   Returns   \u00b6   pd . Series   \u6301\u7eed \u5927\u4e8e \u6216 \u5c0f\u4e8e \u7684 \u671f\u6570   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1799   1800   1801   1802   1803   1804   1805   1806   1807   1808   1809   1810   1811   1812   1813   1814   1815   1816   1817   1818   1819   1820   1821   1822   1823   1824   1825   1826   1827   1828   1829   1830   @ do _ on _ dfs   def   \u8ba1\u7b97 \u8fde\u7eed \u671f\u6570   (   ret0   :   pd   .   Series   ,   point   :   float   =   0   )   - >   pd   .   Series   :   \" \" \" \u8ba1\u7b97 \u4e00\u5217 \u6570 \uff0c \u6301\u7eed \u5927\u4e8e \u6216 \u6301\u7eed \u5c0f\u4e8e \u67d0\u4e2a \u4e34\u754c \u4e34\u754c\u70b9 \u7684 \u671f\u6570   Parameters   ----------   ret0   :   pd . Series   \u6536\u76ca \u6536\u76ca\u7387 \u5e8f\u5217 \u3001 \u6216\u8005 \u67d0\u4e2a \u6307\u6807 \u7684 \u5e8f\u5217   point   :   float ,   optional   \u4e34\u754c \u4e34\u754c\u503c ,   by   default   0   Returns   -------   pd . Series   \u6301\u7eed \u5927\u4e8e \u6216 \u5c0f\u4e8e \u7684 \u671f\u6570   \" \" \"   ret   =   ret0   .   copy   ( )   ret   =   ( (   ret   > =   point   )   +   0   )   .   replace   (   0   ,   -   1   )   ret   =   ret   .   to _ frame   (   \" signal \"   )   .   assign   (   num   =   range   (   ret   .   shape   [   0   ] ) )   ret   .   signal   =   ret   .   signal   .   diff   ( )   .   shift   (   -   1   )   ret1   =   ret   [   ret   .   signal   ! =   0   ]   ret1   =   ret1   .   assign   (   duration   =   ret1   .   num   .   diff   ( ) )   ret   =   pd   .   concat   ( [   ret   ,   ret1   [ [   \" duration \"   ] ] ] ,   axis   =   1   )   ret   .   signal   =   ret   .   signal   .   diff   ( )   ret2   =   ret   [   ret   .   signal   .   abs   ( )   = =   2   ]   ret2   =   ret2   .   assign   (   add _ duration   =   1   )   ret   =   pd   .   concat   ( [   ret   ,   ret2   [ [   \" add _ duration \"   ] ] ] ,   axis   =   1   )   ret   .   duration   =   ret   .   duration   .   fillna   (   0   )   ret   .   add _ duration   =   ret   .   add _ duration   .   fillna   (   0   )   ret   .   duration   =   select _ max   (   ret   .   duration   ,   ret   .   add _ duration   )   ret   .   duration   =   ret   .   duration   .   replace   (   0   ,   np   .   nan   )   .   interpolate   ( )   return   ret   .   duration","title":"tools"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn","text":"Bases :   object   \u56e0\u5b50 \u5207\u5272 \u8bba \u7684 \u6bcd \u6846\u67b6 \uff0c \u53ef\u4ee5 \u5bf9 \u4e24\u4e2a \u56e0\u5b50 \u8fdb\u884c \u7c7b\u4f3c \u4e8e \u56e0\u5b50 \u5207\u5272 \u7684 \u64cd\u4f5c   \u53ef \u7528\u4e8e \u6d3e\u751f \u4efb\u4f55 \" \u4ee5 \u4e24\u4e2a \u56e0\u5b50 \u751f\u6210 \u4e00\u4e2a \u56e0\u5b50 \" \u7684 \u5b50\u7c7b   \u4f7f\u7528 \u4e3e\u4f8b   cut \u51fd\u6570 \u91cc \uff0c \u5fc5\u987b \u5e26\u6709 \u8f93\u5165 \u53d8\u91cf df , df \u6709 \u4e24\u4e2a columns \uff0c \u4e00\u4e2a \u540d\u4e3a ' fac1 ' \uff0c \u4e00\u4e2a \u540d\u4e3a ' fac2 ' \uff0c df \u662f \u6700\u8fd1 \u4e00\u4e2a \u56de\u770b \u671f\u5185 \u7684 \u6570\u636e   Python   1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   class   Cut   (   pure _ dawn   ) :   def   cut   (   self   ,   df   ) :   df   =   df   .   sort _ values   (   ' fac1 '   )   df   =   df   .   assign   (   fac3   =   df   .   fac1   *   df   .   fac2   )   ret0   =   df   .   fac2   .   iloc   [ :   4   ]   .   mean   ( )   ret1   =   df   .   fac2   .   iloc   [   4   :   8   ]   .   mean   ( )   ret2   =   df   .   fac2   .   iloc   [   8   :   12   ]   .   mean   ( )   ret3   =   df   .   fac2   .   iloc   [   12   :   16   ]   .   mean   ( )   ret4   =   df   .   fac2   .   iloc   [   16   : ]   .   mean   ( )   aret0   =   df   .   fac3   .   iloc   [ :   4   ]   .   mean   ( )   aret1   =   df   .   fac3   .   iloc   [   4   :   8   ]   .   mean   ( )   aret2   =   df   .   fac3   .   iloc   [   8   :   12   ]   .   mean   ( )   aret3   =   df   .   fac3   .   iloc   [   12   :   16   ]   .   mean   ( )   aret4   =   df   .   fac3   .   iloc   [   16   : ]   .   mean   ( )   return   ret0   ,   ret1   ,   ret2   ,   ret3   ,   ret4   ,   aret0   ,   aret1   ,   aret2   ,   aret3   ,   aret4   cut   =   Cut   (   ct   ,   ret _ inday   )   cut   .   run   (   cut   .   cut   )   cut0   =   get _ value   (   cut   ( ) ,   0   )   cut1   =   get _ value   (   cut   ( ) ,   1   )   cut2   =   get _ value   (   cut   ( ) ,   2   )   cut3   =   get _ value   (   cut   ( ) ,   3   )   cut4   =   get _ value   (   cut   ( ) ,   4   )   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   class   pure _ dawn   (   object   ) :   \" \" \"   \u56e0\u5b50 \u5207\u5272 \u8bba \u7684 \u6bcd \u6846\u67b6 \uff0c \u53ef\u4ee5 \u5bf9 \u4e24\u4e2a \u56e0\u5b50 \u8fdb\u884c \u7c7b\u4f3c \u4e8e \u56e0\u5b50 \u5207\u5272 \u7684 \u64cd\u4f5c   \u53ef \u7528\u4e8e \u6d3e\u751f \u4efb\u4f55 \" \u4ee5 \u4e24\u4e2a \u56e0\u5b50 \u751f\u6210 \u4e00\u4e2a \u56e0\u5b50 \" \u7684 \u5b50\u7c7b   \u4f7f\u7528 \u4e3e\u4f8b   cut \u51fd\u6570 \u91cc \uff0c \u5fc5\u987b \u5e26\u6709 \u8f93\u5165 \u53d8\u91cf df , df \u6709 \u4e24\u4e2a columns \uff0c \u4e00\u4e2a \u540d\u4e3a ' fac1 ' \uff0c \u4e00\u4e2a \u540d\u4e3a ' fac2 ' \uff0c df \u662f \u6700\u8fd1 \u4e00\u4e2a \u56de\u770b \u671f\u5185 \u7684 \u6570\u636e   ` ` ` python   class   Cut ( pure _ dawn ) :   def   cut ( self , df ) :   df = df . sort _ values ( ' fac1 ' )   df = df . assign ( fac3 = df . fac1 * df . fac2 )   ret0 = df . fac2 . iloc [ : 4 ] . mean ( )   ret1 = df . fac2 . iloc [ 4 : 8 ] . mean ( )   ret2 = df . fac2 . iloc [ 8 : 12 ] . mean ( )   ret3 = df . fac2 . iloc [ 12 : 16 ] . mean ( )   ret4 = df . fac2 . iloc [ 16 : ] . mean ( )   aret0 = df . fac3 . iloc [ : 4 ] . mean ( )   aret1 = df . fac3 . iloc [ 4 : 8 ] . mean ( )   aret2 = df . fac3 . iloc [ 8 : 12 ] . mean ( )   aret3 = df . fac3 . iloc [ 12 : 16 ] . mean ( )   aret4 = df . fac3 . iloc [ 16 : ] . mean ( )   return   ret0 , ret1 , ret2 , ret3 , ret4 , aret0 , aret1 , aret2 , aret3 , aret4   cut = Cut ( ct , ret _ inday )   cut . run ( cut . cut )   cut0 = get _ value ( cut ( ) , 0 )   cut1 = get _ value ( cut ( ) , 1 )   cut2 = get _ value ( cut ( ) , 2 )   cut3 = get _ value ( cut ( ) , 3 )   cut4 = get _ value ( cut ( ) , 4 )   ` ` `   \" \" \"   def   __ init __   (   self   ,   fac1   :   pd   .   DataFrame   ,   fac2   :   pd   .   DataFrame   ,   *   args   :   list   )   - >   None   :   \" \" \" \u51e0\u4e2a \u56e0\u5b50 \u7684 \u64cd\u4f5c \uff0c \u6bcf\u4e2a \u6708 \u64cd\u4f5c \u4e00\u6b21   Parameters   ----------   fac1   :   pd . DataFrame   \u56e0\u5b50 \u503c 1 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   fac2   :   pd . DataFrame   \u56e0\u5b50 2 \uff0c index \u4e3a \u65f6\u95f4 \uff0c columns \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u56e0\u5b50 \u503c   \" \" \"   self   .   fac1   =   fac1   self   .   fac1   =   self   .   fac1   .   stack   ( )   .   reset _ index   ( )   self   .   fac1   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac1 \"   ]   self   .   fac2   =   fac2   self   .   fac2   =   self   .   fac2   .   stack   ( )   .   reset _ index   ( )   self   .   fac2   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac2 \"   ]   fac _ all   =   pd   .   merge   (   self   .   fac1   ,   self   .   fac2   ,   on   =   [   \" date \"   ,   \" code \"   ] )   for   i   ,   fac   in   enumerate   (   args   ) :   fac   =   fac   .   stack   ( )   .   reset _ index   ( )   fac   .   columns   =   [   \" date \"   ,   \" code \"   ,   f   \" fac   {   i   +   3   }   \"   ]   fac _ all   =   pd   .   merge   (   fac _ all   ,   fac   ,   on   =   [   \" date \"   ,   \" code \"   ] )   fac _ all   =   fac _ all   .   sort _ values   ( [   \" date \"   ,   \" code \"   ] )   self   .   fac   =   fac _ all   .   copy   ( )   def   __ call __   (   self   )   - >   pd   .   DataFrame   :   \" \" \" \u8fd4\u56de \u6700\u7ec8 \u6708\u5ea6 \u56e0\u5b50 \u503c   Returns   -------   ` pd . DataFrame `   \u6700\u7ec8 \u56e0\u5b50 \u503c   \" \" \"   return   self   .   fac   .   copy   ( )   def   get _ fac _ long _ and _ tradedays   (   self   ) :   \" \" \" \u5c06 \u4e24\u4e2a \u56e0\u5b50 \u7684 \u77e9\u9635 \u8f6c\u5316 \u4e3a\u957f \u5217\u8868 \" \" \"   self   .   tradedays   =   sorted   (   list   (   set   (   self   .   fac   .   date   ) ) )   def   get _ month _ starts _ and _ ends   (   self   ,   backsee   =   20   ) :   \" \" \" \u8ba1\u7b97 \u51fa \u6bcf\u4e2a \u6708 \u56de \u770b \u671f\u95f4 \u7684 \u8d77\u70b9 \u65e5 \u548c \u7ec8\u70b9 \u65e5 \" \" \"   self   .   month _ ends   =   [   i   for   i   ,   j   in   zip   (   self   .   tradedays   [ :   -   1   ] ,   self   .   tradedays   [   1   : ] )   if   i   .   month   ! =   j   .   month   ]   self   .   month _ ends   .   append   (   self   .   tradedays   [   -   1   ] )   self   .   month _ starts   =   [   self   .   find _ begin   (   self   .   tradedays   ,   i   ,   backsee   =   backsee   )   for   i   in   self   .   month _ ends   ]   self   .   month _ starts   [   0   ]   =   self   .   tradedays   [   0   ]   def   find _ begin   (   self   ,   tradedays   ,   end _ day   ,   backsee   =   20   ) :   \" \" \" \u627e\u51fa \u56de\u770b \u82e5\u5e72 \u82e5\u5e72\u5929 \u7684 \u5f00\u59cb \u65e5 \uff0c \u9ed8\u8ba4 \u4e3a 20 \" \" \"   end _ day _ index   =   tradedays   .   index   (   end _ day   )   start _ day _ index   =   end _ day _ index   -   backsee   +   1   start _ day   =   tradedays   [   start _ day _ index   ]   return   start _ day   def   make _ monthly _ factors _ single _ code   (   self   ,   df   ,   func   ,   daily   ) :   \" \" \"   \u5bf9 \u5355\u4e00 \u80a1\u7968 \u6765 \u8ba1\u7b97 \u6708\u5ea6 \u56e0\u5b50   func \u4e3a \u5355\u6708 \u6267\u884c \u7684 \u51fd\u6570 \uff0c \u8fd4\u56de \u8fd4\u56de\u503c \u5e94\u4e3a \u6708\u5ea6 \u56e0\u5b50 \uff0c \u5982 \u4e00\u4e2a float \u6216 \u4e00\u4e2a list   df \u4e3a \u4e00\u4e2a \u80a1\u7968 \u7684 \u56db \u5217\u8868 \uff0c \u5305\u542b \u65f6\u95f4 \u3001 \u4ee3\u7801 \u3001 \u56e0\u5b50 1 \u548c \u56e0\u5b50 2   \" \" \"   res   =   { }   if   daily   :   ones   =   [   self   .   find _ begin   (   i   )   for   i   in   self   .   tradedays   [   self   .   backsee   -   1   : ] ]   twos   =   self   .   tradedays   [   self   .   backsee   -   1   : ]   else   :   ones   =   self   .   month _ starts   twos   =   self   .   month _ ends   for   start   ,   end   in   zip   (   ones   ,   twos   ) :   this _ month   =   df   [ (   df   .   date   > =   start   )   &   (   df   .   date   < =   end   ) ]   res   [   end   ]   =   func   (   this _ month   )   dates   =   list   (   res   .   keys   ( ) )   corrs   =   list   (   res   .   values   ( ) )   part   =   pd   .   DataFrame   ( {   \" date \"   :   dates   ,   \" corr \"   :   corrs   } )   return   part   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   return   res   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   return   res   .   fac   return   full _ run   def   get _ monthly _ factor   (   self   ,   func   ,   whole _ cross   :   bool   =   0   ,   daily   :   bool   =   0   ,   history _ file   :   str   =   None   ) :   \" \" \" \u8fd0\u884c \u81ea\u5df1 \u5199 \u7684 \u51fd\u6570 \uff0c \u83b7\u5f97 \u6708\u5ea6 \u56e0\u5b50 \" \" \"   if   daily   :   iter _ item   =   self   .   tradedays   [   self   .   backsee   -   1   : ]   else   :   iter _ item   =   self   .   month _ ends   res   =   [ ]   if   history _ file   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history _ file   ) :   old   =   pd   .   read _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   old _ date   =   old   .   index   .   max   ( )   if   old _ date   = =   self   .   fac   .   date   .   max   ( ) :   logger   .   info   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \uff0c \u65e0\u9700 \u8ba1\u7b97 \"   )   self   .   fac   =   old   else   :   try   :   new _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   old _ date   ,   self   .   backsee   )   fac   =   self   .   fac   [   self   .   fac   .   date   >   new _ date   ]   iter _ item   =   [   i   for   i   in   iter _ item   if   i   >   new _ date   ]   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   =   pd   .   concat   ( [   old   ,   fac   ] )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   fac   =   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   fac   =   (   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   fac   .   columns   ) ]   fac   =   fac   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   =   pd   .   concat   ( [   old   ,   fac   ] )   self   .   fac   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   logger   .   success   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u66f4\u65b0 \u5b8c\u6210 \"   )   except   Exception   :   logger   .   info   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \uff0c \u65e0\u9700 \u8ba1\u7b97 \"   )   else   :   logger   .   info   (   \" \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u8ba1\u7b97 \uff0c \u8bf7 \u8010\u5fc3 \u7b49\u5f85 \u2026 \u2026 \"   )   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   self   .   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   self   .   fac   =   self   .   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   self   .   fac   =   (   self   .   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   self   .   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   fac   .   columns   ) ]   self   .   fac   =   self   .   fac   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   logger   .   success   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u5199\u5165 \u5b8c\u6210 \"   )   else   :   logger   .   warning   (   \" \u60a8 \u672c\u6b21 \u8ba1\u7b97 \u6ca1\u6709 \u6307\u5b9a \u4efb\u4f55 \u672c\u5730 \u6587\u4ef6 \u8def\u5f84 \uff0c \u8fd9 \u5f88 \u53ef\u80fd \u4f1a \u5bfc\u81f4 \u5927\u91cf \u7684 \u91cd\u590d \u8ba1\u7b97 \u548c \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u65f6\u95f4 \u6d6a\u8d39 \uff0c \u8bf7 \u6ce8\u610f \uff01 \"   )   if   daily   :   logger   .   warning   (   \" \u60a8 \u6307\u5b9a \u7684 \u662f \u65e5\u9891 \u8ba1\u7b97 \uff0c \u975e\u6708\u9891 \u8ba1\u7b97 \uff0c \u56e0\u6b64 \u5f3a\u70c8 \u5efa\u8bae \u5f3a\u70c8\u5efa\u8bae \u60a8 \u6307\u5b9a history _ file \u53c2\u6570 \uff01 \uff01 \"   )   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   self   .   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   self   .   fac   =   self   .   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   self   .   fac   =   (   self   .   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   self   .   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   fac   .   columns   ) ]   self   .   fac   =   self   .   fac   .   resample   (   \" M \"   )   .   last   ( )   @ kk   .   desktop _ sender   (   title   =   \" \u563f \uff0c \u5207\u5272 \u5b8c\u6210 \u5566 \ud83d\udec1 \"   )   def   run   (   self   ,   func   :   Callable   ,   backsee   :   int   =   20   ,   whole _ cross   :   bool   =   0   ,   daily   :   bool   =   0   ,   history _ file   :   str   =   None   ,   )   - >   None   :   \" \" \" \u6267\u884c \u8ba1\u7b97 \u7684 \u6846\u67b6 \uff0c \u4ea7\u751f \u56e0\u5b50 \u503c   Parameters   ----------   func   :   Callable   \u6bcf\u4e2a \u6708 \u8981 \u8fdb\u884c \u7684 \u64cd\u4f5c   backsee   :   int ,   optional   \u56de \u770b\u671f \uff0c \u5373 \u6bcf\u4e2a \u6708 \u6708\u5e95 \u5bf9 \u8fc7\u53bb \u591a\u5c11 \u5929 \u8fdb\u884c \u8ba1\u7b97 ,   by   default   20   whole _ cross   :   bool ,   optional   \u662f\u5426 \u540c\u65f6 \u53d6 \u622a\u9762 \u6a2a\u622a\u9762 \u4e0a \u6240\u6709 \u80a1\u7968 \u8fdb\u884c \u8ba1\u7b97 ,   by   default   20   daily   :   bool ,   optional   \u662f\u5426 \u6bcf\u65e5 \u8ba1\u7b97 ,   by   default   20   history _ file   :   str ,   optional   \u5b58\u50a8 \u5386\u53f2 \u6570\u636e \u5386\u53f2\u6570\u636e \u7684 \u6587\u4ef6 \u6587\u4ef6\u540d ,   by   default   None   \" \" \"   self   .   backsee   =   backsee   self   .   get _ fac _ long _ and _ tradedays   ( )   self   .   get _ month _ starts _ and _ ends   (   backsee   =   backsee   )   self   .   get _ monthly _ factor   (   func   ,   whole _ cross   =   whole _ cross   ,   daily   =   daily   ,   history _ file   =   history _ file   )","title":"pure _ dawn"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.__call__","text":"\u8fd4\u56de \u6700\u7ec8 \u6708\u5ea6 \u56e0\u5b50 \u503c","title":"__ call __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.__init__","text":"\u51e0\u4e2a \u56e0\u5b50 \u7684 \u64cd\u4f5c \uff0c \u6bcf\u4e2a \u6708 \u64cd\u4f5c \u4e00\u6b21","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.find_begin","text":"\u627e\u51fa \u56de\u770b \u82e5\u5e72 \u82e5\u5e72\u5929 \u7684 \u5f00\u59cb \u65e5 \uff0c \u9ed8\u8ba4 \u4e3a 20   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   472   473   474   475   476   477   def   find _ begin   (   self   ,   tradedays   ,   end _ day   ,   backsee   =   20   ) :   \" \" \" \u627e\u51fa \u56de\u770b \u82e5\u5e72 \u82e5\u5e72\u5929 \u7684 \u5f00\u59cb \u65e5 \uff0c \u9ed8\u8ba4 \u4e3a 20 \" \" \"   end _ day _ index   =   tradedays   .   index   (   end _ day   )   start _ day _ index   =   end _ day _ index   -   backsee   +   1   start _ day   =   tradedays   [   start _ day _ index   ]   return   start _ day","title":"find _ begin ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.for_cross_via_zip","text":"\u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   Python   1   2   3   4   return   (   pd   .   Series   ( [   1.54   ,   8.77   ,   9.99   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   pd   .   Series   ( [   3.54   ,   6.98   ,   9.01   \u2026 \u2026   ] ,   index   =   [   ' 000001 . SZ '   ,   ' 000002 . SZ '   ,   ' 000004 . SZ '   \u2026 \u2026   ] ) ,   )   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   @ staticmethod   def   for _ cross _ via _ zip   (   func   ) :   \" \" \" \u8fd4\u56de \u8fd4\u56de\u503c \u4e3a \u591a\u4e2a pd . Series \uff0c \u6bcf\u4e2a pd . Series \u7684 index \u4e3a \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \uff0c values \u4e3a \u5355\u4e2a \u56e0\u5b50 \u503c   \u4f8b\u5982   ` ` ` python   return   (   pd . Series ( [ 1.54 , 8.77 , 9.99 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   pd . Series ( [ 3.54 , 6.98 , 9.01 \u2026 \u2026 ] , index = [ ' 000001 . SZ ' , ' 000002 . SZ ' , ' 000004 . SZ ' \u2026 \u2026 ] ) ,   )   ` ` `   \u4e0a\u4f8b \u4e2d \uff0c \u6bcf\u4e2a \u80a1\u7968 \u4e00\u5929 \u8fd4\u56de \u4e24\u4e2a \u56e0\u5b50 \u503c \uff0c \u6bcf\u4e2a pd . Series \u5bf9\u5e94 \u4e00\u4e2a \u56e0\u5b50 \u503c   \" \" \"   def   full _ run   (   df   ,   *   args   ,   * *   kwargs   ) :   res   =   func   (   df   ,   *   args   ,   * *   kwargs   )   if   isinstance   (   res   ,   pd   .   Series   ) :   return   res   else   :   res   =   pd   .   concat   (   res   ,   axis   =   1   )   res   .   columns   =   [   f   \" fac   {   i   }   \"   for   i   in   range   (   len   (   res   .   columns   ) ) ]   res   =   res   .   assign   (   fac   =   list   (   zip   (   *   [   res   [   i   ]   for   i   in   list   (   res   .   columns   ) ] ) ) )   return   res   .   fac   return   full _ run","title":"for _ cross _ via _ zip ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.get_fac_long_and_tradedays","text":"\u5c06 \u4e24\u4e2a \u56e0\u5b50 \u7684 \u77e9\u9635 \u8f6c\u5316 \u4e3a\u957f \u5217\u8868   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   455   456   457   def   get _ fac _ long _ and _ tradedays   (   self   ) :   \" \" \" \u5c06 \u4e24\u4e2a \u56e0\u5b50 \u7684 \u77e9\u9635 \u8f6c\u5316 \u4e3a\u957f \u5217\u8868 \" \" \"   self   .   tradedays   =   sorted   (   list   (   set   (   self   .   fac   .   date   ) ) )","title":"get _ fac _ long _ and _ tradedays ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.get_month_starts_and_ends","text":"\u8ba1\u7b97 \u51fa \u6bcf\u4e2a \u6708 \u56de \u770b \u671f\u95f4 \u7684 \u8d77\u70b9 \u65e5 \u548c \u7ec8\u70b9 \u65e5   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   459   460   461   462   463   464   465   466   467   468   469   470   def   get _ month _ starts _ and _ ends   (   self   ,   backsee   =   20   ) :   \" \" \" \u8ba1\u7b97 \u51fa \u6bcf\u4e2a \u6708 \u56de \u770b \u671f\u95f4 \u7684 \u8d77\u70b9 \u65e5 \u548c \u7ec8\u70b9 \u65e5 \" \" \"   self   .   month _ ends   =   [   i   for   i   ,   j   in   zip   (   self   .   tradedays   [ :   -   1   ] ,   self   .   tradedays   [   1   : ] )   if   i   .   month   ! =   j   .   month   ]   self   .   month _ ends   .   append   (   self   .   tradedays   [   -   1   ] )   self   .   month _ starts   =   [   self   .   find _ begin   (   self   .   tradedays   ,   i   ,   backsee   =   backsee   )   for   i   in   self   .   month _ ends   ]   self   .   month _ starts   [   0   ]   =   self   .   tradedays   [   0   ]","title":"get _ month _ starts _ and _ ends ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.get_monthly_factor","text":"\u8fd0\u884c \u81ea\u5df1 \u5199 \u7684 \u51fd\u6570 \uff0c \u83b7\u5f97 \u6708\u5ea6 \u56e0\u5b50   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   def   get _ monthly _ factor   (   self   ,   func   ,   whole _ cross   :   bool   =   0   ,   daily   :   bool   =   0   ,   history _ file   :   str   =   None   ) :   \" \" \" \u8fd0\u884c \u81ea\u5df1 \u5199 \u7684 \u51fd\u6570 \uff0c \u83b7\u5f97 \u6708\u5ea6 \u56e0\u5b50 \" \" \"   if   daily   :   iter _ item   =   self   .   tradedays   [   self   .   backsee   -   1   : ]   else   :   iter _ item   =   self   .   month _ ends   res   =   [ ]   if   history _ file   is   not   None   :   if   os   .   path   .   exists   (   homeplace   .   update _ data _ file   +   history _ file   ) :   old   =   pd   .   read _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   old _ date   =   old   .   index   .   max   ( )   if   old _ date   = =   self   .   fac   .   date   .   max   ( ) :   logger   .   info   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \uff0c \u65e0\u9700 \u8ba1\u7b97 \"   )   self   .   fac   =   old   else   :   try   :   new _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   old _ date   ,   self   .   backsee   )   fac   =   self   .   fac   [   self   .   fac   .   date   >   new _ date   ]   iter _ item   =   [   i   for   i   in   iter _ item   if   i   >   new _ date   ]   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   =   pd   .   concat   ( [   old   ,   fac   ] )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   fac   =   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   fac   =   (   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   fac   .   columns   ) ]   fac   =   fac   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   =   pd   .   concat   ( [   old   ,   fac   ] )   self   .   fac   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   logger   .   success   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u66f4\u65b0 \u5b8c\u6210 \"   )   except   Exception   :   logger   .   info   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u662f \u6700\u65b0 \u7684 \u4e86 \uff0c \u65e0\u9700 \u8ba1\u7b97 \"   )   else   :   logger   .   info   (   \" \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u8ba1\u7b97 \uff0c \u8bf7 \u8010\u5fc3 \u7b49\u5f85 \u2026 \u2026 \"   )   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   self   .   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   self   .   fac   =   self   .   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   self   .   fac   =   (   self   .   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   self   .   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   fac   .   columns   ) ]   self   .   fac   =   self   .   fac   .   resample   (   \" M \"   )   .   last   ( )   self   .   fac   .   to _ parquet   (   homeplace   .   update _ data _ file   +   history _ file   )   logger   .   success   (   f   \" \u672c\u5730 \u6587\u4ef6 \u5df2\u7ecf \u5199\u5165 \u5b8c\u6210 \"   )   else   :   logger   .   warning   (   \" \u60a8 \u672c\u6b21 \u8ba1\u7b97 \u6ca1\u6709 \u6307\u5b9a \u4efb\u4f55 \u672c\u5730 \u6587\u4ef6 \u8def\u5f84 \uff0c \u8fd9 \u5f88 \u53ef\u80fd \u4f1a \u5bfc\u81f4 \u5927\u91cf \u7684 \u91cd\u590d \u8ba1\u7b97 \u548c \u4e0d\u5fc5 \u5fc5\u8981 \u4e0d\u5fc5\u8981 \u7684 \u65f6\u95f4 \u6d6a\u8d39 \uff0c \u8bf7 \u6ce8\u610f \uff01 \"   )   if   daily   :   logger   .   warning   (   \" \u60a8 \u6307\u5b9a \u7684 \u662f \u65e5\u9891 \u8ba1\u7b97 \uff0c \u975e\u6708\u9891 \u8ba1\u7b97 \uff0c \u56e0\u6b64 \u5f3a\u70c8 \u5efa\u8bae \u5f3a\u70c8\u5efa\u8bae \u60a8 \u6307\u5b9a history _ file \u53c2\u6570 \uff01 \uff01 \"   )   if   whole _ cross   :   for   end _ date   in   tqdm   .   auto   .   tqdm   (   iter _ item   ) :   start _ date   =   self   .   find _ begin   (   self   .   tradedays   ,   end _ date   ,   self   .   backsee   )   if   start _ date   <   end _ date   :   df   =   self   .   fac   [   (   self   .   fac   .   date   > =   start _ date   )   &   (   self   .   fac   .   date   < =   end _ date   )   ]   else   :   df   =   self   .   fac   [   self   .   fac   .   date   < =   end _ date   ]   df   =   func   (   df   )   df   =   df   .   to _ frame   ( )   .   T   df   .   index   =   [   end _ date   ]   res   .   append   (   df   )   self   .   fac   =   pd   .   concat   (   res   )   .   resample   (   \" M \"   )   .   last   ( )   else   :   tqdm   .   auto   .   tqdm   .   pandas   (   desc   =   \" when   the   dawn   comes ,   tonight   will   be   a   memory   too . \"   )   self   .   fac   =   self   .   fac   .   groupby   ( [   \" code \"   ] )   .   progress _ apply   (   lambda   x   :   self   .   make _ monthly _ factors _ single _ code   (   x   ,   func   ,   daily   =   daily   )   )   self   .   fac   =   (   self   .   fac   .   reset _ index   (   level   =   1   ,   drop   =   True   )   .   reset _ index   ( )   .   set _ index   ( [   \" date \"   ,   \" code \"   ] )   .   unstack   ( )   )   self   .   fac   .   columns   =   [   i   [   1   ]   for   i   in   list   (   self   .   fac   .   columns   ) ]   self   .   fac   =   self   .   fac   .   resample   (   \" M \"   )   .   last   ( )","title":"get _ monthly _ factor ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.make_monthly_factors_single_code","text":"\u5bf9 \u5355\u4e00 \u80a1\u7968 \u6765 \u8ba1\u7b97 \u6708\u5ea6 \u56e0\u5b50   func \u4e3a \u5355\u6708 \u6267\u884c \u7684 \u51fd\u6570 \uff0c \u8fd4\u56de \u8fd4\u56de\u503c \u5e94\u4e3a \u6708\u5ea6 \u56e0\u5b50 \uff0c \u5982 \u4e00\u4e2a float \u6216 \u4e00\u4e2a list   df \u4e3a \u4e00\u4e2a \u80a1\u7968 \u7684 \u56db \u5217\u8868 \uff0c \u5305\u542b \u65f6\u95f4 \u3001 \u4ee3\u7801 \u3001 \u56e0\u5b50 1 \u548c \u56e0\u5b50 2   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   def   make _ monthly _ factors _ single _ code   (   self   ,   df   ,   func   ,   daily   ) :   \" \" \"   \u5bf9 \u5355\u4e00 \u80a1\u7968 \u6765 \u8ba1\u7b97 \u6708\u5ea6 \u56e0\u5b50   func \u4e3a \u5355\u6708 \u6267\u884c \u7684 \u51fd\u6570 \uff0c \u8fd4\u56de \u8fd4\u56de\u503c \u5e94\u4e3a \u6708\u5ea6 \u56e0\u5b50 \uff0c \u5982 \u4e00\u4e2a float \u6216 \u4e00\u4e2a list   df \u4e3a \u4e00\u4e2a \u80a1\u7968 \u7684 \u56db \u5217\u8868 \uff0c \u5305\u542b \u65f6\u95f4 \u3001 \u4ee3\u7801 \u3001 \u56e0\u5b50 1 \u548c \u56e0\u5b50 2   \" \" \"   res   =   { }   if   daily   :   ones   =   [   self   .   find _ begin   (   i   )   for   i   in   self   .   tradedays   [   self   .   backsee   -   1   : ] ]   twos   =   self   .   tradedays   [   self   .   backsee   -   1   : ]   else   :   ones   =   self   .   month _ starts   twos   =   self   .   month _ ends   for   start   ,   end   in   zip   (   ones   ,   twos   ) :   this _ month   =   df   [ (   df   .   date   > =   start   )   &   (   df   .   date   < =   end   ) ]   res   [   end   ]   =   func   (   this _ month   )   dates   =   list   (   res   .   keys   ( ) )   corrs   =   list   (   res   .   values   ( ) )   part   =   pd   .   DataFrame   ( {   \" date \"   :   dates   ,   \" corr \"   :   corrs   } )   return   part","title":"make _ monthly _ factors _ single _ code ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.pure_dawn.run","text":"\u6267\u884c \u8ba1\u7b97 \u7684 \u6846\u67b6 \uff0c \u4ea7\u751f \u56e0\u5b50 \u503c","title":"run ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.add_suffix","text":"\u7ed9 \u6ca1\u6709 \u540e\u7f00 \u7684 \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u52a0\u4e0a wind \u540e\u7f00","title":"add _ suffix ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.all_pos","text":"\u5c06 \u56e0\u5b50 \u503c \u6bcf\u4e2a \u622a\u9762 \u4e0a \u51cf\u53bb \u6700\u5c0f \u6700\u5c0f\u503c \uff0c \u4ece\u800c \u90fd \u53d8\u6210 \u975e \u8d1f\u6570","title":"all _ pos ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.calcWeightedStd","text":"\u8ba1\u7b97 \u534a\u8870 \u52a0\u6743 \u6807\u51c6 \u6807\u51c6\u5dee","title":"calcWeightedStd ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.calc_exp_list","text":"\u751f\u6210 \u534a\u8870 \u5e8f\u5217","title":"calc _ exp _ list ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.clip","text":"\u5bf9 \u56e0\u5b50 \u503c \u8fdb\u884c \u622a\u9762 \u53bb \u6781\u503c \u7684 \u64cd\u4f5c","title":"clip ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.coin_reverse","text":"\u7403\u961f \u786c\u5e01 \u6cd5 \uff1a \u6839\u636e vol20 \u7684 \u5927\u5c0f \uff0c \u7ffb\u8f6c \u4e00\u534a ret20 \uff0c \u628a vol20 \u8f83\u5927 \u7684 \u90e8\u5206 \uff0c \u7ed9 ret20 \u6dfb\u52a0 \u8d1f\u53f7","title":"coin _ reverse ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.convert_code","text":"\u5c06 \u7c73 \u7b50 \u4ee3\u7801 \u8f6c\u6362 \u4e3a wind \u4ee3\u7801 \uff0c \u5e76 \u8bc6\u522b \u5176\u662f \u80a1\u7968 \u8fd8\u662f \u6307\u6570","title":"convert _ code ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.corr_two_daily","text":"\u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570","title":"corr _ two _ daily ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.count_value","text":"\u8ba1\u7b97 dataframe \u4e2d \u603b\u5171 \u6709 \u591a\u5c11 \uff08 \u975e 0 \uff09 \u975e\u7a7a \u7684 \u503c","title":"count _ value ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.cov_two_daily","text":"\u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u65b9\u5dee \u534f\u65b9\u5dee","title":"cov _ two _ daily ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.debj","text":"\u53bb\u9664 \u56e0\u5b50 \u4e2d \u7684 \u5317\u4ea4\u6240 \u6570\u636e","title":"debj ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.detect_nan","text":"\u68c0\u67e5 \u4e00\u4e2a pd . DataFrame \u4e2d \u662f\u5426 \u5b58\u5728 \u7a7a\u503c","title":"detect _ nan ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.drop_duplicates_index","text":"\u5bf9 dataframe \u4f9d\u7167 \u5176 index \u8fdb\u884c \u53bb \u91cd \uff0c \u5e76 \u4fdd\u7559 \u6700 \u4e0a\u9762 \u7684 \u884c","title":"drop _ duplicates _ index ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.feather_to_parquet","text":"\u5c06 \u67d0\u4e2a \u8def\u5f84 \u4e0b \u7684 \u6240\u6709 feather \u6587\u4ef6 \u90fd \u8f6c\u5316 \u4e3a parquet \u6587\u4ef6","title":"feather _ to _ parquet ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.feather_to_parquet_all","text":"\u5c06 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u6240\u6709 \u7684 feather \u6587\u4ef6 \u90fd \u8f6c\u5316 \u4e3a parquet \u6587\u4ef6   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   1447   1448   1449   1450   1451   1452   1453   1454   1455   def   feather _ to _ parquet _ all   ( ) :   \" \" \" \u5c06 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u6240\u6709 \u7684 feather \u6587\u4ef6 \u90fd \u8f6c\u5316 \u4e3a parquet \u6587\u4ef6 \" \" \"   homeplace   =   HomePlace   ( )   feather _ to _ parquet   (   homeplace   .   daily _ data _ file   )   feather _ to _ parquet   (   homeplace   .   barra _ data _ file   )   feather _ to _ parquet   (   homeplace   .   final _ factor _ file   )   feather _ to _ parquet   (   homeplace   .   update _ data _ file   )   feather _ to _ parquet   (   homeplace   .   factor _ data _ file   )   logger   .   success   (   \" \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u7684 feather \u6587\u4ef6 \u5168\u90e8 \u88ab \u8f6c\u5316 \u4e3a\u4e86 parquet \u6587\u4ef6 \uff0c \u60a8 \u53ef\u4ee5 \u624b\u52a8 \u5220\u9664 \u6240\u6709 \u7684 feather \u6587\u4ef6 \u4e86 \"   )","title":"feather _ to _ parquet _ all ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.func_two_daily","text":"\u6c42 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u5728 \u76f8\u540c \u80a1\u7968 \u4e0a \uff0c \u65f6\u5e8f \u4e0a \u6eda\u52a8 \u7a97\u53e3 \u4e0b \u7684 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570","title":"func _ two _ daily ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.get_abs","text":"\u5747\u503c \u8ddd\u79bb \u5316 \uff1a \u8ba1\u7b97 \u56e0\u5b50 \u4e0e \u622a\u9762 \u5747\u503c \u7684 \u8ddd\u79bb","title":"get _ abs ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.get_fac_cross_via_func","text":"\u5bf9 \u4e00\u4e2a \u65e5\u9891 \u56e0\u5b50 \uff0c \u5bf9 \u5176 \u6eda\u52a8 \u65f6\u95f4 \u7a97\u53e3 \u8fdb\u884c \u56e0\u5b50 \u6708\u5ea6 \u5316 \u8ba1\u7b97 \u3002   \u5177\u4f53 \u4f53\u64cd \u64cd\u4f5c \u5177\u4f53\u64cd\u4f5c \u4e3a \u6bcf\u5929 \uff08 \u6216 \u6bcf\u6708 \u6708\u5e95 \uff09 \u622a\u53d6 \u8fc7\u53bb \u4e00\u6bb5 \u7a97\u53e3 \uff0c \u5e76 \u8fdb\u884c \u67d0\u4e2a \u81ea\u5b9a \u5b9a\u4e49 \u81ea\u5b9a\u4e49 \u7684 \u64cd\u4f5c \uff0c","title":"get _ fac _ cross _ via _ func ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.get_fac_via_corr","text":"\u5bf9 \u4e00\u4e2a \u65e5\u9891 \u56e0\u5b50 \uff0c \u5bf9 \u5176 \u6eda\u52a8 \u65f6\u95f4 \u7a97\u53e3 \u8fdb\u884c \u56e0\u5b50 \u6708\u5ea6 \u5316 \u8ba1\u7b97 \u3002   \u5177\u4f53 \u4f53\u64cd \u64cd\u4f5c \u5177\u4f53\u64cd\u4f5c \u4e3a \u6bcf\u5929 \uff08 \u6216 \u6bcf\u6708 \u6708\u5e95 \uff09 \u8ba1\u7b97 \u8fc7\u53bb 20 \u5929 \u56e0\u5b50 \u503c \u7684 \u76f8\u5173 \u76f8\u5173\u6027 \u77e9\u9635 \uff0c   \u7136\u540e \u5bf9 \u6bcf\u4e2a \u80a1\u7968 \u7684 \u6240\u6709 \u76f8\u5173 \u5173\u7cfb \u7cfb\u6570 \u76f8\u5173\u7cfb\u6570 \u6c42 \u5747\u503c","title":"get _ fac _ via _ corr ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.get_list_std","text":"\u540c\u4e00 \u4e00\u5929 \u540c\u4e00\u5929 \u591a\u4e2a \u56e0\u5b50 \uff0c \u8ba1\u7b97 \u8fd9\u4e9b \u56e0\u5b50 \u5728 \u5f53\u5929 \u7684 \u6807\u51c6 \u6807\u51c6\u5dee","title":"get _ list _ std ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.get_list_std_weighted","text":"\u5bf9 \u591a\u4e2a df \u5bf9\u5e94 \u4f4d\u7f6e \u4e0a \u7684 \u503c\u6c42 \u52a0\u6743 \u6807\u51c6 \u6807\u51c6\u5dee","title":"get _ list _ std _ weighted ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.get_normal","text":"\u5c06 \u56e0\u5b50 \u622a\u9762 \u6a2a\u622a\u9762 \u6b63\u6001\u5316","title":"get _ normal ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.get_value","text":"\u5f88\u591a \u56e0\u5b50 \u8ba1\u7b97 \u65f6 \uff0c \u4f1a \u4e00\u6b21 \u4e00\u6b21\u6027 \u751f\u6210 \u5f88\u591a \u503c \uff0c \u4f7f\u7528 \u65f6 \u53ea \u53d6\u51fa \u4e00\u4e2a \u503c","title":"get _ value ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.get_values","text":"\u4ece \u4e00\u4e2a values \u4e3a \u5217\u8868 \u7684 dataframe \u4e2d \uff0c \u4e00\u6b21 \u4e00\u6b21\u6027 \u53d6\u51fa \u6240\u6709 \u503c \uff0c \u5206\u522b \u8bbe\u7f6e \u4e3a \u4e00\u4e2a dataframe \uff0c \u5e76 \u4f9d\u7167 \u987a\u5e8f \u5b58\u50a8 \u987a\u5e8f\u5b58\u50a8 \u5728 \u5217\u8868 \u4e2d","title":"get _ values ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.indus_name","text":"\u5c06 2021 \u7248\u7533 \u4e07 \u884c\u4e1a \u7684 \u4ee3\u7801 \uff0c \u8f6c\u5316 \u4e3a \u5bf9\u5e94 \u884c\u4e1a \u7684 \u540d\u5b57","title":"indus _ name ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.judge_factor_by_third","text":"\u5bf9\u4e8e fac1 \u548c fac2 \u4e24\u4e2a \u56e0\u5b50 \uff0c \u4f9d\u636e judge \u8fd9\u4e2a series \u6216 dataframe \u8fdb\u884c \u5224\u65ad \uff0c   judge \u53ef\u80fd \u4e3a \u5168 \u5e02\u573a \u7684 \u67d0\u4e2a \u65f6\u5e8f \u6307\u6807 \uff0c \u4e5f \u53ef\u80fd \u662f \u6bcf\u4e2a \u80a1\u7968 \u5404 \u4e00\u4e2a \u7684 \u6307\u6807 \uff0c   \u5982\u679c judge \u8fd9 \u4e00\u671f \u7684 \u503c \u5927\u4e8e 0 \uff0c \u5219 \u53d6 fac1 \u7684 \u503c \uff0c \u5c0f\u4e8e 0 \u5219 \u53d6 fac2 \u7684 \u503c","title":"judge _ factor _ by _ third ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.merge_many","text":"\u5c06 \u591a\u4e2a \u5bbd dataframe \u4f9d\u636e columns \u548c index \uff0c \u62fc\u63a5 \u5728 \u4e00\u8d77 \uff0c \u62fc\u6210 \u4e00\u4e2a \u957f dataframe","title":"merge _ many ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.multidfs_to_one","text":"\u5f88\u591a \u4e2a df \uff0c \u5404\u6709 \u4e00\u90e8 \u90e8\u5206 \u4e00\u90e8\u5206 \uff0c \u5176\u4f59 \u4f4d\u7f6e \u90fd \u662f \u7a7a \uff0c   \u60f3 \u628a \u5404\u81ea df \u6709\u503c \u7684 \u90e8\u5206 \u4fdd\u7559 \uff0c \u90fd \u6ca1\u6709 \u503c \u7684 \u90e8\u5206 \u7ee7\u7eed \u8bbe\u4e3a \u7a7a","title":"multidfs _ to _ one ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.read_mat","text":"\u8bfb\u53d6 mat \u6587\u4ef6","title":"read _ mat ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.rqdatac_show_used","text":"\u67e5\u8be2 \u6d41\u91cf \u4f7f\u7528 \u60c5\u51b5","title":"rqdatac _ show _ used ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.same_columns","text":"\u4fdd\u7559 \u591a\u4e2a dataframe \u5171\u540c columns \u7684 \u90e8\u5206","title":"same _ columns ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.same_index","text":"\u4fdd\u7559 \u591a\u4e2a dataframe \u5171\u540c index \u7684 \u90e8\u5206","title":"same _ index ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.select_max","text":"\u4e24\u4e2a columns \u4e0e index \u5b8c\u5168 \u76f8\u540c \u5b8c\u5168\u76f8\u540c \u7684 df \uff0c \u6bcf\u4e2a \u503c \u90fd \u6311\u51fa \u8f83\u5927 \u503c","title":"select _ max ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.select_min","text":"\u4e24\u4e2a columns \u4e0e index \u5b8c\u5168 \u76f8\u540c \u5b8c\u5168\u76f8\u540c \u7684 df \uff0c \u6bcf\u4e2a \u503c \u90fd \u6311\u51fa \u8f83\u5c0f\u503c","title":"select _ min ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.set_index_first","text":"\u5c06 dataframe \u7684 \u7b2c\u4e00 \u4e00\u5217 \u7b2c\u4e00\u5217 \uff0c \u65e0\u8bba \u5176\u662f \u4ec0\u4e48 \u540d\u5b57 \uff0c \u90fd \u8bbe\u7f6e \u4e3a index","title":"set _ index _ first ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.standardlize","text":"\u5bf9 \u56e0\u5b50 dataframe \u505a \u622a\u9762 \u6a2a\u622a\u9762 z - score \u6807\u51c6 \u6807\u51c6\u5316","title":"standardlize ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.to_group","text":"\u628a \u4e00\u4e2a index \u4e3a \u65f6\u95f4 \uff0c code \u4e3a \u65f6\u95f4 \u7684 df \uff0c \u6bcf\u4e2a \u622a\u9762 \u4e0a \u7684 \u503c \uff0c \u6309\u7167 \u6392\u5e8f \u5206\u4e3a group \u7ec4 \uff0c \u5c06\u503c \u6539\u4e3a \u7ec4\u53f7 \uff0c \u4ece 0 \u5f00\u59cb","title":"to _ group ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.to_percent","text":"\u628a \u5c0f\u6570 \u8f6c\u5316 \u4e3a 2 \u4f4d \u5c0f\u6570 \u7684 \u767e\u5206 \u5206\u6570 \u767e\u5206\u6570","title":"to _ percent ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.zip_many_dfs","text":"\u5c06 \u591a\u4e2a dataframe \uff0c \u4e00\u8d77 \u62fc\u5728\u4e00\u8d77 \uff0c \u76f8\u540c index \u548c columns \u6307\u5411 \u7684 \u90a3\u4e2a values \uff0c \u53d8\u4e3a \u591a\u4e2a dataframe \u7684 \u503c \u7684 \u5217\u8868   \u901a\u5e38 \u7528\u4e8e \u5b58\u50a8 \u6574\u5408 \u5206\u949f \u6570\u636e \u8ba1\u7b97 \u7684 \u56e0\u5b50 \u503c","title":"zip _ many _ dfs ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.\u751f\u6210\u6bcf\u65e5\u5206\u7c7b\u8868","text":"Text   Only   1   2   3   4   5   6   7   df \u662f \u8981 \u5305\u542b \u4efb\u610f \u591a\u5217 \u7684 \u8868\u683c \uff0c \u4e3a dataframe \u683c\u5f0f \uff0c \u4e3b\u8981 \u5185\u5bb9 \u4e3a \uff0c \u6bcf \u4e00\u884c \u662f   \u4e00\u53ea \u80a1\u7968 \u6216 \u4e00\u53ea \u57fa\u91d1 \u7684 \u4ee3\u7801 \u3001 \u5206\u7c7b \u3001 \u8fdb\u5165 \u8be5 \u5206\u7c7b \u7684 \u65f6\u95f4 \u3001 \u79fb\u9664 \u8be5 \u5206\u7c7b \u7684 \u65f6\u95f4 \uff0c   \u9664\u6b64 \u4e4b\u5916 \u9664\u6b64\u4e4b\u5916 \uff0c \u8fd8 \u53ef\u4ee5 \u5305\u542b \u5f88\u591a \u5176\u4ed6 \u5185\u5bb9   code \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u5217 \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f \uff1b   entry \u662f \u80a1\u7968 \u8fdb\u5165 \u8be5 \u5206\u7c7b \u7684 \u65e5\u671f \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   exit \u662f \u80a1\u7968 \u9000\u51fa \u8be5 \u5206\u7c7b \u7684 \u65e5\u671f \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   kind \u662f \u5206\u7c7b \u5217 \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   Source   code   in   pure _ ocean _ breeze / data / tools . py   Python   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   @ do _ on _ dfs   def   \u751f\u6210 \u6bcf\u65e5 \u5206\u7c7b \u8868   (   df   :   pd   .   DataFrame   ,   code   :   str   ,   entry   :   str   ,   exit   :   str   ,   kind   :   str   )   - >   pd   .   DataFrame   :   \" \" \"   ` ` `   df \u662f \u8981 \u5305\u542b \u4efb\u610f \u591a\u5217 \u7684 \u8868\u683c \uff0c \u4e3a dataframe \u683c\u5f0f \uff0c \u4e3b\u8981 \u5185\u5bb9 \u4e3a \uff0c \u6bcf \u4e00\u884c \u662f   \u4e00\u53ea \u80a1\u7968 \u6216 \u4e00\u53ea \u57fa\u91d1 \u7684 \u4ee3\u7801 \u3001 \u5206\u7c7b \u3001 \u8fdb\u5165 \u8be5 \u5206\u7c7b \u7684 \u65f6\u95f4 \u3001 \u79fb\u9664 \u8be5 \u5206\u7c7b \u7684 \u65f6\u95f4 \uff0c   \u9664\u6b64 \u4e4b\u5916 \u9664\u6b64\u4e4b\u5916 \uff0c \u8fd8 \u53ef\u4ee5 \u5305\u542b \u5f88\u591a \u5176\u4ed6 \u5185\u5bb9   code \u662f \u80a1\u7968 \u4ee3\u7801 \u80a1\u7968\u4ee3\u7801 \u5217 \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f \uff1b   entry \u662f \u80a1\u7968 \u8fdb\u5165 \u8be5 \u5206\u7c7b \u7684 \u65e5\u671f \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   exit \u662f \u80a1\u7968 \u9000\u51fa \u8be5 \u5206\u7c7b \u7684 \u65e5\u671f \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   kind \u662f \u5206\u7c7b \u5217 \u7684 \u5217\u540d \uff0c \u4e3a \u5b57\u7b26 \u5b57\u7b26\u4e32 \u683c\u5f0f   ` ` `   \" \" \"   df   =   df   [ [   code   ,   entry   ,   exit   ,   kind   ] ]   df   =   df   .   fillna   (   int   (   datetime   .   datetime   .   now   ( )   .   strftime   (   \" % Y% m   % d   \"   ) ) )   try   :   if   type   (   df   [   entry   ]   .   iloc   [   0   ] )   = =   str   :   df   [   entry   ]   =   df   [   entry   ]   .   astype   (   str   )   df   [   exit   ]   =   df   [   exit   ]   .   astype   (   str   )   else   :   df   [   entry   ]   =   df   [   entry   ]   .   astype   (   int   )   .   astype   (   str   )   df   [   exit   ]   =   df   [   exit   ]   .   astype   (   int   )   .   astype   (   str   )   except   Exception   :   print   (   \" \u60a8 \u7684 \u8fdb\u5165 \u65e5\u671f \u548c \u63a8\u51fa \u65e5\u671f \uff0c \u65e2 \u4e0d\u662f \u5b57\u7b26 \u5b57\u7b26\u4e32 \uff0c \u53c8 \u4e0d\u662f \u6570\u5b57 \u683c\u5f0f \uff0c \u597d\u597d \u68c0\u67e5 \u4e00\u4e0b \u68c0\u67e5\u4e00\u4e0b \u5427 \"   )   df   =   df   .   set _ index   ( [   code   ,   kind   ] )   df   =   df   .   stack   ( )   .   to _ frame   (   name   =   \" date \"   )   def   fill _ middle   (   df1   ) :   min _ time   =   df1   .   date   .   min   ( )   max _ time   =   df1   .   date   .   max   ( )   df2   =   pd   .   DataFrame   ( {   \" date \"   :   pd   .   date _ range   (   min _ time   ,   max _ time   ) } )   return   df2   ff   =   df   .   reset _ index   ( )   .   groupby   ( [   code   ,   kind   ] )   .   apply   (   fill _ middle   )   ff   =   ff   .   reset _ index   ( )   ff   =   ff   [ [   code   ,   kind   ,   \" date \"   ] ]   ff   =   ff   [   ff   .   date   > =   pd   .   Timestamp   (   \" 2004 - 01 - 01 \"   ) ]   return   ff","title":"\u751f\u6210 \u6bcf\u65e5 \u5206\u7c7b \u8868 ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/tools/#pure_ocean_breeze.data.tools.\u8ba1\u7b97\u8fde\u7eed\u671f\u6570","text":"\u8ba1\u7b97 \u4e00\u5217 \u6570 \uff0c \u6301\u7eed \u5927\u4e8e \u6216 \u6301\u7eed \u5c0f\u4e8e \u67d0\u4e2a \u4e34\u754c \u4e34\u754c\u70b9 \u7684 \u671f\u6570","title":"\u8ba1\u7b97 \u8fde\u7eed \u671f\u6570 ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/","text":"FactorReader   \u00b6   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   1322   1323   1324   1325   1326   1327   1328   1329   1330   1331   1332   1333   1334   1335   1336   1337   1338   1339   1340   1341   1342   1343   1344   1345   1346   1347   1348   1349   1350   1351   1352   1353   1354   1355   1356   1357   1358   1359   1360   1361   1362   1363   1364   1365   1366   1367   1368   1369   1370   1371   1372   1373   1374   1375   1376   1377   1378   1379   1380   1381   1382   1383   1384   1385   1386   1387   1388   1389   1390   1391   1392   1393   1394   1395   1396   1397   1398   1399   1400   1401   1402   1403   1404   1405   1406   1407   1408   1409   1410   1411   1412   1413   1414   1415   1416   1417   1418   1419   1420   1421   1422   1423   1424   1425   1426   1427   1428   1429   1430   1431   1432   1433   1434   class   FactorReader   :   def   __ init __   (   self   ,   user   :   str   =   \" admin \"   ,   password   :   str   =   \" quest \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   str   =   \" 8812 \"   ,   database   :   str   =   \" qdb \"   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str ,   optional   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d ,   by   default   \" admin \"   password   :   str ,   optional   \u5bc6\u7801 ,   by   default   \" quest \"   host   :   str ,   optional   \u5730\u5740 ,   by   default   \" 43.143 . 223.158 \"   port   :   str ,   optional   \u7aef\u53e3 ,   by   default   \" 8812 \"   database   :   str ,   optional   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   \" qdb \"   \" \" \"   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   def   __ connect   (   self   ) :   conn   =   pg   .   connect   (   user   =   self   .   user   ,   password   =   self   .   password   ,   host   =   self   .   host   ,   port   =   self   .   port   ,   database   =   self   .   database   ,   )   return   conn   def   update _ factor   (   self   ,   table _ name   :   str   ,   df   :   pd   .   DataFrame   ) :   tables   =   self   .   __ get _ data   (   \" show   tables \"   )   .   table   .   tolist   ( )   if   table _ name   in   tables   :   logger   .   info   (   f   \"   {   table _ name   }   \u5df2\u7ecf \u5b58\u5728 \u4e86 \uff0c \u5373\u5c06 \u66f4\u65b0 \"   )   old _ end   =   self   .   __ get _ data   (   f   \" select   max ( date )   from   {   table _ name   }   \"   )   .   iloc   [   0   ,   0   ]   new   =   df   [   df   .   index   >   old _ end   ]   new   =   new   .   stack   ( )   .   reset _ index   ( )   new   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   logger   .   info   (   f   \"   {   table _ name   }   \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u4e0a\u4f20 \"   )   new   =   df   .   stack   ( )   .   reset _ index   ( )   new   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   __ write _ via _ df   (   new   ,   table _ name   )   def   __ write _ via _ df   (   self   ,   df   :   pd   .   DataFrame   ,   table _ name   :   str   ,   symbols   =   None   ,   tuple _ col   =   None   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5199\u5165 \u7684 dataframe   table _ name   :   str   questdb \u4e2d\u8be5 \u8868 \u7684 \u8868\u540d   symbols   :   Union [ str ,   bool ,   List [ int ] ,   List [ str ] ] ,   optional   \u4e3a symbols \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   None   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u636e \u7c7b\u578b \u6570\u636e\u7c7b\u578b \u4e3a tuple \u6216 list \u7684 \u5217 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   if   tuple _ col   is   None   :   ...   elif   isinstance   (   tuple _ col   ,   str   ) :   df   [   tuple _ col   ]   =   df   [   tuple _ col   ]   .   apply   (   str   )   else   :   for   t   in   tuple _ col   :   df   [   t   ]   =   df   [   t   ]   .   apply   (   str   )   if   symbols   is   not   None   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   ,   symbols   =   symbols   )   else   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   )   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) )   def   __ get _ data   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   __ connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   def   add _ token   (   self   ,   tokens   :   List   [   str   ] ,   users   :   List   [   str   ] ) :   tus   =   pd   .   DataFrame   ( {   \" token \"   :   tokens   ,   \" user \"   :   users   } )   self   .   __ write _ via _ df   (   tus   ,   \" tokenlines \"   )   __ get _ data   (   sql _ order   )   \u00b6   \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   \u00b6   sql _ order   :   str   sql \u547d\u4ee4   Returns   \u00b6   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   1410   1411   1412   1413   1414   1415   1416   1417   1418   1419   1420   1421   1422   1423   1424   1425   1426   1427   1428   1429   1430   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) )   def   __ get _ data   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   __ connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   __ init __   (   user   =   ' admin '   ,   password   =   ' quest '   ,   host   =   ' 127.0 . 0.1 '   ,   port   =   ' 8812 '   ,   database   =   ' qdb '   )   \u00b6   \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   \u00b6   user   :   str ,   optional   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d ,   by   default   \" admin \"   password   :   str ,   optional   \u5bc6\u7801 ,   by   default   \" quest \"   host   :   str ,   optional   \u5730\u5740 ,   by   default   \" 43.143 . 223.158 \"   port   :   str ,   optional   \u7aef\u53e3 ,   by   default   \" 8812 \"   database   :   str ,   optional   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   \" qdb \"   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   1323   1324   1325   1326   1327   1328   1329   1330   1331   1332   1333   1334   1335   1336   1337   1338   1339   1340   1341   1342   1343   1344   1345   1346   1347   1348   1349   1350   def   __ init __   (   self   ,   user   :   str   =   \" admin \"   ,   password   :   str   =   \" quest \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   str   =   \" 8812 \"   ,   database   :   str   =   \" qdb \"   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str ,   optional   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d ,   by   default   \" admin \"   password   :   str ,   optional   \u5bc6\u7801 ,   by   default   \" quest \"   host   :   str ,   optional   \u5730\u5740 ,   by   default   \" 43.143 . 223.158 \"   port   :   str ,   optional   \u7aef\u53e3 ,   by   default   \" 8812 \"   database   :   str ,   optional   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   \" qdb \"   \" \" \"   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   __ write _ via _ df   (   df   ,   table _ name   ,   symbols   =   None   ,   tuple _ col   =   None   )   \u00b6   \u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   \u00b6   df   :   pd . DataFrame   \u8981 \u5199\u5165 \u7684 dataframe   table _ name   :   str   questdb \u4e2d\u8be5 \u8868 \u7684 \u8868\u540d   symbols   :   Union [ str ,   bool ,   List [ int ] ,   List [ str ] ] ,   optional   \u4e3a symbols \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   None   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u636e \u7c7b\u578b \u6570\u636e\u7c7b\u578b \u4e3a tuple \u6216 list \u7684 \u5217 \u7684 \u540d\u5b57 ,   by   default   None   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   1376   1377   1378   1379   1380   1381   1382   1383   1384   1385   1386   1387   1388   1389   1390   1391   1392   1393   1394   1395   1396   1397   1398   1399   1400   1401   1402   1403   1404   1405   1406   1407   1408   def   __ write _ via _ df   (   self   ,   df   :   pd   .   DataFrame   ,   table _ name   :   str   ,   symbols   =   None   ,   tuple _ col   =   None   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5199\u5165 \u7684 dataframe   table _ name   :   str   questdb \u4e2d\u8be5 \u8868 \u7684 \u8868\u540d   symbols   :   Union [ str ,   bool ,   List [ int ] ,   List [ str ] ] ,   optional   \u4e3a symbols \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   None   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u636e \u7c7b\u578b \u6570\u636e\u7c7b\u578b \u4e3a tuple \u6216 list \u7684 \u5217 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   if   tuple _ col   is   None   :   ...   elif   isinstance   (   tuple _ col   ,   str   ) :   df   [   tuple _ col   ]   =   df   [   tuple _ col   ]   .   apply   (   str   )   else   :   for   t   in   tuple _ col   :   df   [   t   ]   =   df   [   t   ]   .   apply   (   str   )   if   symbols   is   not   None   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   ,   symbols   =   symbols   )   else   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   )   database _ save _ final _ factors   (   df   ,   name   ,   order   ,   freq   =   ' \u6708 '   )   \u00b6   \u4fdd\u5b58 \u6700\u7ec8 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c   Parameters   \u00b6   df   :   pd . DataFrame   \u6700\u7ec8 \u56e0\u5b50 \u503c   name   :   str   \u56e0\u5b50 \u7684 \u540d\u5b57 \uff0c \u5982 \u201c \u9002\u5ea6 \u5192\u9669 \u201d   order   :   int   \u56e0\u5b50 \u7684 \u5e8f\u53f7   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   1110   1111   1112   1113   1114   1115   1116   1117   1118   1119   1120   1121   1122   1123   1124   1125   1126   1127   1128   1129   1130   1131   1132   1133   1134   1135   1136   1137   1138   1139   def   database _ save _ final _ factors   (   df   :   pd   .   DataFrame   ,   name   :   str   ,   order   :   int   ,   freq   :   str   =   \" \u6708 \"   )   - >   None   :   \" \" \" \u4fdd\u5b58 \u6700\u7ec8 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c   Parameters   ----------   df   :   pd . DataFrame   \u6700\u7ec8 \u56e0\u5b50 \u503c   name   :   str   \u56e0\u5b50 \u7684 \u540d\u5b57 \uff0c \u5982 \u201c \u9002\u5ea6 \u5192\u9669 \u201d   order   :   int   \u56e0\u5b50 \u7684 \u5e8f\u53f7   \" \" \"   homeplace   =   HomePlace   ( )   path   =   (   homeplace   .   final _ factor _ file   +   name   +   \" _ \"   +   \" \u56e0\u5b50 \u591a\u56e0\u5b50 \"   +   str   (   order   )   +   \" _ \"   +   freq   +   \" . parquet \"   )   df   =   df   .   drop _ duplicates   ( )   .   dropna   (   how   =   \" all \"   )   df   .   to _ parquet   (   path   )   final _ date   =   df   .   index   .   max   ( )   final _ date   =   datetime   .   datetime   .   strftime   (   final _ date   ,   \" % Y% m   % d   \"   )   logger   .   success   (   f   \" \u4eca\u65e5 \u8ba1\u7b97 \u7684 \u56e0\u5b50 \u503c \u4fdd\u5b58 \uff0c \u6700\u65b0 \u4e00\u5929 \u4e3a   {   final _ date   }   \"   )   database _ update _ daily _ files   ( )   \u00b6   \u66f4\u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u7684 \u65e5\u9891 \u6570\u636e   Raises   \u00b6   ValueError   \u5982\u679c \u4e0a\u6b21 \u66f4\u65b0 \u5230 \u672c\u6b21 \u66f4\u65b0 \u6ca1\u6709 \u65b0 \u7684 \u4ea4\u6613 \u4ea4\u6613\u65e5 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   692   693   694   695   696   697   698   699   700   701   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   719   def   database _ update _ daily _ files   ( )   - >   None   :   \" \" \" \u66f4\u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u7684 \u65e5\u9891 \u6570\u636e   Raises   ------   ` ValueError `   \u5982\u679c \u4e0a\u6b21 \u66f4\u65b0 \u5230 \u672c\u6b21 \u66f4\u65b0 \u6ca1\u6709 \u65b0 \u7684 \u4ea4\u6613 \u4ea4\u6613\u65e5 \uff0c \u5c06 \u62a5\u9519   \" \" \"   homeplace   =   HomePlace   ( )   def   single _ file   (   name   ) :   df   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   name   +   \" . parquet \"   )   startdate   =   df   .   index   .   max   ( )   +   pd   .   Timedelta   (   days   =   1   )   return   startdate   names   =   [   \" opens \"   ,   \" highs \"   ,   \" lows \"   ,   \" closes \"   ,   \" trs \"   ,   \" opens _ unadj \"   ,   \" highs _ unadj \"   ,   \" lows _ unadj \"   ,   \" closes _ unadj \"   ,   \" sharenums \"   ,   \" total _ sharenums \"   ,   \" ages \"   ,   \" sts \"   ,   \" states \"   ,   \" amounts \"   ,   \" pb \"   ,   \" pe \"   ,   ' pettm '   ,   \" vwaps \"   ,   \" adjfactors \"   ,   \" stop _ ups \"   ,   \" stop _ downs \"   ,   ]   startdates   =   list   (   map   (   single _ file   ,   names   ) )   startdate   =   min   (   startdates   )   startdate   =   datetime   .   datetime   .   strftime   (   startdate   ,   \" % Y% m   % d   \"   )   now   =   datetime   .   datetime   .   now   ( )   if   now   .   hour   <   17   :   now   =   now   -   pd   .   Timedelta   (   days   =   1   )   now   =   datetime   .   datetime   .   strftime   (   now   ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u65e5\u9891 \u6570\u636e \u4e0a\u6b21 \u66f4\u65b0 \u5230   {   startdate   }   , \u672c\u6b21 \u5c06 \u66f4\u65b0 \u5230   {   now   }   \"   )   #   \u4ea4\u6613 \u65e5\u5386   df0   =   download _ calendar   (   startdate   ,   now   )   tradedates   =   sorted   (   list   (   set   (   df0   .   trade _ date   ) ) )   finish   =   1   if   len   (   tradedates   )   >   1   :   #   \u5b58\u50a8 \u6bcf\u5929 \u6570\u636e   df1s   =   [ ]   df2s   =   [ ]   for   day   in   tqdm   .   auto   .   tqdm   (   tradedates   ,   desc   =   \" \u6b63\u5728 \u4e0b\u8f7d \u65e5\u9891 \u6570\u636e \"   ) :   df1   ,   df2   =   download _ single _ daily   (   day   )   df1s   .   append   (   df1   )   df2s   .   append   (   df2   )   #   8 \u4e2a \u4ef7\u683c \uff0c \u4ea4\u6613 \u72b6\u6001 \uff0c \u6210\u4ea4 \u6210\u4ea4\u91cf \uff0c   df1s   =   pd   .   concat   (   df1s   )   #   \u6362\u624b \u6362\u624b\u7387 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c \uff0c \u6362\u624b \u6362\u624b\u7387 \u8981 \u9664\u4ee5 100 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c\u8981 \u4e58\u4ee5 10000   df2s   =   pd   .   concat   (   df2s   )   elif   len   (   tradedates   )   = =   1   :   df1s   ,   df2s   =   download _ single _ daily   (   tradedates   [   0   ] )   else   :   finish   =   0   logger   .   info   (   \" \u4ece \u4e0a\u6b21 \u66f4\u65b0 \u5230 \u8fd9\u6b21 \u66f4\u65b0 \uff0c \u8fd8 \u6ca1\u6709 \u7ecf\u8fc7 \u4ea4\u6613 \u4ea4\u6613\u65e5 \u3002 \u653e\u5047 \u5c31 \u597d\u597d \u4f11\u606f \u5427 \uff0c \u522b\u8dd1 \u4ee3\u7801 \u4e86 \ud83e\udd12 \"   )   if   finish   :   df1s   .   tradestatus   =   (   df1s   .   tradestatus   = =   \" \u4ea4\u6613 \"   )   +   0   df2s   =   df2s   .   rename   (   columns   =   {   \" ts _ code \"   :   \" code \"   } )   df1s   .   trade _ date   =   pd   .   to _ datetime   (   df1s   .   trade _ date   ,   format   =   \" % Y% m   % d   \"   )   df2s   .   trade _ date   =   pd   .   to _ datetime   (   df2s   .   trade _ date   ,   format   =   \" % Y% m   % d   \"   )   df1s   =   df1s   .   rename   (   columns   =   {   \" trade _ date \"   :   \" date \"   } )   df2s   =   df2s   .   rename   (   columns   =   {   \" trade _ date \"   :   \" date \"   } )   both _ codes   =   list   (   set   (   df1s   .   code   )   &   set   (   df2s   .   code   ) )   df1s   =   df1s   [   df1s   .   code   .   isin   (   both _ codes   ) ]   df2s   =   df2s   [   df2s   .   code   .   isin   (   both _ codes   ) ]   #   st \u80a1   df3   =   pro   .   ashare _ st   ( )   def   to _ mat   (   df   ,   row   ,   name   ,   ind   =   \" date \"   ,   col   =   \" code \"   ) :   df   =   df   [ [   ind   ,   col   ,   row   ] ]   .   pivot   (   index   =   ind   ,   columns   =   col   ,   values   =   row   )   old   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   name   +   \" . parquet \"   )   new   =   pd   .   concat   ( [   old   ,   df   ] )   .   drop _ duplicates   ( )   new   =   drop _ duplicates _ index   (   new   )   new   =   new   [   sorted   (   list   (   new   .   columns   ) ) ]   new   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   name   +   \" . parquet \"   )   logger   .   success   (   name   +   \" \u5df2 \u66f4\u65b0 \"   )   return   new   #   \u80a1\u7968 \u65e5 \u884c\u60c5 \uff08 \u672a \u590d\u6743 \u9ad8\u5f00 \u4f4e\u6536 \uff0c \u590d\u6743 \u9ad8\u5f00 \u4f4e\u6536 \uff0c \u4ea4\u6613 \u72b6\u6001 \uff0c \u6210\u4ea4 \u6210\u4ea4\u91cf \uff09   part1   =   df1s   .   copy   ( )   part1   .   volume   =   part1   .   volume   *   100   #   \u672a \u590d\u6743 \u5f00\u76d8 \u5f00\u76d8\u4ef7   opens   =   to _ mat   (   part1   ,   \" open \"   ,   \" opens _ unadj \"   )   #   \u672a \u590d\u6743 \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7   highs   =   to _ mat   (   part1   ,   \" high \"   ,   \" highs _ unadj \"   )   #   \u672a \u590d\u6743 \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7   lows   =   to _ mat   (   part1   ,   \" low \"   ,   \" lows _ unadj \"   )   #   \u672a \u590d\u6743 \u6536\u76d8 \u6536\u76d8\u4ef7   closes   =   to _ mat   (   part1   ,   \" close \"   ,   \" closes _ unadj \"   )   #   \u6210\u4ea4 \u6210\u4ea4\u91cf   volumes   =   to _ mat   (   part1   ,   \" volume \"   ,   \" amounts \"   )   #   \u590d\u6743 \u5f00\u76d8 \u5f00\u76d8\u4ef7   diopens   =   to _ mat   (   part1   ,   \" adjopen \"   ,   \" opens \"   )   #   \u590d\u6743 \u6700\u9ad8 \u9ad8\u4ef7 \u6700\u9ad8\u4ef7   dihighs   =   to _ mat   (   part1   ,   \" adjhigh \"   ,   \" highs \"   )   #   \u590d\u6743 \u6700\u4f4e \u4f4e\u4ef7 \u6700\u4f4e\u4ef7   dilows   =   to _ mat   (   part1   ,   \" adjlow \"   ,   \" lows \"   )   #   \u590d\u6743 \u6536\u76d8 \u6536\u76d8\u4ef7   dicloses   =   to _ mat   (   part1   ,   \" adjclose \"   ,   \" closes \"   )   #   \u4ea4\u6613 \u72b6\u6001   status   =   to _ mat   (   part1   ,   \" tradestatus \"   ,   \" states \"   )   #   \u5e73\u5747 \u5747\u4ef7 \u4ef7\u683c \u5e73\u5747\u4ef7 \u5e73\u5747\u4ef7\u683c   vwaps   =   to _ mat   (   part1   ,   \" avgprice \"   ,   \" vwaps \"   )   #   \u590d\u6743 \u56e0\u5b50   adjfactors   =   to _ mat   (   part1   ,   \" adjfactor \"   ,   \" adjfactors \"   )   #   \u6da8\u505c \u4ef7   stop _ ups   =   to _ mat   (   part1   ,   \" limit \"   ,   \" stop _ ups \"   )   #   \u8dcc\u505c \u4ef7   stop _ downs   =   to _ mat   (   part1   ,   \" stopping \"   ,   \" stop _ downs \"   )   #   \u6362\u624b \u6362\u624b\u7387   part2   =   df2s   [ [   \" date \"   ,   \" code \"   ,   \" turnover _ rate \"   ] ]   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" turnover _ rate \"   )   part2   =   part2   /   100   part2 _ old   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" trs . parquet \"   )   part2 _ new   =   pd   .   concat   ( [   part2 _ old   ,   part2   ] )   part2 _ new   =   part2 _ new   .   drop _ duplicates   ( )   part2 _ new   =   part2 _ new   [   closes   .   columns   ]   part2 _ new   =   part2 _ new   [   sorted   (   list   (   part2 _ new   .   columns   ) ) ]   part2 _ new   =   drop _ duplicates _ index   (   part2 _ new   )   part2 _ new   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" trs . parquet \"   )   logger   .   success   (   \" \u6362\u624b \u6362\u624b\u7387 \u66f4\u65b0 \u5b8c\u6210 \"   )   #   \u6d41\u901a \u6d41\u901a\u80a1 \u6570   #   \u8bfb\u53d6 \u65b0 \u7684 \u6d41\u901a \u6d41\u901a\u80a1 \u53d8\u52a8 \u6570   part3   =   df2s   [ [   \" date \"   ,   \" code \"   ,   \" float _ share \"   ] ]   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" float _ share \"   )   part3   =   part3   *   10000   part3 _ old   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" sharenums . parquet \"   )   part3 _ new   =   pd   .   concat   ( [   part3 _ old   ,   part3   ] )   .   drop _ duplicates   ( )   part3 _ new   =   part3 _ new   [   closes   .   columns   ]   part3 _ new   =   drop _ duplicates _ index   (   part3 _ new   )   part3 _ new   =   part3 _ new   [   sorted   (   list   (   part3 _ new   .   columns   ) ) ]   part3 _ new   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" sharenums . parquet \"   )   logger   .   success   (   \" \u6d41\u901a \u6d41\u901a\u80a1 \u6570 \u66f4\u65b0 \u5b8c\u6210 \"   )   #   \u603b \u80a1\u6570   #   \u8bfb\u53d6 \u65b0 \u7684 \u603b\u80a1 \u53d8\u52a8 \u6570   part3a   =   df2s   [ [   \" date \"   ,   \" code \"   ,   \" total _ share \"   ] ]   .   pivot   (   columns   =   \" code \"   ,   index   =   \" date \"   ,   values   =   \" total _ share \"   )   part3a   =   part3a   *   10000   part3 _ olda   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" total _ sharenums . parquet \"   )   part3 _ newa   =   pd   .   concat   ( [   part3 _ olda   ,   part3a   ] )   .   drop _ duplicates   ( )   part3 _ newa   =   part3 _ newa   .   reindex   (   columns   =   closes   .   columns   )   part3 _ newa   =   drop _ duplicates _ index   (   part3 _ newa   )   part3 _ newa   =   part3 _ newa   [   sorted   (   list   (   part3 _ newa   .   columns   ) ) ]   part3 _ newa   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" total _ sharenums . parquet \"   )   logger   .   success   (   \" \u603b \u80a1\u6570 \u66f4\u65b0 \u5b8c\u6210 \"   )   #   pb   partpb   =   df2s   [ [   \" date \"   ,   \" code \"   ,   \" pb \"   ] ]   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" pb \"   )   partpb _ old   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" pb . parquet \"   )   partpb _ new   =   pd   .   concat   ( [   partpb _ old   ,   partpb   ] )   partpb _ new   =   partpb _ new   .   drop _ duplicates   ( )   partpb _ new   =   partpb _ new   [   closes   .   columns   ]   partpb _ new   =   partpb _ new   [   sorted   (   list   (   partpb _ new   .   columns   ) ) ]   partpb _ new   =   drop _ duplicates _ index   (   partpb _ new   )   partpb _ new   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" pb . parquet \"   )   logger   .   success   (   \" \u5e02\u51c0\u7387 \u66f4\u65b0 \u5b8c\u6210 \"   )   #   pe   partpe   =   df2s   [ [   \" date \"   ,   \" code \"   ,   \" pe \"   ] ]   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" pe \"   )   partpe _ old   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" pe . parquet \"   )   partpe _ new   =   pd   .   concat   ( [   partpe _ old   ,   partpe   ] )   partpe _ new   =   partpe _ new   .   drop _ duplicates   ( )   partpe _ new   =   partpe _ new   [   closes   .   columns   ]   partpe _ new   =   partpe _ new   [   sorted   (   list   (   partpe _ new   .   columns   ) ) ]   partpe _ new   =   drop _ duplicates _ index   (   partpe _ new   )   partpe _ new   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" pe . parquet \"   )   logger   .   success   (   \" \u5e02\u76c8\u7387 \u66f4\u65b0 \u5b8c\u6210 \"   )   #   pettm   partpe   =   df2s   [ [   \" date \"   ,   \" code \"   ,   \" pe _ ttm \"   ] ]   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" pe _ ttm \"   )   partpe _ old   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" pettm . parquet \"   )   partpe _ new   =   pd   .   concat   ( [   partpe _ old   ,   partpe   ] )   partpe _ new   =   partpe _ new   .   drop _ duplicates   ( )   partpe _ new   =   partpe _ new   [   closes   .   columns   ]   partpe _ new   =   partpe _ new   [   sorted   (   list   (   partpe _ new   .   columns   ) ) ]   partpe _ new   =   drop _ duplicates _ index   (   partpe _ new   )   partpe _ new   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" pettm . parquet \"   )   logger   .   success   (   \" TTM \u5e02\u76c8\u7387 \u66f4\u65b0 \u5b8c\u6210 \"   )   #   st   part4   =   df3   [ [   \" s _ info _ windcode \"   ,   \" entry _ dt \"   ,   \" remove _ dt \"   ] ]   part4   =   part4   .   sort _ values   (   \" s _ info _ windcode \"   )   part4   .   remove _ dt   =   part4   .   remove _ dt   .   fillna   (   now   )   .   astype   (   int   )   part4   =   part4   .   set _ index   (   \" s _ info _ windcode \"   )   .   stack   ( )   part4   =   part4   .   reset _ index   ( )   .   assign   (   he   =   sorted   (   list   (   range   (   int   (   part4   .   shape   [   0   ]   /   2   ) ) )   *   2   )   )   part4   =   part4   .   drop   (   columns   =   [   \" level _ 1 \"   ] )   part4   .   columns   =   [   \" code \"   ,   \" date \"   ,   \" he \"   ]   part4   .   date   =   pd   .   to _ datetime   (   part4   .   date   ,   format   =   \" % Y% m   % d   \"   )   def   single   (   df   ) :   full   =   pd   .   DataFrame   ( {   \" date \"   :   pd   .   date _ range   (   df   .   date   .   min   ( ) ,   df   .   date   .   max   ( ) ) } )   df   =   pd   .   merge   (   full   ,   df   ,   on   =   [   \" date \"   ] ,   how   =   \" left \"   )   df   =   df   .   fillna   (   method   =   \" ffill \"   )   return   df   tqdm   .   auto   .   tqdm   .   pandas   ( )   part4   =   part4   .   groupby   ( [   \" code \"   ,   \" he \"   ] )   .   progress _ apply   (   single   )   part4   =   part4   [   part4   .   date   .   isin   (   list   (   part2 _ new   .   index   ) ) ]   part4   =   part4   .   reset _ index   (   drop   =   True   )   part4   =   part4   .   assign   (   st   =   1   )   part4   =   part4   .   drop _ duplicates   (   subset   =   [   \" date \"   ,   \" code \"   ] )   .   pivot   (   index   =   \" date \"   ,   columns   =   \" code \"   ,   values   =   \" st \"   )   part4 _ 0   =   pd   .   DataFrame   (   0   ,   columns   =   part2 _ new   .   columns   ,   index   =   part2 _ new   .   index   )   part4 _ 0   =   part4 _ 0   +   part4   part4 _ 0   =   part4 _ 0   .   replace   (   np   .   nan   ,   0   )   part4 _ 0   =   part4 _ 0   [   part4 _ 0   .   index   .   isin   (   list   (   part2 _ new   .   index   ) ) ]   part4 _ 0   =   part4 _ 0   .   T   part4 _ 0   =   part4 _ 0   [   part4 _ 0   .   index   .   isin   (   list   (   part2 _ new   .   columns   ) ) ]   part4 _ 0   =   part4 _ 0   .   T   part4 _ 0   =   part4 _ 0   [   closes   .   columns   ]   part4 _ 0   =   drop _ duplicates _ index   (   part4 _ 0   )   part4 _ 0   =   part4 _ 0   [   sorted   (   list   (   part4 _ 0   .   columns   ) ) ]   part4 _ 0   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" sts . parquet \"   )   logger   .   success   (   \" st \u66f4\u65b0 \u5b8c \u4e86 \"   )   #   \u4e0a\u5e02 \u5929\u6570   part5 _ close   =   pd   .   read _ parquet   (   homeplace   .   update _ data _ file   +   \" BasicFactor _ Close . parquet \"   )   part5 _ close   =   part5 _ close   [   part5 _ close   .   index   <   20040101   ]   part5 _ close   .   index   =   pd   .   to _ datetime   (   part5 _ close   .   index   ,   format   =   \" % Y% m   % d   \"   )   part5 _ close   =   pd   .   concat   ( [   part5 _ close   ,   closes   ] )   .   drop _ duplicates   ( )   part5   =   np   .   sign   (   part5 _ close   )   .   fillna   (   method   =   \" ffill \"   )   .   cumsum   ( )   part5   =   part5   [   part5   .   index   .   isin   (   list   (   part2 _ new   .   index   ) ) ]   part5   =   part5   .   T   part5   =   part5   [   part5   .   index   .   isin   (   list   (   part2 _ new   .   columns   ) ) ]   part5   =   part5   .   T   part5   =   part5   [   closes   .   columns   ]   part5   =   drop _ duplicates _ index   (   part5   )   part5   =   part5   [   sorted   (   list   (   part5   .   columns   ) ) ]   part5   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" ages . parquet \"   )   logger   .   success   (   \" \u4e0a\u5e02 \u5929\u6570 \u66f4\u65b0 \u5b8c \u4e86 \"   )   database _ update _ index _ three   ( )   \u00b6   \u8bfb\u53d6 \u4e09\u5927 \u6307\u6570 \u7684 \u539f\u59cb \u884c\u60c5 \u6570\u636e \uff0c \u8fd4\u56de \u5e76 \u4fdd\u5b58 \u5728 \u672c\u5730   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   896   897   898   899   900   901   902   903   904   def   database _ update _ index _ three   ( ) :   \" \" \" \u8bfb\u53d6 \u4e09\u5927 \u6307\u6570 \u7684 \u539f\u59cb \u884c\u60c5 \u6570\u636e \uff0c \u8fd4\u56de \u5e76 \u4fdd\u5b58 \u5728 \u672c\u5730 \" \" \"   hs300   =   download _ single _ index   (   \" 000300 . SH \"   )   zz500   =   download _ single _ index   (   \" 000905 . SH \"   )   zz1000   =   download _ single _ index   (   \" 000852 . SH \"   )   res   =   pd   .   concat   ( [   hs300   ,   zz500   ,   zz1000   ] ,   axis   =   1   )   new _ date   =   datetime   .   datetime   .   strftime   (   res   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   res   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" 3510 \u884c\u60c5 . parquet \"   )   logger   .   success   (   f   \" 3510 \u884c\u60c5 \u6570\u636e \u5df2\u7ecf \u66f4\u65b0 \u81f3   {   new _ date   }   \"   )   database _ update _ minute _ data _ to _ clickhouse _ and _ questdb   (   kind   ,   web _ port   =   ' 9001 '   )   \u00b6   \u4f7f\u7528 \u7c73 \u7b50 \u66f4\u65b0 \u5206\u949f \u6570\u636e \u81f3 clickhouse \u548c questdb \u4e2d   Parameters   \u00b6   kind   :   str   \u66f4\u65b0 \u80a1\u7968 \u5206\u949f \u6570\u636e \u6216 \u6307\u6570 \u5206\u949f \u6570\u636e \uff0c \u80a1\u7968 \u5219 ' stock ' \uff0c \u6307\u6570 \u5219 ' index '   web _ port   :   str   questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 web   console \u7684 \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 ,   by   default   ' 9001 '   Raises   \u00b6   IOError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u80a1\u7968 \u8fd8\u662f \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   262   263   264   265   266   267   268   269   270   def   database _ update _ minute _ data _ to _ clickhouse _ and _ questdb   (   kind   :   str   ,   web _ port   :   str   =   \" 9001 \"   )   - >   None   :   \" \" \" \u4f7f\u7528 \u7c73 \u7b50 \u66f4\u65b0 \u5206\u949f \u6570\u636e \u81f3 clickhouse \u548c questdb \u4e2d   Parameters   ----------   kind   :   str   \u66f4\u65b0 \u80a1\u7968 \u5206\u949f \u6570\u636e \u6216 \u6307\u6570 \u5206\u949f \u6570\u636e \uff0c \u80a1\u7968 \u5219 ' stock ' \uff0c \u6307\u6570 \u5219 ' index '   web _ port   :   str   questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 web   console \u7684 \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 ,   by   default   ' 9001 '   Raises   ------   ` IOError `   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u80a1\u7968 \u8fd8\u662f \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   \" \" \"   if   kind   = =   \" stock \"   :   code _ type   =   \" CS \"   elif   kind   = =   \" index \"   :   code _ type   =   \" INDX \"   else   :   raise   IOError   (   \" \u603b\u5f97 \u6307\u5b9a \u4e00\u79cd \u7c7b\u578b \u5427 \uff1f \u8bf7 \u4ece stock \u548c index \u4e2d\u9009 \u4e00\u4e2a \"   )   #   \u83b7\u53d6 \u5269\u4f59 \u4f7f\u7528 \u989d   user1   =   round   (   rqdatac   .   user   .   get _ quota   ( ) [   \" bytes _ used \"   ]   /   1024   /   1024   ,   2   )   logger   .   info   (   f   \" \u4eca\u65e5 \u5df2 \u4f7f\u7528 rqsdk \u6d41\u91cf   {   user1   }   MB \"   )   #   \u83b7\u53d6 \u5168\u90e8 \u80a1\u7968 / \u6307\u6570 \u4ee3\u7801   cs   =   rqdatac   .   all _ instruments   (   type   =   code _ type   ,   market   =   \" cn \"   ,   date   =   None   )   codes   =   list   (   cs   .   order _ book _ id   )   #   \u83b7\u53d6 \u4e0a\u6b21 \u66f4\u65b0 \u622a\u6b62 \u65f6\u95f4   chc   =   ClickHouseClient   (   \" minute _ data \"   )   last _ date   =   max   (   chc   .   show _ all _ dates   (   f   \" minute _ data _   {   kind   }   \"   ) )   #   \u672c\u6b21 \u66f4\u65b0 \u8d77\u59cb \u65e5\u671f   start _ date   =   pd   .   Timestamp   (   str   (   last _ date   ) )   +   pd   .   Timedelta   (   days   =   1   )   start _ date   =   datetime   .   datetime   .   strftime   (   start _ date   ,   \" % Y -% m -   % d   \"   )   #   \u672c\u6b21 \u66f4\u65b0 \u7ec8\u6b62 \u65e5\u671f   end _ date   =   datetime   .   datetime   .   now   ( )   if   end _ date   .   hour   <   17   :   end _ date   =   end _ date   -   pd   .   Timedelta   (   days   =   1   )   end _ date   =   datetime   .   datetime   .   strftime   (   end _ date   ,   \" % Y -% m -   % d   \"   )   logger   .   info   (   f   \" \u672c\u6b21 \u5c06 \u4e0b\u8f7d \u4ece   {   start _ date   }   \u5230   {   end _ date   }   \u7684 \u6570\u636e \"   )   #   \u4e0b\u8f7d \u6570\u636e   ts   =   rqdatac   .   get _ price   (   codes   ,   start _ date   =   start _ date   ,   end _ date   =   end _ date   ,   frequency   =   \" 1m \"   ,   fields   =   [   \" volume \"   ,   \" total _ turnover \"   ,   \" high \"   ,   \" low \"   ,   \" close \"   ,   \" open \"   ] ,   adjust _ type   =   \" none \"   ,   skip _ suspended   =   False   ,   market   =   \" cn \"   ,   expect _ df   =   True   ,   )   if   ts   is   not   None   :   #   \u8c03\u6574 \u6570\u636e \u683c\u5f0f \u6570\u636e\u683c\u5f0f   ts   =   ts   .   reset _ index   ( )   ts   =   ts   .   rename   (   columns   =   {   \" order _ book _ id \"   :   \" code \"   ,   \" datetime \"   :   \" date \"   ,   \" volume \"   :   \" amount \"   ,   \" total _ turnover \"   :   \" money \"   ,   }   )   ts   =   ts   .   sort _ values   ( [   \" code \"   ,   \" date \"   ] )   ts   .   date   =   ts   .   date   .   dt   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   )   ts   =   ts   .   groupby   ( [   \" code \"   ,   \" date \"   ] )   .   apply   (   lambda   x   :   x   .   assign   (   num   =   list   (   range   (   1   ,   x   .   shape   [   0   ]   +   1   ) ) )   )   ts   =   (   np   .   around   (   ts   .   set _ index   (   \" code \"   ) ,   2   )   *   100   )   .   astype   (   int   )   .   reset _ index   ( )   ts   .   code   =   ts   .   code   .   str   .   replace   (   \" . XSHE \"   ,   \" . SZ \"   )   ts   .   code   =   ts   .   code   .   str   .   replace   (   \" . XSHG \"   ,   \" . SH \"   )   #   \u6570\u636e \u5199\u5165 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   ts   .   to _ sql   (   f   \" minute _ data _   {   kind   }   \"   ,   chc   .   engine   ,   if _ exists   =   \" append \"   ,   index   =   False   )   ts   =   ts   .   set _ index   (   \" code \"   )   ts   =   ts   /   100   ts   =   ts   .   reset _ index   ( )   ts   .   date   =   ts   .   date   .   astype   (   int   )   .   astype   (   str   )   ts   .   num   =   ts   .   num   .   astype   (   int   )   .   astype   (   str   )   qdb   =   Questdb   (   web _ port   =   web _ port   )   qdb   .   write _ via _ df   (   ts   ,   f   \" minute _ data _   {   kind   }   \"   )   #   \u83b7\u53d6 \u5269\u4f59 \u4f7f\u7528 \u989d   user2   =   round   (   rqdatac   .   user   .   get _ quota   ( ) [   \" bytes _ used \"   ]   /   1024   /   1024   ,   2   )   user12   =   round   (   user2   -   user1   ,   2   )   logger   .   info   (   f   \" \u4eca\u65e5 \u5df2 \u4f7f\u7528 rqsdk \u6d41\u91cf   {   user2   }   MB \uff0c \u672c\u9879 \u66f4\u65b0 \u6d88\u8017 \u6d41\u91cf   {   user12   }   MB \"   )   else   :   logger   .   warning   (   f   \" \u4ece   {   start _ date   }   \u5230   {   end _ date   }   \u6682\u65e0 \u6570\u636e \"   )   database _ update _ minute _ data _ to _ questdb   (   kind   ,   web _ port   =   ' 9001 '   )   \u00b6   \u4f7f\u7528 \u7c73 \u7b50 \u66f4\u65b0 \u5206\u949f \u6570\u636e \u81f3 questdb \u4e2d   Parameters   \u00b6   kind   :   str   \u66f4\u65b0 \u80a1\u7968 \u5206\u949f \u6570\u636e \u6216 \u6307\u6570 \u5206\u949f \u6570\u636e \uff0c \u80a1\u7968 \u5219 ' stock ' \uff0c \u6307\u6570 \u5219 ' index '   web _ port   :   str   questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u63a7\u5236 \u63a7\u5236\u53f0 \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 ,   by   default   ' 9001 '   Raises   \u00b6   IOError   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u80a1\u7968 \u8fd8\u662f \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   def   database _ update _ minute _ data _ to _ questdb   (   kind   :   str   ,   web _ port   :   str   =   \" 9001 \"   )   - >   None   :   \" \" \" \u4f7f\u7528 \u7c73 \u7b50 \u66f4\u65b0 \u5206\u949f \u6570\u636e \u81f3 questdb \u4e2d   Parameters   ----------   kind   :   str   \u66f4\u65b0 \u80a1\u7968 \u5206\u949f \u6570\u636e \u6216 \u6307\u6570 \u5206\u949f \u6570\u636e \uff0c \u80a1\u7968 \u5219 ' stock ' \uff0c \u6307\u6570 \u5219 ' index '   web _ port   :   str   questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u7684 \u63a7\u5236 \u63a7\u5236\u53f0 \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 ,   by   default   ' 9001 '   Raises   ------   ` IOError `   \u5982\u679c \u6307\u5b9a \u672a\u6307\u5b9a \u80a1\u7968 \u8fd8\u662f \u6307\u6570 \uff0c \u5c06 \u62a5\u9519   \" \" \"   if   kind   = =   \" stock \"   :   code _ type   =   \" CS \"   elif   kind   = =   \" index \"   :   code _ type   =   \" INDX \"   else   :   raise   IOError   (   \" \u603b\u5f97 \u6307\u5b9a \u4e00\u79cd \u7c7b\u578b \u5427 \uff1f \u8bf7 \u4ece stock \u548c index \u4e2d\u9009 \u4e00\u4e2a \"   )   #   \u83b7\u53d6 \u5269\u4f59 \u4f7f\u7528 \u989d   user1   =   round   (   rqdatac   .   user   .   get _ quota   ( ) [   \" bytes _ used \"   ]   /   1024   /   1024   ,   2   )   logger   .   info   (   f   \" \u4eca\u65e5 \u5df2 \u4f7f\u7528 rqsdk \u6d41\u91cf   {   user1   }   MB \"   )   #   \u83b7\u53d6 \u5168\u90e8 \u80a1\u7968 / \u6307\u6570 \u4ee3\u7801   cs   =   rqdatac   .   all _ instruments   (   type   =   code _ type   ,   market   =   \" cn \"   ,   date   =   None   )   codes   =   list   (   cs   .   order _ book _ id   )   #   \u83b7\u53d6 \u4e0a\u6b21 \u66f4\u65b0 \u622a\u6b62 \u65f6\u95f4   qdb   =   Questdb   (   web _ port   =   web _ port   )   last _ date   =   max   (   qdb   .   show _ all _ dates   (   f   \" minute _ data _   {   kind   }   \"   ) )   #   \u672c\u6b21 \u66f4\u65b0 \u8d77\u59cb \u65e5\u671f   start _ date   =   pd   .   Timestamp   (   str   (   last _ date   ) )   +   pd   .   Timedelta   (   days   =   1   )   start _ date   =   datetime   .   datetime   .   strftime   (   start _ date   ,   \" % Y -% m -   % d   \"   )   #   \u672c\u6b21 \u66f4\u65b0 \u7ec8\u6b62 \u65e5\u671f   end _ date   =   datetime   .   datetime   .   now   ( )   if   end _ date   .   hour   <   17   :   end _ date   =   end _ date   -   pd   .   Timedelta   (   days   =   1   )   end _ date   =   datetime   .   datetime   .   strftime   (   end _ date   ,   \" % Y -% m -   % d   \"   )   logger   .   info   (   f   \" \u672c\u6b21 \u5c06 \u4e0b\u8f7d \u4ece   {   start _ date   }   \u5230   {   end _ date   }   \u7684 \u6570\u636e \"   )   #   \u4e0b\u8f7d \u6570\u636e   ts   =   rqdatac   .   get _ price   (   codes   ,   start _ date   =   start _ date   ,   end _ date   =   end _ date   ,   frequency   =   \" 1m \"   ,   fields   =   [   \" volume \"   ,   \" total _ turnover \"   ,   \" high \"   ,   \" low \"   ,   \" close \"   ,   \" open \"   ] ,   adjust _ type   =   \" none \"   ,   skip _ suspended   =   False   ,   market   =   \" cn \"   ,   expect _ df   =   True   ,   )   if   ts   is   not   None   :   #   \u8c03\u6574 \u6570\u636e \u683c\u5f0f \u6570\u636e\u683c\u5f0f   ts   =   ts   .   reset _ index   ( )   ts   =   ts   .   rename   (   columns   =   {   \" order _ book _ id \"   :   \" code \"   ,   \" datetime \"   :   \" date \"   ,   \" volume \"   :   \" amount \"   ,   \" total _ turnover \"   :   \" money \"   ,   }   )   ts   =   ts   .   sort _ values   ( [   \" code \"   ,   \" date \"   ] )   ts   .   date   =   ts   .   date   .   dt   .   strftime   (   \" % Y% m   % d   \"   )   .   astype   (   int   )   ts   =   ts   .   groupby   ( [   \" code \"   ,   \" date \"   ] )   .   apply   (   lambda   x   :   x   .   assign   (   num   =   list   (   range   (   1   ,   x   .   shape   [   0   ]   +   1   ) ) )   )   ts   =   ts   .   ffill   ( )   .   dropna   ( )   ts   .   code   =   ts   .   code   .   str   .   replace   (   \" . XSHE \"   ,   \" . SZ \"   )   ts   .   code   =   ts   .   code   .   str   .   replace   (   \" . XSHG \"   ,   \" . SH \"   )   ts   .   date   =   ts   .   date   .   astype   (   int   )   .   astype   (   str   )   ts   .   num   =   ts   .   num   .   astype   (   int   )   .   astype   (   str   )   #   \u6570\u636e \u5199\u5165 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   qdb   .   write _ via _ df   (   ts   ,   f   \" minute _ data _   {   kind   }   \"   )   #   \u83b7\u53d6 \u5269\u4f59 \u4f7f\u7528 \u989d   user2   =   round   (   rqdatac   .   user   .   get _ quota   ( ) [   \" bytes _ used \"   ]   /   1024   /   1024   ,   2   )   user12   =   round   (   user2   -   user1   ,   2   )   logger   .   info   (   f   \" \u4eca\u65e5 \u5df2 \u4f7f\u7528 rqsdk \u6d41\u91cf   {   user2   }   MB \uff0c \u672c\u9879 \u66f4\u65b0 \u6d88\u8017 \u6d41\u91cf   {   user12   }   MB \"   )   else   :   logger   .   warning   (   f   \" \u4ece   {   start _ date   }   \u5230   {   end _ date   }   \u6682\u65e0 \u6570\u636e \"   )   database _ update _ zxindustry _ member   ( )   \u00b6   \u66f4\u65b0 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u6210\u5206 \u6210\u5206\u80a1   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   1207   1208   1209   1210   1211   1212   1213   1214   1215   1216   1217   1218   1219   1220   1221   1222   1223   1224   1225   1226   1227   1228   1229   1230   1231   1232   1233   1234   1235   1236   1237   1238   1239   1240   1241   1242   1243   1244   1245   1246   1247   1248   1249   1250   1251   1252   1253   1254   1255   1256   1257   1258   1259   1260   1261   1262   1263   1264   1265   1266   1267   1268   1269   def   database _ update _ zxindustry _ member   ( ) :   \" \" \" \u66f4\u65b0 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u6210\u5206 \u6210\u5206\u80a1 \" \" \"   old _ codes   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u4ee3\u7801 \u7248 . parquet \"   )   old _ names   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u540d\u79f0 \u7248 . parquet \"   )   old _ enddate   =   old _ codes   .   date   .   max   ( )   old _ enddate _ str   =   datetime   .   datetime   .   strftime   (   old _ enddate   ,   \" % Y% m   % d   \"   )   now   =   datetime   .   datetime   .   now   ( )   now _ str   =   datetime   .   datetime   .   strftime   (   now   ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6570\u636e \uff0c \u4e0a\u6b21 \u66f4\u65b0 \u5230 \u4e86   {   old _ enddate _ str   }   \uff0c \u672c\u6b21 \u5c06 \u66f4\u65b0 \u81f3   {   now _ str   }   \"   )   start _ date   =   old _ enddate   +   pd   .   Timedelta   (   days   =   1   )   start _ date   =   datetime   .   datetime   .   strftime   (   start _ date   ,   \" % Y% m   % d   \"   )   codes   =   list   (   set   (   rqdatac   .   all _ instruments   (   type   =   \" CS \"   ,   market   =   \" cn \"   ,   date   =   None   )   .   order _ book _ id   )   )   trs   =   read _ daily   (   tr   =   1   )   trs   =   trs   [   trs   .   index   >   old _ enddate   ]   dates   =   list   (   trs   .   index   )   dfs _ codes   =   [ ]   dfs _ names   =   [ ]   if   len   (   dates   )   > =   1   :   for   date   in   tqdm   .   auto   .   tqdm   (   dates   ) :   df   =   rqdatac   .   get _ instrument _ industry   (   codes   ,   source   =   \" citics _ 2019 \"   ,   date   =   date   ,   level   =   1   )   if   df   .   shape   [   0   ]   >   0   :   df _ code   =   df   .   first _ industry _ code   .   to _ frame   (   date   )   df _ name   =   df   .   first _ industry _ name   .   to _ frame   (   date   )   dfs _ codes   .   append   (   df _ code   )   dfs _ names   .   append   (   df _ name   )   dfs _ codes   =   pd   .   concat   (   dfs _ codes   ,   axis   =   1   )   dfs _ names   =   pd   .   concat   (   dfs _ names   ,   axis   =   1   )   def   new _ get _ dummies   (   df   ) :   dums   =   [ ]   for   col   in   tqdm   .   auto   .   tqdm   (   list   (   df   .   columns   ) ) :   series   =   df   [   col   ]   dum   =   pd   .   get _ dummies   (   series   )   dum   =   dum   .   reset _ index   ( )   dum   =   dum   .   assign   (   date   =   col   )   dums   .   append   (   dum   )   dums   =   pd   .   concat   (   dums   )   return   dums   dfs _ codes   =   new _ get _ dummies   (   dfs _ codes   )   dfs _ names   =   new _ get _ dummies   (   dfs _ names   )   a   =   read _ daily   (   tr   =   1   ,   start   =   20100101   )   def   save   (   df   ,   old   ,   file   ) :   df   =   df   .   rename   (   columns   =   {   \" order _ book _ id \"   :   \" code \"   } )   df   =   df   [ [   \" date \"   ,   \" code \"   ]   +   sorted   (   list   (   df   .   columns   ) [   1   :   -   1   ] ) ]   df   .   code   =   df   .   code   .   apply   (   lambda   x   :   convert _ code   (   x   ) [   0   ] )   df   =   pd   .   concat   ( [   old   ,   df   ] ,   ignore _ index   =   True   )   df   =   df   [   df   .   date   .   isin   (   list   (   a   .   index   ) ) ]   df   =   df   .   reset _ index   (   drop   =   True   )   .   replace   (   True   ,   1   )   .   replace   (   False   ,   0   )   df   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   file   )   return   df   dfs _ codes   =   save   (   dfs _ codes   ,   old _ codes   ,   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u4ee3\u7801 \u7248 . parquet \"   )   dfs _ names   =   save   (   dfs _ names   ,   old _ names   ,   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u540d\u79f0 \u7248 . parquet \"   )   logger   .   success   (   f   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6570\u636e \u5df2\u7ecf \u66f4\u65b0 \u81f3   {   now _ str   }   \u4e86 \"   )   else   :   logger   .   warning   (   f   \" \u4ece   {   start _ date   }   \u5230   {   now _ str   }   \u6682\u65e0 \u6570\u636e \"   )   download _ calendar   (   startdate   ,   enddate   )   \u00b6   \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   439   440   441   442   443   444   445   446   447   448   449   450   451   452   @ retry   def   download _ calendar   (   startdate   ,   enddate   ) :   \" \" \" \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e \" \" \"   try   :   #   \u4ea4\u6613 \u65e5\u5386   df0   =   pro   .   a _ calendar   (   start _ date   =   startdate   ,   end _ date   =   enddate   )   time   .   sleep   (   1   )   return   df0   except   Exception   :   time   .   sleep   (   60   )   #   \u4ea4\u6613 \u65e5\u5386   df0   =   pro   .   a _ calendar   (   start _ date   =   startdate   ,   end _ date   =   enddate   )   time   .   sleep   (   1   )   return   df0   download _ single _ daily   (   day   )   \u00b6   \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   @ retry   def   download _ single _ daily   (   day   ) :   \" \" \" \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e \" \" \"   try   :   #   8 \u4e2a \u4ef7\u683c \uff0c \u4ea4\u6613 \u72b6\u6001 \uff0c \u6210\u4ea4 \u6210\u4ea4\u91cf \uff0c   df1   =   pro   .   a _ daily   (   trade _ date   =   day   ,   fields   =   [   \" code \"   ,   \" trade _ date \"   ,   \" open \"   ,   \" high \"   ,   \" low \"   ,   \" close \"   ,   \" volume \"   ,   \" adjopen \"   ,   \" adjclose \"   ,   \" adjhigh \"   ,   \" adjlow \"   ,   \" tradestatus \"   ,   \" adjfactor \"   ,   \" limit \"   ,   \" stopping \"   ,   \" avgprice \"   ,   ] ,   )   #   \u6362\u624b \u6362\u624b\u7387 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c \uff0c \u6362\u624b \u6362\u624b\u7387 \u8981 \u9664\u4ee5 100 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c\u8981 \u4e58\u4ee5 10000   df2   =   pro   .   daily _ basic   (   trade _ date   =   day   ,   fields   =   [   \" ts _ code \"   ,   \" trade _ date \"   ,   \" turnover _ rate \"   ,   \" total _ share \"   ,   \" float _ share \"   ,   \" pe \"   ,   \" pb \"   ,   ' pe _ ttm '   ,   ] ,   )   time   .   sleep   (   1   )   return   df1   ,   df2   except   Exception   :   time   .   sleep   (   60   )   #   8 \u4e2a \u4ef7\u683c \uff0c \u4ea4\u6613 \u72b6\u6001 \uff0c \u6210\u4ea4 \u6210\u4ea4\u91cf \uff0c   df1   =   pro   .   a _ daily   (   trade _ date   =   day   ,   fields   =   [   \" code \"   ,   \" trade _ date \"   ,   \" open \"   ,   \" high \"   ,   \" low \"   ,   \" close \"   ,   \" volume \"   ,   \" adjopen \"   ,   \" adjclose \"   ,   \" adjhigh \"   ,   \" adjlow \"   ,   \" tradestatus \"   ,   \" adjfactor \"   ,   \" limit \"   ,   \" stopping \"   ,   \" avgprice \"   ,   ] ,   )   #   \u6362\u624b \u6362\u624b\u7387 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c \uff0c \u6362\u624b \u6362\u624b\u7387 \u8981 \u9664\u4ee5 100 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c\u8981 \u4e58\u4ee5 10000   df2   =   pro   .   daily _ basic   (   trade _ date   =   day   ,   fields   =   [   \" ts _ code \"   ,   \" trade _ date \"   ,   \" turnover _ rate \"   ,   \" total _ share \"   ,   \" float _ share \"   ,   \" pe \"   ,   \" pb \"   ,   ' pe _ ttm '   ] ,   )   time   .   sleep   (   1   )   return   df1   ,   df2   download _ single _ day _ style   (   day   )   \u00b6   \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   @ retry   def   download _ single _ day _ style   (   day   ) :   \" \" \" \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e \" \" \"   try   :   style   =   pro   .   RMExposureDayGet   (   trade _ date   =   str   (   day   ) ,   fields   =   \" tradeDate , ticker , BETA , MOMENTUM , SIZE , EARNYILD , RESVOL , GROWTH , BTOP , LEVERAGE , LIQUIDTY , SIZENL \"   ,   )   time   .   sleep   (   1   )   return   style   except   Exception   :   time   .   sleep   (   60   )   style   =   pro   .   RMExposureDayGet   (   trade _ date   =   str   (   day   ) ,   fields   =   \" tradeDate , ticker , BETA , MOMENTUM , SIZE , EARNYILD , RESVOL , GROWTH , BTOP , LEVERAGE , LIQUIDTY , SIZENL \"   ,   )   time   .   sleep   (   1   )   return   style","title":"write _ data"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.FactorReader","text":"Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   1322   1323   1324   1325   1326   1327   1328   1329   1330   1331   1332   1333   1334   1335   1336   1337   1338   1339   1340   1341   1342   1343   1344   1345   1346   1347   1348   1349   1350   1351   1352   1353   1354   1355   1356   1357   1358   1359   1360   1361   1362   1363   1364   1365   1366   1367   1368   1369   1370   1371   1372   1373   1374   1375   1376   1377   1378   1379   1380   1381   1382   1383   1384   1385   1386   1387   1388   1389   1390   1391   1392   1393   1394   1395   1396   1397   1398   1399   1400   1401   1402   1403   1404   1405   1406   1407   1408   1409   1410   1411   1412   1413   1414   1415   1416   1417   1418   1419   1420   1421   1422   1423   1424   1425   1426   1427   1428   1429   1430   1431   1432   1433   1434   class   FactorReader   :   def   __ init __   (   self   ,   user   :   str   =   \" admin \"   ,   password   :   str   =   \" quest \"   ,   host   :   str   =   \" 127.0 . 0.1 \"   ,   port   :   str   =   \" 8812 \"   ,   database   :   str   =   \" qdb \"   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   user   :   str ,   optional   \u7528\u6237 \u6237\u540d \u7528\u6237\u540d ,   by   default   \" admin \"   password   :   str ,   optional   \u5bc6\u7801 ,   by   default   \" quest \"   host   :   str ,   optional   \u5730\u5740 ,   by   default   \" 43.143 . 223.158 \"   port   :   str ,   optional   \u7aef\u53e3 ,   by   default   \" 8812 \"   database   :   str ,   optional   \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 ,   by   default   \" qdb \"   \" \" \"   self   .   user   =   user   self   .   password   =   password   self   .   host   =   host   self   .   port   =   port   self   .   database   =   database   def   __ connect   (   self   ) :   conn   =   pg   .   connect   (   user   =   self   .   user   ,   password   =   self   .   password   ,   host   =   self   .   host   ,   port   =   self   .   port   ,   database   =   self   .   database   ,   )   return   conn   def   update _ factor   (   self   ,   table _ name   :   str   ,   df   :   pd   .   DataFrame   ) :   tables   =   self   .   __ get _ data   (   \" show   tables \"   )   .   table   .   tolist   ( )   if   table _ name   in   tables   :   logger   .   info   (   f   \"   {   table _ name   }   \u5df2\u7ecf \u5b58\u5728 \u4e86 \uff0c \u5373\u5c06 \u66f4\u65b0 \"   )   old _ end   =   self   .   __ get _ data   (   f   \" select   max ( date )   from   {   table _ name   }   \"   )   .   iloc   [   0   ,   0   ]   new   =   df   [   df   .   index   >   old _ end   ]   new   =   new   .   stack   ( )   .   reset _ index   ( )   new   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   else   :   logger   .   info   (   f   \"   {   table _ name   }   \u7b2c\u4e00 \u4e00\u6b21 \u7b2c\u4e00\u6b21 \u4e0a\u4f20 \"   )   new   =   df   .   stack   ( )   .   reset _ index   ( )   new   .   columns   =   [   \" date \"   ,   \" code \"   ,   \" fac \"   ]   self   .   __ write _ via _ df   (   new   ,   table _ name   )   def   __ write _ via _ df   (   self   ,   df   :   pd   .   DataFrame   ,   table _ name   :   str   ,   symbols   =   None   ,   tuple _ col   =   None   ,   )   - >   None   :   \" \" \" \u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93   Parameters   ----------   df   :   pd . DataFrame   \u8981 \u5199\u5165 \u7684 dataframe   table _ name   :   str   questdb \u4e2d\u8be5 \u8868 \u7684 \u8868\u540d   symbols   :   Union [ str ,   bool ,   List [ int ] ,   List [ str ] ] ,   optional   \u4e3a symbols \u7684 \u90a3\u4e9b \u5217 \u7684 \u540d\u79f0 ,   by   default   None   tuple _ col   :   Union [ str ,   List [ str ] ] ,   optional   \u6570\u636e \u7c7b\u578b \u6570\u636e\u7c7b\u578b \u4e3a tuple \u6216 list \u7684 \u5217 \u7684 \u540d\u5b57 ,   by   default   None   \" \" \"   if   tuple _ col   is   None   :   ...   elif   isinstance   (   tuple _ col   ,   str   ) :   df   [   tuple _ col   ]   =   df   [   tuple _ col   ]   .   apply   (   str   )   else   :   for   t   in   tuple _ col   :   df   [   t   ]   =   df   [   t   ]   .   apply   (   str   )   if   symbols   is   not   None   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   ,   symbols   =   symbols   )   else   :   with   qdbing   .   Sender   (   self   .   host   ,   9009   )   as   sender   :   sender   .   dataframe   (   df   ,   table _ name   =   table _ name   )   @ retry   (   stop   =   stop _ after _ attempt   (   10   ) )   def   __ get _ data   (   self   ,   sql _ order   :   str   )   - >   pd   .   DataFrame   :   \" \" \" \u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e   Parameters   ----------   sql _ order   :   str   sql \u547d\u4ee4   Returns   -------   pd . DataFrame   \u8bfb\u53d6 \u7684 \u7ed3\u679c   \" \" \"   conn   =   self   .   __ connect   ( )   cursor   =   conn   .   cursor   ( )   cursor   .   execute   (   sql _ order   )   df _ data   =   cursor   .   fetchall   ( )   columns   =   [   i   [   0   ]   for   i   in   cursor   .   description   ]   df   =   pd   .   DataFrame   (   df _ data   ,   columns   =   columns   )   return   df   def   add _ token   (   self   ,   tokens   :   List   [   str   ] ,   users   :   List   [   str   ] ) :   tus   =   pd   .   DataFrame   ( {   \" token \"   :   tokens   ,   \" user \"   :   users   } )   self   .   __ write _ via _ df   (   tus   ,   \" tokenlines \"   )","title":"FactorReader"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.FactorReader.__get_data","text":"\u4ee5 sql \u547d\u4ee4 \u7684 \u65b9\u5f0f \uff0c \u4ece \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u8bfb\u53d6 \u6570\u636e \u8bfb\u53d6\u6570\u636e","title":"__ get _ data ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.FactorReader.__init__","text":"\u901a\u8fc7 postgre \u7684 psycopg2 \u9a71\u52a8 \u8fde\u63a5 questdb \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.FactorReader.__write_via_df","text":"\u901a\u8fc7 questdb \u7684 python \u5e93 \u76f4\u63a5 \u5c06 dataframe \u5199\u5165 quested \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93","title":"__ write _ via _ df ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.database_save_final_factors","text":"\u4fdd\u5b58 \u6700\u7ec8 \u56e0\u5b50 \u7684 \u56e0\u5b50 \u503c","title":"database _ save _ final _ factors ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.database_update_daily_files","text":"\u66f4\u65b0 \u6570\u636e \u636e\u5e93 \u6570\u636e\u5e93 \u4e2d \u7684 \u65e5\u9891 \u6570\u636e","title":"database _ update _ daily _ files ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.database_update_index_three","text":"\u8bfb\u53d6 \u4e09\u5927 \u6307\u6570 \u7684 \u539f\u59cb \u884c\u60c5 \u6570\u636e \uff0c \u8fd4\u56de \u5e76 \u4fdd\u5b58 \u5728 \u672c\u5730   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   896   897   898   899   900   901   902   903   904   def   database _ update _ index _ three   ( ) :   \" \" \" \u8bfb\u53d6 \u4e09\u5927 \u6307\u6570 \u7684 \u539f\u59cb \u884c\u60c5 \u6570\u636e \uff0c \u8fd4\u56de \u5e76 \u4fdd\u5b58 \u5728 \u672c\u5730 \" \" \"   hs300   =   download _ single _ index   (   \" 000300 . SH \"   )   zz500   =   download _ single _ index   (   \" 000905 . SH \"   )   zz1000   =   download _ single _ index   (   \" 000852 . SH \"   )   res   =   pd   .   concat   ( [   hs300   ,   zz500   ,   zz1000   ] ,   axis   =   1   )   new _ date   =   datetime   .   datetime   .   strftime   (   res   .   index   .   max   ( ) ,   \" % Y% m   % d   \"   )   res   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   \" 3510 \u884c\u60c5 . parquet \"   )   logger   .   success   (   f   \" 3510 \u884c\u60c5 \u6570\u636e \u5df2\u7ecf \u66f4\u65b0 \u81f3   {   new _ date   }   \"   )","title":"database _ update _ index _ three ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.database_update_minute_data_to_clickhouse_and_questdb","text":"\u4f7f\u7528 \u7c73 \u7b50 \u66f4\u65b0 \u5206\u949f \u6570\u636e \u81f3 clickhouse \u548c questdb \u4e2d","title":"database _ update _ minute _ data _ to _ clickhouse _ and _ questdb ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.database_update_minute_data_to_questdb","text":"\u4f7f\u7528 \u7c73 \u7b50 \u66f4\u65b0 \u5206\u949f \u6570\u636e \u81f3 questdb \u4e2d","title":"database _ update _ minute _ data _ to _ questdb ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.database_update_zxindustry_member","text":"\u66f4\u65b0 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u6210\u5206 \u6210\u5206\u80a1   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   1207   1208   1209   1210   1211   1212   1213   1214   1215   1216   1217   1218   1219   1220   1221   1222   1223   1224   1225   1226   1227   1228   1229   1230   1231   1232   1233   1234   1235   1236   1237   1238   1239   1240   1241   1242   1243   1244   1245   1246   1247   1248   1249   1250   1251   1252   1253   1254   1255   1256   1257   1258   1259   1260   1261   1262   1263   1264   1265   1266   1267   1268   1269   def   database _ update _ zxindustry _ member   ( ) :   \" \" \" \u66f4\u65b0 \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u7684 \u6210\u5206 \u6210\u5206\u80a1 \" \" \"   old _ codes   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u4ee3\u7801 \u7248 . parquet \"   )   old _ names   =   pd   .   read _ parquet   (   homeplace   .   daily _ data _ file   +   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u540d\u79f0 \u7248 . parquet \"   )   old _ enddate   =   old _ codes   .   date   .   max   ( )   old _ enddate _ str   =   datetime   .   datetime   .   strftime   (   old _ enddate   ,   \" % Y% m   % d   \"   )   now   =   datetime   .   datetime   .   now   ( )   now _ str   =   datetime   .   datetime   .   strftime   (   now   ,   \" % Y% m   % d   \"   )   logger   .   info   (   f   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6570\u636e \uff0c \u4e0a\u6b21 \u66f4\u65b0 \u5230 \u4e86   {   old _ enddate _ str   }   \uff0c \u672c\u6b21 \u5c06 \u66f4\u65b0 \u81f3   {   now _ str   }   \"   )   start _ date   =   old _ enddate   +   pd   .   Timedelta   (   days   =   1   )   start _ date   =   datetime   .   datetime   .   strftime   (   start _ date   ,   \" % Y% m   % d   \"   )   codes   =   list   (   set   (   rqdatac   .   all _ instruments   (   type   =   \" CS \"   ,   market   =   \" cn \"   ,   date   =   None   )   .   order _ book _ id   )   )   trs   =   read _ daily   (   tr   =   1   )   trs   =   trs   [   trs   .   index   >   old _ enddate   ]   dates   =   list   (   trs   .   index   )   dfs _ codes   =   [ ]   dfs _ names   =   [ ]   if   len   (   dates   )   > =   1   :   for   date   in   tqdm   .   auto   .   tqdm   (   dates   ) :   df   =   rqdatac   .   get _ instrument _ industry   (   codes   ,   source   =   \" citics _ 2019 \"   ,   date   =   date   ,   level   =   1   )   if   df   .   shape   [   0   ]   >   0   :   df _ code   =   df   .   first _ industry _ code   .   to _ frame   (   date   )   df _ name   =   df   .   first _ industry _ name   .   to _ frame   (   date   )   dfs _ codes   .   append   (   df _ code   )   dfs _ names   .   append   (   df _ name   )   dfs _ codes   =   pd   .   concat   (   dfs _ codes   ,   axis   =   1   )   dfs _ names   =   pd   .   concat   (   dfs _ names   ,   axis   =   1   )   def   new _ get _ dummies   (   df   ) :   dums   =   [ ]   for   col   in   tqdm   .   auto   .   tqdm   (   list   (   df   .   columns   ) ) :   series   =   df   [   col   ]   dum   =   pd   .   get _ dummies   (   series   )   dum   =   dum   .   reset _ index   ( )   dum   =   dum   .   assign   (   date   =   col   )   dums   .   append   (   dum   )   dums   =   pd   .   concat   (   dums   )   return   dums   dfs _ codes   =   new _ get _ dummies   (   dfs _ codes   )   dfs _ names   =   new _ get _ dummies   (   dfs _ names   )   a   =   read _ daily   (   tr   =   1   ,   start   =   20100101   )   def   save   (   df   ,   old   ,   file   ) :   df   =   df   .   rename   (   columns   =   {   \" order _ book _ id \"   :   \" code \"   } )   df   =   df   [ [   \" date \"   ,   \" code \"   ]   +   sorted   (   list   (   df   .   columns   ) [   1   :   -   1   ] ) ]   df   .   code   =   df   .   code   .   apply   (   lambda   x   :   convert _ code   (   x   ) [   0   ] )   df   =   pd   .   concat   ( [   old   ,   df   ] ,   ignore _ index   =   True   )   df   =   df   [   df   .   date   .   isin   (   list   (   a   .   index   ) ) ]   df   =   df   .   reset _ index   (   drop   =   True   )   .   replace   (   True   ,   1   )   .   replace   (   False   ,   0   )   df   .   to _ parquet   (   homeplace   .   daily _ data _ file   +   file   )   return   df   dfs _ codes   =   save   (   dfs _ codes   ,   old _ codes   ,   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u4ee3\u7801 \u7248 . parquet \"   )   dfs _ names   =   save   (   dfs _ names   ,   old _ names   ,   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u54d1 \u53d8\u91cf \u540d\u79f0 \u7248 . parquet \"   )   logger   .   success   (   f   \" \u4e2d\u4fe1 \u4e00\u7ea7 \u884c\u4e1a \u6570\u636e \u5df2\u7ecf \u66f4\u65b0 \u81f3   {   now _ str   }   \u4e86 \"   )   else   :   logger   .   warning   (   f   \" \u4ece   {   start _ date   }   \u5230   {   now _ str   }   \u6682\u65e0 \u6570\u636e \"   )","title":"database _ update _ zxindustry _ member ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.download_calendar","text":"\u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   439   440   441   442   443   444   445   446   447   448   449   450   451   452   @ retry   def   download _ calendar   (   startdate   ,   enddate   ) :   \" \" \" \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e \" \" \"   try   :   #   \u4ea4\u6613 \u65e5\u5386   df0   =   pro   .   a _ calendar   (   start _ date   =   startdate   ,   end _ date   =   enddate   )   time   .   sleep   (   1   )   return   df0   except   Exception   :   time   .   sleep   (   60   )   #   \u4ea4\u6613 \u65e5\u5386   df0   =   pro   .   a _ calendar   (   start _ date   =   startdate   ,   end _ date   =   enddate   )   time   .   sleep   (   1   )   return   df0","title":"download _ calendar ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.download_single_daily","text":"\u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   @ retry   def   download _ single _ daily   (   day   ) :   \" \" \" \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e \" \" \"   try   :   #   8 \u4e2a \u4ef7\u683c \uff0c \u4ea4\u6613 \u72b6\u6001 \uff0c \u6210\u4ea4 \u6210\u4ea4\u91cf \uff0c   df1   =   pro   .   a _ daily   (   trade _ date   =   day   ,   fields   =   [   \" code \"   ,   \" trade _ date \"   ,   \" open \"   ,   \" high \"   ,   \" low \"   ,   \" close \"   ,   \" volume \"   ,   \" adjopen \"   ,   \" adjclose \"   ,   \" adjhigh \"   ,   \" adjlow \"   ,   \" tradestatus \"   ,   \" adjfactor \"   ,   \" limit \"   ,   \" stopping \"   ,   \" avgprice \"   ,   ] ,   )   #   \u6362\u624b \u6362\u624b\u7387 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c \uff0c \u6362\u624b \u6362\u624b\u7387 \u8981 \u9664\u4ee5 100 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c\u8981 \u4e58\u4ee5 10000   df2   =   pro   .   daily _ basic   (   trade _ date   =   day   ,   fields   =   [   \" ts _ code \"   ,   \" trade _ date \"   ,   \" turnover _ rate \"   ,   \" total _ share \"   ,   \" float _ share \"   ,   \" pe \"   ,   \" pb \"   ,   ' pe _ ttm '   ,   ] ,   )   time   .   sleep   (   1   )   return   df1   ,   df2   except   Exception   :   time   .   sleep   (   60   )   #   8 \u4e2a \u4ef7\u683c \uff0c \u4ea4\u6613 \u72b6\u6001 \uff0c \u6210\u4ea4 \u6210\u4ea4\u91cf \uff0c   df1   =   pro   .   a _ daily   (   trade _ date   =   day   ,   fields   =   [   \" code \"   ,   \" trade _ date \"   ,   \" open \"   ,   \" high \"   ,   \" low \"   ,   \" close \"   ,   \" volume \"   ,   \" adjopen \"   ,   \" adjclose \"   ,   \" adjhigh \"   ,   \" adjlow \"   ,   \" tradestatus \"   ,   \" adjfactor \"   ,   \" limit \"   ,   \" stopping \"   ,   \" avgprice \"   ,   ] ,   )   #   \u6362\u624b \u6362\u624b\u7387 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c \uff0c \u6362\u624b \u6362\u624b\u7387 \u8981 \u9664\u4ee5 100 \uff0c \u6d41\u901a \u6d41\u901a\u80a1 \u672c\u8981 \u4e58\u4ee5 10000   df2   =   pro   .   daily _ basic   (   trade _ date   =   day   ,   fields   =   [   \" ts _ code \"   ,   \" trade _ date \"   ,   \" turnover _ rate \"   ,   \" total _ share \"   ,   \" float _ share \"   ,   \" pe \"   ,   \" pb \"   ,   ' pe _ ttm '   ] ,   )   time   .   sleep   (   1   )   return   df1   ,   df2","title":"download _ single _ daily ( )"},{"location":"%E7%BD%97%E7%9B%98/%E6%95%B0%E6%8D%AE/write_data/#pure_ocean_breeze.data.write_data.download_single_day_style","text":"\u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e   Source   code   in   pure _ ocean _ breeze / data / write _ data . py   Python   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   @ retry   def   download _ single _ day _ style   (   day   ) :   \" \" \" \u66f4\u65b0 \u5355\u65e5 \u7684 \u6570\u636e \" \" \"   try   :   style   =   pro   .   RMExposureDayGet   (   trade _ date   =   str   (   day   ) ,   fields   =   \" tradeDate , ticker , BETA , MOMENTUM , SIZE , EARNYILD , RESVOL , GROWTH , BTOP , LEVERAGE , LIQUIDTY , SIZENL \"   ,   )   time   .   sleep   (   1   )   return   style   except   Exception   :   time   .   sleep   (   60   )   style   =   pro   .   RMExposureDayGet   (   trade _ date   =   str   (   day   ) ,   fields   =   \" tradeDate , ticker , BETA , MOMENTUM , SIZE , EARNYILD , RESVOL , GROWTH , BTOP , LEVERAGE , LIQUIDTY , SIZENL \"   ,   )   time   .   sleep   (   1   )   return   style","title":"download _ single _ day _ style ( )"},{"location":"%E7%BD%97%E7%9B%98/%E9%80%9A%E8%AE%AF/mail/","text":"pure _ mail   \u00b6   Bases :   object   Source   code   in   pure _ ocean _ breeze / mail / email . py   Python   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   class   pure _ mail   (   object   ) :   def   __ init __   (   self   ,   host   :   str   ,   user   :   str   ,   pwd   :   str   ,   port   :   int   =   465   )   - >   None   :   \" \" \" \u8bbe\u7f6e \u90ae\u7bb1 \u7684 \u8d26\u53f7 \u548c \u6388\u6743 \u4fe1\u606f   Parameters   ----------   host   :   str   \u90ae\u7bb1 \u7684 \u670d\u52a1 \u52a1\u5668 \u670d\u52a1\u5668 \u5730\u5740 \uff0c \u5982 163 \u90ae\u7bb1 \u7684 \u5730\u5740 \u4e3a ` smtp.163 . com `   user   :   str   \u90ae\u7bb1 \u8d26\u53f7 \uff0c \u5f62 \u5982 ` xxx @ xxx . com `   pwd   :   str   \u90ae\u7bb1 SMTP \u670d\u52a1 \u6388\u6743 \u7801 \uff0c \u5728 \u90ae\u7bb1 \u8bbe\u7f6e \u4e2d \u67e5\u770b   port   :   int ,   optional   \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 ,   by   default   465   \" \" \"   self   .   host   =   host   self   .   user   =   user   self   .   pwd   =   pwd   self   .   port   =   port   @ retry   def   sendemail   (   self   ,   tolist   :   list   ,   subject   :   str   ,   body   :   str   ,   lastemail _ path   :   list   =   None   )   - >   None   :   \" \" \" \u5411 \u6307\u5b9a \u90ae\u7bb1 \u8d26\u53f7 \u53d1\u9001 \u5e26 \u591a\u4e2a \u9644\u4ef6 \u7684 \u90ae\u4ef6   Parameters   ----------   tolist   :   list   \u53d1\u9001 \u76ee\u6807 \u7684 \u8d26\u53f7 \uff0c \u5f62 \u5982 ` [ ' xxx @ xxx . com ' , ' yyy @ yyy . com ' ] `   subject   :   str   \u90ae\u4ef6 \u7684 \u4e3b\u9898   body   :   str   \u90ae\u4ef6 \u7684 \u6b63\u6587   lastemail _ path   :   list   \u9644\u4ef6 \u6240\u5728 \u7684 \u5730\u5740 \uff0c \u5f62 \u5982 ` [ ' / xxx / xxx / xxx . csv ' , ' / yyy / yyy / yyy . png ' ] `   \" \" \"   message   =   MIMEMultipart   ( )   message   [   \" Form \"   ]   =   Header   (   self   .   user   ,   \" utf - 8 \"   )   message   [   \" To \"   ]   =   Header   (   \" , \"   .   join   (   tolist   ) ,   \" utf - 8 \"   )   message   [   \" Subject \"   ]   =   Header   (   subject   ,   \" utf - 8 \"   )   message   .   attach   (   MIMEText   (   body   ,   \" plain \"   ,   \" utf - 8 \"   ) )   if   lastemail _ path   is   not   None   :   for   path   in   lastemail _ path   :   att1   =   MIMEApplication   (   open   (   path   ,   \" rb \"   )   .   read   ( ) )   att1   [   \" Content - Type \"   ]   =   \" application / octet - stream \"   att1   .   add _ header   (   \" Content - Disposition \"   ,   \" attachment \"   ,   filename   =   path   .   split   (   \" / \"   ) [   -   1   ]   )   message   .   attach   (   att1   )   try   :   client   =   smtplib   .   SMTP _ SSL   (   self   .   host   ,   self   .   port   )   login   =   client   .   login   (   self   .   user   ,   self   .   pwd   )   if   login   and   login   [   0   ]   = =   235   :   client   .   sendmail   (   self   .   user   ,   tolist   ,   message   .   as _ string   ( ) )   logger   .   success   (   \" \u90ae\u4ef6 \u53d1\u9001 \u6210\u529f \"   )   else   :   logger   .   warning   (   \" \u767b\u5f55 \u5931\u8d25 \"   )   except   Exception   as   e   :   logger   .   error   (   f   \" \u53d1\u9001 \u5931\u8d25 \uff0c \u539f\u56e0 \u4e3a   {   e   }   \"   )   __ init __   (   host   ,   user   ,   pwd   ,   port   =   465   )   \u00b6   \u8bbe\u7f6e \u90ae\u7bb1 \u7684 \u8d26\u53f7 \u548c \u6388\u6743 \u4fe1\u606f   Parameters   \u00b6   host   :   str   \u90ae\u7bb1 \u7684 \u670d\u52a1 \u52a1\u5668 \u670d\u52a1\u5668 \u5730\u5740 \uff0c \u5982 163 \u90ae\u7bb1 \u7684 \u5730\u5740 \u4e3a   smtp.163 . com   user   :   str   \u90ae\u7bb1 \u8d26\u53f7 \uff0c \u5f62 \u5982   xxx @ xxx . com   pwd   :   str   \u90ae\u7bb1 SMTP \u670d\u52a1 \u6388\u6743 \u7801 \uff0c \u5728 \u90ae\u7bb1 \u8bbe\u7f6e \u4e2d \u67e5\u770b   port   :   int ,   optional   \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 ,   by   default   465   Source   code   in   pure _ ocean _ breeze / mail / email . py   Python   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   def   __ init __   (   self   ,   host   :   str   ,   user   :   str   ,   pwd   :   str   ,   port   :   int   =   465   )   - >   None   :   \" \" \" \u8bbe\u7f6e \u90ae\u7bb1 \u7684 \u8d26\u53f7 \u548c \u6388\u6743 \u4fe1\u606f   Parameters   ----------   host   :   str   \u90ae\u7bb1 \u7684 \u670d\u52a1 \u52a1\u5668 \u670d\u52a1\u5668 \u5730\u5740 \uff0c \u5982 163 \u90ae\u7bb1 \u7684 \u5730\u5740 \u4e3a ` smtp.163 . com `   user   :   str   \u90ae\u7bb1 \u8d26\u53f7 \uff0c \u5f62 \u5982 ` xxx @ xxx . com `   pwd   :   str   \u90ae\u7bb1 SMTP \u670d\u52a1 \u6388\u6743 \u7801 \uff0c \u5728 \u90ae\u7bb1 \u8bbe\u7f6e \u4e2d \u67e5\u770b   port   :   int ,   optional   \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 ,   by   default   465   \" \" \"   self   .   host   =   host   self   .   user   =   user   self   .   pwd   =   pwd   self   .   port   =   port   sendemail   (   tolist   ,   subject   ,   body   ,   lastemail _ path   =   None   )   \u00b6   \u5411 \u6307\u5b9a \u90ae\u7bb1 \u8d26\u53f7 \u53d1\u9001 \u5e26 \u591a\u4e2a \u9644\u4ef6 \u7684 \u90ae\u4ef6   Parameters   \u00b6   tolist   :   list   \u53d1\u9001 \u76ee\u6807 \u7684 \u8d26\u53f7 \uff0c \u5f62 \u5982   [ ' xxx @ xxx . com ' , ' yyy @ yyy . com ' ]   subject   :   str   \u90ae\u4ef6 \u7684 \u4e3b\u9898   body   :   str   \u90ae\u4ef6 \u7684 \u6b63\u6587   lastemail _ path   :   list   \u9644\u4ef6 \u6240\u5728 \u7684 \u5730\u5740 \uff0c \u5f62 \u5982   [ ' / xxx / xxx / xxx . csv ' , ' / yyy / yyy / yyy . png ' ]   Source   code   in   pure _ ocean _ breeze / mail / email . py   Python   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   @ retry   def   sendemail   (   self   ,   tolist   :   list   ,   subject   :   str   ,   body   :   str   ,   lastemail _ path   :   list   =   None   )   - >   None   :   \" \" \" \u5411 \u6307\u5b9a \u90ae\u7bb1 \u8d26\u53f7 \u53d1\u9001 \u5e26 \u591a\u4e2a \u9644\u4ef6 \u7684 \u90ae\u4ef6   Parameters   ----------   tolist   :   list   \u53d1\u9001 \u76ee\u6807 \u7684 \u8d26\u53f7 \uff0c \u5f62 \u5982 ` [ ' xxx @ xxx . com ' , ' yyy @ yyy . com ' ] `   subject   :   str   \u90ae\u4ef6 \u7684 \u4e3b\u9898   body   :   str   \u90ae\u4ef6 \u7684 \u6b63\u6587   lastemail _ path   :   list   \u9644\u4ef6 \u6240\u5728 \u7684 \u5730\u5740 \uff0c \u5f62 \u5982 ` [ ' / xxx / xxx / xxx . csv ' , ' / yyy / yyy / yyy . png ' ] `   \" \" \"   message   =   MIMEMultipart   ( )   message   [   \" Form \"   ]   =   Header   (   self   .   user   ,   \" utf - 8 \"   )   message   [   \" To \"   ]   =   Header   (   \" , \"   .   join   (   tolist   ) ,   \" utf - 8 \"   )   message   [   \" Subject \"   ]   =   Header   (   subject   ,   \" utf - 8 \"   )   message   .   attach   (   MIMEText   (   body   ,   \" plain \"   ,   \" utf - 8 \"   ) )   if   lastemail _ path   is   not   None   :   for   path   in   lastemail _ path   :   att1   =   MIMEApplication   (   open   (   path   ,   \" rb \"   )   .   read   ( ) )   att1   [   \" Content - Type \"   ]   =   \" application / octet - stream \"   att1   .   add _ header   (   \" Content - Disposition \"   ,   \" attachment \"   ,   filename   =   path   .   split   (   \" / \"   ) [   -   1   ]   )   message   .   attach   (   att1   )   try   :   client   =   smtplib   .   SMTP _ SSL   (   self   .   host   ,   self   .   port   )   login   =   client   .   login   (   self   .   user   ,   self   .   pwd   )   if   login   and   login   [   0   ]   = =   235   :   client   .   sendmail   (   self   .   user   ,   tolist   ,   message   .   as _ string   ( ) )   logger   .   success   (   \" \u90ae\u4ef6 \u53d1\u9001 \u6210\u529f \"   )   else   :   logger   .   warning   (   \" \u767b\u5f55 \u5931\u8d25 \"   )   except   Exception   as   e   :   logger   .   error   (   f   \" \u53d1\u9001 \u5931\u8d25 \uff0c \u539f\u56e0 \u4e3a   {   e   }   \"   )","title":"mail"},{"location":"%E7%BD%97%E7%9B%98/%E9%80%9A%E8%AE%AF/mail/#pure_ocean_breeze.mail.email.pure_mail","text":"Bases :   object   Source   code   in   pure _ ocean _ breeze / mail / email . py   Python   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   class   pure _ mail   (   object   ) :   def   __ init __   (   self   ,   host   :   str   ,   user   :   str   ,   pwd   :   str   ,   port   :   int   =   465   )   - >   None   :   \" \" \" \u8bbe\u7f6e \u90ae\u7bb1 \u7684 \u8d26\u53f7 \u548c \u6388\u6743 \u4fe1\u606f   Parameters   ----------   host   :   str   \u90ae\u7bb1 \u7684 \u670d\u52a1 \u52a1\u5668 \u670d\u52a1\u5668 \u5730\u5740 \uff0c \u5982 163 \u90ae\u7bb1 \u7684 \u5730\u5740 \u4e3a ` smtp.163 . com `   user   :   str   \u90ae\u7bb1 \u8d26\u53f7 \uff0c \u5f62 \u5982 ` xxx @ xxx . com `   pwd   :   str   \u90ae\u7bb1 SMTP \u670d\u52a1 \u6388\u6743 \u7801 \uff0c \u5728 \u90ae\u7bb1 \u8bbe\u7f6e \u4e2d \u67e5\u770b   port   :   int ,   optional   \u7aef\u53e3 \u53e3\u53f7 \u7aef\u53e3\u53f7 ,   by   default   465   \" \" \"   self   .   host   =   host   self   .   user   =   user   self   .   pwd   =   pwd   self   .   port   =   port   @ retry   def   sendemail   (   self   ,   tolist   :   list   ,   subject   :   str   ,   body   :   str   ,   lastemail _ path   :   list   =   None   )   - >   None   :   \" \" \" \u5411 \u6307\u5b9a \u90ae\u7bb1 \u8d26\u53f7 \u53d1\u9001 \u5e26 \u591a\u4e2a \u9644\u4ef6 \u7684 \u90ae\u4ef6   Parameters   ----------   tolist   :   list   \u53d1\u9001 \u76ee\u6807 \u7684 \u8d26\u53f7 \uff0c \u5f62 \u5982 ` [ ' xxx @ xxx . com ' , ' yyy @ yyy . com ' ] `   subject   :   str   \u90ae\u4ef6 \u7684 \u4e3b\u9898   body   :   str   \u90ae\u4ef6 \u7684 \u6b63\u6587   lastemail _ path   :   list   \u9644\u4ef6 \u6240\u5728 \u7684 \u5730\u5740 \uff0c \u5f62 \u5982 ` [ ' / xxx / xxx / xxx . csv ' , ' / yyy / yyy / yyy . png ' ] `   \" \" \"   message   =   MIMEMultipart   ( )   message   [   \" Form \"   ]   =   Header   (   self   .   user   ,   \" utf - 8 \"   )   message   [   \" To \"   ]   =   Header   (   \" , \"   .   join   (   tolist   ) ,   \" utf - 8 \"   )   message   [   \" Subject \"   ]   =   Header   (   subject   ,   \" utf - 8 \"   )   message   .   attach   (   MIMEText   (   body   ,   \" plain \"   ,   \" utf - 8 \"   ) )   if   lastemail _ path   is   not   None   :   for   path   in   lastemail _ path   :   att1   =   MIMEApplication   (   open   (   path   ,   \" rb \"   )   .   read   ( ) )   att1   [   \" Content - Type \"   ]   =   \" application / octet - stream \"   att1   .   add _ header   (   \" Content - Disposition \"   ,   \" attachment \"   ,   filename   =   path   .   split   (   \" / \"   ) [   -   1   ]   )   message   .   attach   (   att1   )   try   :   client   =   smtplib   .   SMTP _ SSL   (   self   .   host   ,   self   .   port   )   login   =   client   .   login   (   self   .   user   ,   self   .   pwd   )   if   login   and   login   [   0   ]   = =   235   :   client   .   sendmail   (   self   .   user   ,   tolist   ,   message   .   as _ string   ( ) )   logger   .   success   (   \" \u90ae\u4ef6 \u53d1\u9001 \u6210\u529f \"   )   else   :   logger   .   warning   (   \" \u767b\u5f55 \u5931\u8d25 \"   )   except   Exception   as   e   :   logger   .   error   (   f   \" \u53d1\u9001 \u5931\u8d25 \uff0c \u539f\u56e0 \u4e3a   {   e   }   \"   )","title":"pure _ mail"},{"location":"%E7%BD%97%E7%9B%98/%E9%80%9A%E8%AE%AF/mail/#pure_ocean_breeze.mail.email.pure_mail.__init__","text":"\u8bbe\u7f6e \u90ae\u7bb1 \u7684 \u8d26\u53f7 \u548c \u6388\u6743 \u4fe1\u606f","title":"__ init __ ( )"},{"location":"%E7%BD%97%E7%9B%98/%E9%80%9A%E8%AE%AF/mail/#pure_ocean_breeze.mail.email.pure_mail.sendemail","text":"\u5411 \u6307\u5b9a \u90ae\u7bb1 \u8d26\u53f7 \u53d1\u9001 \u5e26 \u591a\u4e2a \u9644\u4ef6 \u7684 \u90ae\u4ef6","title":"sendemail ( )"},{"location":"%E7%BD%97%E7%9B%98/%E9%85%8D%E7%BD%AE%26%E5%8F%82%E6%95%B0/homeplace/","text":"\u521d\u59cb \u521d\u59cb\u5316 \u65f6 \u4fdd\u5b58 \u7684 \u8def\u5f84   HomePlace   \u00b6   Bases :   object   Text   Only   1   2   3   4   5   6   7   daily _ data _ file :   \u65e5\u9891 \u6570\u636e \u5b58\u653e \u4f4d\u7f6e   factor _ data _ file :   \uff08 \u8f85\u52a9 \u3001 \u521d\u7ea7 \uff09 \u56e0\u5b50 \u6570\u636e \u5b58\u653e \u4f4d\u7f6e   barra _ data _ file :   \u5341\u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u5b58\u653e \u4f4d\u7f6e   update _ data _ file :   \u66f4\u65b0 \u8f85\u52a9 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   api _ token :   dcube \u7684 api   final _ factor _ file :   \u6700\u7ec8 \u56e0\u5b50 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   tick _ by _ tick _ data :   \u80a1\u7968 \u9010\u7b14 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   Source   code   in   pure _ ocean _ breeze / state / homeplace . py   Python   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   class   HomePlace   (   object   ) :   \" \" \"   ` ` `   daily _ data _ file :   \u65e5\u9891 \u6570\u636e \u5b58\u653e \u4f4d\u7f6e   factor _ data _ file :   \uff08 \u8f85\u52a9 \u3001 \u521d\u7ea7 \uff09 \u56e0\u5b50 \u6570\u636e \u5b58\u653e \u4f4d\u7f6e   barra _ data _ file :   \u5341\u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u5b58\u653e \u4f4d\u7f6e   update _ data _ file :   \u66f4\u65b0 \u8f85\u52a9 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   api _ token :   dcube \u7684 api   final _ factor _ file :   \u6700\u7ec8 \u56e0\u5b50 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   tick _ by _ tick _ data :   \u80a1\u7968 \u9010\u7b14 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   ` ` `   \" \" \"   __ slots __   =   [   \" daily _ data _ file \"   ,   \" factor _ data _ file \"   ,   \" barra _ data _ file \"   ,   \" update _ data _ file \"   ,   \" api _ token \"   ,   \" final _ factor _ file \"   ,   ' tick _ by _ tick _ data '   ,   ]   def   __ init __   (   self   ) :   user _ file   =   os   .   path   .   expanduser   (   \" ~ \"   )   +   \" / \"   path _ file   =   open   (   user _ file   +   \" paths . settings \"   ,   \" rb \"   )   paths   =   pickle   .   load   (   path _ file   )   for   k   in   self   .   __ slots __   :   setattr   (   self   ,   k   ,   paths   [   k   ] )","title":"homeplace"},{"location":"%E7%BD%97%E7%9B%98/%E9%85%8D%E7%BD%AE%26%E5%8F%82%E6%95%B0/homeplace/#pure_ocean_breeze.state.homeplace.HomePlace","text":"Bases :   object   Text   Only   1   2   3   4   5   6   7   daily _ data _ file :   \u65e5\u9891 \u6570\u636e \u5b58\u653e \u4f4d\u7f6e   factor _ data _ file :   \uff08 \u8f85\u52a9 \u3001 \u521d\u7ea7 \uff09 \u56e0\u5b50 \u6570\u636e \u5b58\u653e \u4f4d\u7f6e   barra _ data _ file :   \u5341\u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u5b58\u653e \u4f4d\u7f6e   update _ data _ file :   \u66f4\u65b0 \u8f85\u52a9 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   api _ token :   dcube \u7684 api   final _ factor _ file :   \u6700\u7ec8 \u56e0\u5b50 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   tick _ by _ tick _ data :   \u80a1\u7968 \u9010\u7b14 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   Source   code   in   pure _ ocean _ breeze / state / homeplace . py   Python   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   class   HomePlace   (   object   ) :   \" \" \"   ` ` `   daily _ data _ file :   \u65e5\u9891 \u6570\u636e \u5b58\u653e \u4f4d\u7f6e   factor _ data _ file :   \uff08 \u8f85\u52a9 \u3001 \u521d\u7ea7 \uff09 \u56e0\u5b50 \u6570\u636e \u5b58\u653e \u4f4d\u7f6e   barra _ data _ file :   \u5341\u79cd \u5e38\u7528 \u98ce\u683c \u56e0\u5b50 \u7684 \u5b58\u653e \u4f4d\u7f6e   update _ data _ file :   \u66f4\u65b0 \u8f85\u52a9 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   api _ token :   dcube \u7684 api   final _ factor _ file :   \u6700\u7ec8 \u56e0\u5b50 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   tick _ by _ tick _ data :   \u80a1\u7968 \u9010\u7b14 \u6570\u636e \u7684 \u5b58\u653e \u4f4d\u7f6e   ` ` `   \" \" \"   __ slots __   =   [   \" daily _ data _ file \"   ,   \" factor _ data _ file \"   ,   \" barra _ data _ file \"   ,   \" update _ data _ file \"   ,   \" api _ token \"   ,   \" final _ factor _ file \"   ,   ' tick _ by _ tick _ data '   ,   ]   def   __ init __   (   self   ) :   user _ file   =   os   .   path   .   expanduser   (   \" ~ \"   )   +   \" / \"   path _ file   =   open   (   user _ file   +   \" paths . settings \"   ,   \" rb \"   )   paths   =   pickle   .   load   (   path _ file   )   for   k   in   self   .   __ slots __   :   setattr   (   self   ,   k   ,   paths   [   k   ] )","title":"HomePlace"},{"location":"%E7%BD%97%E7%9B%98/%E9%85%8D%E7%BD%AE%26%E5%8F%82%E6%95%B0/state/","text":"\u4e00\u4e9b \u9ed8\u8ba4 \u7684 \u53c2\u6570","title":"state"}]}